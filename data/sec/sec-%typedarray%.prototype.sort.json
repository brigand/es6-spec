{"id":"sec-%typedarray%.prototype.sort","html":"\n        <h1><span class=\"secnum\" id=\"sec-22.2.3.25\"><a href=\"/sec/sec-%typedarray%.prototype.sort.html\" title=\"link to this section\">22.2.3.25</a></span> %TypedArray%.prototype.sort ( comparefn )</h1>\n\n        <p>%TypedArray%<code>.prototype.sort</code> is a distinct function that, except as described below, implements the same\n        requirements as those of  <code><a href=\"/sec/sec-array.prototype.sort.html\">Array.prototype.sort</a></code> as defined in <a href=\"/sec/sec-array.prototype.sort.html\">22.1.3.24</a>. The implementation of the %TypedArray%<code>.prototype.sort</code>\n        specification may be optimized with the knowledge that the <b>this</b> value is an object that has a fixed length and\n        whose integer indexed properties are not sparse. The only internal methods of the <b>this</b> object that the algorithm\n        may call are  [[Get]] and [[Set]].</p>\n\n        <p>This function is not generic. The <b>this</b> value must be an object with a [[TypedArrayName]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</p>\n\n        <p class=\"normalbefore\">Upon entry, the following steps are performed to initialize evaluation of the <code>sort</code>\n        function. These steps are used instead of the entry steps in <a href=\"/sec/sec-array.prototype.sort.html\">22.1.3.24</a>:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>obj</i> be the <b>this</b> value as the argument.</li>\n          <li>Let <i>buffer</i> be <a href=\"/sec/sec-validatetypedarray.html\">ValidateTypedArray</a>(<i>obj</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>buffer</i>).</li>\n          <li>Let <i>len</i> be the value of <i>obj</i>&#x2019;s [[ArrayLength]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n        </ol>\n\n        <p>The implementation defined sort order condition for exotic objects is not applied by\n        %TypedArray%<code>.prototype.sort</code>.</p>\n\n        <p>The following version of <a href=\"/sec/sec-sortcompare.html\">SortCompare</a> is used by\n        %TypedArray%<code>.prototype.sort</code>. It performs a numeric comparison rather than the string comparison used in <a href=\"/sec/sec-array.prototype.sort.html\">22.1.3.24</a>. <a href=\"/sec/sec-sortcompare.html\">SortCompare</a> has access to the\n        <var>comparefn</var> and <var>buffer</var> values of the current invocation of the <code>sort</code> method.</p>\n\n        <p class=\"normalbefore\">When the TypedArray <a href=\"/sec/sec-sortcompare.html\">SortCompare</a> abstract operation is called with\n        two arguments <var>x</var> and <var>y</var>, the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: Both <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>x</i>) and <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>y</i>) is Number.</li>\n          <li>If the argument <i>comparefn</i> is not <b>undefined</b>, then\n            <ol class=\"block\">\n              <li>Let <i>v</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>comparefn</i>, <b>undefined</b>, &#xAB;<i>x</i>,\n                  <i>y</i>&#xBB;).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>v</i>).</li>\n              <li>If <a href=\"/sec/sec-isdetachedbuffer.html\">IsDetachedBuffer</a>(<i>buffer</i>) is <b>true</b>, throw a <b>TypeError</b>\n                  exception.</li>\n              <li>If <i>v</i> is <b>NaN</b>, return +0.</li>\n              <li>Return <i>v</i>.</li>\n            </ol>\n          </li>\n          <li>If <i>x</i> and <i>y</i> are both <b>NaN</b>, return +0.</li>\n          <li>If <i>x</i> is <b>NaN</b>, return 1.</li>\n          <li>If <i>y</i> is <b>NaN</b>, return &#x2212;1.</li>\n          <li>If <i>x</i> &lt; <i>y</i>, return &#x2212;1.</li>\n          <li>If <i>x</i> &gt; <i>y</i>, return 1.</li>\n          <li>If <i>x</i> is &#x2212;0 and <i>y</i> is +0, return &#x2212;1.</li>\n          <li>If <i>x</i> is +0 and <i>y</i> is &#x2212;0, return 1.</li>\n          <li>Return +0.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> Because <b>NaN</b> always compares greater than any other value, <b>NaN</b> property\n          values always sort to the end of the result when <var>comparefn</var> is not provided.</p>\n        </div>\n      "}