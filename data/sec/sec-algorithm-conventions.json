{"id":"sec-algorithm-conventions","html":"\n    <h1><span class=\"secnum\" id=\"sec-5.2\"><a href=\"/sec/sec-algorithm-conventions.html\" title=\"link to this section\">5.2</a></span>\n        Algorithm Conventions</h1>\n\n    <p>The specification often uses a numbered list to specify steps in an algorithm. These algorithms are used to precisely\n    specify the required semantics of ECMAScript language constructs. The algorithms are not intended to imply the use of any\n    specific implementation technique. In practice, there may be more efficient algorithms available to implement a given\n    feature.</p>\n\n    <p>Algorithms may be explicitly parameterized, in which case the names and usage of the parameters must be provided as part of\n    the algorithm&#x2019;s definition. In order to facilitate their use in multiple parts of this specification, some algorithms,\n    called <i>abstract</i> <i>operations</i>, are named and written in parameterized functional form so that they may be\n    referenced by name from within other algorithms. Abstract operations are typically referenced using a functional application\n    style such as <span style=\"font-family: Times New Roman\">operationName(<i>arg1</i>, <i>arg2</i>)</span>. Some abstract\n    operations are treated as polymorphically dispatched methods of class-like specification abstractions. Such method-like\n    abstract operations are typically referenced using a method application style such as <span style=\"font-family: Times New\n    Roman\"><i>someValue</i>.operationName(<i>arg1</i>, <i>arg2</i>)</span>.</p>\n\n    <p>Algorithms may be associated with productions of one of the ECMAScript grammars. A production that has multiple alternative\n    definitions will typically have a distinct algorithm for each alternative. When an algorithm is associated with a grammar\n    production, it may reference the terminal and nonterminal symbols of the production alternative as if they were parameters of\n    the algorithm. When used in this manner, nonterminal symbols refer to the actual alternative definition that is matched when\n    parsing the source text.</p>\n\n    <p>When an algorithm is associated with a production alternative, the alternative is typically shown without any &#x201C;[\n    ]&#x201D; grammar annotations. Such annotations should only affect the syntactic recognition of the alternative and have no\n    effect on the associated semantics for the alternative.</p>\n\n    <p>Unless explicitly specified otherwise, all <a href=\"/sec/sec-context-free-grammars.html\">chain productions</a> have an implicit\n    definition for every algorithm that might be applied to that production&#x2019;s left-hand side nonterminal. The implicit\n    definition simply reapplies the same algorithm name with the same parameters, if any, to the <a href=\"/sec/sec-context-free-grammars.html\">chain production</a>&#x2019;s sole right-hand side nonterminal and then returns the result.\n    For example, assume there is a production:</p>\n\n    <div class=\"gp\">\n      <div class=\"lhs\"><span class=\"nt\">Block</span> <span class=\"geq\">:</span></div>\n      <div class=\"rhs\"><code class=\"t\">{</code> <span class=\"nt\">StatementList</span> <code class=\"t\">}</code></div>\n    </div>\n\n    <p>but there is no corresponding Evaluation algorithm that is explicitly specified for that production. If in some algorithm\n    there is a statement of the form: &#x201C;<span style=\"font-family: Times New Roman\">Return the result of evaluating\n    <i>Block</i></span>&#x201D; it is implicit that an Evaluation algorithm exists of the form:</p>\n\n    <p><b>Runtime Semantics: Evaluation</b></p>\n\n    <div class=\"gp prod\"><span class=\"nt\">Block</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">StatementList</span> <code class=\"t\">}</code></div>\n    <ol class=\"proc\">\n      <li>Return the result of evaluating <i>StatementList</i>.</li>\n    </ol>\n\n    <p class=\"normalbefore\">For clarity of expression, algorithm steps may be subdivided into sequential substeps. Substeps are\n    indented and may themselves be further divided into indented substeps. Outline numbering conventions are used to identify\n    substeps with the first level of substeps labelled with lower case alphabetic characters and the second level of substeps\n    labelled with lower case roman numerals. If more than three levels are required these rules repeat with the fourth level using\n    numeric labels. For example:</p>\n\n    <ol class=\"proc\">\n      <li>Top-level step\n        <ol class=\"block\">\n          <li>Substep.</li>\n          <li>Substep.\n            <ol class=\"block\">\n              <li>Subsubstep.\n                <ol class=\"block\">\n                  <li>Subsubsubstep\n                    <ol class=\"block\">\n                      <li>Subsubsubsubstep\n                        <ol class=\"block\">\n                          <li>Subsubsubsubsubstep</li>\n                        </ol>\n                      </li>\n                    </ol>\n                  </li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n        </ol>\n      </li>\n    </ol>\n\n    <p>A step or substep may be written as an &#x201C;if&#x201D; predicate that conditions its substeps. In this case, the substeps\n    are only applied if the predicate is true. If a step or substep begins with the word &#x201C;else&#x201D;, it is a predicate\n    that is the negation of the preceding &#x201C;if&#x201D; predicate step at the same level.</p>\n\n    <p>A step may specify the iterative application of its substeps.</p>\n\n    <p>A step that begins with &#x201C;Assert:&#x201D; asserts an invariant condition of its algorithm. Such assertions are used to\n    make explicit algorithmic invariants that would otherwise be implicit. Such assertions add no additional semantic requirements\n    and hence need not be checked by an implementation. They are used simply to clarify algorithms.</p>\n\n    <p>Mathematical operations such as addition, subtraction, negation, multiplication, division, and the mathematical functions\n    defined later in this clause should always be understood as computing exact mathematical results on mathematical real numbers,\n    which unless otherwise noted do not include infinities and do not include a negative zero that is distinguished from positive\n    zero. Algorithms in this standard that model floating-point arithmetic include explicit steps, where necessary, to handle\n    infinities and signed zero and to perform rounding. If a mathematical operation or function is applied to a floating-point\n    number, it should be understood as being applied to the exact mathematical value represented by that floating-point number;\n    such a floating-point number must be finite, and if it is <span class=\"value\">+0</span> or <span class=\"value\">&#x2212;0</span>\n    then the corresponding mathematical value is simply <span class=\"value\">0</span>.</p>\n\n    <p>The mathematical function <span style=\"font-family: Times New Roman\">abs(<i>x</i>)</span> produces the absolute value of\n    <var>x</var>, which is <span style=\"font-family: Times New Roman\">&#x2212;<i>x</i></span> if <var>x</var> is negative (less\n    than zero) and otherwise is <var>x</var> itself.</p>\n\n    <p>The mathematical function <span style=\"font-family: Times New Roman\">sign(<i>x</i>)</span> produces <span style=\"font-family: Times New Roman\">1</span> if <var>x</var> is positive and <span style=\"font-family: Times New\n    Roman\">&#x2212;1</span> if <var>x</var> is negative. The sign function is not used in this standard for cases when <var>x</var>\n    is zero.</p>\n\n    <p>The mathematical function <span style=\"font-family: Times New Roman\">min(<i>x</i><sub>1</sub>,</span> <span style=\"font-family: Times New Roman\"><i>x</i><sub>2</sub>, ..., <i>x</i><sub>n</sub>)</span> produces the mathematically\n    smallest of <span style=\"font-family: Times New Roman\"><i>x</i><sub>1</sub></span> through <span style=\"font-family: Times New\n    Roman\"><i>x</i><sub>n</sub></span>. The mathematical function <span style=\"font-family: Times New\n    Roman\">max(<i>x</i><sub>1</sub>,</span> <span style=\"font-family: Times New Roman\"><i>x</i><sub>2</sub>, ...,\n    <i>x</i><sub>n</sub>)</span> produces the mathematically largest of <span style=\"font-family: Times New\n    Roman\"><i>x</i><sub>1</sub></span> through <span style=\"font-family: Times New Roman\"><i>x</i><sub>n</sub></span>. The domain\n    and range of these mathematical functions include +<b>&#x221E;</b> and <b>&#x2212;&#x221E;</b>.</p>\n\n    <p>The notation &#x201C;<span style=\"font-family: Times New Roman\"><i>x</i> modulo <i>y</i></span>&#x201D; (<var>y</var> must be\n    finite and nonzero) computes a value <var>k</var> of the same sign as <var>y</var> (or zero) such that <span style=\"font-family: Times New Roman\">abs(<i>k</i>) &lt; abs(<i>y</i>) and <i>x</i>&#x2212;<i>k</i> = <i>q</i></span> <span style=\"font-family: Times New Roman\">&#xD7;</span> <var>y</var> for some integer <var>q</var>.</p>\n\n    <p>The mathematical function <span style=\"font-family: Times New Roman\">floor(<i>x</i>)</span> produces the largest integer\n    (closest to positive infinity) that is not larger than <var>x</var>.</p>\n\n    <div class=\"note\">\n      <p><span class=\"nh\">NOTE</span> <span style=\"font-family: Times New Roman\">floor(<i>x</i>) = <i>x</i>&#x2212;(<i>x</i> modulo\n      1)</span>.</p>\n    </div>\n  "}