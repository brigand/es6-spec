{"id":"sec-allocatetypedarray","html":"\n          <h1><span class=\"secnum\" id=\"sec-22.2.1.2.1\"><a href=\"/sec/sec-allocatetypedarray.html\" title=\"link to this section\">22.2.1.2.1</a></span> Runtime Semantics: AllocateTypedArray (newTarget, length )</h1>\n\n          <p class=\"normalbefore\">The abstract operation AllocateTypedArray with argument <var>newTarget</var> and optional\n          argument <var>length</var> is used to validate and create an instance of a TypedArray constructor. If the\n          <var>length</var> argument is passed an ArrayBuffer of that length is also allocated and associated with the new\n          TypedArray instance. AllocateTypedArray provides common semantics that is used by all of the %TypeArray% overloads and\n          other methods. AllocateTypedArray performs the following steps:</p>\n\n          <ol class=\"proc\">\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a>(<i>newTarget</i>)\n                is <b>true</b>.</li>\n            <li>If <a href=\"/sec/sec-samevalue.html\">SameValue</a>(%TypedArray%, <i>newTarget</i>) is <b>true</b>, throw a <b>TypeError</b>\n                exception.</li>\n            <li>NOTE <span style=\"font-family: Times New Roman\">%TypedArray%</span> throws an exception when invoked via either a\n                function call or the <code>new</code> operator. It can only be successfully invoked by a <span class=\"nt\">SuperCall</span>.</li>\n            <li>Let <i>constructorName</i> be <b>undefined</b>.</li>\n            <li>Let <i>subclass</i> be <i>newTarget</i>.</li>\n            <li>Repeat while <i>constructorName</i> is <b>undefined</b>\n              <ol class=\"block\">\n                <li>If <i>subclass</i> is <b>null</b>, throw a <b>TypeError</b> exception.</li>\n                <li>If <a href=\"/sec/sec-samevalue.html\">SameValue</a>(%TypedArray%, <i>subclass</i>) is <b>true</b>, throw a\n                    <b>TypeError</b> exception.</li>\n                <li>If <i>subclass</i> has a [[TypedArrayConstructorName]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>, let <i>constructorName</i> be the\n                    value of <i>subclass</i>&#x2019;s [[TypedArrayConstructorName]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n                <li>Let <i>subclass</i> be <i>subclass</i>.[[GetPrototypeOf]]().</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>subclass</i>).</li>\n              </ol>\n            </li>\n            <li>Let <i>proto</i> be <a href=\"/sec/sec-getprototypefromconstructor.html\">GetPrototypeFromConstructor</a>(<i>newTarget</i>,\n                <code>&quot;%TypedArrayPrototype%&quot;</code>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>proto</i>).</li>\n            <li>Let <i>obj</i> be <a href=\"/sec/sec-integerindexedobjectcreate.html\">IntegerIndexedObjectCreate</a> (<i>proto</i>,\n                &#xAB;&#x200D;[[ViewedArrayBuffer]], [[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]]&#xBB;\n                ).</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  The [[ViewedArrayBuffer]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of <i>obj</i> is <b>undefined</b>.</li>\n            <li>Set <i>obj</i>&#x2019;s [[TypedArrayName]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n                slot</a> to <i>constructorName</i>.</li>\n            <li>If <i>length</i> was not passed, then\n              <ol class=\"block\">\n                <li>Set <i>obj</i>&#x2019;s [[ByteLength]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n                    slot</a>  to 0.</li>\n                <li>Set <i>obj</i>&#x2019;s [[ByteOffset]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n                    slot</a> to 0.</li>\n                <li>Set <i>obj</i>&#x2019;s [[ArrayLength]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n                    slot</a> to 0.</li>\n              </ol>\n            </li>\n            <li>Else,\n              <ol class=\"block\">\n                <li>Let <i>elementSize</i> be the Element Size value in <a href=\"/sec/table-49.html\">Table 49</a> for\n                    <i>constructorName</i>.</li>\n                <li>Let <i>byteLength</i> be <i>elementSize</i> &#xD7; <i>length</i>.</li>\n                <li>Let <i>data</i> be <a href=\"/sec/sec-allocatearraybuffer.html\">AllocateArrayBuffer</a>(<span style=\"font-family:\n                    sans-serif\">%ArrayBuffer%</span>, <i>byteLength</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>data</i>).</li>\n                <li>Set <i>obj&#x2019;s</i> [[ViewedArrayBuffer]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <i>data</i>.</li>\n                <li>Set <i>obj</i>&#x2019;s [[ByteLength]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n                    slot</a> to <i>byteLength</i>.</li>\n                <li>Set <i>obj</i>&#x2019;s [[ByteOffset]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n                    slot</a> to 0.</li>\n                <li>Set <i>obj</i>&#x2019;s [[ArrayLength]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n                    slot</a> to <i>length</i>.</li>\n              </ol>\n            </li>\n            <li>Return <i>obj</i>.</li>\n          </ol>\n        "}