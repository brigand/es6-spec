{"id":"sec-applying-the-additive-operators-to-numbers","html":"\n      <h1><span class=\"secnum\" id=\"sec-12.7.5\"><a href=\"/sec/sec-applying-the-additive-operators-to-numbers.html\" title=\"link to this section\">12.7.5</a></span> Applying the Additive Operators to Numbers</h1>\n\n      <p>The <code>+</code> operator performs addition when applied to two operands of numeric type, producing the sum of the\n      operands. The <code>-</code> operator performs subtraction, producing the difference of two numeric operands.</p>\n\n      <p>Addition is a commutative operation, but not always associative.</p>\n\n      <p>The result of an addition is determined using the rules of IEEE 754-2008 binary double-precision arithmetic:</p>\n\n      <ul>\n        <li>\n          <p>If either operand is <b>NaN</b>, the result is <b>NaN</b>.</p>\n        </li>\n\n        <li>\n          <p>The sum of two infinities of opposite sign is <b>NaN</b>.</p>\n        </li>\n\n        <li>\n          <p>The sum of two infinities of the same sign is the infinity of that sign.</p>\n        </li>\n\n        <li>\n          <p>The sum of an infinity and a finite value is equal to the infinite operand.</p>\n        </li>\n\n        <li>\n          <p>The sum of two negative zeroes is <b>&#x2212;0</b>. The sum of two positive zeroes, or of two zeroes of opposite sign,\n          is <b>+0</b>.</p>\n        </li>\n\n        <li>\n          <p>The sum of a zero and a nonzero finite value is equal to the nonzero operand.</p>\n        </li>\n\n        <li>\n          <p>The sum of two nonzero finite values of the same magnitude and opposite sign is <b>+0</b>.</p>\n        </li>\n\n        <li>\n          <p>In the remaining cases, where neither an infinity, nor a zero, nor <b>NaN</b> is involved, and the operands have the\n          same sign or have different magnitudes, the sum is computed and rounded to the nearest representable value using IEEE\n          754-2008 round-to-nearest mode. If the magnitude is too large to represent, the operation overflows and the result is\n          then an infinity of appropriate sign. The ECMAScript language requires support of gradual underflow as defined by IEEE\n          754-2008.</p>\n        </li>\n      </ul>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> The <code>-</code> operator performs subtraction when applied to two operands of numeric\n        type, producing the difference of its operands; the left operand is the minuend and the right operand is the subtrahend.\n        Given numeric operands <var>a</var> and <var>b</var>, it is always the case that <i><span style=\"font-family: Times New\n        Roman\">a</span><code>&#x2013;</code><span style=\"font-family: Times New Roman\">b</span></i> produces the same result as\n        <i><span style=\"font-family: Times New Roman\">a</span> <code>+(&#x2013;</code><span style=\"font-family: Times New\n        Roman\">b</span><code>)</code></i>.</p>\n      </div>\n    "}