{"id":"sec-array-constructor","html":"\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-22.1.1\"><a href=\"/sec/sec-array-constructor.html\" title=\"link to this section\">22.1.1</a></span>\n            The Array Constructor</h1>\n\n        <p>The Array constructor is the %Array% intrinsic object and the initial value of the <code>Array</code> property of the\n        global object. When called as a constructor it creates and initializes a new exotic Array object. When <code>Array</code>\n        is called as a function rather than as a constructor, it also creates and initializes a new Array object. Thus the\n        function call <code><b>Array(</b>&#x2026;<b>)</b></code> is equivalent to the object creation expression\n        <code><b>new&#xA0;Array(</b>&#x2026;<b>)</b></code> with the same arguments.</p>\n\n        <p>The <code>Array</code> constructor is a single function whose behaviour is overloaded based upon the number and types\n        of its arguments.</p>\n\n        <p>The <code>Array</code> constructor is designed to be subclassable. It may be used as the value of an\n        <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the exotic\n        <code>Array</code> behaviour must include a <code>super</code> call to the <code>Array</code> constructor to initialize\n        subclass instances that are exotic Array objects. However, most of the <code>Array.prototype</code> methods are generic\n        methods that are not dependent upon their <code>this</code> value being an exotic Array object.</p>\n\n        <p>The <code>length</code> property of the <code>Array</code> constructor function is <b>1</b>.</p>\n      </div>\n\n      <section id=\"sec-array-constructor-array\">\n        <h1><span class=\"secnum\" id=\"sec-22.1.1.1\"><a href=\"/sec/sec-array-constructor-array.html\" title=\"link to this section\">22.1.1.1</a></span> Array ( )</h1>\n\n        <p class=\"normalbefore\">This description applies if and only if the Array constructor is called with no arguments.</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>numberOfArgs</i> be the number of arguments passed to this function call.</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>numberOfArgs</i> = 0.</li>\n          <li>If NewTarget is <b>undefined</b><i>,</i> let <i>newTarget</i> be the active function object, else let\n              <i>newTarget</i> be NewTarget.</li>\n          <li>Let <i>proto</i> be <a href=\"/sec/sec-getprototypefromconstructor.html\">GetPrototypeFromConstructor</a>(<i>newTarget</i>,\n              <code>&quot;%ArrayPrototype%&quot;</code>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>proto</i>).</li>\n          <li>Return <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>(0, <i>proto</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-array-len\">\n        <h1><span class=\"secnum\" id=\"sec-22.1.1.2\"><a href=\"/sec/sec-array-len.html\" title=\"link to this section\">22.1.1.2</a></span> Array\n            (len)</h1>\n\n        <p class=\"normalbefore\">This description applies if and only if the Array constructor is called with exactly one\n        argument.</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>numberOfArgs</i> be the number of arguments passed to this function call.</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>numberOfArgs</i> = 1.</li>\n          <li>If NewTarget is <b>undefined</b><i>,</i> let <i>newTarget</i> be the active function object, else let\n              <i>newTarget</i> be NewTarget.</li>\n          <li>Let <i>proto</i> be <a href=\"/sec/sec-getprototypefromconstructor.html\">GetPrototypeFromConstructor</a>(<i>newTarget</i>,\n              <code>&quot;%ArrayPrototype%&quot;</code>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>proto</i>).</li>\n          <li>Let <i>array</i> be <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>(0, <i>proto</i>).</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>len</i>) is not Number, then\n            <ol class=\"block\">\n              <li>Let <i>defineStatus</i> be <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>array</i>,\n                  <code>&quot;<b>0</b>&quot;</code>, <i>len</i>).</li>\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>defineStatus</i> is <b>true</b>.</li>\n              <li>Let <i>intLen</i> be 1.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>intLen</i> be <a href=\"/sec/sec-touint32.html\">ToUint32</a>(<i>len</i>).</li>\n              <li>If <i>intLen</i> &#x2260; <i>len</i>, throw a <b>RangeError</b> exception.</li>\n            </ol>\n          </li>\n          <li>Let <i>setStatus</i> be <a href=\"/sec/sec-set-o-p-v-throw.html\">Set</a>(<i>array</i>, <code>&quot;length&quot;</code>, <i>intLen</i>,\n              <b>true</b>).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>setStatus</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n          <li>Return <i>array</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-array-items\">\n        <h1><span class=\"secnum\" id=\"sec-22.1.1.3\"><a href=\"/sec/sec-array-items.html\" title=\"link to this section\">22.1.1.3</a></span>\n            Array (...items )</h1>\n\n        <p>This description applies if and only if the Array constructor is called with at least two arguments.</p>\n\n        <p class=\"normalbefore\">When the <code>Array</code> function is called the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>numberOfArgs</i> be the number of arguments passed to this function call.</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>numberOfArgs</i> &#x2265; 2.</li>\n          <li>If NewTarget is <b>undefined</b><i>,</i> let <i>newTarget</i> be the active function object, else let\n              <i>newTarget</i> be NewTarget.</li>\n          <li>Let <i>proto</i> be <a href=\"/sec/sec-getprototypefromconstructor.html\">GetPrototypeFromConstructor</a>(<i>newTarget</i>,\n              <code>&quot;%ArrayPrototype%&quot;</code>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>proto</i>).</li>\n          <li>Let <i>array</i> be <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>(<i>numberOfArgs</i>, <i>proto</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>array</i>).</li>\n          <li>Let <i>k</i> be 0.</li>\n          <li>Let <i>items</i> be a zero-origined <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the\n              argument items in order.</li>\n          <li>Repeat, while <i>k</i> &lt; <i>numberOfArgs</i>\n            <ol class=\"block\">\n              <li>Let <i>Pk</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>k</i>).</li>\n              <li>Let <i>itemK</i> be <i>items</i>[<i>k</i>].</li>\n              <li>Let <i>defineStatus</i> be <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>array</i>, <i>Pk</i>,\n                  <i>itemK</i>).</li>\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>defineStatus</i> is <b>true</b>.</li>\n              <li>Increase <i>k</i> by 1.</li>\n            </ol>\n          </li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: the value of <i>array</i>&#x2019;s <code>length</code> property is\n              <i>numberOfArgs</i>.</li>\n          <li>Return <i>array</i>.</li>\n        </ol>\n      </section>\n    "}