{"id":"sec-array-initializer","html":"\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.5\"><a href=\"/sec/sec-array-initializer.html\" title=\"link to this section\">12.2.5</a></span>\n            Array Initializer</h1>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> An <span class=\"nt\">ArrayLiteral</span> is an expression describing the initialization\n          of an Array object, using a list, of zero or more expressions each of which represents an array element, enclosed in\n          square brackets. The elements need not be literals; they are evaluated each time the array initializer is evaluated.</p>\n        </div>\n\n        <p>Array elements may be elided at the beginning, middle or end of the element list. Whenever a comma in the element list\n        is not preceded by an <span class=\"nt\">AssignmentExpression</span> (i.e., a comma at the beginning or after another\n        comma), the missing array element contributes to the length of the Array and increases the index of subsequent elements.\n        Elided array elements are not defined. If an element is elided at the end of an array, that element does not contribute to\n        the length of the Array.</p>\n\n        <h2>Syntax</h2>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">ArrayLiteral</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">[</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">]</code></div>\n          <div class=\"rhs\"><code class=\"t\">[</code> <span class=\"nt\">ElementList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">]</code></div>\n          <div class=\"rhs\"><code class=\"t\">[</code> <span class=\"nt\">ElementList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">,</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">]</code></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">ElementList</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[In, ?Yield]</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">SpreadElement</span><sub class=\"g-params\">[?Yield]</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">ElementList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">,</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[In, ?Yield]</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">ElementList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">,</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">SpreadElement</span><sub class=\"g-params\">[?Yield]</sub></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">Elision</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">,</code></div>\n          <div class=\"rhs\"><span class=\"nt\">Elision</span> <code class=\"t\">,</code></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">SpreadElement</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">...</code> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[In, ?Yield]</sub></div>\n        </div>\n      </div>\n\n      <section id=\"sec-static-semantics-elisionwidth\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.5.1\"><a href=\"/sec/sec-static-semantics-elisionwidth.html\" title=\"link to this section\">12.2.5.1</a></span> Static Semantics:  ElisionWidth</h1>\n        <div class=\"gp prod\"><span class=\"nt\">Elision</span> <span class=\"geq\">:</span> <code class=\"t\">,</code></div>\n        <ol class=\"proc\">\n          <li>Return the numeric value 1.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">Elision</span> <span class=\"geq\">:</span> <span class=\"nt\">Elision</span> <code class=\"t\">,</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>preceding</i> be the ElisionWidth of <i>Elision</i>.</li>\n          <li>Return <i>preceding</i>+1.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-runtime-semantics-arrayaccumulation\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.5.2\"><a href=\"/sec/sec-runtime-semantics-arrayaccumulation.html\" title=\"link to this section\">12.2.5.2</a></span> Runtime Semantics: ArrayAccumulation</h1>\n\n        <p>With parameters <var>array</var> and <var>nextIndex</var>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">ElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">AssignmentExpression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>padding</i> be the ElisionWidth of <i>Elision</i>; if <i>Elision</i> is not present, use the numeric value\n              zero.</li>\n          <li>Let <i>initResult</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n          <li>Let <i>initValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>initResult</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>initValue</i>).</li>\n          <li>Let <i>created</i> be <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>array</i>, <a href=\"/sec/sec-tostring.html\">ToString</a>(<a href=\"/sec/sec-touint32.html\">ToUint32</a>(<i>nextIndex+padding</i>)),\n              <i>initValue</i>).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>created</i> is <b>true</b><i>.</i></li>\n          <li>Return <i>nextIndex+padding+</i>1.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">SpreadElement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>padding</i> be the ElisionWidth of <i>Elision</i>; if <i>Elision</i> is not present, use the numeric value\n              zero.</li>\n          <li>Return the result of performing ArrayAccumulation for <i>SpreadElement</i> with arguments <i>array</i> and\n              <i>nextIndex</i>+<i>padding</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">ElementList</span> <code class=\"t\">,</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">AssignmentExpression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>postIndex</i>  be the result of performing ArrayAccumulation for <i>ElementList</i> with arguments\n              <i>array</i> and <i>nextIndex</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>postIndex</i>).</li>\n          <li>Let <i>padding</i> be the ElisionWidth of <i>Elision</i>; if <i>Elision</i> is not present, use the numeric value\n              zero.</li>\n          <li>Let <i>initResult</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n          <li>Let <i>initValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>initResult</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>initValue</i>).</li>\n          <li>Let <i>created</i> be <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>array</i>, <a href=\"/sec/sec-tostring.html\">ToString</a>(<a href=\"/sec/sec-touint32.html\">ToUint32</a>(<i>postIndex</i>+<i>padding</i>)),\n              <i>initValue</i>).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>created</i> is <b>true</b>.</li>\n          <li>Return <i>postIndex</i>+<i>padding+</i>1.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">ElementList</span> <code class=\"t\">,</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">SpreadElement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>postIndex</i>  be the result of performing ArrayAccumulation for <i>ElementList</i> with arguments\n              <i>array</i> and <i>nextIndex</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>postIndex</i>).</li>\n          <li>Let <i>padding</i> be the ElisionWidth of <i>Elision</i>; if <i>Elision</i> is not present, use the numeric value\n              zero.</li>\n          <li>Return the result of performing ArrayAccumulation for <i>SpreadElement</i> with arguments <i>array</i> and\n              <i>postIndex</i>+<i>padding</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">SpreadElement</span> <span class=\"geq\">:</span> <code class=\"t\">...</code> <span class=\"nt\">AssignmentExpression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>spreadRef</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n          <li>Let <i>spreadObj</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>spreadRef</i>).</li>\n          <li>Let <i>iterator</i> be <a href=\"/sec/sec-getiterator.html\">GetIterator</a>(<i>spreadObj</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>iterator</i>).</li>\n          <li>Repeat\n            <ol class=\"block\">\n              <li>Let <i>next</i> be <a href=\"/sec/sec-iteratorstep.html\">IteratorStep</a>(<i>iterator</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n              <li>If <i>next</i> is <b>false</b>, return <i>nextIndex</i>.</li>\n              <li>Let <i>nextValue</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>next</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextValue</i>).</li>\n              <li>Let <i>status</i> be <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>array</i>, <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>nextIndex</i>), <i>nextValue</i>).</li>\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <i>status</i> is <b>true</b> .</li>\n              <li>Let <i>nextIndex</i> be <i>nextIndex</i> + 1.</li>\n            </ol>\n          </li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a> is used to ensure that own\n          properties are defined for the array even if the standard built-in Array prototype object has been modified in a manner\n          that would preclude the creation of new own properties using [[Set]].</p>\n        </div>\n      </section>\n\n      <section id=\"sec-array-initializer-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.5.3\"><a href=\"/sec/sec-array-initializer-runtime-semantics-evaluation.html\" title=\"link to this section\">12.2.5.3</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">ArrayLiteral</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>array</i> be <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>(0).</li>\n          <li>Let <i>pad</i> be the ElisionWidth of <i>Elision</i>; if <i>Elision</i> is not present, use the numeric value\n              zero.</li>\n          <li>Perform <a href=\"/sec/sec-set-o-p-v-throw.html\">Set</a>(<i>array</i>, <code>&quot;length&quot;</code>, <i>pad</i>, <b>false</b>).</li>\n          <li>NOTE:  The above Set cannot fail because of the nature of the object returned by <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>.</li>\n          <li>Return <i>array</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArrayLiteral</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">ElementList</span> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>array</i> be <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>(0).</li>\n          <li>Let <i>len</i> be the result of performing ArrayAccumulation for <i>ElementList</i> with arguments <i>array</i> and\n              0.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>len</i>).</li>\n          <li>Perform <a href=\"/sec/sec-set-o-p-v-throw.html\">Set</a>(<i>array</i>, <code>&quot;length&quot;</code>, <i>len</i>, <b>false</b>).</li>\n          <li>NOTE:  The above Set cannot fail because of the nature of the object returned by <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>.</li>\n          <li>Return <i>array</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArrayLiteral</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">ElementList</span> <code class=\"t\">,</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>array</i> be <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>(0).</li>\n          <li>Let <i>len</i> be the result of performing ArrayAccumulation for <i>ElementList</i> with arguments <i>array</i> and\n              0.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>len</i>).</li>\n          <li>Let <i>padding</i> be the ElisionWidth of <i>Elision</i>; if <i>Elision</i> is not present, use the numeric value\n              zero.</li>\n          <li>Perform <a href=\"/sec/sec-set-o-p-v-throw.html\">Set</a>(<i>array</i>, <code>&quot;length&quot;</code>, <a href=\"/sec/sec-touint32.html\">ToUint32</a>(<i>padding</i>+<i>len</i>), <b>false</b>).</li>\n          <li>NOTE:  The above Set cannot fail because of the nature of the object returned by <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>.</li>\n          <li>Return <i>array</i>.</li>\n        </ol>\n      </section>\n    "}