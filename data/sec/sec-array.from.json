{"id":"sec-array.from","html":"\n        <h1><span class=\"secnum\" id=\"sec-22.1.2.1\"><a href=\"/sec/sec-array.from.html\" title=\"link to this section\">22.1.2.1</a></span>\n            Array.from ( items [ , mapfn [ , thisArg ] ] )</h1>\n\n        <p class=\"normalbefore\">When the <code>from</code> method is called with  argument <var>items</var> and optional arguments\n        <var>mapfn</var> and <var>thisArg</var> the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>C</i> be the <b>this</b> value.</li>\n          <li>If <i>mapfn</i> is <b>undefined</b>, let  <i>mapping</i> be <b>false.</b></li>\n          <li>else\n            <ol class=\"block\">\n              <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>mapfn</i>) is <b>false</b>, throw a <b>TypeError</b>\n                  exception.</li>\n              <li>If <i>thisArg</i> was supplied, let <i>T</i> be <i>thisArg</i>; else let <i>T</i> be <b>undefined</b>.</li>\n              <li>Let <i>mapping</i> be <b>true</b></li>\n            </ol>\n          </li>\n          <li>Let <i>usingIterator</i> be <a href=\"/sec/sec-getmethod.html\">GetMethod</a>(<i>items</i>, @@iterator).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>usingIterator</i>).</li>\n          <li>If <i>usingIterator</i> is not <b>undefined</b>, then\n            <ol class=\"block\">\n              <li>If <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a>(<i>C</i>) is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Let <i>A</i> be <a href=\"/sec/sec-construct.html\">Construct</a>(<i>C</i>).</li>\n                </ol>\n              </li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>Let <i>A</i> be <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>(0).</li>\n                </ol>\n              </li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>A</i>).</li>\n              <li>Let <i>iterator</i> be <a href=\"/sec/sec-getiterator.html\">GetIterator</a>(<i>items</i>, <i>usingIterator</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>iterator</i>).</li>\n              <li>Let <i>k</i> be 0.</li>\n              <li>Repeat\n                <ol class=\"block\">\n                  <li>Let <i>Pk</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>k</i>).</li>\n                  <li>Let <i>next</i> be <a href=\"/sec/sec-iteratorstep.html\">IteratorStep</a>(<i>iterator</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n                  <li>If <i>next</i> is <b>false</b>, then\n                    <ol class=\"block\">\n                      <li>Let <i>setStatus</i> be <a href=\"/sec/sec-set-o-p-v-throw.html\">Set</a>(<i>A</i>, <code>&quot;length&quot;</code>,\n                          <i>k</i>, <b>true</b>).</li>\n                      <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>setStatus</i>).</li>\n                      <li>Return <i>A</i>.</li>\n                    </ol>\n                  </li>\n                  <li>Let <i>nextValue</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>next</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextValue</i>).</li>\n                  <li>If <i>mapping</i> is <b>true</b>, then\n                    <ol class=\"block\">\n                      <li>Let <i>mappedValue</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>mapfn</i>, <i>T</i>, &#xAB;<i>nextValue</i>,\n                          <i>k</i>&#xBB;).</li>\n                      <li>If <i>mappedValue</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>,\n                          return <a href=\"/sec/sec-iteratorclose.html\">IteratorClose</a>(<i>iterator</i>, <i>mappedValue</i>).</li>\n                      <li>Let <i>mappedValue</i> be <i>mappedValue</i>.[[value]].</li>\n                    </ol>\n                  </li>\n                  <li>Else, let <i>mappedValue</i> be <i>nextValue</i>.</li>\n                  <li>Let <i>defineStatus</i> be <a href=\"/sec/sec-createdatapropertyorthrow.html\">CreateDataPropertyOrThrow</a>(<i>A</i>,\n                      <i>Pk</i>, <i>mappedValue</i>).</li>\n                  <li>If <i>defineStatus</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>,\n                      return <a href=\"/sec/sec-iteratorclose.html\">IteratorClose</a>(<i>iterator</i>, <i>defineStatus</i>).</li>\n                  <li>Increase <i>k</i> by 1.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>items</i> is not an Iterable so assume it is an array-like\n              object.</li>\n          <li>Let <i>arrayLike</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<i>items</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>arrayLike</i>).</li>\n          <li>Let <i>len</i> be <a href=\"/sec/sec-tolength.html\">ToLength</a>(<a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>arrayLike</i>,\n              <code>&quot;length&quot;</code>)).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>len</i>).</li>\n          <li>If <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a>(<i>C</i>) is <b>true</b>, then\n            <ol class=\"block\">\n              <li>Let <i>A</i> be <a href=\"/sec/sec-construct.html\">Construct</a>(<i>C</i>, &#xAB;<i>len</i>&#xBB;).</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>A</i> be <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>(<i>len</i>).</li>\n            </ol>\n          </li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>A</i>).</li>\n          <li>Let <i>k</i> be 0.</li>\n          <li>Repeat, while <i>k</i> &lt; <i>len</i>\n            <ol class=\"block\">\n              <li>Let <i>Pk</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>k</i>).</li>\n              <li>Let <i>kValue</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>arrayLike</i>, <i>Pk</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>kValue</i>).</li>\n              <li>If <i>mapping</i> is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Let <i>mappedValue</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>mapfn</i>, <i>T</i>, &#xAB;<i>kValue</i>,\n                      <i>k</i>&#xBB;).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>mappedValue</i>).</li>\n                </ol>\n              </li>\n              <li>Else, let <i>mappedValue</i> be <i>kValue</i>.</li>\n              <li>Let <i>defineStatus</i> be <a href=\"/sec/sec-createdatapropertyorthrow.html\">CreateDataPropertyOrThrow</a>(<i>A</i>,\n                  <i>Pk</i>, <i>mappedValue</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>defineStatus</i>).</li>\n              <li>Increase <i>k</i> by 1.</li>\n            </ol>\n          </li>\n          <li>Let <i>setStatus</i> be <a href=\"/sec/sec-set-o-p-v-throw.html\">Set</a>(<i>A</i>, <code>&quot;length&quot;</code>, <i>len</i>,\n              <b>true</b>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>setStatus</i>).</li>\n          <li>Return <i>A</i>.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>from</code> method is <b>1</b>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The <code>from</code> function is an intentionally generic factory method; it does not\n          require that its <b>this</b> value be the Array constructor. Therefore it can be transferred to or inherited by any\n          other constructors that may be called with a single numeric argument.</p>\n        </div>\n      "}