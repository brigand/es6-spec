{"id":"sec-array.prototype.copywithin","html":"\n        <h1><span class=\"secnum\" id=\"sec-22.1.3.3\"><a href=\"/sec/sec-array.prototype.copywithin.html\" title=\"link to this section\">22.1.3.3</a></span> Array.prototype.copyWithin (target, start [ , end ] )</h1>\n\n        <p class=\"normalbefore\">The <code>copyWithin</code> method takes up to three arguments <var>target</var>, <var>start</var>\n        and <var>end</var>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> The <var>end</var> argument is optional with the length of the <b>this</b> object as\n          its default value. If <var>target</var> is negative, it is treated as <span style=\"font-family: Times New\n          Roman\"><i>length</i>+<i>target</i></span> where <var>length</var> is the length of the array. If <var>start</var> is\n          negative, it is treated as <span style=\"font-family: Times New Roman\"><i>length</i>+<i>start</i></span>. If\n          <var>end</var> is negative, it is treated as <span style=\"font-family: Times New\n          Roman\"><i>length</i>+<i>end</i></span>.</p>\n        </div>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>O</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<b>this</b> value).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>O</i>).</li>\n          <li>Let <i>len</i> be <a href=\"/sec/sec-tolength.html\">ToLength</a>(<a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>O</i>,\n              <code>&quot;length&quot;</code>)).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>len</i>).</li>\n          <li>Let <i>relativeTarget</i> be <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>target</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>relativeTarget</i>).</li>\n          <li>If <i>relativeTarget</i> &lt; 0, let <i>to</i> be max((<i>len</i> + <i>relativeTarget</i>),0); else let <i>to</i> be\n              min(<i>relativeTarget</i>, <i>len</i>).</li>\n          <li>Let <i>relativeStart</i> be <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>start</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>relativeStart</i>).</li>\n          <li>If <i>relativeStart</i> &lt; 0, let <i>from</i> be max((<i>len</i> + <i>relativeStart</i>),0); else let <i>from</i>\n              be min(<i>relativeStart</i>, <i>len</i>).</li>\n          <li>If <i>end</i> is <b>undefined</b>, let <i>relativeEnd</i> be <i>len</i>; else let <i>relativeEnd</i> be <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>end</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>relativeEnd</i>).</li>\n          <li>If <i>relativeEnd</i> &lt; 0, let <i>final</i> be max((<i>len</i> + <i>relativeEnd</i>),0); else let <i>final</i> be\n              min(<i>relativeEnd</i>, <i>len</i>).</li>\n          <li>Let <i>count</i> be min(<i>final</i>-<i>from</i>, <i>len</i>-<i>to</i>).</li>\n          <li>If <i>from</i>&lt;<i>to</i> and <i>to</i>&lt;<i>from</i>+<i>count</i>\n            <ol class=\"block\">\n              <li>Let <i>direction</i> be -1.</li>\n              <li>Let <i>from</i> be <i>from</i> + <i>count</i> -1.</li>\n              <li>Let <i>to</i> be <i>to</i> + <i>count</i> -1.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>direction</i> = 1.</li>\n            </ol>\n          </li>\n          <li>Repeat, while <i>count</i> &gt; 0\n            <ol class=\"block\">\n              <li>Let <i>fromKey</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>from</i>).</li>\n              <li>Let <i>toKey</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>to</i>).</li>\n              <li>Let <i>fromPresent</i> be <a href=\"/sec/sec-hasproperty.html\">HasProperty</a>(<i>O</i>, <i>fromKey</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>fromPresent</i>).</li>\n              <li>If <i>fromPresent</i> is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Let <i>fromVal</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>O</i>, <i>fromKey</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>fromVal</i>).</li>\n                  <li>Let <i>setStatus</i> be <a href=\"/sec/sec-set-o-p-v-throw.html\">Set</a>(<i>O</i>, <i>toKey</i>, <i>fromVal</i>,\n                      <b>true</b>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>setStatus</i>).</li>\n                </ol>\n              </li>\n              <li>Else <i>fromPresent</i> is <b>false</b>,\n                <ol class=\"block\">\n                  <li>Let <i>deleteStatus</i> be <a href=\"/sec/sec-deletepropertyorthrow.html\">DeletePropertyOrThrow</a>(<i>O</i>,\n                      <i>toKey</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>deleteStatus</i>).</li>\n                </ol>\n              </li>\n              <li>Let <i>from</i> be <i>from</i> + <i>direction</i>.</li>\n              <li>Let <i>to</i> be <i>to</i> + <i>direction</i>.</li>\n              <li>Let <i>count</i> be <i>count</i> &#x2212; 1.</li>\n            </ol>\n          </li>\n          <li>Return <i>O</i>.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>copyWithin</code> method is <b>2</b>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> The <code>copyWithin</code> function is intentionally generic; it does not require\n          that its <b>this</b> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a\n          method.</p>\n        </div>\n      "}