{"id":"sec-array.prototype.join","html":"\n        <h1><span class=\"secnum\" id=\"sec-22.1.3.12\"><a href=\"/sec/sec-array.prototype.join.html\" title=\"link to this section\">22.1.3.12</a></span> Array.prototype.join (separator)</h1>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> The elements of the array are converted to Strings, and these Strings are then\n          concatenated, separated by occurrences of the <var>separator</var>. If no separator is provided, a single comma is used\n          as the separator.</p>\n        </div>\n\n        <p class=\"normalbefore\">The <code>join</code> method takes one argument, <var>separator</var>, and performs the following\n        steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>O</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<b>this</b> value).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>O</i>).</li>\n          <li>Let <i>len</i> be <a href=\"/sec/sec-tolength.html\">ToLength</a>(<a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>O</i>,\n              <code>&quot;length&quot;</code>)).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>len</i>).</li>\n          <li>If <i>separator</i> is <b>undefined</b>, let <i>separator</i> be the single-element String <code>&quot;,&quot;</code>.</li>\n          <li>Let <i>sep</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>separator</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>sep</i>).</li>\n          <li>If <i>len</i> is zero, return the empty String.</li>\n          <li>Let <i>element0</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>O</i>, <code>&quot;0&quot;</code>).</li>\n          <li>If <i>element0</i> is <b>undefined</b> or <b>null</b>, let <i>R</i> be the empty String; otherwise, let <i>R</i> be\n              <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>element0</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>R</i>).</li>\n          <li>Let <i>k</i> be <code>1</code>.</li>\n          <li>Repeat, while <i>k</i> &lt; <i>len</i>\n            <ol class=\"block\">\n              <li>Let <i>S</i> be the String value produced by concatenating <i>R</i> and <i>sep</i>.</li>\n              <li>Let <i>element</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>O</i>, <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>k</i>)).</li>\n              <li>If <i>element</i> is <b>undefined</b> or <b>null</b>, let <i>next</i> be the empty String; otherwise, let\n                  <i>next</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>element</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n              <li>Let <i>R</i> be a String value produced by concatenating <i>S</i> and <i>next</i>.</li>\n              <li>Increase <i>k</i> by 1.</li>\n            </ol>\n          </li>\n          <li>Return <i>R</i>.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>join</code> method is <b>1</b>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> The <code>join</code> function is intentionally generic; it does not require that its\n          <b>this</b> value be an Array object. Therefore, it can be transferred to other kinds of objects for use as a\n          method.</p>\n        </div>\n      "}