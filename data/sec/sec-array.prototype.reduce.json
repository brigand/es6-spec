{"id":"sec-array.prototype.reduce","html":"\n        <h1><span class=\"secnum\" id=\"sec-22.1.3.18\"><a href=\"/sec/sec-array.prototype.reduce.html\" title=\"link to this section\">22.1.3.18</a></span> Array.prototype.reduce ( callbackfn [ , initialValue ] )</h1>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> <var>callbackfn</var> should be a function that takes four arguments.\n          <code>reduce</code> calls the callback, as a function, once for each element present in the array, in ascending\n          order.</p>\n\n          <p><var>callbackfn</var> is called with four arguments: the <i>previousValue</i> (value from the previous call to\n          <var>callbackfn</var>), the <i>currentValue</i> (value of the current element), the <i>currentIndex</i>, and the object\n          being traversed. The first time that callback is called, the <i>previousValue</i> and <i>currentValue</i> can be one of\n          two values. If an <var>initialValue</var> was provided in the call to <code>reduce</code>, then <i>previousValue</i>\n          will be equal to <var>initialValue</var> and <i>currentValue</i> will be equal to the first value in the array. If no\n          <var>initialValue</var> was provided, then <i>previousValue</i> will be equal to the first value in the array and\n          <i>currentValue</i> will be equal to the second. It is a <b>TypeError</b> if the array contains no elements and\n          <var>initialValue</var> is not provided.</p>\n\n          <p><code>reduce</code> does not directly mutate the object on which it is called but the object may be mutated by the\n          calls to <var>callbackfn</var>.</p>\n\n          <p>The range of elements processed by <code>reduce</code> is set before the first call to <var>callbackfn</var>.\n          Elements that are appended to the array after the call to <code>reduce</code> begins will not be visited by\n          <var>callbackfn</var>. If existing elements of the array are changed, their value as passed to <var>callbackfn</var>\n          will be the value at the time <code>reduce</code> visits them; elements that are deleted after the call to\n          <code>reduce</code> begins and before being visited are not visited.</p>\n        </div>\n\n        <p class=\"normalbefore\">When the <code>reduce</code> method is called with one or two arguments, the following steps are\n        taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>O</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<b>this</b> value).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>O</i>).</li>\n          <li>Let <i>len</i> be <a href=\"/sec/sec-tolength.html\">ToLength</a>(<a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>O</i>,\n              <code>&quot;length&quot;</code>)).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>len</i>).</li>\n          <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>callbackfn</i>) is <b>false</b>, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>len</i> is 0 and <i>initialValue</i> is not present, throw a <b>TypeError</b> exception.</li>\n          <li>Let <i>k</i> be 0.</li>\n          <li>If <i>initialValue</i> is present, then\n            <ol class=\"block\">\n              <li>Set <i>accumulator</i> to <i>initialValue</i>.</li>\n            </ol>\n          </li>\n          <li>Else <i>initialValue</i> is not present,\n            <ol class=\"block\">\n              <li>Let <i>kPresent</i> be <b>false</b>.</li>\n              <li>Repeat, while  <i>kPresent</i> is <b>false</b> and  <i>k</i> &lt; <i>len</i>\n                <ol class=\"block\">\n                  <li>Let <i>Pk</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>k</i>).</li>\n                  <li>Let <i>kPresent</i> be <a href=\"/sec/sec-hasproperty.html\">HasProperty</a>(<i>O</i>, <i>Pk</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>kPresent</i>).</li>\n                  <li>If <i>kPresent</i> is <b>true</b>, then\n                    <ol class=\"block\">\n                      <li>Let <i>accumulator</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>O</i>, <i>Pk</i>).</li>\n                      <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>accumulator</i>).</li>\n                    </ol>\n                  </li>\n                  <li>Increase <i>k</i> by 1.</li>\n                </ol>\n              </li>\n              <li>If <i>kPresent</i> is <b>false</b>, throw a <b>TypeError</b> exception.</li>\n            </ol>\n          </li>\n          <li>Repeat, while <i>k</i> &lt; <i>len</i>\n            <ol class=\"block\">\n              <li>Let <i>Pk</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>k</i>).</li>\n              <li>Let <i>kPresent</i> be <a href=\"/sec/sec-hasproperty.html\">HasProperty</a>(<i>O</i>, <i>Pk</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>kPresent</i>).</li>\n              <li>If <i>kPresent</i> is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Let <i>kValue</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>O</i>, <i>Pk</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>kValue</i>).</li>\n                  <li>Let <i>accumulator</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>callbackfn</i>, <b>undefined</b>,\n                      &#xAB;<i>accumulator</i>, <i>kValue</i>, <i>k</i>, <i>O</i>&#xBB;).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>accumulator</i>).</li>\n                </ol>\n              </li>\n              <li>Increase <i>k</i> by 1.</li>\n            </ol>\n          </li>\n          <li>Return <i>accumulator</i>.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>reduce</code> method is <b>1</b>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> The <code>reduce</code> function is intentionally generic; it does not require that\n          its <b>this</b> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a\n          method.</p>\n        </div>\n      "}