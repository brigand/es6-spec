{"id":"sec-array.prototype.slice","html":"\n        <h1><span class=\"secnum\" id=\"sec-22.1.3.22\"><a href=\"/sec/sec-array.prototype.slice.html\" title=\"link to this section\">22.1.3.22</a></span> Array.prototype.slice (start, end)</h1>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> The <code>slice</code> method takes two arguments, <var>start</var> and\n          <var>end</var>, and returns an array containing the elements of the array from element <var>start</var> up to, but not\n          including, element <var>end</var> (or through the end of the array if <var>end</var> is <b>undefined</b>). If\n          <var>start</var> is negative, it is treated as <span style=\"font-family: Times New\n          Roman\"><i>length</i>+<i>start</i></span> where <var>length</var> is the length of the array. If <var>end</var> is\n          negative, it is treated as <span style=\"font-family: Times New Roman\"><i>length</i>+<i>end</i></span> where\n          <var>length</var> is the length of the array.</p>\n        </div>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>O</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<b>this</b> value).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>O</i>).</li>\n          <li>Let <i>len</i> be <a href=\"/sec/sec-tolength.html\">ToLength</a>(<a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>O</i>,\n              <code>&quot;length&quot;</code>)).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>len</i>).</li>\n          <li>Let <i>relativeStart</i> be <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>start</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>relativeStart</i>).</li>\n          <li>If <i>relativeStart</i> &lt; 0, let <i>k</i> be max((<i>len</i> + <i>relativeStart</i>),0); else let <i>k</i> be\n              min(<i>relativeStart</i>, <i>len</i>).</li>\n          <li>If <i>end</i> is <b>undefined</b>, let <i>relativeEnd</i> be <i>len</i>; else let <i>relativeEnd</i> be <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>end</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>relativeEnd</i>).</li>\n          <li>If <i>relativeEnd</i> &lt; 0, let <i>final</i> be max((<i>len</i> + <i>relativeEnd</i>),0); else let <i>final</i> be\n              min(<i>relativeEnd</i>, <i>len</i>).</li>\n          <li>Let <i>count</i> be max(<i>final</i> &#x2013; <i>k</i>, 0).</li>\n          <li>Let <i>A</i> be <a href=\"/sec/sec-arrayspeciescreate.html\">ArraySpeciesCreate</a>(<i>O</i>, <i>count</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>A</i>).</li>\n          <li>Let <i>n</i> be 0.</li>\n          <li>Repeat, while <i>k</i> &lt; <i>final</i>\n            <ol class=\"block\">\n              <li>Let <i>Pk</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>k</i>).</li>\n              <li>Let <i>kPresent</i> be <a href=\"/sec/sec-hasproperty.html\">HasProperty</a>(<i>O</i>, <i>Pk</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>kPresent</i>).</li>\n              <li>If <i>kPresent</i> is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Let <i>kValue</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>O</i>, <i>Pk</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>kValue</i>).</li>\n                  <li>Let <i>status</i> be <a href=\"/sec/sec-createdatapropertyorthrow.html\">CreateDataPropertyOrThrow</a>(<i>A</i>, <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>n</i>), <i>kValue</i> ).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n                </ol>\n              </li>\n              <li>Increase <i>k</i> by 1.</li>\n              <li>Increase <i>n</i> by 1.</li>\n            </ol>\n          </li>\n          <li>Let <i>setStatus</i> be <a href=\"/sec/sec-set-o-p-v-throw.html\">Set</a>(<i>A</i>, <code>&quot;length&quot;</code>, <i>n</i>,\n              <b>true</b>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>setStatus</i>).</li>\n          <li>Return <i>A</i>.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>slice</code> method is <b>2</b>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> The explicit setting of the <code>length</code> property of the result Array in step\n          16 is necessary to ensure that its value is correct in situations where the trailing elements of the result Array are\n          not present.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 3</span> The <code>slice</code> function is intentionally generic; it does not require that its\n          <b>this</b> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div>\n      "}