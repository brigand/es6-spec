{"id":"sec-array.prototype.some","html":"\n        <h1><span class=\"secnum\" id=\"sec-22.1.3.23\"><a href=\"/sec/sec-array.prototype.some.html\" title=\"link to this section\">22.1.3.23</a></span> Array.prototype.some ( callbackfn [ , thisArg ] )</h1>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> <var>callbackfn</var> should be a function that accepts three arguments and returns a\n          value that is coercible to the Boolean value <b>true</b> or <b>false</b>. <code>some</code> calls <var>callbackfn</var>\n          once for each element present in the array, in ascending order, until it finds one where <var>callbackfn</var> returns\n          <b>true</b>. If such an element is found, <code>some</code> immediately returns <b>true</b>. Otherwise,\n          <code>some</code> returns <b>false</b>. <var>callbackfn</var> is called only for elements of the array which actually\n          exist; it is not called for missing elements of the array.</p>\n\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <b>this</b> value for each invocation of\n          <var>callbackfn</var>. If it is not provided, <b>undefined</b> is used instead.</p>\n\n          <p><var>callbackfn</var> is called with three arguments: the value of the element, the index of the element, and the\n          object being traversed.</p>\n\n          <p><code>some</code> does not directly mutate the object on which it is called but the object may be mutated by the\n          calls to <var>callbackfn</var>.</p>\n\n          <p>The range of elements processed by <code>some</code> is set before the first call to <var>callbackfn</var>. Elements\n          that are appended to the array after the call to <code>some</code> begins will not be visited by <var>callbackfn</var>.\n          If existing elements of the array are changed, their value as passed to <var>callbackfn</var> will be the value at the\n          time that <code>some</code> visits them; elements that are deleted after the call to <code>some</code> begins and before\n          being visited are not visited. <code>some</code> acts like the &quot;exists&quot; quantifier in mathematics. In particular, for an\n          empty array, it returns <b>false</b>.</p>\n        </div>\n\n        <p class=\"normalbefore\">When the <code>some</code> method is called with one or two arguments, the following steps are\n        taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>O</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<b>this</b> value).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>O</i>).</li>\n          <li>Let <i>len</i> be <a href=\"/sec/sec-tolength.html\">ToLength</a>(<a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>O</i>,\n              <code>&quot;length&quot;</code>)).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>len</i>).</li>\n          <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>callbackfn</i>) is <b>false</b>, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>thisArg</i> was supplied, let <i>T</i> be <i>thisArg</i>; else let <i>T</i> be <b>undefined</b>.</li>\n          <li>Let <i>k</i> be 0.</li>\n          <li>Repeat, while <i>k</i> &lt; <i>len</i>\n            <ol class=\"block\">\n              <li>Let <i>Pk</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>k</i>).</li>\n              <li>Let <i>kPresent</i> be <a href=\"/sec/sec-hasproperty.html\">HasProperty</a>(<i>O</i>, <i>Pk</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>kPresent</i>).</li>\n              <li>If <i>kPresent</i> is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Let <i>kValue</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>O</i>, <i>Pk</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>kValue</i>).</li>\n                  <li>Let <i>testResult</i> be <a href=\"/sec/sec-toboolean.html\">ToBoolean</a>(<a href=\"/sec/sec-call.html\">Call</a>(<i>callbackfn</i>, <i>T</i>, &#xAB;<i>kValue</i>, <i>k</i>, and\n                      <i>O</i>&#xBB;)).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>testResult</i>).</li>\n                  <li>If <i>testResult</i> is <b>true</b>, return <b>true</b>.</li>\n                </ol>\n              </li>\n              <li>Increase <i>k</i> by 1.</li>\n            </ol>\n          </li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>some</code> method is <b>1</b>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> The <code>some</code> function is intentionally generic; it does not require that its\n          <b>this</b> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div>\n      "}