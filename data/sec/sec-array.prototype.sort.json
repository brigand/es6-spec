{"id":"sec-array.prototype.sort","html":"\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-22.1.3.24\"><a href=\"/sec/sec-array.prototype.sort.html\" title=\"link to this section\">22.1.3.24</a></span> Array.prototype.sort (comparefn)</h1>\n\n          <p>The elements of this array are sorted. The sort is not necessarily stable (that is, elements that compare equal do\n          not necessarily remain in their original order). If <var>comparefn</var> is not <b>undefined</b>, it should be a\n          function that accepts two arguments <var>x</var> and <var>y</var> and returns a negative value if <var>x</var> <span style=\"font-family: Times New Roman\">&lt;</span> <var>y</var>, zero if <var>x</var> <span style=\"font-family: Times New\n          Roman\">=</span> <var>y</var>, or a positive value if <var>x</var> <span style=\"font-family: Times New Roman\">&gt;</span>\n          <var>y</var>.</p>\n\n          <p class=\"normalbefore\">Upon entry, the following steps are performed to initialize evaluation of the <code>sort</code>\n          function:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>obj</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<b>this</b> value).</li>\n            <li>Let <i>len</i> be <a href=\"/sec/sec-tolength.html\">ToLength</a>(<a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>obj</i>,\n                <code>&quot;length&quot;</code>)).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>len</i>).</li>\n          </ol>\n\n          <p class=\"normalbefore\">Within this specification of the <code>sort</code> method, an object, <var>obj</var>,  is said\n          to be <i>sparse</i> if the following algorithm returns <b>true</b>:</p>\n\n          <ol class=\"proc\">\n            <li>For each integer <i>i</i> in the range 0&#x2264;<i>i</i>&lt; <i>len</i>\n              <ol class=\"block\">\n                <li>Let <i>elem</i> be <i>obj</i>.[[GetOwnProperty]](<a href=\"/sec/sec-tostring.html\">ToString</a>(<i>i</i>)).</li>\n                <li>If <i>elem</i> is <b>undefined</b>, return <b>true</b>.</li>\n              </ol>\n            </li>\n            <li>Return <b>false</b>.</li>\n          </ol>\n\n          <p>The <i>sort order</i> is the ordering, after completion of this function, of the integer indexed property values of\n          <var>obj</var> whose integer indexes are less than <var>len</var>. The result of the <code>sort</code> function is then\n          determined as follows:</p>\n\n          <p>If <var>comparefn</var> is not <b>undefined</b> and is not a consistent comparison function for the elements of this\n          array (see below), the sort order is implementation-defined. The sort order is also implementation-defined if\n          <var>comparefn</var> is <b>undefined</b> and <a href=\"/sec/sec-sortcompare.html\">SortCompare</a> (<a href=\"/sec/sec-sortcompare.html\">22.1.3.24.1</a>) does not act as a consistent comparison function.</p>\n\n          <p class=\"normalbefore\">Let <var>proto</var> be <var>obj</var>.[[GetPrototypeOf]](). If <var>proto</var> is not\n          <b>null</b> and there exists an integer <var>j</var> such that all of the conditions below are satisfied then the sort\n          order is implementation-defined:</p>\n\n          <ul>\n            <li><var>obj</var> is sparse</li>\n            <li>0 &#x2264; <var>j</var> &lt; <var>len</var></li>\n            <li><a href=\"/sec/sec-hasproperty.html\">HasProperty</a>(<var>proto</var>, <span style=\"font-family: Times New Roman\"><a href=\"/sec/sec-tostring.html\">ToString</a>(<i>j</i>))</span> is <b>true</b>.</li>\n          </ul>\n\n          <p class=\"normalbefore\">The sort order is also implementation defined if <var>obj</var> is sparse and any of the\n          following conditions are true:</p>\n\n          <ul>\n            <li>\n              <p><a href=\"/sec/sec-isextensible-o.html\">IsExtensible</a>(<span style=\"font-family: Times New Roman\"><i>obj</i>)</span> is\n              <b>false</b>.</p>\n            </li>\n\n            <li>\n              <p>Any integer index property of <var>obj</var> whose name is a nonnegative integer less than <var>len</var> is a\n              data property whose [[Configurable]] attribute is <b>false</b>.</p>\n            </li>\n          </ul>\n\n          <p>The sort order is also implementation defined if any of the following conditions are true:</p>\n\n          <ul>\n            <li>\n              <p>If <var>obj</var> is an exotic object (including Proxy exotic objects) whose behaviour for [[Get]], [[Set]],\n              [[Delete]], and [[GetOwnProperty]] is not the ordinary object implementation of these internal methods.</p>\n            </li>\n\n            <li>\n              <p>If any index index property of <var>obj</var> whose name is a nonnegative integer less than <var>len</var> is an\n              accessor property or is a data property whose [[Writable]] attribute is <span class=\"value\">false</span>.</p>\n            </li>\n\n            <li>\n              <p>If <var>comparefn</var> is <span class=\"value\">undefined</span> and the application of <a href=\"/sec/sec-tostring.html\">ToString</a> to any value passed as an argument to <a href=\"/sec/sec-sortcompare.html\">SortCompare</a>\n              modifies <var>obj</var> or any object on <var>obj</var>&#x2019;s prototype chain.</p>\n            </li>\n\n            <li>\n              <p>If <var>comparefn</var> is <span class=\"value\">undefined</span> and all applications of <a href=\"/sec/sec-tostring.html\">ToString</a>, to any specific value passed as an argument to <a href=\"/sec/sec-sortcompare.html\">SortCompare</a>, do not produce the same result.</p>\n            </li>\n          </ul>\n\n          <p class=\"normalbefore\">The following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li>Perform an implementation-dependent sequence of calls to the [[Get]] and [[Set]] internal methods of <i>obj</i>,\n                to the <a href=\"/sec/sec-deletepropertyorthrow.html\">DeletePropertyOrThrow</a> and <a href=\"/sec/sec-hasownproperty.html\">HasOwnProperty</a> abstract operation with <i>obj</i> as the first argument, and to <a href=\"/sec/sec-sortcompare.html\">SortCompare</a> (described below), such that:\n              <ul>\n                <li>\n                  <p>The <a href=\"/sec/sec-object-type.html\">property key</a> argument for each call to [[Get]], [[Set]], <a href=\"/sec/sec-hasownproperty.html\">HasOwnProperty</a>, or <a href=\"/sec/sec-deletepropertyorthrow.html\">DeletePropertyOrThrow</a>\n                  is the string representation of a nonnegative integer less than <i>len</i>.</p>\n                </li>\n\n                <li>\n                  <p>The arguments for calls to <a href=\"/sec/sec-sortcompare.html\">SortCompare</a> are values returned by a previous call\n                  to the [[Get]] internal method, unless the properties accessed by those previous calls did not exist according\n                  to <a href=\"/sec/sec-hasownproperty.html\">HasOwnProperty</a>. If both perspective arguments to <a href=\"/sec/sec-sortcompare.html\">SortCompare</a> correspond to non-existent properties, use +0 instead of calling <a href=\"/sec/sec-sortcompare.html\">SortCompare</a>. If only the first perspective argument is non-existent use +1. If only\n                  the second perspective argument is non-existent use &#x2212;1.</p>\n                </li>\n\n                <li>\n                  <p>If <i>obj</i> is not sparse then <a href=\"/sec/sec-deletepropertyorthrow.html\">DeletePropertyOrThrow</a> must not be\n                  called.</p>\n                </li>\n\n                <li>\n                  <p>If any [[Set]] call returns <b>false</b> a <b>TypeError</b> exception is thrown.</p>\n                </li>\n\n                <li>\n                  <p>If an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a> is returned from any of these\n                  operations, it is immediately returned as the value of this function.</p>\n                </li>\n              </ul>\n            </li>\n            <li>Return <i>obj</i>.</li>\n          </ol>\n\n          <p class=\"normalbefore\">Unless the sort order is specified above to be implementation-defined, the returned object must\n          have the following two characteristics:</p>\n\n          <ul>\n            <li>\n              <p>There must be some mathematical permutation <span style=\"font-family: Times New Roman\">&#x3C0;</span> of the\n              nonnegative integers less than <var>len</var>, such that for every nonnegative integer <var>j</var> less than\n              <var>len</var>, if property <span style=\"font-family: Times New Roman\">old[<i>j</i>]</span> existed, then <span style=\"font-family: Times New Roman\">new[&#x3C0;(<i>j</i>)]</span> is exactly the same value as <span style=\"font-family: Times New Roman\">old[<i>j</i>]</span>. But if property <span style=\"font-family: Times New\n              Roman\">old[<i>j</i>]</span> did not exist, then <span style=\"font-family: Times New\n              Roman\">new[&#x3C0;(<i>j</i>)]</span> does not exist.</p>\n            </li>\n\n            <li>\n              <p>Then for all nonnegative integers <var>j</var> and <var>k</var>, each less than <var>len</var>, if <span style=\"font-family: Times New Roman\"><a href=\"/sec/sec-sortcompare.html\">SortCompare</a>(old[<i>j</i>], old[<i>k</i>]) &lt;\n              0</span> (see <a href=\"/sec/sec-sortcompare.html\">SortCompare</a> below), then <span style=\"font-family: Times New\n              Roman\">new[<b>&#x3C0;</b>(<i>j</i>)] &lt;</span> <span style=\"font-family: Times New\n              Roman\">new[<b>&#x3C0;</b>(<i>k</i>)]</span>.</p>\n            </li>\n          </ul>\n\n          <p>Here the notation <span style=\"font-family: Times New Roman\">old[<i>j</i>]</span> is used to refer to the\n          hypothetical result of calling the [[Get]] internal method of <var>obj</var> with argument <var>j</var> before this\n          function is executed, and the notation <span style=\"font-family: Times New Roman\">new[<i>j</i>]</span> to refer to the\n          hypothetical result of calling the [[Get]] internal method of <var>obj</var> with argument <var>j</var> after this\n          function has been executed.</p>\n\n          <p class=\"normalbefore\">A function <var>comparefn</var> is a consistent comparison function for a set of values\n          <var>S</var> if all of the requirements below are met for all values <var>a</var>, <var>b</var>, and <var>c</var>\n          (possibly the same value) in the set <var>S</var>: The notation <span style=\"font-family: Times New\n          Roman\"><i>a</i>&#xA0;&lt;<sub>CF</sub></span>&#xA0;<var>b</var> means <span style=\"font-family: Times New\n          Roman\"><i>comparefn</i>(<i>a</i>,<i>b</i>)&#xA0;&lt;&#xA0;0</span>; <span style=\"font-family: Times New\n          Roman\"><i>a</i>&#xA0;=<sub>CF</sub></span>&#xA0;<var>b</var> means <span style=\"font-family: Times New\n          Roman\"><i>comparefn</i>(<i>a</i>,<i>b</i>)&#xA0;=&#xA0;0</span> (of either sign); and <span style=\"font-family: Times\n          New Roman\"><i>a</i>&#xA0;&gt;<sub>CF</sub></span>&#xA0;<var>b</var> means <span style=\"font-family: Times New\n          Roman\"><i>comparefn</i>(<i>a</i>,<i>b</i>)&#xA0;&gt;&#xA0;0</span>.</p>\n\n          <ul>\n            <li>\n              <p>Calling <i>comparefn</i>(<i>a</i>,<i>b</i>) always returns the same value <i>v</i> when given a specific pair of\n              values <i>a</i> and <i>b</i> as its two arguments. Furthermore, <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>v</i>) is Number, and <i>v</i> is not NaN. Note that this\n              implies that exactly one of <i>a</i>&#xA0;&lt;<sub>CF</sub><span style=\"font-family:\n              sans-serif\"></span>&#xA0;<i>b</i>, <i>a</i>&#xA0;=<sub>CF</sub><span style=\"font-family:\n              sans-serif\"></span>&#xA0;<i>b</i>, and <i>a</i>&#xA0;&gt;<sub>CF</sub><span style=\"font-family:\n              sans-serif\"></span>&#xA0;<i>b</i> will be true for a given pair of <i>a</i> and <i>b</i>.</p>\n            </li>\n\n            <li>\n              <p>Calling <i>comparefn</i>(<i>a</i>,<i>b</i>) does not modify <i>obj</i> or any object on <i>obj</i>&#x2019;s\n              prototype chain.</p>\n            </li>\n\n            <li>\n              <p><i>a</i>&#xA0;=<sub>CF</sub><span style=\"font-family: sans-serif\"></span>&#xA0;<i>a</i>   (reflexivity)</p>\n            </li>\n\n            <li>\n              <p>If <i>a</i>&#xA0;=<sub>CF</sub><span style=\"font-family: sans-serif\"></span>&#xA0;<i>b</i>, then\n              <i>b</i>&#xA0;=<sub>CF</sub><span style=\"font-family: sans-serif\"></span>&#xA0;<i>a</i>   (symmetry)</p>\n            </li>\n\n            <li>\n              <p>If <i>a</i>&#xA0;=<sub>CF</sub><span style=\"font-family: sans-serif\"></span>&#xA0;<i>b</i> and\n              <i>b</i>&#xA0;=<sub>CF</sub><span style=\"font-family: sans-serif\"></span>&#xA0;<i>c</i>, then\n              <i>a</i>&#xA0;=<sub>CF</sub><span style=\"font-family: sans-serif\"></span>&#xA0;<i>c</i>   (transitivity of\n              =<sub>CF</sub>)</p>\n            </li>\n\n            <li>\n              <p>If <i>a</i>&#xA0;&lt;<sub>CF</sub><span style=\"font-family: sans-serif\"></span>&#xA0;<i>b</i> and\n              <i>b</i>&#xA0;&lt;<sub>CF</sub><span style=\"font-family: sans-serif\"></span>&#xA0;<i>c</i>, then\n              <i>a</i>&#xA0;&lt;<sub>CF</sub><span style=\"font-family: sans-serif\"></span>&#xA0;<i>c</i>   (transitivity of\n              &lt;<sub>CF</sub>)</p>\n            </li>\n\n            <li>\n              <p>If <i>a</i>&#xA0;&gt;<sub>CF</sub><span style=\"font-family: sans-serif\"></span>&#xA0;<i>b</i> and\n              <i>b</i>&#xA0;&gt;<sub>CF</sub><span style=\"font-family: sans-serif\"></span>&#xA0;<i>c</i>, then\n              <i>a</i>&#xA0;&gt;<sub>CF</sub><span style=\"font-family: sans-serif\"></span>&#xA0;<i>c</i>   (transitivity of\n              &gt;<sub>CF</sub>)</p>\n            </li>\n          </ul>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 1</span> The above conditions are necessary and sufficient to ensure that\n            <var>comparefn</var> divides the set <var>S</var> into equivalence classes and that these equivalence classes are\n            totally ordered.</p>\n          </div>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 2</span> The <code>sort</code> function is intentionally generic; it does not require that\n            its <b>this</b> value be an Array object. Therefore, it can be transferred to other kinds of objects for use as a\n            method.</p>\n          </div>\n        </div>\n\n        <section id=\"sec-sortcompare\">\n          <h1><span class=\"secnum\" id=\"sec-22.1.3.24.1\"><a href=\"/sec/sec-sortcompare.html\" title=\"link to this section\">22.1.3.24.1</a></span> Runtime Semantics: SortCompare( x, y )</h1>\n\n          <p class=\"normalbefore\">The SortCompare abstract operation is called with two arguments <var>x</var> and <var>y</var>.\n          It also has access to the <var>comparefn</var> argument passed to the current invocation of the <code>sort</code>\n          method. The following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li>If <i>x</i> and <i>y</i> are both <b>undefined</b>, return +0.</li>\n            <li>If <i>x</i> is <b>undefined</b>, return 1.</li>\n            <li>If <i>y</i> is <b>undefined</b>, return &#x2212;1.</li>\n            <li>If the argument <i>comparefn</i> is not <b>undefined</b>, then\n              <ol class=\"block\">\n                <li>Let <i>v</i> be <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<a href=\"/sec/sec-call.html\">Call</a>(<i>comparefn</i>,\n                    <b>undefined</b>, &#xAB;<i>x</i>, <i>y</i>&#xBB;)).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>v</i>).</li>\n                <li>If <i>v</i> is <b>NaN</b>, return +0.</li>\n                <li>Return <i>v</i>.</li>\n              </ol>\n            </li>\n            <li>Let <i>xString</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>x</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>xString</i>).</li>\n            <li>Let <i>yString</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>y</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>yString</i>).</li>\n            <li>If <i>xString</i> &lt; <i>yString</i>, return &#x2212;1.</li>\n            <li>If <i>xString</i> &gt; <i>yString</i>, return 1.</li>\n            <li>Return +0.</li>\n          </ol>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 1</span> Because non-existent property values always compare greater than <b>undefined</b>\n            property values, and <b>undefined</b> always compares greater than any other value, <b>undefined</b> property values\n            always sort to the end of the result, followed by non-existent property values.</p>\n          </div>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 2</span> Method calls performed by the <a href=\"/sec/sec-tostring.html\">ToString</a> abstract\n            operations in steps 5 and 7 have the potential to cause SortCompare to not behave as a consistent comparison\n            function.</p>\n          </div>\n        </section>\n      "}