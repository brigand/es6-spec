{"id":"sec-arraybuffer-objects","html":"\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-24.1\"><a href=\"/sec/sec-arraybuffer-objects.html\" title=\"link to this section\">24.1</a></span>\n          ArrayBuffer Objects</h1>\n    </div>\n\n    <section id=\"sec-abstract-operations-for-arraybuffer-objects\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-24.1.1\"><a href=\"/sec/sec-abstract-operations-for-arraybuffer-objects.html\" title=\"link to this section\">24.1.1</a></span> Abstract Operations For ArrayBuffer Objects</h1>\n      </div>\n\n      <section id=\"sec-allocatearraybuffer\">\n        <h1><span class=\"secnum\" id=\"sec-24.1.1.1\"><a href=\"/sec/sec-allocatearraybuffer.html\" title=\"link to this section\">24.1.1.1</a></span> AllocateArrayBuffer( constructor, byteLength )</h1>\n\n        <p class=\"normalbefore\">The abstract operation AllocateArrayBuffer with arguments <var>constructor</var> and\n        <var>byteLength</var> is used to create an ArrayBuffer object. It performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>obj</i> be <a href=\"/sec/sec-ordinarycreatefromconstructor.html\">OrdinaryCreateFromConstructor</a>(<i>constructor</i>,\n              <code>&quot;%ArrayBufferPrototype%&quot;</code>, &#xAB;&#x200D;[[ArrayBufferData]], [[ArrayBufferByteLength]]&#xBB; ).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>obj</i>).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>byteLength</i> is a positive integer.</li>\n          <li>Let <i>block</i> be <a href=\"/sec/sec-createbytedatablock.html\">CreateByteDataBlock</a>(<i>byteLength</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>block</i>).</li>\n          <li>Set <i>obj&#x2019;s</i> [[ArrayBufferData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a> to <i>block</i>.</li>\n          <li>Set <i>obj</i>&#x2019;s [[ArrayBufferByteLength]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a> to <i>byteLength</i>.</li>\n          <li>Return <i>obj</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-isdetachedbuffer\">\n        <h1><span class=\"secnum\" id=\"sec-24.1.1.2\"><a href=\"/sec/sec-isdetachedbuffer.html\" title=\"link to this section\">24.1.1.2</a></span> IsDetachedBuffer( arrayBuffer )</h1>\n\n        <p class=\"normalbefore\">The abstract operation IsDetachedBuffer with argument  <var>arrayBuffer</var> performs the\n        following steps:</p>\n\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>arrayBuffer</i>) is Object and it has an\n              [[ArrayBufferData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>If <i>arrayBuffer&#x2019;s</i> [[ArrayBufferData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a> is <b>null</b>, return <b>true</b>.</li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-detacharraybuffer\">\n        <h1><span class=\"secnum\" id=\"sec-24.1.1.3\"><a href=\"/sec/sec-detacharraybuffer.html\" title=\"link to this section\">24.1.1.3</a></span> DetachArrayBuffer( arrayBuffer )</h1>\n\n        <p class=\"normalbefore\">The abstract operation DetachArrayBuffer with argument  <var>arrayBuffer</var> performs the\n        following steps:</p>\n\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>arrayBuffer</i>) is Object and it has [[ArrayBufferData]]\n              and [[ArrayBufferByteLength]] internal slots.</li>\n          <li>Set <i>arrayBuffer&#x2019;s</i> [[ArrayBufferData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <b>null</b>.</li>\n          <li>Set <i>arrayBuffer</i>&#x2019;s [[ArrayBufferByteLength]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to 0.</li>\n          <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<b>null</b>).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> Detaching an ArrayBuffer instance disassociates the <a href=\"/sec/sec-data-blocks.html\">Data\n          Block</a> used as its backing store from the instance and sets the byte length of the buffer to 0. No operations defined\n          by this specification use the DetachArrayBuffer abstract operation. However, an ECMAScript implementation or host\n          environment may define such operations.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-clonearraybuffer\">\n        <h1><span class=\"secnum\" id=\"sec-24.1.1.4\"><a href=\"/sec/sec-clonearraybuffer.html\" title=\"link to this section\">24.1.1.4</a></span> CloneArrayBuffer( srcBuffer, srcByteOffset [, cloneConstructor]\n            )</h1>\n\n        <p class=\"normalbefore\">The abstract operation CloneArrayBuffer takes three parameters, an ArrayBuffer\n        <var>srcBuffer</var>, an integer <var>srcByteOffset</var> and optionally a constructor function\n        <var>cloneConstructor</var>. It creates a new ArrayBuffer whose data is a copy of <var>srcBuffer&#x2019;s</var> data\n        starting at <var>srcByteOffset</var>. This operation performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>srcBuffer</i>) is Object and it has an [[ArrayBufferData]]\n              <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>If <i>cloneConstructor</i> is not present, then\n            <ol class=\"block\">\n              <li>Let <i>cloneConstructor</i> be <a href=\"/sec/sec-speciesconstructor.html\">SpeciesConstructor</a>(<i>srcBuffer</i>,\n                  %ArrayBuffer%).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>cloneConstructor</i>).</li>\n              <li>If <a href=\"/sec/sec-isdetachedbuffer.html\">IsDetachedBuffer</a>(<i>srcBuffer</i>) is <b>true</b>, throw a\n                  <b>TypeError</b> exception.</li>\n            </ol>\n          </li>\n          <li>Else, <a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a>(<i>cloneConstructor</i>) is <b>true</b>.</li>\n          <li>Let <i>srcLength</i> be the value of <i>srcBuffer</i>&#x2019;s [[ArrayBufferByteLength]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>srcByteOffset</i> &#x2264; <i>srcLength</i>.</li>\n          <li>Let <i>cloneLength</i> be <i>srcLength</i> &#x2013; <i>srcByteOffset.</i></li>\n          <li>Let <i>srcBlock</i> be the value of <i>srcBuffer&#x2019;s</i> [[ArrayBufferData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Let <i>targetBuffer</i> be <a href=\"/sec/sec-allocatearraybuffer.html\">AllocateArrayBuffer</a>(<i>cloneConstructor</i>,\n              <i>cloneLength</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>targetBuffer</i>).</li>\n          <li>If <a href=\"/sec/sec-isdetachedbuffer.html\">IsDetachedBuffer</a>(<i>srcBuffer</i>) is <b>true</b>, throw a <b>TypeError</b>\n              exception.</li>\n          <li>Let <i>targetBlock</i> be the value of <i>targetBuffer&#x2019;s</i> [[ArrayBufferData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Perform <a href=\"/sec/sec-copydatablockbytes.html\">CopyDataBlockBytes</a>(<i>targetBlock</i>, 0, <i>srcBlock</i>,\n              <i>srcByteOffset</i>, <i>cloneLength</i>).</li>\n          <li>Return <i>targetBuffer</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-getvaluefrombuffer\">\n        <h1><span class=\"secnum\" id=\"sec-24.1.1.5\"><a href=\"/sec/sec-getvaluefrombuffer.html\" title=\"link to this section\">24.1.1.5</a></span> GetValueFromBuffer ( arrayBuffer, byteIndex, type, isLittleEndian\n            )</h1>\n\n        <p class=\"normalbefore\">The abstract operation GetValueFromBuffer takes four parameters, an ArrayBuffer\n        <var>arrayBuffer</var>, an integer <var>byteIndex</var>, a String <var>type</var>, and optionally a Boolean\n        <var>isLittleEndian</var>. This operation performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-isdetachedbuffer.html\">IsDetachedBuffer</a>(<i>arrayBuffer</i>) is <b>false</b>.</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: There are sufficient bytes in <i>arrayBuffer</i> starting at\n              <i>byteIndex</i> to represent a value of <i>type</i>.</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>byteIndex</i> is a positive integer.</li>\n          <li>Let <i>block</i> be <i>arrayBuffer&#x2019;s</i> [[ArrayBufferData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Let <i>elementSize</i> be the Number value of the Element Size value specified in <a href=\"/sec/table-49.html\">Table 49</a>\n              for Element Type <i>type</i>.</li>\n          <li>Let <i>rawValue</i> be a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> of <i>elementSize</i>\n              containing, in order<i>,</i> the <i>elementSize</i> sequence of bytes starting with\n              <i>block</i>[<i>byteIndex</i>].</li>\n          <li>If <i>isLittleEndian</i> is not present, set <i>isLittleEndian</i> to either <b>true</b> or <b>false</b>. The choice\n              is implementation dependent and should be the alternative that is most efficient for the implementation. An\n              implementation must use the same value each time this step is executed and the same value must be used for the\n              corresponding step in the <a href=\"/sec/sec-setvalueinbuffer.html\">SetValueInBuffer</a> abstract operation.</li>\n          <li>If <i>isLittleEndian</i> is <b>false</b>, reverse the order of the elements of <i>rawValue</i>.</li>\n          <li>If <i>type</i> is <code>&quot;Float32&quot;</code>, then\n            <ol class=\"block\">\n              <li>Let <i>value</i> be the byte elements of <i>rawValue</i> concatenated and interpreted as a little-endian bit\n                  string encoding of an IEEE 754-2008 binary32 value.</li>\n              <li>If <i>value</i> is an IEEE 754-2008 binary32 NaN value, return the <b>NaN</b> Number value.</li>\n              <li>Return the Number value that corresponds to <i>value</i>.</li>\n            </ol>\n          </li>\n          <li>If <i>type</i> is <code>&quot;Float64&quot;</code>, then\n            <ol class=\"block\">\n              <li>Let <i>value</i> be the byte elements of <i>rawValue</i> concatenated and interpreted as a little-endian bit\n                  string encoding of an IEEE 754-2008 binary64 value.</li>\n              <li>If <i>value</i> is an IEEE 754-2008 binary64 NaN value, return the <b>NaN</b> Number value.</li>\n              <li>Return the Number value that corresponds to <i>value</i>.</li>\n            </ol>\n          </li>\n          <li>If the first code unit of <i>type</i> is <code>&quot;U&quot;</code>, then\n            <ol class=\"block\">\n              <li>Let <i>intValue</i> be the byte elements of <i>rawValue</i> concatenated and interpreted as a bit string\n                  encoding of an unsigned little-endian binary number.</li>\n            </ol>\n          </li>\n          <li>Else\n            <ol class=\"block\">\n              <li>Let <i>intValue</i> be the byte elements of <i>rawValue</i> concatenated and interpreted as a bit string\n                  encoding of a binary little-endian 2&#x2019;s complement number of bit length <i>elementSize</i> &#xD7; 8.</li>\n            </ol>\n          </li>\n          <li>Return the Number value that corresponds to <i>intValue</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-setvalueinbuffer\">\n        <h1><span class=\"secnum\" id=\"sec-24.1.1.6\"><a href=\"/sec/sec-setvalueinbuffer.html\" title=\"link to this section\">24.1.1.6</a></span> SetValueInBuffer ( arrayBuffer, byteIndex, type, value,\n            isLittleEndian )</h1>\n\n        <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">SetValueInBuffer</span> takes\n        five parameters, an ArrayBuffer <var>arrayBuffer</var>, an integer <var>byteIndex</var>, a String <var>type</var>, a\n        Number <var>value</var>, and optionally a Boolean <var>isLittleEndian</var>. This operation performs the following\n        steps:</p>\n\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-isdetachedbuffer.html\">IsDetachedBuffer</a>(<i>arrayBuffer</i>) is <b>false</b>.</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: There are sufficient bytes in <i>arrayBuffer</i> starting at\n              <i>byteIndex</i> to represent a value of <i>type</i>.</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>byteIndex</i> is a positive integer.</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>value</i>) is Number.</li>\n          <li>Let <i>block</i> be <i>arrayBuffer&#x2019;s</i> [[ArrayBufferData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <i>block</i> is not <b>undefined</b>.</li>\n          <li>Let <i>elementSize</i> be the Number value of the Element Size value specified in <a href=\"/sec/table-49.html\">Table 49</a>\n              for Element Type <i>type</i>.</li>\n          <li>If <i>isLittleEndian</i> is not present, set <i>isLittleEndian</i> to either <b>true</b> or <b>false</b>. The choice\n              is implementation dependent and should be the alternative that is most efficient for the implementation. An\n              implementation must use the same value each time this step is executed and the same value must be used for the\n              corresponding step in the <a href=\"/sec/sec-getvaluefrombuffer.html\">GetValueFromBuffer</a> abstract operation.</li>\n          <li>If <i>type</i> is <code>&quot;Float32&quot;</code>, then\n            <ol class=\"block\">\n              <li>Set <i>rawBytes</i> to a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the 4 bytes that\n                  are the result of converting <i>value</i> to IEEE 754-2008 binary32 format using &#x201C;Round to nearest, ties\n                  to even&#x201D; rounding mode. If <i>isLittleEndian</i> is <b>false</b>, the bytes are arranged in big endian\n                  order. Otherwise, the bytes are arranged in little endian order. If <i>value</i> is <b>NaN</b>, <i>rawValue</i>\n                  may be set to any implementation chosen IEEE 754-2008 binary64 format Not-a-Number encoding. An implementation\n                  must always choose the same encoding for each implementation distinguishable <b>NaN</b> value.</li>\n            </ol>\n          </li>\n          <li>Else, if <i>type</i> is <code>&quot;Float64&quot;</code>, then\n            <ol class=\"block\">\n              <li>Set <i>rawBytes</i> to a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the 8 bytes that\n                  are the IEEE 754-2008 binary64 format encoding of <i>value</i>. If <i>isLittleEndian</i> is <b>false</b>, the\n                  bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If\n                  <i>value</i> is <b>NaN</b>, <i>rawValue</i> may be set to any implementation chosen IEEE 754-2008 binary32\n                  format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation\n                  distinguishable <b>NaN</b> value.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>n</i> be the Number value of the Element Size specified in <a href=\"/sec/table-49.html\">Table 49</a> for Element\n                  Type <i>type</i>.</li>\n              <li>Let <i>convOp</i> be the abstract operation named in the Conversion Operation column in <a href=\"/sec/table-49.html\">Table 49</a> for Element Type <i>type</i>.</li>\n              <li>Let <i>intValue</i> be <i>convOp</i>(<i>value</i>).</li>\n              <li>If <i>intValue</i> &#x2265; 0, then\n                <ol class=\"block\">\n                  <li>Let <i>rawBytes</i> be a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the\n                      <i>n</i>-byte binary encoding of <i>intValue</i>. If <i>isLittleEndian</i> is <b>false</b>, the bytes are\n                      ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li>\n                </ol>\n              </li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>Let <i>rawBytes</i> be a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the\n                      <i>n</i>-byte binary 2&#x2019;s complement encoding of <i>intValue</i>. If <i>isLittleEndian</i> is\n                      <b>false</b>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian\n                      order.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Store the individual bytes of <i>rawBytes</i> into <i>block</i>, in order, starting at\n              <i>block</i>[<i>byteIndex</i>].</li>\n          <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<b>undefined</b>).</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-arraybuffer-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-24.1.2\"><a href=\"/sec/sec-arraybuffer-constructor.html\" title=\"link to this section\">24.1.2</a></span> The ArrayBuffer Constructor</h1>\n\n        <p>The ArrayBuffer constructor is the %ArrayBuffer% intrinsic object and the initial value of the <code>ArrayBuffer</code>\n        property of the global object. When called as a constructor it creates and initializes a new ArrayBuffer object.\n        <code>ArrayBuffer</code> is not intended to be called as a function and will throw an exception when called in that\n        manner.</p>\n\n        <p>The <code>ArrayBuffer</code> constructor is designed to be subclassable. It may be used as the value of an\n        <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified\n        <code>ArrayBuffer</code> behaviour must include a <code>super</code> call to the <code>ArrayBuffer</code> constructor to\n        create and initialize subclass instances with the internal state necessary to support the <code><a href=\"/sec/sec-arraybuffer.prototype.html\">ArrayBuffer.prototype</a></code> built-in methods.</p>\n      </div>\n\n      <section id=\"sec-arraybuffer-length\">\n        <h1><span class=\"secnum\" id=\"sec-24.1.2.1\"><a href=\"/sec/sec-arraybuffer-length.html\" title=\"link to this section\">24.1.2.1</a></span> ArrayBuffer( length )</h1>\n\n        <p class=\"normalbefore\">ArrayBuffer called with argument <var>length</var> performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>If NewTarget is <b>undefined</b>, throw a <b>TypeError</b> exception.</li>\n          <li>Let <i>numberLength</i> be <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<i>length</i>).</li>\n          <li>Let <i>byteLength</i> be <a href=\"/sec/sec-tolength.html\">ToLength</a>(<i>numberLength</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>byteLength</i>).</li>\n          <li>If <a href=\"/sec/sec-samevaluezero.html\">SameValueZero</a>(<i>numberLength</i>, <i>byteLength</i>) is <b>false</b>, throw a\n              <b>RangeError</b> exception.</li>\n          <li>Return <a href=\"/sec/sec-allocatearraybuffer.html\">AllocateArrayBuffer</a>(NewTarget, <i>byteLength</i>).</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-arraybuffer-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-24.1.3\"><a href=\"/sec/sec-properties-of-the-arraybuffer-constructor.html\" title=\"link to this section\">24.1.3</a></span> Properties of the ArrayBuffer Constructor</h1>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        ArrayBuffer constructor is the intrinsic object %FunctionPrototype% (<a href=\"/sec/sec-properties-of-the-function-prototype-object.html\">19.2.3</a>).</p>\n\n        <p>Besides its <code>length</code> property (whose value is 1), the ArrayBuffer constructor has the following\n        properties:</p>\n      </div>\n\n      <section id=\"sec-arraybuffer.isview\">\n        <h1><span class=\"secnum\" id=\"sec-24.1.3.1\"><a href=\"/sec/sec-arraybuffer.isview.html\" title=\"link to this section\">24.1.3.1</a></span> ArrayBuffer.isView ( arg )</h1>\n\n        <p class=\"normalbefore\">The isView function takes one argument <var>arg</var>, and performs the following steps are\n        taken:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>arg</i>) is not Object, return <b>false</b>.</li>\n          <li>If <i>arg</i> has a [[ViewedArrayBuffer]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a>, return <b>true</b>.</li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-arraybuffer.prototype\">\n        <h1><span class=\"secnum\" id=\"sec-24.1.3.2\"><a href=\"/sec/sec-arraybuffer.prototype.html\" title=\"link to this section\">24.1.3.2</a></span> ArrayBuffer.prototype</h1>\n\n        <p>The initial value of ArrayBuffer.prototype is the intrinsic object %ArrayBufferPrototype% (<a href=\"/sec/sec-properties-of-the-arraybuffer-prototype-object.html\">24.1.4</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-get-arraybuffer-@@species\">\n        <h1><span class=\"secnum\" id=\"sec-24.1.3.3\"><a href=\"/sec/sec-get-arraybuffer-@@species.html\" title=\"link to this section\">24.1.3.3</a></span> get ArrayBuffer [ @@species ]</h1>\n\n        <p class=\"normalbefore\"><code>ArrayBuffer[@@species]</code> is an accessor property whose set accessor function is <span class=\"value\">undefined</span>. Its get accessor function performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Return the <b>this</b> value.</li>\n        </ol>\n\n        <p>The value of the <code>name</code> property of this function is <code>&quot;get [Symbol.species]&quot;</code>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> ArrayBuffer prototype methods normally use their <code>this</code> object&#x2019;s\n          constructor to create a derived object. However, a subclass constructor may over-ride that default behaviour by\n          redefining its @@species property.</p>\n        </div>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-arraybuffer-prototype-object\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-24.1.4\"><a href=\"/sec/sec-properties-of-the-arraybuffer-prototype-object.html\" title=\"link to this section\">24.1.4</a></span> Properties of the ArrayBuffer Prototype Object</h1>\n\n        <p>The ArrayBuffer prototype object is the intrinsic object %ArrayBufferPrototype%. The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the ArrayBuffer prototype object is the\n        intrinsic object %ObjectPrototype% (<a href=\"/sec/sec-properties-of-the-object-prototype-object.html\">19.1.3</a>). The ArrayBuffer\n        prototype object is an ordinary object. It does not have an [[ArrayBufferData]] or [[ArrayBufferByteLength]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</p>\n      </div>\n\n      <section id=\"sec-get-arraybuffer.prototype.bytelength\">\n        <h1><span class=\"secnum\" id=\"sec-24.1.4.1\"><a href=\"/sec/sec-get-arraybuffer.prototype.bytelength.html\" title=\"link to this section\">24.1.4.1</a></span> get ArrayBuffer.prototype.byteLength</h1>\n\n        <p class=\"normalbefore\"><code>ArrayBuffer.prototype.byteLength</code> is an accessor property whose set accessor function\n        is <span class=\"value\">undefined</span>. Its get accessor function performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>O</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>O</i> does not have an [[ArrayBufferData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a>, throw a <b>TypeError</b> exception.</li>\n          <li>If <a href=\"/sec/sec-isdetachedbuffer.html\">IsDetachedBuffer</a>(<i>O</i>) is <b>true</b>, throw a <b>TypeError</b>\n              exception.</li>\n          <li>Let <i>length</i> be the value of <i>O</i>&#x2019;s [[ArrayBufferByteLength]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Return <i>length</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-arraybuffer.prototype.constructor\">\n        <h1><span class=\"secnum\" id=\"sec-24.1.4.2\"><a href=\"/sec/sec-arraybuffer.prototype.constructor.html\" title=\"link to this section\">24.1.4.2</a></span> ArrayBuffer.prototype.constructor</h1>\n\n        <p>The initial value of <code>ArrayBuffer.prototype.constructor</code> is the intrinsic object %ArrayBuffer%.</p>\n      </section>\n\n      <section id=\"sec-arraybuffer.prototype.slice\">\n        <h1><span class=\"secnum\" id=\"sec-24.1.4.3\"><a href=\"/sec/sec-arraybuffer.prototype.slice.html\" title=\"link to this section\">24.1.4.3</a></span> ArrayBuffer.prototype.slice ( start, end )</h1>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>O</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>O</i> does not have an [[ArrayBufferData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a>, throw a <b>TypeError</b> exception.</li>\n          <li>If <a href=\"/sec/sec-isdetachedbuffer.html\">IsDetachedBuffer</a>(<i>O</i>) is <b>true</b>, throw a <b>TypeError</b>\n              exception.</li>\n          <li>Let <i>len</i> be the value of <i>O</i>&#x2019;s [[ArrayBufferByteLength]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Let <i>relativeStart</i> be <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>start</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>relativeStart</i>).</li>\n          <li>If <i>relativeStart</i> &lt; 0, let <i>first</i> be max((<i>len</i> + <i>relativeStart</i>),0); else let\n              <i>first</i> be min(<i>relativeStart</i>, <i>len</i>).</li>\n          <li>If <i>end</i> is <b>undefined</b>, let <i>relativeEnd</i> be <i>len</i>; else let <i>relativeEnd</i> be <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>end</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>relativeEnd</i>).</li>\n          <li>If <i>relativeEnd</i> &lt; 0, let <i>final</i> be max((<i>len</i> + <i>relativeEnd</i>),0); else let <i>final</i> be\n              min(<i>relativeEnd</i>, <i>len</i>).</li>\n          <li>Let <i>newLen</i> be max(<i>final</i>-<i>first</i>,0).</li>\n          <li>Let <i>ctor</i> be <a href=\"/sec/sec-speciesconstructor.html\">SpeciesConstructor</a>(<i>O</i>, %ArrayBuffer%).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>ctor</i>).</li>\n          <li>Let <i>new</i> be <a href=\"/sec/sec-construct.html\">Construct</a>(<i>ctor</i>, &#xAB;<i>newLen</i>&#xBB;).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>new</i>).</li>\n          <li>If <i>new</i> does not have an [[ArrayBufferData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>, throw a <b>TypeError</b> exception.</li>\n          <li>If <a href=\"/sec/sec-isdetachedbuffer.html\">IsDetachedBuffer</a>(<i>new</i>) is <b>true</b>, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <a href=\"/sec/sec-samevalue.html\">SameValue</a>(<i>new</i>, <i>O</i>) is <b>true</b>, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If the value of <i>new</i>&#x2019;s [[ArrayBufferByteLength]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> &lt; <i>newLen</i>, throw a\n              <b>TypeError</b> exception.</li>\n          <li>NOTE: Side-effects of the above steps may have <span style=\"font-family: Times New Roman\">detached</span>\n              <i>O</i>.</li>\n          <li>If <a href=\"/sec/sec-isdetachedbuffer.html\">IsDetachedBuffer</a>(<i>O</i>) is <b>true</b>, throw a <b>TypeError</b>\n              exception.</li>\n          <li>Let <i>fromBuf</i> be the value of <i>O</i>&#x2019;s [[ArrayBufferData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Let <i>toBuf</i> be the value of <i>new</i>&#x2019;s [[ArrayBufferData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Perform <a href=\"/sec/sec-copydatablockbytes.html\">CopyDataBlockBytes</a>(<i>toBuf</i>, 0, <i>fromBuf</i>, <i>first</i>,\n              <i>newLen</i>).</li>\n          <li>Return <i>new</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-arraybuffer.prototype-@@tostringtag\">\n        <h1><span class=\"secnum\" id=\"sec-24.1.4.4\"><a href=\"/sec/sec-arraybuffer.prototype-@@tostringtag.html\" title=\"link to this section\">24.1.4.4</a></span> ArrayBuffer.prototype [ @@toStringTag ]</h1>\n\n        <p>The initial value of the @@toStringTag property is the String value <code>&quot;ArrayBuffer&quot;</code>.</p>\n\n        <p>This property has the attributes { [[Writable]]: <span class=\"value\">false</span>, [[Enumerable]]: <span class=\"value\">false</span>, [[Configurable]]: <span class=\"value\">true</span> }.</p>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-arraybuffer-instances\">\n      <h1><span class=\"secnum\" id=\"sec-24.1.5\"><a href=\"/sec/sec-properties-of-the-arraybuffer-instances.html\" title=\"link to this section\">24.1.5</a></span> Properties of the ArrayBuffer Instances</h1>\n\n      <p>ArrayBuffer instances inherit properties from the ArrayBuffer prototype object. ArrayBuffer instances each have an\n      [[ArrayBufferData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> and an\n      [[ArrayBufferByteLength]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</p>\n\n      <p>ArrayBuffer instances whose [[ArrayBufferData]] is <b>null</b> are considered to be detached and all operators to access\n      or modify data contained in the ArrayBuffer instance will fail.</p>\n    </section>\n  "}