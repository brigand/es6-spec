{"id":"sec-arraysetlength","html":"\n        <h1><span class=\"secnum\" id=\"sec-9.4.2.4\"><a href=\"/sec/sec-arraysetlength.html\" title=\"link to this section\">9.4.2.4</a></span>\n            ArraySetLength(A, Desc)</h1>\n\n        <p class=\"normalbefore\">When the abstract operation ArraySetLength is called with an <a href=\"/sec/sec-array-exotic-objects.html\">Array exotic object</a> <span style=\"font-family: Times New Roman\"><i>A</i>,</span> and\n        <a href=\"/sec/sec-property-descriptor-specification-type.html\">Property Descriptor</a> <span class=\"nt\">Desc</span> the following\n        steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If the [[Value]] field of <i>Desc</i> is absent, then\n            <ol class=\"block\">\n              <li>Return <a href=\"/sec/sec-ordinarydefineownproperty.html\">OrdinaryDefineOwnProperty</a>(<i>A</i>, <code>&quot;length&quot;</code>,\n                  <i>Desc</i>).</li>\n            </ol>\n          </li>\n          <li>Let <i>newLenDesc</i> be a copy of <i>Desc</i>.</li>\n          <li>Let <i>newLen</i> be <a href=\"/sec/sec-touint32.html\">ToUint32</a>(<i>Desc</i>.[[Value]]).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>newLen</i>).</li>\n          <li>Let <i>numberLen</i> be <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<i>Desc</i>.[[Value]]).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>newLen</i>).</li>\n          <li>If <i>newLen</i> &#x2260; <i>numberLen</i>, throw a <b>RangeError</b> exception.</li>\n          <li>Set <i>newLenDesc</i>.[[Value]] to <i>newLen</i>.</li>\n          <li>Let <i>oldLenDesc</i> be <a href=\"/sec/sec-ordinarygetownproperty.html\">OrdinaryGetOwnProperty</a>(<i>A</i>,\n              <code>&quot;length&quot;</code>).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>oldLenDesc</i> will never be <b>undefined</b> or an accessor\n              descriptor because Array objects are created with a length data property that cannot be deleted or\n              reconfigured.</li>\n          <li>Let <i>oldLen</i> be <i>oldLenDesc</i>.[[Value]].</li>\n          <li>If <i>newLen</i> &#x2265;<i>oldLen</i>, then\n            <ol class=\"block\">\n              <li>Return <a href=\"/sec/sec-ordinarydefineownproperty.html\">OrdinaryDefineOwnProperty</a>(<i>A</i>, <code>&quot;length&quot;</code>,\n                  <i>newLenDesc</i>).</li>\n            </ol>\n          </li>\n          <li>If <i>oldLenDesc</i>.[[Writable]] is <b>false</b>, return <b>false</b>.</li>\n          <li>If <i>newLenDesc</i>.[[Writable]] is absent or has the value <b>true</b>, let <i>newWritable</i> be\n              <b>true</b>.</li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Need to defer setting the [[Writable]] attribute to <b>false</b> in case any elements cannot be deleted.</li>\n              <li>Let <i>newWritable</i> be <b>false</b>.</li>\n              <li>Set <i>newLenDesc</i>.[[Writable]] to <b>true</b>.</li>\n            </ol>\n          </li>\n          <li>Let <i>succeeded</i> be <a href=\"/sec/sec-ordinarydefineownproperty.html\">OrdinaryDefineOwnProperty</a>(<i>A</i>,\n              <code>&quot;length&quot;</code>, <i>newLenDesc</i>).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>succeeded</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n          <li>If <i>succeeded</i> is <b>false</b>, return <b>false</b>.</li>\n          <li>While <i>newLen</i> &lt; <i>oldLen</i> repeat,\n            <ol class=\"block\">\n              <li>Set <i>oldLen</i> to <i>oldLen</i> &#x2013; 1.</li>\n              <li>Let <i>deleteSucceeded</i> be <i>A</i>.[[Delete]](<a href=\"/sec/sec-tostring.html\">ToString</a>(<i>oldLen</i>)).</li>\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>deleteSucceeded</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n              <li>If <i>deleteSucceeded</i> is <b>false</b>, then\n                <ol class=\"block\">\n                  <li>Set <i>newLenDesc</i>.[[Value]] to <i>oldLen</i> <i>+</i> 1.</li>\n                  <li>If <i>newWritable</i> is <b>false</b>, set <i>newLenDesc</i>.[[Writable]] to <b>false</b>.</li>\n                  <li>Let <i>succeeded</i> be <a href=\"/sec/sec-ordinarydefineownproperty.html\">OrdinaryDefineOwnProperty</a>(<i>A</i>,\n                      <code>&quot;length&quot;</code>, <i>newLenDesc</i>).</li>\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>succeeded</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                  <li>Return <b>false</b>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>If <i>newWritable</i> is <b>false</b>, then\n            <ol class=\"block\">\n              <li>Return <a href=\"/sec/sec-ordinarydefineownproperty.html\">OrdinaryDefineOwnProperty</a>(<i>A</i>, <code>&quot;length&quot;</code>,\n                  PropertyDescriptor{[[Writable]]: <b>false</b>}). This call will always return <b>true</b>.</li>\n            </ol>\n          </li>\n          <li>Return <b>true</b>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> In steps 3 and 4, if <span style=\"font-family: Times New\n          Roman\"><i>Desc</i>.[[Value]]</span> is an object then its <code>valueOf</code> method is called twice. This is legacy\n          behaviour that was specified with this effect starting with the 2<sup>nd</sup> Edition of this specification.</p>\n        </div>\n      "}