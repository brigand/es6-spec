{"id":"sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization","html":"\n      <h1><span class=\"secnum\" id=\"sec-14.2.14\"><a href=\"/sec/sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization.html\" title=\"link to this section\">14.2.14</a></span> Runtime Semantics: IteratorBindingInitialization</h1>\n\n      <p>With parameters <var>iteratorRecord</var> and <var>environment</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-destructuring-binding-patterns-runtime-semantics-iteratorbindinginitialization.html\">13.3.3.6</a>, <a href=\"/sec/sec-function-definitions-runtime-semantics-iteratorbindinginitialization.html\">14.1.18</a>.</p>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> When <b>undefined</b> is passed for <var>environment</var> it indicates that a <a href=\"/sec/sec-putvalue.html\">PutValue</a> operation should be used to assign the initialization value. This is the case for formal\n        parameter lists of non-strict functions. In that case the formal parameter bindings are preinitialized in order to deal\n        with the possibility of multiple parameters with the same name.</p>\n      </div>\n\n      <div class=\"gp prod\"><span class=\"nt\">ArrowParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span></div>\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <i>iteratorRecord</i>.[[done]] is <b>false.</b></li>\n        <li>Let <i>next</i> be <a href=\"/sec/sec-iteratorstep.html\">IteratorStep</a>(<i>iteratorRecord</i>.[[iterator]]).</li>\n        <li>If <i>next</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, set\n            <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n        <li>If <i>next</i> is <b>false</b>, set <i>iteratorRecord</i>.[[done]] to <b>true</b></li>\n        <li>Else\n          <ol class=\"block\">\n            <li>Let <i>v</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>next</i>).</li>\n            <li>If <i>v</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, set\n                <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>v</i>).</li>\n          </ol>\n        </li>\n        <li>If <i>iteratorRecord</i>.[[done]] is <b>true</b>, let <i>v</i> be <b>undefined</b>.</li>\n        <li>Return the result of performing BindingInitialization for <i>BindingIdentifier</i> using <i>v</i> and\n            <i>environment</i> as the arguments.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ArrowParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>formals</i> be CoveredFormalsList of <i>CoverParenthesizedExpressionAndArrowParameterList</i>.</li>\n        <li>Return the result of performing IteratorBindingInitialization of <i>formals</i> with arguments <i>iteratorRecord</i>\n            and <i>environment</i>.</li>\n      </ol>\n    "}