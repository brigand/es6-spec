{"id":"sec-assertion","html":"\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-21.2.2.6\"><a href=\"/sec/sec-assertion.html\" title=\"link to this section\">21.2.2.6</a></span>\n              Assertion</h1>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Assertion</span> <span class=\"geq\">::</span>\n          <code class=\"t\">^</code></span> evaluates by returning an internal AssertionTester closure that takes a State argument\n          <var>x</var> and performs the following steps when evaluated:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>e</i> be <i>x</i>&apos;s <i>endIndex</i>.</li>\n            <li>If <i>e</i> is zero, return <b>true</b>.</li>\n            <li>If <i>Multiline</i> is <b>false</b>, return <b>false</b>.</li>\n            <li>If the character <i>Input</i>[<i>e</i>&#x2013;1] is one of <i>LineTerminator</i>, return <b>true</b>.</li>\n            <li>Return <b>false</b>.</li>\n          </ol>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE</span> Even when the <code>y</code> flag is used with a pattern, <code>^</code> always\n            matches only at the beginning of <span class=\"nt\">Input</span>, or (if <span class=\"nt\">Multiline</span> is <span class=\"value\">true</span>) at the beginning of a line.</p>\n          </div>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Assertion</span> <span class=\"geq\">::</span>\n          <code class=\"t\">$</code></span> evaluates by returning an internal AssertionTester closure that takes a State argument\n          <var>x</var> and performs the following steps when evaluated:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>e</i> be <i>x</i>&apos;s <i>endIndex</i>.</li>\n            <li>If <i>e</i> is equal to <i>InputLength</i>, return <b>true</b>.</li>\n            <li>If <i>Multiline</i> is <b>false</b>, return <b>false</b>.</li>\n            <li>If the character <i>Input</i>[<i>e</i>] is one of <i>LineTerminator</i>, return <b>true</b>.</li>\n            <li>Return <b>false</b>.</li>\n          </ol>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Assertion</span> <span class=\"geq\">::</span>\n          <code class=\"t\">\\</code> <code class=\"t\">b</code></span> evaluates by returning an internal AssertionTester closure that\n          takes a State argument <var>x</var> and performs the following steps when evaluated:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>e</i> be <i>x</i>&apos;s <i>endIndex</i>.</li>\n            <li><a href=\"/sec/sec-call.html\">Call</a> IsWordChar(<i>e</i>&#x2013;1) and let <i>a</i> be the Boolean result.</li>\n            <li><a href=\"/sec/sec-call.html\">Call</a> IsWordChar(<i>e</i>) and let <i>b</i> be the Boolean result.</li>\n            <li>If <i>a</i> is <b>true</b> and <i>b</i> is <b>false</b>, return <b>true</b>.</li>\n            <li>If <i>a</i> is <b>false</b> and <i>b</i> is <b>true</b>, return <b>true</b>.</li>\n            <li>Return <b>false</b>.</li>\n          </ol>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Assertion</span> <span class=\"geq\">::</span>\n          <code class=\"t\">\\</code> <code class=\"t\">B</code></span> evaluates by returning an internal AssertionTester closure that\n          takes a State argument <var>x</var> and performs the following steps when evaluated:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>e</i> be <i>x</i>&apos;s <i>endIndex</i>.</li>\n            <li><a href=\"/sec/sec-call.html\">Call</a> IsWordChar(<i>e</i>&#x2013;1) and let <i>a</i> be the Boolean result.</li>\n            <li><a href=\"/sec/sec-call.html\">Call</a> IsWordChar(<i>e</i>) and let <i>b</i> be the Boolean result.</li>\n            <li>If <i>a</i> is <b>true</b> and <i>b</i> is <b>false</b>, return <b>false</b>.</li>\n            <li>If <i>a</i> is <b>false</b> and <i>b</i> is <b>true</b>, return <b>false</b>.</li>\n            <li>Return <b>true</b>.</li>\n          </ol>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Assertion</span> <span class=\"geq\">::</span>\n          <code class=\"t\">(</code> <code class=\"t\">?</code> <code class=\"t\">=</code> <span class=\"nt\">Disjunction</span> <code class=\"t\">)</code></span> evaluates as follows:</p>\n\n          <ol class=\"proc\">\n            <li>Evaluate <i>Disjunction</i> to obtain a Matcher <i>m</i>.</li>\n            <li>Return an internal Matcher closure that takes two arguments, a State <i>x</i> and a Continuation <i>c</i>, and\n                performs the following steps:\n              <ol class=\"nested proc\">\n                <li>Let <i>d</i> be a Continuation that always returns its State argument as a successful MatchResult.</li>\n                <li><a href=\"/sec/sec-call.html\">Call</a> <i>m</i>(<i>x</i>, <i>d</i>) and let <i>r</i> be its result.</li>\n                <li>If <i>r</i> is <b>failure</b>, return <b>failure</b>.</li>\n                <li>Let <i>y</i> be <i>r</i>&apos;s State.</li>\n                <li>Let <i>cap</i> be <i>y</i>&apos;s <i>captures</i> <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n                <li>Let <i>xe</i> be <i>x</i>&apos;s <i>endIndex</i>.</li>\n                <li>Let <i>z</i> be the State (<i>xe</i>, <i>cap</i>).</li>\n                <li><a href=\"/sec/sec-call.html\">Call</a> <i>c</i>(<i>z</i>) and return its result.</li>\n              </ol>\n            </li>\n          </ol>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Assertion</span> <span class=\"geq\">::</span>\n          <code class=\"t\">(</code> <code class=\"t\">?</code> <code class=\"t\">!</code> <span class=\"nt\">Disjunction</span> <code class=\"t\">)</code></span> evaluates as follows:</p>\n\n          <ol class=\"proc\">\n            <li>Evaluate <i>Disjunction</i> to obtain a Matcher <i>m</i>.</li>\n            <li>Return an internal Matcher closure that takes two arguments, a State <i>x</i> and a Continuation <i>c</i>, and\n                performs the following steps:\n              <ol class=\"nested proc\">\n                <li>Let <i>d</i> be a Continuation that always returns its State argument as a successful MatchResult.</li>\n                <li><a href=\"/sec/sec-call.html\">Call</a> <i>m</i>(<i>x</i>, <i>d</i>) and let <i>r</i> be its result.</li>\n                <li>If <i>r</i> is not <b>failure</b>, return <b>failure</b>.</li>\n                <li><a href=\"/sec/sec-call.html\">Call</a> <i>c</i>(<i>x</i>) and return its result.</li>\n              </ol>\n            </li>\n          </ol>\n        </div>\n\n        <section id=\"sec-runtime-semantics-iswordchar-abstract-operation\">\n          <h1><span class=\"secnum\" id=\"sec-21.2.2.6.1\"><a href=\"/sec/sec-runtime-semantics-iswordchar-abstract-operation.html\" title=\"link to this section\">21.2.2.6.1</a></span> Runtime Semantics: IsWordChar Abstract Operation</h1>\n\n          <p class=\"normalbefore\">The abstract operation IsWordChar takes an integer parameter <var>e</var> and performs the\n          following steps:</p>\n\n          <ol class=\"proc\">\n            <li>If <i>e</i> is &#x2013;1 or <i>e</i>  is <i>InputLength</i>, return <b>false</b>.</li>\n            <li>Let <i>c</i> be the character <i>Input</i>[<i>e</i>].</li>\n            <li>If <i>c</i> is one of the sixty-three characters below, return <b>true</b>.\n              <figure>\n                <table class=\"lightweight-table\">\n                  <tr>\n                    <td><code>a</code></td>\n                    <td><code>b</code></td>\n                    <td><code>c</code></td>\n                    <td><code>d</code></td>\n                    <td><code>e</code></td>\n                    <td><code>f</code></td>\n                    <td><code>g</code></td>\n                    <td><code>h</code></td>\n                    <td><code>i</code></td>\n                    <td><code>j</code></td>\n                    <td><code>k</code></td>\n                    <td><code>l</code></td>\n                    <td><code>m</code></td>\n                    <td><code>n</code></td>\n                    <td><code>o</code></td>\n                    <td><code>p</code></td>\n                    <td><code>q</code></td>\n                    <td><code>r</code></td>\n                    <td><code>s</code></td>\n                    <td><code>t</code></td>\n                    <td><code>u</code></td>\n                    <td><code>v</code></td>\n                    <td><code>w</code></td>\n                    <td><code>x</code></td>\n                    <td><code>y</code></td>\n                    <td><code>z</code></td>\n                  </tr>\n                  <tr>\n                    <td><code>A</code></td>\n                    <td><code>B</code></td>\n                    <td><code>C</code></td>\n                    <td><code>D</code></td>\n                    <td><code>E</code></td>\n                    <td><code>F</code></td>\n                    <td><code>G</code></td>\n                    <td><code>H</code></td>\n                    <td><code>I</code></td>\n                    <td><code>J</code></td>\n                    <td><code>K</code></td>\n                    <td><code>L</code></td>\n                    <td><code>M</code></td>\n                    <td><code>N</code></td>\n                    <td><code>O</code></td>\n                    <td><code>P</code></td>\n                    <td><code>Q</code></td>\n                    <td><code>R</code></td>\n                    <td><code>S</code></td>\n                    <td><code>T</code></td>\n                    <td><code>U</code></td>\n                    <td><code>V</code></td>\n                    <td><code>W</code></td>\n                    <td><code>X</code></td>\n                    <td><code>Y</code></td>\n                    <td><code>Z</code></td>\n                  </tr>\n                  <tr>\n                    <td><code>0</code></td>\n                    <td><code>1</code></td>\n                    <td><code>2</code></td>\n                    <td><code>3</code></td>\n                    <td><code>4</code></td>\n                    <td><code>5</code></td>\n                    <td><code>6</code></td>\n                    <td><code>7</code></td>\n                    <td><code>8</code></td>\n                    <td><code>9</code></td>\n                    <td><code>_</code></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                  </tr>\n                </table>\n              </figure>\n            </li>\n            <li>Return <b>false</b>.</li>\n          </ol>\n        </section>\n      "}