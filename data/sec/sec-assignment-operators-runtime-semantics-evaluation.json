{"id":"sec-assignment-operators-runtime-semantics-evaluation","html":"\n      <h1><span class=\"secnum\" id=\"sec-12.14.4\"><a href=\"/sec/sec-assignment-operators-runtime-semantics-evaluation.html\" title=\"link to this section\">12.14.4</a></span> Runtime Semantics: Evaluation</h1>\n\n      <p><span class=\"nt\">AssignmentExpression</span><sub>[In, Yield]</sub> <b>:</b> <span class=\"nt\">LeftHandSideExpression</span><sub>[?Yield]</sub> <code>=</code> <span class=\"nt\">AssignmentExpression</span><sub>[?In, ?Yield]</sub></p>\n\n      <ol class=\"proc\">\n        <li>If <i>LeftHandSideExpression</i> is neither an <i>ObjectLiteral</i> nor an <i>ArrayLiteral</i>, then\n          <ol class=\"block\">\n            <li>Let <i>lref</i> be the result of evaluating <i>LeftHandSideExpression</i>.</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>lref</i>).</li>\n            <li>Let <i>rref</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n            <li>Let <i>rval</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>rref</i>).</li>\n            <li>If <a href=\"/sec/sec-isanonymousfunctiondefinition.html\">IsAnonymousFunctionDefinition</a>(<i>AssignmentExpression)</i> and\n                IsIdentifierRef of <i>LeftHandSideExpression</i> are both <b>true</b>, then\n              <ol class=\"block\">\n                <li>Let <i>hasNameProperty</i> be <a href=\"/sec/sec-hasownproperty.html\">HasOwnProperty</a>(<i>rval</i>,\n                    <code>&quot;name&quot;</code>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>hasNameProperty</i>).</li>\n                <li>If <i>hasNameProperty</i> is <b>false</b>, perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>rval</i>, <a href=\"/sec/sec-reference-specification-type.html\">GetReferencedName</a>(<i>lref</i>)).</li>\n              </ol>\n            </li>\n            <li>Let <i>status</i> be <a href=\"/sec/sec-putvalue.html\">PutValue</a>(<i>lref</i>, <i>rval</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n            <li>Return <i>rval</i>.</li>\n          </ol>\n        </li>\n        <li>Let <i>assignmentPattern</i> be the parse of the source text corresponding to <i>LeftHandSideExpression</i> using\n            <i>AssignmentPattern</i><sub>[?Yield]</sub> as the goal symbol.</li>\n        <li>Let <i>rref</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n        <li>Let <i>rval</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>rref</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>rval</i>).</li>\n        <li>Let <i>status</i> be the result of performing DestructuringAssignmentEvaluation of <i>assignmentPattern</i> using\n            <i>rval</i> as the argument.</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n        <li>Return <i>rval</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">AssignmentExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">LeftHandSideExpression</span> <span class=\"nt\">AssignmentOperator</span> <span class=\"nt\">AssignmentExpression</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>lref</i> be the result of evaluating <i>LeftHandSideExpression</i>.</li>\n        <li>Let <i>lval</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>lref</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>lval</i>).</li>\n        <li>Let <i>rref</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n        <li>Let <i>rval</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>rref</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>rval</i>).</li>\n        <li>Let <i>op</i> be the <code>@</code> where <i>AssignmentOperator</i> is <code>@=</code></li>\n        <li>Let <i>r</i> be the result of applying <i>op</i> to <i>lval</i> and <i>rval</i> as if evaluating the expression\n            <i>lval</i> <i>op</i> <i>rval</i>.</li>\n        <li>Let <i>status</i> be <a href=\"/sec/sec-putvalue.html\">PutValue</a>(<i>lref</i>, <i>r</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n        <li>Return <i>r</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> When an assignment occurs within <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a>, it\n        is an runtime error if <var>lref</var> in step 1.f.of the first algorithm or step 9 of the second algorithm it is an\n        unresolvable reference. If it is, a <b>ReferenceError</b> exception is thrown. The <span class=\"nt\">LeftHandSide</span>\n        also may not be a reference to a data property with the attribute value <span style=\"font-family: Times New\n        Roman\">{[[Writable]]:<b>false</b>}</span>, to an accessor property with the attribute value <span style=\"font-family:\n        Times New Roman\">{[[Set]]:<b>undefined</b>}</span>, nor to a non-existent property of an object for which the <a href=\"/sec/sec-isextensible-o.html\">IsExtensible</a> predicate returns the value <b>false</b>. In these cases a <b>TypeError</b>\n        exception is thrown.</p>\n      </div>\n    "}