{"id":"sec-atomescape","html":"\n        <h1><span class=\"secnum\" id=\"sec-21.2.2.9\"><a href=\"/sec/sec-atomescape.html\" title=\"link to this section\">21.2.2.9</a></span>\n            AtomEscape</h1>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">AtomEscape</span> <span class=\"geq\">::</span>\n        <span class=\"nt\">DecimalEscape</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Evaluate <i>DecimalEscape</i> to obtain an EscapeValue <i>E</i>.</li>\n          <li>If <i>E</i> is a character, then\n            <ol class=\"block\">\n              <li>Let <i>ch</i> be <i>E</i>&apos;s character.</li>\n              <li>Let <i>A</i> be a one-element CharSet containing the character <i>ch</i>.</li>\n              <li><a href=\"/sec/sec-call.html\">Call</a> CharacterSetMatcher(<i>A</i>, <b>false</b>) and return its Matcher result.</li>\n            </ol>\n          </li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>E</i> must be an integer.</li>\n          <li>Let <i>n</i> be that integer.</li>\n          <li>If <i>n</i>=0 or <i>n</i>&gt;<i>NcapturingParens</i>, throw a <b>SyntaxError</b> exception.</li>\n          <li>Return an internal Matcher closure that takes two arguments, a State <i>x</i> and a Continuation <i>c</i>, and\n              performs the following steps:\n            <ol class=\"nested proc\">\n              <li>Let <i>cap</i> be <i>x</i>&apos;s <i>captures</i> <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n              <li>Let <i>s</i> be <i>cap</i>[<i>n</i>].</li>\n              <li>If <i>s</i> is <b>undefined</b>, return <i>c</i>(<i>x</i>).</li>\n              <li>Let <i>e</i> be <i>x</i>&apos;s <i>endIndex</i>.</li>\n              <li>Let <i>len</i> be <i>s</i>&apos;s length.</li>\n              <li>Let <i>f</i> be <i>e</i>+<i>len</i>.</li>\n              <li>If <i>f</i>&gt;<i>InputLength</i>, return <b>failure</b>.</li>\n              <li>If there exists an integer <i>i</i> between 0 (inclusive) and <i>len</i> (exclusive) such that\n                  Canonicalize(<i>s</i>[<i>i</i>]) is not the same character value as Canonicalize(<i>Input</i>\n                  [<i>e</i>+<i>i</i>]), return <b>failure</b>.</li>\n              <li>Let <i>y</i> be the State (<i>f</i>, <i>cap</i>).</li>\n              <li><a href=\"/sec/sec-call.html\">Call</a> <i>c</i>(<i>y</i>) and return its result.</li>\n            </ol>\n          </li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">AtomEscape</span> <span class=\"geq\">::</span>\n        <span class=\"nt\">CharacterEscape</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Evaluate <i>CharacterEscape</i> to obtain a character <i>ch</i>.</li>\n          <li>Let <i>A</i> be a one-element CharSet containing the character <i>ch</i>.</li>\n          <li><a href=\"/sec/sec-call.html\">Call</a> CharacterSetMatcher(<i>A</i>, <b>false</b>) and return its Matcher result.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">AtomEscape</span> <span class=\"geq\">::</span>\n        <span class=\"nt\">CharacterClassEscape</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Evaluate <i>CharacterClassEscape</i> to obtain a CharSet <i>A</i>.</li>\n          <li><a href=\"/sec/sec-call.html\">Call</a> CharacterSetMatcher(<i>A</i>, <b>false</b>) and return its Matcher result.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> An escape sequence of the form <code>\\</code> followed by a nonzero decimal number\n          <var>n</var> matches the result of the <var>n</var>th set of capturing parentheses (see 0). It is an error if the\n          regular expression has fewer than <var>n</var> capturing parentheses. If the regular expression has <var>n</var> or more\n          capturing parentheses but the <var>n</var>th one is <b>undefined</b> because it has not captured anything, then the\n          backreference always succeeds.</p>\n        </div>\n      "}