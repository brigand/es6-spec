{"id":"sec-block-runtime-semantics-evaluation","html":"\n      <h1><span class=\"secnum\" id=\"sec-13.2.13\"><a href=\"/sec/sec-block-runtime-semantics-evaluation.html\" title=\"link to this section\">13.2.13</a></span> Runtime Semantics: Evaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">Block</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family: sans-serif\">empty</span>).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">Block</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">StatementList</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Let <i>oldEnv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n        <li>Let <i>blockEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>oldEnv</i>).</li>\n        <li>Perform <a href=\"/sec/sec-blockdeclarationinstantiation.html\">BlockDeclarationInstantiation</a>(<i>StatementList,</i>\n            <i>blockEnv</i>).</li>\n        <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>blockEnv</i>.</li>\n        <li>Let <i>blockValue</i> be the result of evaluating <i>StatementList</i>.</li>\n        <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n        <li>Return <i>blockValue</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE 1</span> No matter how control leaves the <span class=\"nt\">Block</span> the <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> is always restored to its former state.</p>\n      </div>\n\n      <div class=\"gp prod\"><span class=\"nt\">StatementList</span> <span class=\"geq\">:</span> <span class=\"nt\">StatementList</span> <span class=\"nt\">StatementListItem</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>sl</i> be the result of evaluating <i>StatementList</i>.</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>sl</i>).</li>\n        <li>Let <i>s</i> be the result of evaluating <i>StatementListItem</i>.</li>\n        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>s</i>, <i>sl</i>.[[value]])).</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE 2</span> The value of a <span class=\"nt\">StatementList</span> is the value of the last value\n        producing item in the <span class=\"nt\">StatementList</span>. For example, the following calls to the <code>eval</code>\n        function all return the value 1:</p>\n\n        <p><code>eval(&quot;1;;;;;&quot;)</code></p>\n\n        <p><code>eval(&quot;1;{}&quot;)</code></p>\n\n        <p><code>eval(&quot;1;var a;&quot;)</code></p>\n      </div>\n    "}