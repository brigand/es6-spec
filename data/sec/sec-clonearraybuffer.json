{"id":"sec-clonearraybuffer","html":"\n        <h1><span class=\"secnum\" id=\"sec-24.1.1.4\"><a href=\"/sec/sec-clonearraybuffer.html\" title=\"link to this section\">24.1.1.4</a></span> CloneArrayBuffer( srcBuffer, srcByteOffset [, cloneConstructor]\n            )</h1>\n\n        <p class=\"normalbefore\">The abstract operation CloneArrayBuffer takes three parameters, an ArrayBuffer\n        <var>srcBuffer</var>, an integer <var>srcByteOffset</var> and optionally a constructor function\n        <var>cloneConstructor</var>. It creates a new ArrayBuffer whose data is a copy of <var>srcBuffer&#x2019;s</var> data\n        starting at <var>srcByteOffset</var>. This operation performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>srcBuffer</i>) is Object and it has an [[ArrayBufferData]]\n              <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>If <i>cloneConstructor</i> is not present, then\n            <ol class=\"block\">\n              <li>Let <i>cloneConstructor</i> be <a href=\"/sec/sec-speciesconstructor.html\">SpeciesConstructor</a>(<i>srcBuffer</i>,\n                  %ArrayBuffer%).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>cloneConstructor</i>).</li>\n              <li>If <a href=\"/sec/sec-isdetachedbuffer.html\">IsDetachedBuffer</a>(<i>srcBuffer</i>) is <b>true</b>, throw a\n                  <b>TypeError</b> exception.</li>\n            </ol>\n          </li>\n          <li>Else, <a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a>(<i>cloneConstructor</i>) is <b>true</b>.</li>\n          <li>Let <i>srcLength</i> be the value of <i>srcBuffer</i>&#x2019;s [[ArrayBufferByteLength]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>srcByteOffset</i> &#x2264; <i>srcLength</i>.</li>\n          <li>Let <i>cloneLength</i> be <i>srcLength</i> &#x2013; <i>srcByteOffset.</i></li>\n          <li>Let <i>srcBlock</i> be the value of <i>srcBuffer&#x2019;s</i> [[ArrayBufferData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Let <i>targetBuffer</i> be <a href=\"/sec/sec-allocatearraybuffer.html\">AllocateArrayBuffer</a>(<i>cloneConstructor</i>,\n              <i>cloneLength</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>targetBuffer</i>).</li>\n          <li>If <a href=\"/sec/sec-isdetachedbuffer.html\">IsDetachedBuffer</a>(<i>srcBuffer</i>) is <b>true</b>, throw a <b>TypeError</b>\n              exception.</li>\n          <li>Let <i>targetBlock</i> be the value of <i>targetBuffer&#x2019;s</i> [[ArrayBufferData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Perform <a href=\"/sec/sec-copydatablockbytes.html\">CopyDataBlockBytes</a>(<i>targetBlock</i>, 0, <i>srcBlock</i>,\n              <i>srcByteOffset</i>, <i>cloneLength</i>).</li>\n          <li>Return <i>targetBuffer</i>.</li>\n        </ol>\n      "}