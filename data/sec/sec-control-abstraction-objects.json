{"id":"sec-control-abstraction-objects","html":"\n  <div class=\"front\">\n    <h1><span class=\"secnum\" id=\"sec-25\"><a href=\"/sec/sec-control-abstraction-objects.html\" title=\"link to this section\">25</a></span>\n        Control Abstraction Objects</h1>\n  </div>\n\n  <section id=\"sec-iteration\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-25.1\"><a href=\"/sec/sec-iteration.html\" title=\"link to this section\">25.1</a></span> Iteration</h1>\n    </div>\n\n    <section id=\"sec-common-iteration-interfaces\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-25.1.1\"><a href=\"/sec/sec-common-iteration-interfaces.html\" title=\"link to this section\">25.1.1</a></span> Common Iteration Interfaces</h1>\n\n        <p>An interface is a set of property keys whose associated values match a specific specification. Any object that provides\n        all the properties as described by an interface&#x2019;s specification <i>conforms</i> to that interface. An interface is\n        not represented by a distinct object. There may be many separately implemented objects that conform to any interface. An\n        individual object may conform to multiple interfaces.</p>\n      </div>\n\n      <section id=\"sec-iterable-interface\">\n        <h1><span class=\"secnum\" id=\"sec-25.1.1.1\"><a href=\"/sec/sec-iterable-interface.html\" title=\"link to this section\">25.1.1.1</a></span> The <i>Iterable</i> Interface</h1>\n\n        <p>The <i>Iterable</i> interface includes the property described in <a href=\"/sec/table-52.html\">Table 52</a>:</p>\n\n        <figure>\n          <figcaption><span id=\"table-52\">Table 52</span> &#x2014; <i>Iterable</i> Interface Required Properties</figcaption>\n          <table class=\"real-table\">\n            <tr>\n              <th style=\"background-color: #A6A6A6\">Property</th>\n              <th style=\"background-color: #A6A6A6\">Value</th>\n              <th style=\"background-color: #A6A6A6\">Requirements</th>\n            </tr>\n            <tr>\n              <td><code>@@iterator</code></td>\n              <td>A function that returns an <i>Iterator</i> object.</td>\n              <td>The returned object must conform to the <i>Iterator</i> interface.</td>\n            </tr>\n          </table>\n        </figure>\n      </section>\n\n      <section id=\"sec-iterator-interface\">\n        <h1><span class=\"secnum\" id=\"sec-25.1.1.2\"><a href=\"/sec/sec-iterator-interface.html\" title=\"link to this section\">25.1.1.2</a></span> The <i>Iterator</i> Interface</h1>\n\n        <p>An object that implements the <i>Iterator</i> interface must include the property in <a href=\"/sec/table-53.html\">Table 53</a>.\n        Such objects may also implement the properties in <a href=\"/sec/table-54.html\">Table 54</a>.</p>\n\n        <figure>\n          <figcaption><span id=\"table-53\">Table 53</span> &#x2014; <i>Iterator</i> Interface Required Properties</figcaption>\n          <table class=\"real-table\">\n            <tr>\n              <th style=\"background-color: #A6A6A6\">Property</th>\n              <th style=\"background-color: #A6A6A6\">Value</th>\n              <th style=\"background-color: #A6A6A6\">Requirements</th>\n            </tr>\n            <tr>\n              <td><code>next</code></td>\n              <td>A function that returns an <i>IteratorResult</i> object.</td>\n              <td>The returned object must conform to the <i>IteratorResult</i> interface. If a previous call to the <code>next</code> method of an <i>Iterator</i> has returned an <i>IteratorResult</i> object whose <code>done</code> property is <b>true</b>, then all subsequent calls to the <code>next</code> method of that object should also return an <i>IteratorResult</i> object whose <code>done</code> property is <b>true</b>. However, this requirement is not enforced.</td>\n            </tr>\n          </table>\n        </figure>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> Arguments may be passed to the next function but their interpretation and validity is\n          dependent upon the target <i>Iterator</i>. The for-of statement and other common users of <i>Iterators</i> do not pass\n          any arguments, so <i>Iterator</i> objects that expect to be used in such a manner must be prepared to deal with being\n          called with no arguments.</p>\n        </div>\n\n        <figure>\n          <figcaption><span id=\"table-54\">Table 54</span> &#x2014; <i>Iterator</i> Interface Optional Properties</figcaption>\n          <table class=\"real-table\">\n            <tr>\n              <th style=\"background-color: #A6A6A6\">Property</th>\n              <th style=\"background-color: #A6A6A6\">Value</th>\n              <th style=\"background-color: #A6A6A6\">Requirements</th>\n            </tr>\n            <tr>\n              <td><code>return</code></td>\n              <td>A function that returns an <i>IteratorResult</i> object.</td>\n              <td>The returned object must conform to the <i>IteratorResult</i> interface. Invoking this method notifies the <i>Iterator</i> object that the caller does not intend to make any more <code>next</code> method calls to the <i>Iterator</i>. The returned <i>IteratorResult</i> object will typically have a <code>done</code> property whose value is <b>true</b>, and a <code>value</code> property with the value passed as the argument of the <code>return</code> method. However, this requirement is not enforced.</td>\n            </tr>\n            <tr>\n              <td><code>throw</code></td>\n              <td>A function that returns an <i>IteratorResult</i> object.</td>\n              <td>The returned object must conform to the <i>IteratorResult</i> interface. Invoking this method notifies the <i>Iterator</i> object that the caller has detected an error condition. The argument may be used to identify the error condition and typically will be an exception object. A typical response is to <code>throw</code> the value passed as the argument. If the method does not <code>throw</code>, the returned <i>IteratorResult</i> object will typically have a <code>done</code> property whose value is <b>true</b>.</td>\n            </tr>\n          </table>\n        </figure>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> Typically callers of these methods should check for their existence before invoking\n          them. Certain ECMAScript language features including <code>for</code>-<code>of</code>, <code>yield*</code>, and array\n          destructuring call these methods after performing an existence check. Most ECMAScript library functions that accept\n          <i>Iterable</i> objects as arguments also conditionally call them.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-iteratorresult-interface\">\n        <h1><span class=\"secnum\" id=\"sec-25.1.1.3\"><a href=\"/sec/sec-iteratorresult-interface.html\" title=\"link to this section\">25.1.1.3</a></span> The IteratorResult  Interface</h1>\n\n        <p>The <i>IteratorResult</i> interface includes the properties  listed in <a href=\"/sec/table-55.html\">Table 55</a>:</p>\n\n        <figure>\n          <figcaption><span id=\"table-55\">Table 55</span> &#x2014; <i>IteratorResult</i> Interface Properties</figcaption>\n          <table class=\"real-table\">\n            <tr>\n              <th style=\"background-color: #A6A6A6\">Property</th>\n              <th style=\"background-color: #A6A6A6\">Value</th>\n              <th style=\"background-color: #A6A6A6\">Requirements</th>\n            </tr>\n            <tr>\n              <td><code>done</code></td>\n              <td>Either <span class=\"value\">true</span> or <span class=\"value\">false</span>.</td>\n              <td>This is the result status of an <i>iterator</i> <code>next</code> method call. If the end of the iterator was reached <code>done</code> is <span class=\"value\">true</span>. If the end was not reached <code>done</code> is <span class=\"value\">false</span> and a value is available. If a <code>done</code> property (either own or inherited) does not exist, it is consider to have the value <span class=\"value\">false</span>.</td>\n            </tr>\n            <tr>\n              <td><code>value</code></td>\n              <td>Any <a href=\"/sec/sec-ecmascript-language-types.html\">ECMAScript language value</a>.</td>\n              <td>If done is <span class=\"value\">false</span>, this is the current iteration element value. If done is <span class=\"value\">true</span>, this is the return value of the iterator, if it supplied one. If the iterator does not have a return value, <code>value</code> is <span class=\"value\">undefined</span>. In that case, the <code>value</code> property may be absent from the conforming object if it does not inherit an explicit <code>value</code> property.</td>\n            </tr>\n          </table>\n        </figure>\n      </section>\n    </section>\n\n    <section id=\"sec-%iteratorprototype%-object\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-25.1.2\"><a href=\"/sec/sec-%iteratorprototype%-object.html\" title=\"link to this section\">25.1.2</a></span> The %IteratorPrototype% Object</h1>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        %IteratorPrototype% object is the intrinsic object %ObjectPrototype% (<a href=\"/sec/sec-properties-of-the-object-prototype-object.html\">19.1.3</a>). The %IteratorPrototype% object is an ordinary object.\n        The initial value of the [[Extensible]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        %IteratorPrototype% object is <b>true</b>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> All objects defined in this specification that implement the Iterator interface also\n          inherit from %IteratorPrototype%. ECMAScript code may also define objects that inherit from %IteratorPrototype%.The\n          %IteratorPrototype% object provides a place where additional methods that are applicable to all iterator objects may be\n          added.</p>\n\n          <p>The following expression is one way that ECMAScript code can access the %IteratorPrototype% object:</p>\n\n          <p><code><a href=\"/sec/sec-object.getprototypeof.html\">Object.getPrototypeOf</a>(<a href=\"/sec/sec-object.getprototypeof.html\">Object.getPrototypeOf</a>([][Symbol.iterator]()))</code></p>\n\n          <p></p>\n        </div>\n      </div>\n\n      <section id=\"sec-%iteratorprototype%-@@iterator\">\n        <h1><span class=\"secnum\" id=\"sec-25.1.2.1\"><a href=\"/sec/sec-%iteratorprototype%-@@iterator.html\" title=\"link to this section\">25.1.2.1</a></span> %IteratorPrototype% [ @@iterator ] (   )</h1>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Return the <b>this</b> value.</li>\n        </ol>\n\n        <p>The value of the <code>name</code> property of this function is <code>&quot;[Symbol.iterator]&quot;</code>.</p>\n      </section>\n    </section>\n  </section>\n\n  <section id=\"sec-generatorfunction-objects\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-25.2\"><a href=\"/sec/sec-generatorfunction-objects.html\" title=\"link to this section\">25.2</a></span>\n          GeneratorFunction Objects</h1>\n\n      <p>Generator Function objects are constructor functions that are usually created by evaluating <span class=\"nt\">GeneratorDeclaration</span>, <span class=\"nt\">GeneratorExpression</span>, and <span class=\"nt\">GeneratorMethod</span> syntactic productions. They may also be created by calling the %GeneratorFunction%\n      intrinsic.</p>\n\n      <figure>\n        <img alt=\"A staggering variety of boxes and arrows.\" height=\"958\" src=\"figure-2.png\" width=\"968\">\n        <figcaption>Figure 2 (informative) &#x2014; Generator Objects Relationships</figcaption>\n      </figure>\n    </div>\n\n    <section id=\"sec-generatorfunction-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-25.2.1\"><a href=\"/sec/sec-generatorfunction-constructor.html\" title=\"link to this section\">25.2.1</a></span> The GeneratorFunction Constructor</h1>\n\n        <p>The <code>GeneratorFunction</code> constructor is the %GeneratorFunction% intrinsic. When\n        <code>GeneratorFunction</code> is called as a function rather than as a constructor, it creates and initializes a new\n        GeneratorFunction object. Thus the function call <code>GeneratorFunction</code> <code><b>(</b>&#x2026;<b>)</b></code> is\n        equivalent to the object creation expression <code>new GeneratorFunction</code> <code><b>(</b>&#x2026;<b>)</b></code> with\n        the same arguments.</p>\n\n        <p><code>GeneratorFunction</code> is designed to be subclassable. It may be used as the value of an <code>extends</code>\n        clause of a class definition. Subclass constructors that intend to inherit the specified <code>GeneratorFunction</code>\n        behaviour must include a <code>super</code> call to the <code>GeneratorFunction</code> constructor to create and\n        initialize subclass instances with the internal slots necessary for built-in GeneratorFunction behaviour. All ECMAScript\n        syntactic forms for defining generator function objects create direct instances of <code>GeneratorFunction</code>. There\n        is no syntactic means to create instances of <code>GeneratorFunction</code> subclasses.</p>\n      </div>\n\n      <section id=\"sec-generatorfunction\">\n        <h1><span class=\"secnum\" id=\"sec-25.2.1.1\"><a href=\"/sec/sec-generatorfunction.html\" title=\"link to this section\">25.2.1.1</a></span> GeneratorFunction (p1, p2, &#x2026; , pn, body)</h1>\n\n        <p>The last argument specifies the body (executable code) of a generator function; any preceding arguments specify formal\n        parameters.</p>\n\n        <p class=\"normalbefore\">When the <code>GeneratorFunction</code> function is called with some arguments <var>p1</var>,\n        <var>p2</var>, &#x2026; , <var>pn</var>, <var>body</var> (where <var>n</var> might be <span style=\"font-family: Times New\n        Roman\">0</span>, that is, there are no &#x201C;<var>p</var>&#x201D; arguments, and where <var>body</var> might also not be\n        provided), the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>C</i> be the active function object.</li>\n          <li>Let <i>args</i> be the <i>argumentsList</i> that was passed to this function by [[Call]] or [[Construct]].</li>\n          <li>Return <a href=\"/sec/sec-createdynamicfunction.html\">CreateDynamicFunction</a>(<i>C</i>, NewTarget, <code>&quot;generator&quot;</code>,\n              <i>args</i>).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> See NOTE for <a href=\"/sec/sec-function-p1-p2-pn-body.html\">19.2.1.1</a>.</p>\n        </div>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-generatorfunction-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-25.2.2\"><a href=\"/sec/sec-properties-of-the-generatorfunction-constructor.html\" title=\"link to this section\">25.2.2</a></span> Properties of the GeneratorFunction Constructor</h1>\n\n        <p>The <code>GeneratorFunction</code> constructor is a standard built-in function object that inherits from the\n        <code>Function</code> constructor. The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the <code>GeneratorFunction</code> constructor\n        is the intrinsic object %Function%.</p>\n\n        <p>The value of the [[Extensible]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        GeneratorFunction constructor is <b>true</b>.</p>\n\n        <p>The value of the <code>name</code> property of the GeneratorFunction is <code>&quot;<b>GeneratorFunction</b>&quot;</code>.</p>\n\n        <p>The <code>GeneratorFunction</code> constructor has the following properties:</p>\n      </div>\n\n      <section id=\"sec-generatorfunction.length\">\n        <h1><span class=\"secnum\" id=\"sec-25.2.2.1\"><a href=\"/sec/sec-generatorfunction.length.html\" title=\"link to this section\">25.2.2.1</a></span> GeneratorFunction.length</h1>\n\n        <p>This is a data property with a value of 1. This property has the attributes { [[Writable]]: <b>false</b>,\n        [[Enumerable]]: <b>false</b>, [[Configurable]]: <b>true</b> }.</p>\n      </section>\n\n      <section id=\"sec-generatorfunction.prototype\">\n        <h1><span class=\"secnum\" id=\"sec-25.2.2.2\"><a href=\"/sec/sec-generatorfunction.prototype.html\" title=\"link to this section\">25.2.2.2</a></span> GeneratorFunction.prototype</h1>\n\n        <p>The initial value of <code>GeneratorFunction.prototype</code> is the intrinsic object %Generator%.</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-generatorfunction-prototype-object\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-25.2.3\"><a href=\"/sec/sec-properties-of-the-generatorfunction-prototype-object.html\" title=\"link to this section\">25.2.3</a></span> Properties of the GeneratorFunction Prototype Object</h1>\n\n        <p>The GeneratorFunction prototype object is an ordinary object. It is not a function object and does not have an\n        [[ECMAScriptCode]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> or any other of the\n        internal slots listed in <a href=\"/sec/table-27.html\">Table 27</a> or <a href=\"/sec/table-56.html\">Table 56</a>. In addition to being the\n        value of the prototype property of the %GeneratorFunction% intrinsic, it is the %Generator% intrinsic (see Figure 2).</p>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        GeneratorFunction prototype object is the %FunctionPrototype% intrinsic object. The initial value of the [[Extensible]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the GeneratorFunction prototype object is\n        <b>true</b>.</p>\n      </div>\n\n      <section id=\"sec-generatorfunction.prototype.constructor\">\n        <h1><span class=\"secnum\" id=\"sec-25.2.3.1\"><a href=\"/sec/sec-generatorfunction.prototype.constructor.html\" title=\"link to this section\">25.2.3.1</a></span> GeneratorFunction.prototype.constructor</h1>\n\n        <p>The initial value of <code>GeneratorFunction.prototype.constructor</code> is the intrinsic object\n        %GeneratorFunction%.</p>\n\n        <p>This property has the attributes { [[Writable]]: <span class=\"value\">false</span>, [[Enumerable]]: <span class=\"value\">false</span>, [[Configurable]]: <span class=\"value\">true</span> }.</p>\n      </section>\n\n      <section id=\"sec-generatorfunction.prototype.prototype\">\n        <h1><span class=\"secnum\" id=\"sec-25.2.3.2\"><a href=\"/sec/sec-generatorfunction.prototype.prototype.html\" title=\"link to this section\">25.2.3.2</a></span> GeneratorFunction.prototype.prototype</h1>\n\n        <p>The value of <code>GeneratorFunction.prototype.prototype</code> is the %GeneratorPrototype% intrinsic object.</p>\n\n        <p>This property has the attributes { [[Writable]]: <span class=\"value\">false</span>, [[Enumerable]]: <span class=\"value\">false</span>, [[Configurable]]: <span class=\"value\">true</span> }.</p>\n      </section>\n\n      <section id=\"sec-generatorfunction.prototype-@@tostringtag\">\n        <h1><span class=\"secnum\" id=\"sec-25.2.3.3\"><a href=\"/sec/sec-generatorfunction.prototype-@@tostringtag.html\" title=\"link to this section\">25.2.3.3</a></span> GeneratorFunction.prototype [ @@toStringTag ]</h1>\n\n        <p>The initial value of the @@toStringTag property is the String value <code>&quot;GeneratorFunction&quot;</code>.</p>\n\n        <p>This property has the attributes { [[Writable]]: <span class=\"value\">false</span>, [[Enumerable]]: <span class=\"value\">false</span>, [[Configurable]]: <span class=\"value\">true</span> }.</p>\n      </section>\n    </section>\n\n    <section id=\"sec-generatorfunction-instances\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-25.2.4\"><a href=\"/sec/sec-generatorfunction-instances.html\" title=\"link to this section\">25.2.4</a></span> GeneratorFunction Instances</h1>\n\n        <p>Every GeneratorFunction instance is an <a href=\"/sec/sec-ecmascript-function-objects.html\">ECMAScript function object</a> and\n        has the internal slots listed in <a href=\"/sec/table-27.html\">Table 27</a>. The value of the [[FunctionKind]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> for all such instances is\n        <code>&quot;generator&quot;</code>.</p>\n\n        <p>Each GeneratorFunction instance has the following own properties:</p>\n      </div>\n\n      <section id=\"sec-generatorfunction-instances-length\">\n        <h1><span class=\"secnum\" id=\"sec-25.2.4.1\"><a href=\"/sec/sec-generatorfunction-instances-length.html\" title=\"link to this section\">25.2.4.1</a></span> length</h1>\n\n        <p>The value of the <code>length</code> property is an integer that indicates the typical number of arguments expected by\n        the GeneratorFunction. However, the language permits the function to be invoked with some other number of arguments. The\n        behaviour of a GeneratorFunction when invoked on a number of arguments other than the number specified by its\n        <code>length</code> property depends on the function.</p>\n\n        <p>This property has the attributes {&#xA0;[[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>true</b>&#xA0;}.</p>\n      </section>\n\n      <section id=\"sec-generatorfunction-instances-name\">\n        <h1><span class=\"secnum\" id=\"sec-25.2.4.2\"><a href=\"/sec/sec-generatorfunction-instances-name.html\" title=\"link to this section\">25.2.4.2</a></span> name</h1>\n\n        <p>The specification for the <code>name</code> property of Function instances given in <a href=\"/sec/sec-function-instances-name.html\">19.2.4.2</a> also applies to GeneratorFunction instances.</p>\n      </section>\n\n      <section id=\"sec-generatorfunction-instances-prototype\">\n        <h1><span class=\"secnum\" id=\"sec-25.2.4.3\"><a href=\"/sec/sec-generatorfunction-instances-prototype.html\" title=\"link to this section\">25.2.4.3</a></span> prototype</h1>\n\n        <p>Whenever a GeneratorFunction instance is created another ordinary object is also created and is the initial value of\n        the generator function&#x2019;s <code>prototype</code> property. The value of the prototype property is used to initialize\n        the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of a newly created Generator\n        object when the generator function object is invoked using either [[Call]] or [[Construct]].</p>\n\n        <p>This property has the attributes {&#xA0;[[Writable]]: <span class=\"value\">true</span>, [[Enumerable]]: <span class=\"value\">false</span>, [[Configurable]]: <span class=\"value\">false</span>&#xA0;}.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> Unlike function instances, the object that is the value of the a\n          GeneratorFunction&#x2019;s <code>prototype</code> property does not have a <code>constructor</code> property whose value\n          is the GeneratorFunction instance.</p>\n        </div>\n      </section>\n    </section>\n  </section>\n\n  <section id=\"sec-generator-objects\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-25.3\"><a href=\"/sec/sec-generator-objects.html\" title=\"link to this section\">25.3</a></span>\n          Generator Objects</h1>\n\n      <p>A Generator object is an instance of a generator function and conforms to both the <i>Iterator</i> and <i>Iterable</i>\n      interfaces.</p>\n\n      <p>Generator instances directly inherit properties from the object that is the value of the <code>prototype</code> property\n      of the Generator function that created the instance. Generator instances indirectly inherit properties from the Generator\n      Prototype intrinsic, %GeneratorPrototype%.</p>\n    </div>\n\n    <section id=\"sec-properties-of-generator-prototype\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-25.3.1\"><a href=\"/sec/sec-properties-of-generator-prototype.html\" title=\"link to this section\">25.3.1</a></span> Properties of Generator Prototype</h1>\n\n        <p>The Generator prototype object is the %GeneratorPrototype% intrinsic. It is also the initial value of the\n        <code>prototype</code> property of the %Generator% intrinsic (the <a href=\"/sec/sec-generatorfunction.prototype.html\">GeneratorFunction.prototype</a>).</p>\n\n        <p>The Generator prototype is an ordinary object. It is not a Generator instance and does not have a [[GeneratorState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</p>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        Generator prototype object is the intrinsic object %IteratorPrototype% (<a href=\"/sec/sec-%iteratorprototype%-object.html\">25.1.2</a>). The initial value of the [[Extensible]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the Generator prototype object is\n        <b>true</b>.</p>\n\n        <p>All Generator instances indirectly inherit properties of the Generator prototype object.</p>\n      </div>\n\n      <section id=\"sec-generator.prototype.constructor\">\n        <h1><span class=\"secnum\" id=\"sec-25.3.1.1\"><a href=\"/sec/sec-generator.prototype.constructor.html\" title=\"link to this section\">25.3.1.1</a></span> Generator.prototype.constructor</h1>\n\n        <p>The initial value of <code>Generator.prototype.constructor</code> is the intrinsic object %Generator%.</p>\n\n        <p>This property has the attributes { [[Writable]]: <span class=\"value\">false</span>, [[Enumerable]]: <span class=\"value\">false</span>, [[Configurable]]: <span class=\"value\">true</span> }.</p>\n      </section>\n\n      <section id=\"sec-generator.prototype.next\">\n        <h1><span class=\"secnum\" id=\"sec-25.3.1.2\"><a href=\"/sec/sec-generator.prototype.next.html\" title=\"link to this section\">25.3.1.2</a></span> Generator.prototype.next ( value )</h1>\n\n        <p class=\"normalbefore\">The <code>next</code> method performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>g</i> be the <b>this</b> value.</li>\n          <li>Return <a href=\"/sec/sec-generatorresume.html\">GeneratorResume</a>(<i>g</i>, <i>value</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-generator.prototype.return\">\n        <h1><span class=\"secnum\" id=\"sec-25.3.1.3\"><a href=\"/sec/sec-generator.prototype.return.html\" title=\"link to this section\">25.3.1.3</a></span> Generator.prototype.return ( value )</h1>\n\n        <p class=\"normalbefore\">The <code>return</code> method performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>g</i> be the <b>this</b> value.</li>\n          <li>Let <i>C</i> be <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family: sans-serif\">return</span>, [[value]]: <i>value</i>, [[target]]: <span style=\"font-family:\n              sans-serif\">empty</span>}.</li>\n          <li>Return <a href=\"/sec/sec-generatorresumeabrupt.html\">GeneratorResumeAbrupt</a>(<i>g</i>, <i>C</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-generator.prototype.throw\">\n        <h1><span class=\"secnum\" id=\"sec-25.3.1.4\"><a href=\"/sec/sec-generator.prototype.throw.html\" title=\"link to this section\">25.3.1.4</a></span> Generator.prototype.throw ( exception )</h1>\n\n        <p class=\"normalbefore\">The <code>throw</code> method performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>g</i> be the <b>this</b> value.</li>\n          <li>Let <i>C</i> be <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family: sans-serif\">throw</span>, [[value]]: <i>exception</i>, [[target]]: <span style=\"font-family:\n              sans-serif\">empty</span>}.</li>\n          <li>Return <a href=\"/sec/sec-generatorresumeabrupt.html\">GeneratorResumeAbrupt</a>(<i>g</i>, <i>C</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-generator.prototype-@@tostringtag\">\n        <h1><span class=\"secnum\" id=\"sec-25.3.1.5\"><a href=\"/sec/sec-generator.prototype-@@tostringtag.html\" title=\"link to this section\">25.3.1.5</a></span> Generator.prototype [ @@toStringTag ]</h1>\n\n        <p>The initial value of the @@toStringTag property is the String value <code>&quot;Generator&quot;</code>.</p>\n\n        <p>This property has the attributes { [[Writable]]: <span class=\"value\">false</span>, [[Enumerable]]: <span class=\"value\">false</span>, [[Configurable]]: <span class=\"value\">true</span> }.</p>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-generator-instances\">\n      <h1><span class=\"secnum\" id=\"sec-25.3.2\"><a href=\"/sec/sec-properties-of-generator-instances.html\" title=\"link to this section\">25.3.2</a></span> Properties of Generator Instances</h1>\n\n      <p>Generator instances are initially created with the internal slots described in <a href=\"/sec/table-56.html\">Table 56</a>.</p>\n\n      <figure>\n        <figcaption><span id=\"table-56\">Table 56</span> &#x2014; Internal Slots of Generator Instances</figcaption>\n        <table class=\"real-table\">\n          <tr>\n            <th>Internal Slot</th>\n            <th>Description</th>\n          </tr>\n          <tr>\n            <td>[[GeneratorState]]</td>\n            <td>The current execution state of the generator. The possible values are: <b>undefined</b>, <code>&quot;suspendedStart&quot;</code><span style=\"font-family: Times New Roman\">,</span> <code>&quot;suspendedYield&quot;</code><span style=\"font-family: Times New Roman\">,</span> <code>&quot;executing&quot;</code>, and <code>&quot;completed&quot;</code><span style=\"font-family: Times New Roman\">.</span></td>\n          </tr>\n          <tr>\n            <td>[[GeneratorContext]]</td>\n            <td>The <a href=\"/sec/sec-execution-contexts.html\">execution context</a> that is used when executing the code of this generator.</td>\n          </tr>\n        </table>\n      </figure>\n    </section>\n\n    <section id=\"sec-generator-abstract-operations\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-25.3.3\"><a href=\"/sec/sec-generator-abstract-operations.html\" title=\"link to this section\">25.3.3</a></span> Generator Abstract Operations</h1>\n      </div>\n\n      <section id=\"sec-generatorstart\">\n        <h1><span class=\"secnum\" id=\"sec-25.3.3.1\"><a href=\"/sec/sec-generatorstart.html\" title=\"link to this section\">25.3.3.1</a></span>\n            GeneratorStart (generator, generatorBody)</h1>\n\n        <p class=\"normalbefore\">The abstract operation GeneratorStart with arguments <span style=\"font-family: Times New\n        Roman\"><i>generator</i> and <i>generatorBody</i></span> performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: The value of <i>generator&#x2019;s</i> [[GeneratorState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is <b>undefined</b>.</li>\n          <li>Let <i>genContext</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n          <li>Set the Generator component of <i>genContext</i> to <i>generator.</i></li>\n          <li>Set the code evaluation state of <i>genContext</i> such that when evaluation is resumed for that <a href=\"/sec/sec-execution-contexts.html\">execution context</a> the following steps will be performed:\n            <ol class=\"nested proc\">\n              <li>Let <i>result</i> be the result of evaluating <i>generatorBody</i>.</li>\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: If we return here, the generator either threw an exception or\n                  performed either an implicit or explicit return.</li>\n              <li>Remove <i>genContext</i> from <a href=\"/sec/sec-execution-contexts.html\">the execution context stack</a> and restore the\n                  <a href=\"/sec/sec-execution-contexts.html\">execution context</a> that is at the top of <a href=\"/sec/sec-execution-contexts.html\">the execution context stack</a> as <a href=\"/sec/sec-execution-contexts.html\">the running\n                  execution context</a>.</li>\n              <li>Set <i>generator&#x2019;s</i> [[GeneratorState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <code>&quot;completed&quot;</code>.</li>\n              <li>Once a generator enters the <code>&quot;completed&quot;</code> state it never leaves it and its associated <a href=\"/sec/sec-execution-contexts.html\">execution context</a> is never resumed. Any execution state associated with\n                  <i>generator</i> can be discarded at this point.</li>\n              <li>If <i>result</i> is a normal completion, let <i>resultValue</i> be <b>undefined</b>.</li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>If <i>result</i>.[[type]] is <span style=\"font-family: sans-serif\">return</span>, let <i>resultValue</i> be\n                      <i>result</i>.[[value]].</li>\n                  <li>Else, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>result</i>).</li>\n                </ol>\n              </li>\n              <li>Return <a href=\"/sec/sec-createiterresultobject.html\">CreateIterResultObject</a>(<i>resultValue</i>, <b>true</b>).</li>\n            </ol>\n          </li>\n          <li>Set <i>generator&#x2019;s</i> [[GeneratorContext]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a> to <i>genContext</i>.</li>\n          <li>Set <i>generator&#x2019;s</i> [[GeneratorState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a> to <code>&quot;suspendedStart&quot;</code>.</li>\n          <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<b>undefined</b>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-generatorvalidate\">\n        <h1><span class=\"secnum\" id=\"sec-25.3.3.2\"><a href=\"/sec/sec-generatorvalidate.html\" title=\"link to this section\">25.3.3.2</a></span> GeneratorValidate ( generator )</h1>\n\n        <p class=\"normalbefore\">The abstract operation GeneratorValidate with argument <var>generator</var> performs the following\n        steps:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>generator</i>) is not Object, throw a\n              <b>TypeError</b> exception.</li>\n          <li>If <i>generator</i> does not have a [[GeneratorState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>, throw a <b>TypeError</b> exception.</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>generator</i> also has a [[GeneratorContext]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Let <i>state</i> be the value of <i>generator&#x2019;s</i> [[GeneratorState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>If <i>state</i> is <code>&quot;executing&quot;</code>, throw a <b>TypeError</b> exception.</li>\n          <li>Return <i>state</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-generatorresume\">\n        <h1><span class=\"secnum\" id=\"sec-25.3.3.3\"><a href=\"/sec/sec-generatorresume.html\" title=\"link to this section\">25.3.3.3</a></span>\n            GeneratorResume ( generator, value )</h1>\n\n        <p class=\"normalbefore\">The abstract operation GeneratorResume with arguments <span style=\"font-family: Times New\n        Roman\"><i>generator</i> and <i>value</i></span> performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>state</i> be <a href=\"/sec/sec-generatorvalidate.html\">GeneratorValidate</a>(<i>generator</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>state</i>).</li>\n          <li>If <i>state</i> is <code>&quot;completed&quot;</code>, return <a href=\"/sec/sec-createiterresultobject.html\">CreateIterResultObject</a>(<b>undefined</b>, <b>true</b>).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>state</i> is either <code>&quot;suspendedStart&quot;</code> or\n              <code>&quot;suspendedYield&quot;</code>.</li>\n          <li>Let <i>genContext</i> be the value of <i>generator&#x2019;s</i> [[GeneratorContext]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Let <i>methodContext</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n          <li><a href=\"/sec/sec-execution-contexts.html\">Suspend</a> <i>methodContext</i>.</li>\n          <li>Set <i>generator&#x2019;s</i> [[GeneratorState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a> to <code>&quot;executing&quot;</code>.</li>\n          <li>Push <i>genContext</i> onto <a href=\"/sec/sec-execution-contexts.html\">the execution context stack</a>; <i>genContext</i> is\n              now <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n          <li>Resume the <a href=\"/sec/sec-execution-contexts.html\">suspended</a> evaluation of <i>genContext</i> using <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>value</i>) as the result of the operation that <a href=\"/sec/sec-execution-contexts.html\">suspended</a> it. Let <i>result</i> be the value returned by the resumed\n              computation.</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: When we return here, <i>genContext</i> has already been removed\n              from <a href=\"/sec/sec-execution-contexts.html\">the execution context stack</a> and <i>methodContext</i> is <a href=\"/sec/sec-execution-contexts.html\">the currently running execution context</a>.</li>\n          <li>Return <i>result</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-generatorresumeabrupt\">\n        <h1><span class=\"secnum\" id=\"sec-25.3.3.4\"><a href=\"/sec/sec-generatorresumeabrupt.html\" title=\"link to this section\">25.3.3.4</a></span> GeneratorResumeAbrupt(generator, abruptCompletion)</h1>\n\n        <p class=\"normalbefore\">The abstract operation GeneratorResumeAbrupt with arguments <span style=\"font-family: Times New\n        Roman\"><i>generator</i> and <i>abruptCompletion</i></span> performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>state</i> be <a href=\"/sec/sec-generatorvalidate.html\">GeneratorValidate</a>(<i>generator</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>state</i>).</li>\n          <li>If <i>state</i> is <code>&quot;suspendedStart&quot;</code>, then\n            <ol class=\"block\">\n              <li>Set <i>generator&#x2019;s</i> [[GeneratorState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <code>&quot;completed&quot;</code>.</li>\n              <li>Once a generator enters the <code>&quot;completed&quot;</code> state it never leaves it and its associated <a href=\"/sec/sec-execution-contexts.html\">execution context</a> is never resumed. Any execution state associated with\n                  <i>generator</i> can be discarded at this point.</li>\n              <li>Let <i>state</i> be <code>&quot;completed&quot;</code>.</li>\n            </ol>\n          </li>\n          <li>If <i>state</i> is <code>&quot;completed&quot;</code>, then\n            <ol class=\"block\">\n              <li>If <i>abruptCompletion</i>.[[type]] is <span style=\"font-family: sans-serif\">return</span>, then\n                <ol class=\"block\">\n                  <li>Return <a href=\"/sec/sec-createiterresultobject.html\">CreateIterResultObject</a>(<i>abruptCompletion</i>.[[value]],\n                      <b>true</b>).</li>\n                </ol>\n              </li>\n              <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>abruptCompletion</i>).</li>\n            </ol>\n          </li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>state</i> is <code>&quot;suspendedYield&quot;</code>.</li>\n          <li>Let <i>genContext</i> be the value of <i>generator&#x2019;s</i> [[GeneratorContext]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Let <i>methodContext</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n          <li><a href=\"/sec/sec-execution-contexts.html\">Suspend</a> <i>methodContext</i>.</li>\n          <li>Set <i>generator&#x2019;s</i> [[GeneratorState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a> to <code>&quot;executing&quot;</code>.</li>\n          <li>Push <i>genContext</i> onto <a href=\"/sec/sec-execution-contexts.html\">the execution context stack</a>; <i>genContext</i> is\n              now <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n          <li>Resume the <a href=\"/sec/sec-execution-contexts.html\">suspended</a> evaluation of <i>genContext</i> using\n              <i>abruptCompletion</i> as the result of the operation that <a href=\"/sec/sec-execution-contexts.html\">suspended</a> it. Let\n              <i>result</i> be the completion record returned by the resumed computation.</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: When we return here, <i>genContext</i> has already been removed\n              from <a href=\"/sec/sec-execution-contexts.html\">the execution context stack</a> and <i>methodContext</i> is <a href=\"/sec/sec-execution-contexts.html\">the currently running execution context</a>.</li>\n          <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>result</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-generatoryield\">\n        <h1><span class=\"secnum\" id=\"sec-25.3.3.5\"><a href=\"/sec/sec-generatoryield.html\" title=\"link to this section\">25.3.3.5</a></span>\n            GeneratorYield ( iterNextObj )</h1>\n\n        <p class=\"normalbefore\">The abstract operation GeneratorYield with argument <var>iterNextObj</var> performs the following\n        steps:</p>\n\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>iterNextObj</i> is an Object that implements the\n              <i>IteratorResult</i> interface.</li>\n          <li>Let <i>genContext</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>genContext</i> is the <a href=\"/sec/sec-execution-contexts.html\">execution context</a> of a generator.</li>\n          <li>Let <i>generator</i> be the value of the Generator component of <i>genContext</i>.</li>\n          <li>Set the value of <i>generator&#x2019;s</i> [[GeneratorState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <code>&quot;suspendedYield&quot;</code>.</li>\n          <li>Remove <i>genContext</i> from <a href=\"/sec/sec-execution-contexts.html\">the execution context stack</a> and restore the <a href=\"/sec/sec-execution-contexts.html\">execution context</a> that is at the top of <a href=\"/sec/sec-execution-contexts.html\">the\n              execution context stack</a> as <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n          <li>Set the code evaluation state of <i>genContext</i> such that when evaluation is resumed with a <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a> <i>resumptionValue</i> the following steps will be\n              performed:\n            <ol class=\"nested proc\">\n              <li>Return <i>resumptionValue</i>.</li>\n              <li>NOTE:  This returns to the evaluation of the <span class=\"nt\">YieldExpression</span> production that originally\n                  called this abstract operation.</li>\n            </ol>\n          </li>\n          <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>iterNextObj</i>).</li>\n          <li><span style=\"font-family: sans-serif\">NOTE:  This returns to the evaluation of the operation that had most\n              previously resumed evaluation of</span> <i>genContext</i>.</li>\n        </ol>\n      </section>\n    </section>\n  </section>\n\n  <section id=\"sec-promise-objects\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-25.4\"><a href=\"/sec/sec-promise-objects.html\" title=\"link to this section\">25.4</a></span> Promise\n          Objects</h1>\n\n      <p>A Promise is an object that is used as a placeholder for the eventual results of a deferred (and possibly asynchronous)\n      computation.</p>\n\n      <p class=\"normalbefore\">Any Promise object is in one of three mutually exclusive states: <i>fulfilled</i>, <i>rejected</i>,\n      and <i>pending</i>:</p>\n\n      <ul>\n        <li>\n          <p>A promise <code>p</code> is fulfilled if <code>p.then(f, r)</code> will immediately enqueue a Job to call the\n          function <code>f</code>.</p>\n        </li>\n\n        <li>\n          <p>A promise <code>p</code> is rejected if <code>p.then(f, r)</code> will immediately enqueue a Job to call the function\n          <code>r</code>.</p>\n        </li>\n\n        <li>\n          <p>A promise is pending if it is neither fulfilled nor rejected.</p>\n        </li>\n      </ul>\n\n      <p>A promise is said to be <i>settled</i> if it is not pending, i.e. if it is either fulfilled or rejected.</p>\n\n      <p>A promise is <i>resolved</i> if it is settled or if it has been &#x201C;locked in&#x201D; to match the state of another\n      promise. Attempting to resolve or reject a resolved promise has no effect. A promise is <i>unresolved</i> if it is not\n      resolved. An unresolved promise is always in the pending state. A resolved promise may be pending, fulfilled or\n      rejected.</p>\n    </div>\n\n    <section id=\"sec-promise-abstract-operations\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.1\"><a href=\"/sec/sec-promise-abstract-operations.html\" title=\"link to this section\">25.4.1</a></span> Promise Abstract Operations</h1>\n      </div>\n\n      <section id=\"sec-promisecapability-records\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.1\"><a href=\"/sec/sec-promisecapability-records.html\" title=\"link to this section\">25.4.1.1</a></span> PromiseCapability Records</h1>\n\n          <p>A PromiseCapability is a Record value used to encapsulate a promise object along with the functions that are capable\n          of resolving or rejecting that promise object. PromiseCapability records are produced by the <a href=\"/sec/sec-newpromisecapability.html\">NewPromiseCapability</a> abstract operation.</p>\n\n          <p>PromiseCapability Records have the fields listed in <a href=\"/sec/table-57.html\">Table 57</a>.</p>\n\n          <figure>\n            <figcaption><span id=\"table-57\">Table 57</span> &#x2014; PromiseCapability Record Fields</figcaption>\n            <table class=\"real-table\">\n              <tr>\n                <th>Field Name</th>\n                <th>Value</th>\n                <th>Meaning</th>\n              </tr>\n              <tr>\n                <td>[[Promise]]</td>\n                <td>An object</td>\n                <td>An object that is usable as a promise.</td>\n              </tr>\n              <tr>\n                <td>[[Resolve]]</td>\n                <td>A function object</td>\n                <td>The function that is used to resolve the given promise object.</td>\n              </tr>\n              <tr>\n                <td>[[Reject]]</td>\n                <td>A function object</td>\n                <td>The function that is used to reject the given promise object.</td>\n              </tr>\n            </table>\n          </figure>\n        </div>\n\n        <section id=\"sec-ifabruptrejectpromise\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.1.1\"><a href=\"/sec/sec-ifabruptrejectpromise.html\" title=\"link to this section\">25.4.1.1.1</a></span> IfAbruptRejectPromise ( value, capability )</h1>\n\n          <p class=\"normalbefore\">IfAbruptRejectPromise is a short hand for a sequence of algorithm steps that use a\n          PromiseCapability record. An algorithm step of the form:</p>\n\n          <ol class=\"proc\">\n            <li>IfAbruptRejectPromise(<i>value</i>, <i>capability</i>).</li>\n          </ol>\n\n          <p>means the same thing as:</p>\n\n          <ol class=\"proc\">\n            <li>If <i>value</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>,\n              <ol class=\"block\">\n                <li>Let <i>rejectResult</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>capability</i>.[[Reject]], <b>undefined</b>,\n                    &#xAB;<i>value</i>.[[value]]&#xBB;).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>rejectResult</i>).</li>\n                <li>Return <i>capability</i>.[[Promise]].</li>\n              </ol>\n            </li>\n            <li>Else if <i>value</i> is a <a href=\"/sec/sec-completion-record-specification-type.html\">Completion Record</a>, let\n                <i>value</i> be <i>value</i>.[[value]].</li>\n          </ol>\n        </section>\n      </section>\n\n      <section id=\"sec-promisereaction-records\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.1.2\"><a href=\"/sec/sec-promisereaction-records.html\" title=\"link to this section\">25.4.1.2</a></span> PromiseReaction Records</h1>\n\n        <p>The PromiseReaction is a Record value used to store information about how a promise should react when it becomes\n        resolved or rejected with a given value. PromiseReaction records are created by the <code>then</code> method of the\n        Promise prototype, and are used by a <a href=\"/sec/sec-promisereactionjob.html\">PromiseReactionJob</a>.</p>\n\n        <p>PromiseReaction records have the fields listed in <a href=\"/sec/table-58.html\">Table 58</a>.</p>\n\n        <figure>\n          <figcaption><span id=\"table-58\">Table 58</span> &#x2014; PromiseReaction Record Fields</figcaption>\n          <table class=\"real-table\">\n            <tr>\n              <th>Field Name</th>\n              <th>Value</th>\n              <th>Meaning</th>\n            </tr>\n            <tr>\n              <td>[[Capabilities]]</td>\n              <td>A PromiseCapability record</td>\n              <td>The capabilities of the promise for which this record provides a reaction handler.</td>\n            </tr>\n            <tr>\n              <td>[[Handler]]</td>\n              <td>A function object or a String</td>\n              <td>The function that should be applied to the incoming value, and whose return value will govern what happens to the derived promise. If [[Handler]] is <code>&quot;Identity&quot;</code> it is equivalent to a function that simply returns its first argument. If [[Handler]] is <code>&quot;Thrower&quot;</code> it is equivalent to a function that throws its first argument as an exception.</td>\n            </tr>\n          </table>\n        </figure>\n      </section>\n\n      <section id=\"sec-createresolvingfunctions\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.3\"><a href=\"/sec/sec-createresolvingfunctions.html\" title=\"link to this section\">25.4.1.3</a></span> CreateResolvingFunctions ( promise )</h1>\n\n          <p class=\"normalbefore\">When CreateResolvingFunctions is performed with argument <var>promise</var>, the following steps\n          are taken:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>alreadyResolved</i> be a new Record { [[value]]: <b>false</b> }.</li>\n            <li>Let <i>resolve</i> be a new built-in function object as defined in Promise Resolve Functions (<a href=\"/sec/sec-promise-resolve-functions.html\">25.4.1.3.2</a>).</li>\n            <li>Set the [[Promise]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of <i>resolve</i>\n                to <i>promise</i>.</li>\n            <li>Set the [[AlreadyResolved]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                <i>resolve</i> to <i>alreadyResolved</i>.</li>\n            <li>Let <i>reject</i> be a new built-in function object as defined in Promise Reject Functions (<a href=\"/sec/sec-promise-reject-functions.html\">25.4.1.3.1</a>).</li>\n            <li>Set the [[Promise]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of <i>reject</i>\n                to <i>promise</i>.</li>\n            <li>Set the [[AlreadyResolved]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                <i>reject</i> to <i>alreadyResolved</i>.</li>\n            <li>Return a new Record { [[Resolve]]: <i>resolve</i>, [[Reject]]: <i>reject</i> }.</li>\n          </ol>\n        </div>\n\n        <section id=\"sec-promise-reject-functions\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.3.1\"><a href=\"/sec/sec-promise-reject-functions.html\" title=\"link to this section\">25.4.1.3.1</a></span> Promise Reject Functions</h1>\n\n          <p>A promise reject function is an anonymous built-in function that has [[Promise]] and [[AlreadyResolved]] internal\n          slots.</p>\n\n          <p class=\"normalbefore\">When a promise reject function <var>F</var> is called with argument <var>reason</var>, the\n          following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>F</i> has a [[Promise]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> whose value is an Object.</li>\n            <li>Let <i>promise</i> be the value of <i>F</i>&apos;s [[Promise]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>Let <i>alreadyResolved</i> be the value of <i>F</i>&apos;s [[AlreadyResolved]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>If <i>alreadyResolved</i>.[[value]] is <b>true</b>, return <b>undefined</b>.</li>\n            <li>Set <i>alreadyResolved</i>.[[value]] to <b>true</b>.</li>\n            <li>Return <a href=\"/sec/sec-rejectpromise.html\">RejectPromise</a>(<i>promise</i>, <i>reason</i>).</li>\n          </ol>\n\n          <p>The <code>length</code> property of a promise reject function is <b>1</b>.</p>\n        </section>\n\n        <section id=\"sec-promise-resolve-functions\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.3.2\"><a href=\"/sec/sec-promise-resolve-functions.html\" title=\"link to this section\">25.4.1.3.2</a></span> Promise Resolve Functions</h1>\n\n          <p>A promise resolve function is an anonymous built-in function that has [[Promise]] and [[AlreadyResolved]] internal\n          slots.</p>\n\n          <p class=\"normalbefore\">When a promise resolve function <var>F</var> is called with argument <var>resolution</var>, the\n          following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>F</i> has a [[Promise]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> whose value is an Object.</li>\n            <li>Let <i>promise</i> be the value of <i>F</i>&apos;s [[Promise]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>Let <i>alreadyResolved</i> be the value of <i>F</i>&apos;s [[AlreadyResolved]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>If <i>alreadyResolved</i>.[[value]] is <b>true</b>, return <b>undefined</b>.</li>\n            <li>Set <i>alreadyResolved</i>.[[value]] to <b>true</b>.</li>\n            <li>If <a href=\"/sec/sec-samevalue.html\">SameValue</a>(<i>resolution</i>, <i>promise</i>) is <b>true</b>, then\n              <ol class=\"block\">\n                <li>Let <i>selfResolutionError</i> be a newly created <b>TypeError</b> object.</li>\n                <li>Return <a href=\"/sec/sec-rejectpromise.html\">RejectPromise</a>(<i>promise</i>, <i>selfResolutionError</i>).</li>\n              </ol>\n            </li>\n            <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>resolution</i>) is not Object, then\n              <ol class=\"block\">\n                <li>Return <a href=\"/sec/sec-fulfillpromise.html\">FulfillPromise</a>(<i>promise</i>, <i>resolution</i>).</li>\n              </ol>\n            </li>\n            <li>Let <i>then</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>resolution</i>, <code>&quot;then&quot;</code>).</li>\n            <li>If <i>then</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n              <ol class=\"block\">\n                <li>Return <a href=\"/sec/sec-rejectpromise.html\">RejectPromise</a>(<i>promise</i>, <i>then</i>.[[value]]).</li>\n              </ol>\n            </li>\n            <li>Let <i>thenAction</i> be <i>then</i>.[[value]].</li>\n            <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>thenAction</i>) is <b>false</b>, then\n              <ol class=\"block\">\n                <li>Return <a href=\"/sec/sec-fulfillpromise.html\">FulfillPromise</a>(<i>promise</i>, <i>resolution</i>).</li>\n              </ol>\n            </li>\n            <li>Perform <a href=\"/sec/sec-enqueuejob.html\">EnqueueJob</a> (<code>&quot;PromiseJobs&quot;</code>, <a href=\"/sec/sec-promiseresolvethenablejob.html\">PromiseResolveThenableJob</a>, &#xAB;&#x200D;<i>promise</i>,\n                <i>resolution</i>, <i>thenAction</i>&#xBB;)</li>\n            <li>Return <b>undefined</b>.</li>\n          </ol>\n\n          <p>The <code>length</code> property of a promise resolve function is <b>1</b>.</p>\n        </section>\n      </section>\n\n      <section id=\"sec-fulfillpromise\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.1.4\"><a href=\"/sec/sec-fulfillpromise.html\" title=\"link to this section\">25.4.1.4</a></span>\n            FulfillPromise ( promise, value)</h1>\n\n        <p class=\"normalbefore\">When the FulfillPromise abstract operation is called with arguments <var>promise</var> and\n        <var>value</var> the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: the value of <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is <code>&quot;pending&quot;</code>.</li>\n          <li>Let <i>reactions</i> be the value of <i>promise</i>&apos;s [[PromiseFulfillReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseResult]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <i>value</i>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseFulfillReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <b>undefined</b>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseRejectReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <b>undefined</b>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <code>&quot;fulfilled&quot;</code>.</li>\n          <li>Return <a href=\"/sec/sec-triggerpromisereactions.html\">TriggerPromiseReactions</a>(<i>reactions</i>, <i>value</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-newpromisecapability\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.5\"><a href=\"/sec/sec-newpromisecapability.html\" title=\"link to this section\">25.4.1.5</a></span> NewPromiseCapability ( C )</h1>\n\n          <p class=\"normalbefore\">The abstract operation NewPromiseCapability takes a constructor function, and attempts to use\n          that constructor function in the fashion of the built-in <code>Promise</code> constructor to create a Promise object and\n          extract its resolve and reject functions. The promise plus the resolve and reject functions are used to initialize a new\n          PromiseCapability record which is returned as the value of this abstract operation.</p>\n\n          <ol class=\"proc\">\n            <li>If <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a>(<i>C</i>) is <b>false</b>, throw a <b>TypeError</b>\n                exception.</li>\n            <li>NOTE <span style=\"font-family: Times New Roman\"><i>C</i></span> is assumed to be a constructor function that\n                supports the parameter conventions of the <code>Promise</code> constructor (<a href=\"/sec/sec-promise-executor.html\">see\n                25.4.3.1</a>).</li>\n            <li>Let <i>promiseCapability</i> be a new PromiseCapability { [[Promise]]: <b>undefined</b>, [[Resolve]]:\n                <b>undefined</b>, [[Reject]]: <b>undefined</b> }.</li>\n            <li>Let <i>executor</i> be a new built-in function object as defined in <a href=\"/sec/sec-getcapabilitiesexecutor-functions.html\">GetCapabilitiesExecutor Functions</a> (<a href=\"/sec/sec-getcapabilitiesexecutor-functions.html\">25.4.1.5.1</a>).</li>\n            <li>Set the [[Capability]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                <i>executor</i> to <i>promiseCapability</i>.</li>\n            <li>Let <i>promise</i> be <a href=\"/sec/sec-construct.html\">Construct</a>(<i>C</i>, &#xAB;<i>executor</i>&#xBB;).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>promise</i>).</li>\n            <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>promiseCapability</i>.[[Resolve]]) is <b>false</b>, throw a\n                <b>TypeError</b> exception.</li>\n            <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>promiseCapability</i>.[[Reject]]) is <b>false</b>, throw a\n                <b>TypeError</b> exception.</li>\n            <li>Set <i>promiseCapability</i>.[[Promise]] to <i>promise</i>.</li>\n            <li>Return <i>promiseCapability</i>.</li>\n          </ol>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE</span> This abstract operation supports Promise subclassing, as it is generic on any\n            constructor that calls a passed executor function argument in the same way as the Promise constructor. It is used to\n            generalize static methods of the Promise constructor to any subclass.</p>\n          </div>\n        </div>\n\n        <section id=\"sec-getcapabilitiesexecutor-functions\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.5.1\"><a href=\"/sec/sec-getcapabilitiesexecutor-functions.html\" title=\"link to this section\">25.4.1.5.1</a></span> GetCapabilitiesExecutor Functions</h1>\n\n          <p>A GetCapabilitiesExecutor function is an anonymous built-in function that has a [[Capability]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</p>\n\n          <p class=\"normalbefore\">When a GetCapabilitiesExecutor function <var>F</var> is called with arguments <var>resolve</var>\n          and <var>reject</var> the following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>F</i> has a [[Capability]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> whose value is a PromiseCapability\n                Record.</li>\n            <li>Let <i>promiseCapability</i> be the value of <i>F</i>&apos;s [[Capability]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>If <i>promiseCapability</i>.[[Resolve]] is not <b>undefined</b>, throw a <b>TypeError</b> exception.</li>\n            <li>If <i>promiseCapability</i>.[[Reject]] is not <b>undefined</b>, throw a <b>TypeError</b> exception.</li>\n            <li>Set <i>promiseCapability</i>.[[Resolve]] to <i>resolve</i>.</li>\n            <li>Set <i>promiseCapability</i>.[[Reject]] to <i>reject</i>.</li>\n            <li>Return <b>undefined</b>.</li>\n          </ol>\n\n          <p>The <code>length</code> property of a GetCapabilitiesExecutor function is <b>2</b>.</p>\n        </section>\n      </section>\n\n      <section id=\"sec-ispromise\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.1.6\"><a href=\"/sec/sec-ispromise.html\" title=\"link to this section\">25.4.1.6</a></span>\n            IsPromise ( x )</h1>\n\n        <p class=\"normalbefore\">The abstract operation IsPromise checks for the promise brand on an object.</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>x</i>) is not Object, return <b>false</b>.</li>\n          <li>If <i>x</i> does not have a [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a>, return <b>false</b>.</li>\n          <li>Return <b>true</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-rejectpromise\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.1.7\"><a href=\"/sec/sec-rejectpromise.html\" title=\"link to this section\">25.4.1.7</a></span>\n            RejectPromise ( promise, reason)</h1>\n\n        <p class=\"normalbefore\">When the RejectPromise abstract operation is called with arguments <var>promise</var> and\n        <var>reason</var> the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: the value of <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is <code>&quot;pending&quot;</code>.</li>\n          <li>Let <i>reactions</i> be the value of <i>promise</i>&apos;s [[PromiseRejectReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseResult]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <i>reason</i>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseFulfillReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <b>undefined</b>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseRejectReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <b>undefined</b>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <code>&quot;rejected&quot;</code>.</li>\n          <li>Return <a href=\"/sec/sec-triggerpromisereactions.html\">TriggerPromiseReactions</a>(<i>reactions</i>, <i>reason</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-triggerpromisereactions\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.1.8\"><a href=\"/sec/sec-triggerpromisereactions.html\" title=\"link to this section\">25.4.1.8</a></span> TriggerPromiseReactions ( reactions, argument )</h1>\n\n        <p>The abstract operation TriggerPromiseReactions takes a collection of PromiseReactionRecords and enqueues a new Job for\n        each record. Each such Job processes the [[Handler]] of the PromiseReactionRecord, and if the [[Handler]] is a function\n        calls it passing the given argument.</p>\n\n        <ol class=\"proc\">\n          <li>Repeat for each <i>reaction</i> in <i>reactions</i>, in original insertion order\n            <ol class=\"block\">\n              <li>Perform <a href=\"/sec/sec-enqueuejob.html\">EnqueueJob</a>(<code>&quot;<b>PromiseJobs</b>&quot;</code><span style=\"font-family:\n                  sans-serif\">,</span> <a href=\"/sec/sec-promisereactionjob.html\">PromiseReactionJob</a>, &#xAB;&#x200D;<i>reaction</i>,\n                  <i>argument</i>&#xBB;).</li>\n            </ol>\n          </li>\n          <li>Return <b>undefined</b>.</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-promise-jobs\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.2\"><a href=\"/sec/sec-promise-jobs.html\" title=\"link to this section\">25.4.2</a></span>\n            Promise Jobs</h1>\n      </div>\n\n      <section id=\"sec-promisereactionjob\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.2.1\"><a href=\"/sec/sec-promisereactionjob.html\" title=\"link to this section\">25.4.2.1</a></span> PromiseReactionJob ( reaction, argument )</h1>\n\n        <p class=\"normalbefore\">The job PromiseReactionJob with parameters <var>reaction</var> and <var>argument</var> applies the\n        appropriate handler to the incoming value, and uses the handler&apos;s return value to resolve or reject the derived promise\n        associated with that handler.</p>\n\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>reaction</i> is a PromiseReaction Record.</li>\n          <li>Let <i>promiseCapability</i> be <i>reaction</i>.[[Capabilities]].</li>\n          <li>Let <i>handler</i> be <i>reaction</i>.[[Handler]].</li>\n          <li>If <i>handler</i> is <code>&quot;Identity&quot;</code>, let <i>handlerResult</i> be <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>argument</i>).</li>\n          <li>Else if <i>handler</i> is <code>&quot;Thrower&quot;</code>, let <i>handlerResult</i> be <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family:\n              sans-serif\">throw</span>, [[value]]: <i>argument</i>, [[target]]: <span style=\"font-family:\n              sans-serif\">empty</span>}.</li>\n          <li>Else, let <i>handlerResult</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>handler</i>, <b>undefined</b>,\n              &#xAB;<i>argument</i>&#xBB;).</li>\n          <li>If <i>handlerResult</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n            <ol class=\"block\">\n              <li>Let <i>status</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>promiseCapability</i>.[[Reject]], <b>undefined</b>,\n                  &#xAB;<i>handlerResult</i>.[[value]]&#xBB;).</li>\n              <li>NextJob <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>status</i>).</li>\n            </ol>\n          </li>\n          <li>Let <i>status</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>promiseCapability</i>.[[Resolve]], <b>undefined</b>,\n              &#xAB;<i>handlerResult</i>.[[value]]&#xBB;)<i>.</i></li>\n          <li>NextJob <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>status</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-promiseresolvethenablejob\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.2.2\"><a href=\"/sec/sec-promiseresolvethenablejob.html\" title=\"link to this section\">25.4.2.2</a></span> PromiseResolveThenableJob ( promiseToResolve, thenable, then)</h1>\n\n        <p class=\"normalbefore\">The job PromiseResolveThenableJob with parameters <var>promiseToResolve</var>,\n        <var>thenable</var>, and <var>then</var> performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>resolvingFunctions</i> be <a href=\"/sec/sec-createresolvingfunctions.html\">CreateResolvingFunctions</a>(<i>promiseToResolve</i>).</li>\n          <li>Let <i>thenCallResult</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>then</i>, <i>thenable</i>,\n              &#xAB;<i>resolvingFunctions</i>.[[Resolve]], <i>resolvingFunctions</i>.[[Reject]]&#xBB;).</li>\n          <li>If <i>thenCallResult</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>,\n            <ol class=\"block\">\n              <li>Let <i>status</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>resolvingFunctions</i>.[[Reject]], <b>undefined</b>,\n                  &#xAB;<i>thenCallResult</i>.[[value]]&#xBB;)<i>.</i></li>\n              <li>NextJob <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>status</i>)<i>.</i></li>\n            </ol>\n          </li>\n          <li>NextJob <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>thenCallResult</i>).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> This Job uses the supplied thenable and its <code>then</code> method to resolve the\n          given promise. This process must take place as a Job to ensure that the evaluation of the <code>then</code> method\n          occurs after evaluation of any surrounding code has completed.</p>\n        </div>\n      </section>\n    </section>\n\n    <section id=\"sec-promise-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.3\"><a href=\"/sec/sec-promise-constructor.html\" title=\"link to this section\">25.4.3</a></span>\n            The Promise Constructor</h1>\n\n        <p>The Promise constructor is the %Promise% intrinsic object and the initial value of the <code>Promise</code> property of\n        the global object. When called as a constructor it creates and initializes a new Promise object. <code>Promise</code> is\n        not intended to be called as a function and will throw an exception when called in that manner.</p>\n\n        <p>The <code>Promise</code> constructor is designed to be subclassable. It may be used as the value in an\n        <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified\n        <code>Promise</code> behaviour must include a <code>super</code> call to the <code>Promise</code> constructor to create\n        and initialize the subclass instance with the internal state necessary to support the <code>Promise</code> and\n        <code>Promise.prototype</code> built-in methods.</p>\n      </div>\n\n      <section id=\"sec-promise-executor\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.3.1\"><a href=\"/sec/sec-promise-executor.html\" title=\"link to this section\">25.4.3.1</a></span> Promise ( executor )</h1>\n\n        <p class=\"normalbefore\">When the <code>Promise</code> function is called with argument <var>executor</var> the following\n        steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If NewTarget is <b>undefined</b>, throw a <b>TypeError</b> exception.</li>\n          <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>executor</i>) is <b>false</b>, throw a <b>TypeError</b>\n              exception.</li>\n          <li>Let <i>promise</i> be <a href=\"/sec/sec-ordinarycreatefromconstructor.html\">OrdinaryCreateFromConstructor</a>(NewTarget,\n              <code>&quot;%PromisePrototype%&quot;</code>, &#xAB;&#x200D;[[PromiseState]], [[PromiseResult]], [[PromiseFulfillReactions]],\n              [[PromiseRejectReactions]]&#xBB; ).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>promise</i>).</li>\n          <li>Set <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to\n              <code>&quot;pending&quot;</code>.</li>\n          <li>Set <i>promise</i>&apos;s [[PromiseFulfillReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a> to a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>Set <i>promise</i>&apos;s [[PromiseRejectReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a> to a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>Let <i>resolvingFunctions</i> be <a href=\"/sec/sec-createresolvingfunctions.html\">CreateResolvingFunctions</a>(<i>promise</i>).</li>\n          <li>Let <i>completion</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>executor</i>, <b>undefined</b>,\n              &#xAB;<i>resolvingFunctions</i>.[[Resolve]], <i>resolvingFunctions</i>.[[Reject]]&#xBB;).</li>\n          <li>If <i>completion</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n            <ol class=\"block\">\n              <li>Let <i>status</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>resolvingFunctions</i>.[[Reject]], <b>undefined</b>,\n                  &#xAB;<i>completion</i>.[[value]]&#xBB;).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n            </ol>\n          </li>\n          <li>Return <i>promise</i>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The <var>executor</var> argument must be a function object. It is called for initiating\n          and reporting completion of the possibly deferred action represented by this Promise object. The executor is called with\n          two arguments: <var>resolve</var> and <var>reject</var>. These are functions that may be used by the <var>executor</var>\n          function to report eventual completion or failure of the deferred computation. Returning from the executor function does\n          not mean that the deferred action has been completed but only that the request to eventually perform the deferred action\n          has been accepted.</p>\n\n          <p>The <var>resolve</var> function that is passed to an <var>executor</var> function accepts a single argument. The\n          <var>executor</var> code may eventually call the <var>resolve</var> function to indicate that it wishes to resolve the\n          associated Promise object. The argument passed to the <var>resolve</var> function represents the eventual value of the\n          deferred action and can be either the actual fulfillment value or another Promise object which will provide the value if\n          it is fulfilled.</p>\n\n          <p>The <var>reject</var> function that is passed to an <var>executor</var> function accepts a single argument. The\n          <var>executor</var> code may eventually call the <var>reject</var> function to indicate that the associated Promise is\n          rejected and will never be fulfilled. The argument passed to the <var>reject</var> function is used as the rejection\n          value of the promise. Typically it will be an <code>Error</code> object.</p>\n\n          <p>The resolve and reject functions passed to an <var>executor</var> function by the Promise constructor have the\n          capability to actually resolve and reject the associated promise. Subclasses may have different constructor behaviour\n          that passes in customized values for resolve and reject.</p>\n        </div>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-promise-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.4\"><a href=\"/sec/sec-properties-of-the-promise-constructor.html\" title=\"link to this section\">25.4.4</a></span> Properties of the Promise Constructor</h1>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        <code>Promise</code> constructor is the intrinsic object %FunctionPrototype% (<a href=\"/sec/sec-properties-of-the-function-prototype-object.html\">19.2.3</a>).</p>\n\n        <p>Besides the <code>length</code> property (whose value is 1), the Promise constructor has the following properties:</p>\n      </div>\n\n      <section id=\"sec-promise.all\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.4.1\"><a href=\"/sec/sec-promise.all.html\" title=\"link to this section\">25.4.4.1</a></span>\n              Promise.all ( iterable )</h1>\n\n          <p class=\"normalbefore\">The <code>all</code> function returns a new promise which is fulfilled with an array of\n          fulfillment values for the passed promises, or rejects with the reason of the first passed promise that rejects. It\n          resolves all elements of the passed iterable to promises as it runs this algorithm.</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>C</i> be the <b>this</b> value.</li>\n            <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>C</i>) is not Object, throw a <b>TypeError</b>\n                exception.</li>\n            <li>Let <i>S</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>C</i>, @@species).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>S</i>).</li>\n            <li>If <i>S</i> is neither <b>undefined</b> nor <b>null</b>, let <i>C</i> be <i>S</i>.</li>\n            <li>Let <i>promiseCapability</i> be <a href=\"/sec/sec-newpromisecapability.html\">NewPromiseCapability</a>(<i>C</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>promiseCapability</i>).</li>\n            <li>Let <i>iterator</i> be <a href=\"/sec/sec-getiterator.html\">GetIterator</a>(<i>iterable</i>).</li>\n            <li><a href=\"/sec/sec-ifabruptrejectpromise.html\">IfAbruptRejectPromise</a>(<i>iterator</i>, <i>promiseCapability</i>).</li>\n            <li>Let <i>iteratorRecord</i> be Record {[[iterator]]: <i>iterator</i>, [[done]]: <b>false</b>}.</li>\n            <li>Let <i>result</i> be <a href=\"/sec/sec-performpromiseall.html\">PerformPromiseAll</a>(<i>iteratorRecord</i>, <i>C</i>,\n                <i>promiseCapability</i>).</li>\n            <li>If <i>result</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>,\n              <ol class=\"block\">\n                <li>If <i>iteratorRecord</i>.[[done]] is <b>false</b>, let <i>result</i> be <a href=\"/sec/sec-iteratorclose.html\">IteratorClose</a>(<i>iterator</i>, <i>result</i>).</li>\n                <li><a href=\"/sec/sec-ifabruptrejectpromise.html\">IfAbruptRejectPromise</a>(<i>result</i>, <i>promiseCapability</i>).</li>\n              </ol>\n            </li>\n            <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>result</i>).</li>\n          </ol>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE</span> The <code>all</code> function requires its <b>this</b> value to be a constructor\n            function that supports the parameter conventions of the <code>Promise</code> constructor.</p>\n          </div>\n        </div>\n\n        <section id=\"sec-performpromiseall\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.4.1.1\"><a href=\"/sec/sec-performpromiseall.html\" title=\"link to this section\">25.4.4.1.1</a></span> Runtime Semantics: PerformPromiseAll( iteratorRecord,\n              constructor, resultCapability)</h1>\n\n          <p class=\"normalbefore\">When the PerformPromiseAll abstract operation is called with arguments <var>iteratorRecord,\n          constructor,</var> and <var>resultCapability</var> the following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>constructor</i> is a constructor function.</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>resultCapability</i> is a PromiseCapability record.</li>\n            <li>Let <i>values</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n            <li>Let <i>remainingElementsCount</i> be a new Record { [[value]]: 1 }.</li>\n            <li>Let <i>index</i> be 0.</li>\n            <li>Repeat\n              <ol class=\"block\">\n                <li>Let <i>next</i> be <a href=\"/sec/sec-iteratorstep.html\">IteratorStep</a>(<i>iteratorRecord</i>.[[iterator]]).</li>\n                <li>If <i>next</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, set\n                    <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n                <li>If <i>next</i> is <b>false</b>,\n                  <ol class=\"block\">\n                    <li>Set <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n                    <li>Set <i>remainingElementsCount</i>.[[value]] to <i>remainingElementsCount</i>.[[value]] &#x2212; 1.</li>\n                    <li>If <i>remainingElementsCount</i>.[[value]] is 0,\n                      <ol class=\"block\">\n                        <li>Let <i>valuesArray</i> be <a href=\"/sec/sec-createarrayfromlist.html\">CreateArrayFromList</a>(<i>values</i>).</li>\n                        <li>Let <i>resolveResult</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>resultCapability</i>.[[Resolve]],\n                            <b>undefined</b>, &#xAB;<i>valuesArray</i>&#xBB;).</li>\n                        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>resolveResult</i>)</li>\n                      </ol>\n                    </li>\n                    <li>Return <i>resultCapability</i>.[[Promise]].</li>\n                  </ol>\n                </li>\n                <li>Let <i>nextValue</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>next</i>).</li>\n                <li>If <i>nextValue</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, set\n                    <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextValue</i>).</li>\n                <li>Append <b>undefined</b> to <i>values</i>.</li>\n                <li>Let <i>nextPromise</i> be <a href=\"/sec/sec-invoke.html\">Invoke</a>(<i>constructor</i>, <code>&quot;resolve&quot;</code>,\n                    &#xAB;&#x200D;<i>nextValue</i>&#xBB;).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextPromise</i> ).</li>\n                <li>Let <i>resolveElement</i> be a new built-in function object as defined in <a href=\"/sec/sec-promise.all.html\">Promise.all</a> Resolve Element Functions.</li>\n                <li>Set the [[AlreadyCalled]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                    <i>resolveElement</i> to a new Record {[[value]]: <b>false</b> }.</li>\n                <li>Set the [[Index]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                    <i>resolveElement</i> to <i>index</i>.</li>\n                <li>Set the [[Values]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                    <i>resolveElement</i> to <i>values</i>.</li>\n                <li>Set the [[Capabilities]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                    <i>resolveElement</i> to <i>resultCapability</i>.</li>\n                <li>Set the [[RemainingElements]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                    <i>resolveElement</i> to <i>remainingElementsCount</i>.</li>\n                <li>Set <i>remainingElementsCount</i>.[[value]] to <i>remainingElementsCount</i>.[[value]] + 1.</li>\n                <li>Let <i>result</i> be <a href=\"/sec/sec-invoke.html\">Invoke</a>(<i>nextPromise</i>, <code>&quot;then&quot;</code>,\n                    &#xAB;&#x200D;<i>resolveElement</i>, <i>resultCapability</i>.[[Reject]]&#xBB;).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>result</i>).</li>\n                <li>Set <i>index</i> to <i>index</i> + 1.</li>\n              </ol>\n            </li>\n          </ol>\n        </section>\n\n        <section id=\"sec-promise.all-resolve-element-functions\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.4.1.2\"><a href=\"/sec/sec-promise.all-resolve-element-functions.html\" title=\"link to this section\">25.4.4.1.2</a></span> Promise.all Resolve Element Functions</h1>\n\n          <p>A <a href=\"/sec/sec-promise.all.html\">Promise.all</a> resolve element function is an anonymous built-in function that is used\n          to resolve a specific <a href=\"/sec/sec-promise.all.html\">Promise.all</a> element. Each <a href=\"/sec/sec-promise.all.html\">Promise.all</a> resolve element function has [[Index]], [[Values]], [[Capabilities]],\n          [[RemainingElements]], and [[AlreadyCalled]] internal slots.</p>\n\n          <p class=\"normalbefore\">When a <a href=\"/sec/sec-promise.all.html\">Promise.all</a> resolve element function <var>F</var> is\n          called with argument <var>x</var>, the following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>alreadyCalled</i> be the value of <i>F</i>&apos;s [[AlreadyCalled]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>If <i>alreadyCalled</i>.[[value]] is <b>true</b>, return <b>undefined</b>.</li>\n            <li>Set <i>alreadyCalled</i>.[[value]] to <b>true</b>.</li>\n            <li>Let <i>index</i> be the value of <i>F</i>&apos;s [[Index]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>Let <i>values</i> be the value of <i>F</i>&apos;s [[Values]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>Let <i>promiseCapability</i> be the value of <i>F</i>&apos;s [[Capabilities]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>Let <i>remainingElementsCount</i> be the value of <i>F</i>&apos;s [[RemainingElements]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>Set <i>values</i>[<i>index</i>] to <i>x</i>.</li>\n            <li>Set <i>remainingElementsCount</i>.[[value]] to <i>remainingElementsCount</i>.[[value]] - 1.</li>\n            <li>If <i>remainingElementsCount</i>.[[value]] is 0,\n              <ol class=\"block\">\n                <li>Let <i>valuesArray</i> be <a href=\"/sec/sec-createarrayfromlist.html\">CreateArrayFromList</a>(<i>values</i>).</li>\n                <li>Return <a href=\"/sec/sec-call.html\">Call</a>(<i>promiseCapability</i>.[[Resolve]], <b>undefined</b>,\n                    &#xAB;<i>valuesArray</i>&#xBB;).</li>\n              </ol>\n            </li>\n            <li>Return <b>undefined</b>.</li>\n          </ol>\n\n          <p>The <code>length</code> property of a <a href=\"/sec/sec-promise.all.html\">Promise.all</a> resolve element function is\n          <b>1</b>.</p>\n        </section>\n      </section>\n\n      <section id=\"sec-promise.prototype\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.4.2\"><a href=\"/sec/sec-promise.prototype.html\" title=\"link to this section\">25.4.4.2</a></span> Promise.prototype</h1>\n\n        <p>The initial value of <code>Promise.prototype</code> is the intrinsic object %PromisePrototype% (<a href=\"/sec/sec-properties-of-the-promise-prototype-object.html\">25.4.5</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-promise.race\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.4.3\"><a href=\"/sec/sec-promise.race.html\" title=\"link to this section\">25.4.4.3</a></span>\n              Promise.race ( iterable )</h1>\n\n          <p class=\"normalbefore\">The <code>race</code> function returns a new promise which is settled in the same way as the\n          first passed promise to settle. It resolves all elements of the passed <span style=\"font-family: Times New\n          Roman\">iterable</span> to promises as it runs this algorithm.</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>C</i> be the <b>this</b> value.</li>\n            <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>C</i>) is not Object, throw a <b>TypeError</b>\n                exception.</li>\n            <li>Let <i>S</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>C</i>, @@species).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>S</i>).</li>\n            <li>If <i>S</i> is neither <b>undefined</b> nor <b>null</b>, let <i>C</i> be <i>S</i>.</li>\n            <li>Let <i>promiseCapability</i> be <a href=\"/sec/sec-newpromisecapability.html\">NewPromiseCapability</a>(<i>C</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>promiseCapability</i>).</li>\n            <li>Let <i>iterator</i> be <a href=\"/sec/sec-getiterator.html\">GetIterator</a>(<i>iterable</i>).</li>\n            <li><a href=\"/sec/sec-ifabruptrejectpromise.html\">IfAbruptRejectPromise</a>(<i>iterator</i>, <i>promiseCapability</i>).</li>\n            <li>Let <i>iteratorRecord</i> be Record {[[iterator]]: <i>iterator</i>, [[done]]: <b>false</b>}.</li>\n            <li>Let <i>result</i> be <a href=\"/sec/sec-performpromiserace.html\">PerformPromiseRace</a>(<i>iteratorRecord</i>,\n                <i>promiseCapability</i>, <i>C</i>).</li>\n            <li>If <i>result</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n              <ol class=\"block\">\n                <li>If <i>iteratorRecord</i>.[[done]] is <b>false</b>, let <i>result</i> be <a href=\"/sec/sec-iteratorclose.html\">IteratorClose</a>(<i>iterator,result</i>).</li>\n                <li><a href=\"/sec/sec-ifabruptrejectpromise.html\">IfAbruptRejectPromise</a>(<i>result</i>, <i>promiseCapability</i>).</li>\n              </ol>\n            </li>\n            <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>result</i>).</li>\n          </ol>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 1</span> If the <var>iterable</var> argument is empty or if none of the promises in\n            <var>iterable</var> ever settle then the pending promise returned by this method will never be settled</p>\n          </div>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 2</span> The <code>race</code> function expects its <b>this</b> value to be a constructor\n            function that supports the parameter conventions of the <code>Promise</code> constructor. It also expects that its\n            <b>this</b> value provides a <code>resolve</code> method.</p>\n          </div>\n        </div>\n\n        <section id=\"sec-performpromiserace\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.4.3.1\"><a href=\"/sec/sec-performpromiserace.html\" title=\"link to this section\">25.4.4.3.1</a></span> Runtime Semantics:  PerformPromiseRace ( iteratorRecord,\n              promiseCapability, C )</h1>\n\n          <p class=\"normalbefore\">When the PerformPromiseRace abstract operation is called with arguments <var>iteratorRecord,\n          promiseCapability,</var> and <var>C</var> the following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li>Repeat\n              <ol class=\"block\">\n                <li>Let <i>next</i> be <a href=\"/sec/sec-iteratorstep.html\">IteratorStep</a>(<i>iteratorRecord</i>.[[iterator]]).</li>\n                <li>If <i>next</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, set\n                    <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n                <li>If <i>next</i> is <b>false</b>, then\n                  <ol class=\"block\">\n                    <li>Set <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n                    <li>Return <i>promiseCapability</i>.[[Promise]].</li>\n                  </ol>\n                </li>\n                <li>Let <i>nextValue</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>next</i>).</li>\n                <li>If <i>nextValue</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, set\n                    <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextValue</i>).</li>\n                <li>Let <i>nextPromise</i> be <a href=\"/sec/sec-invoke.html\">Invoke</a>(<i>C</i>, <code>&quot;resolve&quot;</code>,\n                    &#xAB;&#x200D;<i>nextValue</i>&#xBB;).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextPromise</i>).</li>\n                <li>Let <i>result</i> be <a href=\"/sec/sec-invoke.html\">Invoke</a>(<i>nextPromise</i>, <code>&quot;then&quot;</code>,\n                    &#xAB;&#x200D;<i>promiseCapability</i>.[[Resolve]], <i>promiseCapability</i>.[[Reject]]&#xBB;).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>result</i>).</li>\n              </ol>\n            </li>\n          </ol>\n        </section>\n      </section>\n\n      <section id=\"sec-promise.reject\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.4.4\"><a href=\"/sec/sec-promise.reject.html\" title=\"link to this section\">25.4.4.4</a></span>\n            Promise.reject ( r )</h1>\n\n        <p class=\"normalbefore\">The <code>reject</code> function returns a new promise rejected with the passed argument.</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>C</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>C</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>Let <i>promiseCapability</i> be <a href=\"/sec/sec-newpromisecapability.html\">NewPromiseCapability</a>(<i>C</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>promiseCapability</i>).</li>\n          <li>Let <i>rejectResult</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>promiseCapability</i>.[[Reject]], <b>undefined</b>,\n              &#xAB;<i>r</i>&#xBB;).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>rejectResult</i>).</li>\n          <li>Return <i>promiseCapability</i>.[[Promise]].</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The <code>reject</code> function expects its <b>this</b> value to be a constructor\n          function that supports the parameter conventions of the <code>Promise</code> constructor.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-promise.resolve\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.4.5\"><a href=\"/sec/sec-promise.resolve.html\" title=\"link to this section\">25.4.4.5</a></span>\n            Promise.resolve ( x )</h1>\n\n        <p class=\"normalbefore\">The <code>resolve</code> function returns either a new promise resolved with the passed argument,\n        or the argument itself if the argument is a promise produced by this constructor.</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>C</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>C</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <a href=\"/sec/sec-ispromise.html\">IsPromise</a>(<i>x</i>) is <b>true</b>,\n            <ol class=\"block\">\n              <li>Let <i>xConstructor</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>x</i>, <code>&quot;constructor&quot;</code>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>xConstructor</i>).</li>\n              <li>If <a href=\"/sec/sec-samevalue.html\">SameValue</a>(<i>xConstructor</i>, <i>C</i>) is <b>true</b>, return <i>x</i>.</li>\n            </ol>\n          </li>\n          <li>Let <i>promiseCapability</i> be <a href=\"/sec/sec-newpromisecapability.html\">NewPromiseCapability</a>(<i>C</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>promiseCapability</i>).</li>\n          <li>Let <i>resolveResult</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>promiseCapability</i>.[[Resolve]], <b>undefined</b>,\n              &#xAB;<i>x</i>&#xBB;).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>resolveResult</i>).</li>\n          <li>Return <i>promiseCapability</i>.[[Promise]].</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span>  The <code>resolve</code> function expects its <b>this</b> value to be a constructor\n          function that supports the parameter conventions of the <code>Promise</code> constructor.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-get-promise-@@species\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.4.6\"><a href=\"/sec/sec-get-promise-@@species.html\" title=\"link to this section\">25.4.4.6</a></span> get Promise [ @@species ]</h1>\n\n        <p class=\"normalbefore\"><code>Promise[@@species]</code> is an accessor property whose set accessor function is <span class=\"value\">undefined</span>. Its get accessor function performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Return the <b>this</b> value.</li>\n        </ol>\n\n        <p>The value of the <code>name</code> property of this function is <code>&quot;get [Symbol.species]&quot;</code>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> Promise prototype methods normally use their <code>this</code> object&#x2019;s\n          constructor to create a derived object. However, a subclass constructor may over-ride that default behaviour by\n          redefining its @@species property.</p>\n        </div>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-promise-prototype-object\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.5\"><a href=\"/sec/sec-properties-of-the-promise-prototype-object.html\" title=\"link to this section\">25.4.5</a></span> Properties of the Promise Prototype Object</h1>\n\n        <p>The Promise prototype object is the intrinsic object %PromisePrototype%. The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the Promise prototype object is the intrinsic\n        object %ObjectPrototype% (<a href=\"/sec/sec-properties-of-the-object-prototype-object.html\">19.1.3</a>). The Promise prototype\n        object is an ordinary object. It does not have a [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> or any of the other internal slots of Promise\n        instances.</p>\n      </div>\n\n      <section id=\"sec-promise.prototype.catch\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.5.1\"><a href=\"/sec/sec-promise.prototype.catch.html\" title=\"link to this section\">25.4.5.1</a></span> Promise.prototype.catch ( onRejected )</h1>\n\n        <p class=\"normalbefore\">When the <code>catch</code> method is called with argument <var>onRejected</var> the following\n        steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>promise</i> be the <b>this</b> value.</li>\n          <li>Return <a href=\"/sec/sec-invoke.html\">Invoke</a>(<i>promise</i>, <code>&quot;then&quot;</code>, &#xAB;&#x200D;<b>undefined</b>,\n              <i>onRejected</i>&#xBB;).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-promise.prototype.constructor\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.5.2\"><a href=\"/sec/sec-promise.prototype.constructor.html\" title=\"link to this section\">25.4.5.2</a></span> Promise.prototype.constructor</h1>\n\n        <p>The initial value of <code>Promise.prototype.constructor</code> is the intrinsic object %Promise%.</p>\n      </section>\n\n      <section id=\"sec-promise.prototype.then\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.5.3\"><a href=\"/sec/sec-promise.prototype.then.html\" title=\"link to this section\">25.4.5.3</a></span> Promise.prototype.then ( onFulfilled , onRejected )</h1>\n\n          <p class=\"normalbefore\">When the <code>then</code> method is called with arguments <var>onFulfilled</var> and\n          <var>onRejected</var> the following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>promise</i> be the <b>this</b> value.</li>\n            <li>If <a href=\"/sec/sec-ispromise.html\">IsPromise</a>(<i>promise</i>) is <b>false</b>, throw a <b>TypeError</b>\n                exception.</li>\n            <li>Let <i>C</i> be <a href=\"/sec/sec-speciesconstructor.html\">SpeciesConstructor</a>(<i>promise</i>, %Promise%).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>C</i>).</li>\n            <li>Let <i>resultCapability</i> be <a href=\"/sec/sec-newpromisecapability.html\">NewPromiseCapability</a>(<i>C</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>resultCapability</i>).</li>\n            <li>Return <a href=\"/sec/sec-performpromisethen.html\">PerformPromiseThen</a>(<i>promise</i>, <i>onFulfilled</i>,\n                <i>onRejected</i>, <i>resultCapability</i>).</li>\n          </ol>\n        </div>\n\n        <section id=\"sec-performpromisethen\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.5.3.1\"><a href=\"/sec/sec-performpromisethen.html\" title=\"link to this section\">25.4.5.3.1</a></span> PerformPromiseThen ( promise, onFulfilled, onRejected,\n              resultCapability )</h1>\n\n          <p class=\"normalbefore\">The abstract operation PerformPromiseThen performs the &#x201C;then&#x201D; operation on\n          <var>promise</var> using <var>onFulfilled</var> and <var>onRejected</var> as its settlement actions. The result is\n          <var>resultCapability</var>&#x2019;s promise.</p>\n\n          <ol class=\"proc\">\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ispromise.html\">IsPromise</a>(<i>promise</i>) is\n                <b>true</b>.</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>resultCapability</i> is a PromiseCapability record.</li>\n            <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>onFulfilled</i>) is <b>false</b>, then\n              <ol class=\"block\">\n                <li>Let <i>onFulfilled</i> be <code>&quot;Identity&quot;</code>.</li>\n              </ol>\n            </li>\n            <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>onRejected</i>) is <b>false</b>, then\n              <ol class=\"block\">\n                <li>Let <i>onRejected</i> be <code>&quot;Thrower&quot;</code>.</li>\n              </ol>\n            </li>\n            <li>Let <i>fulfillReaction</i> be the PromiseReaction { [[Capabilities]]: <i>resultCapability</i>, [[Handler]]:\n                <i>onFulfilled</i> }.</li>\n            <li>Let <i>rejectReaction</i> be the PromiseReaction { [[Capabilities]]: <i>resultCapability</i>, [[Handler]]:\n                <i>onRejected</i>}.</li>\n            <li>If the value of <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is <code>&quot;pending&quot;</code>,\n              <ol class=\"block\">\n                <li>Append <i>fulfillReaction</i> as the last element of the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> that is the value of <i>promise</i>&apos;s\n                    [[PromiseFulfillReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n                <li>Append <i>rejectReaction</i> as the last element of the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> that is the value of <i>promise</i>&apos;s\n                    [[PromiseRejectReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n              </ol>\n            </li>\n            <li>Else if the value of <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is <code>&quot;fulfilled&quot;</code>,\n              <ol class=\"block\">\n                <li>Let <i>value</i> be the value of <i>promise</i>&apos;s [[PromiseResult]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n                <li>Perform <a href=\"/sec/sec-enqueuejob.html\">EnqueueJob</a>(<code>&quot;PromiseJobs&quot;</code>, <a href=\"/sec/sec-promisereactionjob.html\">PromiseReactionJob</a>, &#xAB;&#x200D;<i>fulfillReaction</i>,\n                    <i>value</i>&#xBB;).</li>\n              </ol>\n            </li>\n            <li>Else if the value of <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is <code>&quot;rejected&quot;</code>,\n              <ol class=\"block\">\n                <li>Let <i>reason</i> be the value of <i>promise</i>&apos;s [[PromiseResult]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n                <li>Perform <a href=\"/sec/sec-enqueuejob.html\">EnqueueJob</a>(<code>&quot;PromiseJobs&quot;</code>, <a href=\"/sec/sec-promisereactionjob.html\">PromiseReactionJob</a>, &#xAB;&#x200D;<i>rejectReaction</i>,\n                    <i>reason</i>&#xBB;).</li>\n              </ol>\n            </li>\n            <li>Return <i>resultCapability</i>.[[Promise]].</li>\n          </ol>\n        </section>\n      </section>\n\n      <section id=\"sec-promise.prototype-@@tostringtag\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.5.4\"><a href=\"/sec/sec-promise.prototype-@@tostringtag.html\" title=\"link to this section\">25.4.5.4</a></span> Promise.prototype [ @@toStringTag ]</h1>\n\n        <p>The initial value of the @@toStringTag property is the String value <code>&quot;Promise&quot;</code>.</p>\n\n        <p>This property has the attributes { [[Writable]]: <span class=\"value\">false</span>, [[Enumerable]]: <span class=\"value\">false</span>, [[Configurable]]: <span class=\"value\">true</span> }.</p>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-promise-instances\">\n      <h1><span class=\"secnum\" id=\"sec-25.4.6\"><a href=\"/sec/sec-properties-of-promise-instances.html\" title=\"link to this section\">25.4.6</a></span> Properties of Promise Instances</h1>\n\n      <p>Promise instances are ordinary objects that inherit properties from the Promise prototype object (the intrinsic,\n      %PromisePrototype%). Promise instances are initially created with the internal slots described in <a href=\"/sec/table-59.html\">Table\n      59</a>.</p>\n\n      <figure>\n        <figcaption><span id=\"table-59\">Table 59</span> &#x2014; Internal Slots of Promise Instances</figcaption>\n        <table class=\"real-table\">\n          <tr>\n            <th>Internal Slot</th>\n            <th>Description</th>\n          </tr>\n          <tr>\n            <td>[[PromiseState]]</td>\n            <td>A String value that governs how a promise will react to incoming calls to its <code>then</code> method. The possible values are: <code>&quot;pending&quot;</code><span style=\"font-family: Times New Roman\">,</span> <code>&quot;fulfilled&quot;</code>, and <code>&quot;rejected&quot;</code><span style=\"font-family: Times New Roman\">.</span></td>\n          </tr>\n          <tr>\n            <td>[[PromiseResult]]</td>\n            <td>The value with which the promise has been fulfilled or rejected, if any. Only meaningful if <span style=\"font-family: Times New Roman\">[[PromiseState]]</span> is not <code>&quot;pending&quot;</code>.</td>\n          </tr>\n          <tr>\n            <td>[[PromiseFulfillReactions]]</td>\n            <td>A <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> of PromiseReaction records to be processed when/if the promise transitions from the <code>&quot;pending&quot;</code> state to the <code>&quot;fulfilled&quot;</code> state.</td>\n          </tr>\n          <tr>\n            <td>[[PromiseRejectReactions]]</td>\n            <td>A <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> of PromiseReaction records to be processed when/if the promise transitions from the <code>&quot;pending&quot;</code> state to the <code>&quot;rejected&quot;</code> state.</td>\n          </tr>\n        </table>\n      </figure>\n    </section>\n  </section>\n"}