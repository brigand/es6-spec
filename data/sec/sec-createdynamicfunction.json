{"id":"sec-createdynamicfunction","html":"\n          <h1><span class=\"secnum\" id=\"sec-19.2.1.1.1\"><a href=\"/sec/sec-createdynamicfunction.html\" title=\"link to this section\">19.2.1.1.1</a></span> RuntimeSemantics: CreateDynamicFunction(constructor, newTarget,\n              kind, args)</h1>\n\n          <p>The abstract operation CreateDynamicFunction is called with arguments <var>constructor</var>, <var>newTarget</var>,\n          <var>kind</var>, and <var>args</var>. <var>constructor</var> is the constructor function that is performing this action,\n          <var>newTarget</var> is the constructor that <code>new</code> was initially applied to, <var>kind</var> is either\n          <code>&quot;normal&quot;</code> or <code>&quot;generator&quot;</code>, and <var>args</var> is a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the actual argument values that were passed to\n          <var>constructor</var>. The following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li>If <i>newTarget</i> is <b>undefined</b><i>,</i> let <i>newTarget</i> be <i>constructor</i>.</li>\n            <li>If <i>kind</i> is <code>&quot;normal&quot;</code>, then\n              <ol class=\"block\">\n                <li>Let <i>goal</i> be the grammar symbol <i>FunctionBody.</i></li>\n                <li>Let <i>parameterGoal</i> be the grammar symbol <i>FormalParameters</i>.</li>\n                <li>Let <i>fallbackProto</i> be <code>&quot;%FunctionPrototype%&quot;</code>.</li>\n              </ol>\n            </li>\n            <li>Else,\n              <ol class=\"block\">\n                <li>Let <i>goal</i> be the grammar symbol <i>GeneratorBody</i>.</li>\n                <li>Let <i>parameterGoal</i> be the grammar symbol <i>FormalParameters</i><sub>[Yield]</sub>.</li>\n                <li>Let <i>fallbackProto</i> be <code>&quot;%Generator%&quot;</code>.</li>\n              </ol>\n            </li>\n            <li>Let <i>argCount</i> be the number of elements in <i>args</i>.</li>\n            <li>Let <i>P</i> be the empty String.</li>\n            <li>If <i>argCount</i> = 0, let <i>bodyText</i> be the empty String.</li>\n            <li>Else if <i>argCount</i> = 1, let <i>bodyText</i> be <i>args</i>[0].</li>\n            <li>Else <i>argCount</i> &gt; 1,\n              <ol class=\"block\">\n                <li>Let <i>firstArg</i> be <i>args</i>[0].</li>\n                <li>Let <i>P</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>firstArg</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>P</i>).</li>\n                <li>Let <i>k</i> be 1.</li>\n                <li>Repeat, while <i>k</i> &lt; <i>argCount</i>-1\n                  <ol class=\"block\">\n                    <li>Let <i>nextArg</i> be <i>args</i>[<i>k</i>].</li>\n                    <li>Let <i>nextArgString</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>nextArg</i>).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextArgString</i>).</li>\n                    <li>Let <i>P</i> be the result of concatenating the previous value of <i>P</i>, the String <code>&quot;,&quot;</code> (a\n                        comma), and <i>nextArgString</i>.</li>\n                    <li>Increase <i>k</i> by 1.</li>\n                  </ol>\n                </li>\n                <li>Let <i>bodyText</i> be <i>args</i>[<i>k</i>].</li>\n              </ol>\n            </li>\n            <li>Let <i>bodyText</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>bodyText</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>bodyText</i>).</li>\n            <li>Let <i>body</i> be the result of parsing <i>bodyText</i>, interpreted as UTF-16 encoded Unicode text as described\n                in <a href=\"/sec/sec-ecmascript-language-types-string-type.html\">6.1.4</a><i>,</i> using <i>goal</i> as the goal symbol.\n                Throw a <b>SyntaxError</b> exception if the parse fails or if any static semantics errors are detected.</li>\n            <li>If <i>bodyText</i> is <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a> (<a href=\"/sec/sec-strict-mode-code.html\">see\n                10.2.1</a>) then let <i>strict</i> be <b>true</b>, else let <i>strict</i> be <b>false</b>.</li>\n            <li>Let <i>parameters</i> be the result of parsing <i>P</i>, interpreted as UTF-16 encoded Unicode text as described\n                in <a href=\"/sec/sec-ecmascript-language-types-string-type.html\">6.1.4</a><i>,</i> using <i>parameterGoal</i> as the goal\n                symbol. Throw a <b>SyntaxError</b> exception if the parse fails or if any static semantics errors are detected. If\n                <i>strict</i> is <b>true</b>, the Early Error rules for <span class=\"prod\"><span class=\"nt\">StrictFormalParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">FormalParameters</span></span> are applied.</li>\n            <li>If any element of the BoundNames of <i>parameters</i> also occurs in the LexicallyDeclaredNames of <i>body</i>,\n                throw a <b>SyntaxError</b> exception.</li>\n            <li>If <i>body</i> Contains <i>SuperCall</i> is <i><b>true</b>,</i> throw a <b>SyntaxError</b> exception.</li>\n            <li>If <i>parameters</i> Contains <i>SuperCall</i> is <i><b>true</b>,</i> throw a <b>SyntaxError</b> exception.</li>\n            <li>If <i>body</i> Contains <i>SuperProperty</i> is <i><b>true</b>,</i> throw a <b>SyntaxError</b> exception.</li>\n            <li>If <i>parameters</i> Contains <i>SuperProperty</i> is <i><b>true</b>,</i> throw a <b>SyntaxError</b>\n                exception.</li>\n            <li>If <i>kind</i> is <code>&quot;generator&quot;</code>, then\n              <ol class=\"block\">\n                <li>If <i>parameters</i> Contains <i>YieldExpression</i> is <i><b>true</b>,</i> throw a <b>SyntaxError</b>\n                    exception.</li>\n              </ol>\n            </li>\n            <li>If <i>strict</i> is <b>true</b>, then\n              <ol class=\"block\">\n                <li>If BoundNames of <i>parameters</i> contains any duplicate elements<i>,</i> throw a <b>SyntaxError</b>\n                    exception.</li>\n              </ol>\n            </li>\n            <li>Let <i>proto</i> be <a href=\"/sec/sec-getprototypefromconstructor.html\">GetPrototypeFromConstructor</a>(<i>newTarget</i>,\n                <i>fallbackProto</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>proto</i>).</li>\n            <li>Let <i>F</i> be <a href=\"/sec/sec-functionallocate.html\">FunctionAllocate</a>(<i>proto</i>, <i>strict</i>,\n                <i>kind</i>).</li>\n            <li>Let <i>realmF</i> be the value of <i>F&#x2019;s</i> [[Realm]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>Let <i>scope</i> be <i>realmF</i>.[[globalEnv]].</li>\n            <li>Perform <a href=\"/sec/sec-functioninitialize.html\">FunctionInitialize</a>(<i>F</i>, <span style=\"font-family:\n                sans-serif\">Normal</span>, <i>parameters</i>, <i>body, scope</i>).</li>\n            <li>If <i>kind</i> is <code>&quot;generator&quot;</code>, then\n              <ol class=\"block\">\n                <li>Let <i>prototype</i> be <a href=\"/sec/sec-objectcreate.html\">ObjectCreate</a>(<span style=\"font-family:\n                    sans-serif\">%GeneratorPrototype%</span>).</li>\n                <li>Perform <a href=\"/sec/sec-makeconstructor.html\">MakeConstructor</a>(<i>F</i>, <b>true</b>, <i>prototype</i>).</li>\n              </ol>\n            </li>\n            <li>Else, perform <a href=\"/sec/sec-makeconstructor.html\">MakeConstructor</a>(<i>F</i>).</li>\n            <li>Perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>F</i>, <code>&quot;<b>anonymous</b>&quot;</code>).</li>\n            <li>Return <i>F</i>.</li>\n          </ol>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE</span> A <code>prototype</code> property is automatically created for every function created\n            using CreateDynamicFunction , to provide for the possibility that the function will be used as a constructor.</p>\n          </div>\n        "}