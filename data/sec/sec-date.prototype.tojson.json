{"id":"sec-date.prototype.tojson","html":"\n        <h1><span class=\"secnum\" id=\"sec-20.3.4.37\"><a href=\"/sec/sec-date.prototype.tojson.html\" title=\"link to this section\">20.3.4.37</a></span> Date.prototype.toJSON ( key )</h1>\n\n        <p>This function provides a String representation of a Date object for use by <code><a href=\"/sec/sec-json.stringify.html\">JSON.stringify</a></code> (<a href=\"/sec/sec-json.stringify.html\">24.3.2</a>).</p>\n\n        <p class=\"normalbefore\">When the <code>toJSON</code> method is called with argument <var>key</var>, the following steps\n        are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>O</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<b>this</b> value).</li>\n          <li>Let <i>tv</i> be <a href=\"/sec/sec-toprimitive.html\">ToPrimitive</a>(<i>O</i>, hint Number).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>tv</i>).</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>tv</i>) is Number and <i>tv</i> is not finite, return\n              <b>null</b>.</li>\n          <li>Return <a href=\"/sec/sec-invoke.html\">Invoke</a>(<i>O</i>, <code>&quot;toISOString&quot;</code>).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> The argument is ignored.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> The <code>toJSON</code> function is intentionally generic; it does not require that\n          its <b>this</b> value be a Date object. Therefore, it can be transferred to other kinds of objects for use as a method.\n          However, it does require that any such object have a <code>toISOString</code> method.</p>\n        </div>\n      "}