{"id":"sec-delete-operator-static-semantics-early-errors","html":"\n        <h1><span class=\"secnum\" id=\"sec-12.5.4.1\"><a href=\"/sec/sec-delete-operator-static-semantics-early-errors.html\" title=\"link to this section\">12.5.4.1</a></span> Static Semantics:  Early Errors</h1>\n        <div class=\"gp prod\"><span class=\"nt\">UnaryExpression</span> <span class=\"geq\">:</span> <code class=\"t\">delete</code> <span class=\"nt\">UnaryExpression</span></div>\n        <ul>\n          <li>\n            <p>It is a Syntax Error if the <span class=\"nt\">UnaryExpression</span> is contained in <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a> and the derived <span class=\"nt\">UnaryExpression</span> is <span class=\"prod\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span></span>\n            <var>IdentifierReference.</var></p>\n          </li>\n\n          <li>\n            <p>It is a Syntax Error if the derived <span class=\"nt\">UnaryExpression</span> is<br>      <span style=\"font-family:\n            Times New Roman\"><i>PrimaryExpression : CoverParenthesizedExpressionAndArrowParameterList<br></i></span>and <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span> ultimately derives a phrase that, if used in place\n            of <var>UnaryExpression,</var> would produce a Syntax Error according to these rules. This rule is recursively\n            applied.</p>\n          </li>\n        </ul>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The last rule means that expressions such as<br>\t\t<code>delete\n          (((foo)))</code><br>produce early errors because of recursive application of the first rule.</p>\n        </div>\n      "}