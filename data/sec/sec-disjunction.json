{"id":"sec-disjunction","html":"\n        <h1><span class=\"secnum\" id=\"sec-21.2.2.3\"><a href=\"/sec/sec-disjunction.html\" title=\"link to this section\">21.2.2.3</a></span>\n            Disjunction</h1>\n\n        <p>The production <span class=\"prod\"><span class=\"nt\">Disjunction</span> <span class=\"geq\">::</span> <span class=\"nt\">Alternative</span></span> evaluates by evaluating <span class=\"nt\">Alternative</span> to obtain a <span style=\"font-family: Times New Roman\">Matcher</span> and returning that <span style=\"font-family: Times New\n        Roman\">Matcher</span>.</p>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Disjunction</span> <span class=\"geq\">::</span>\n        <span class=\"nt\">Alternative</span> <code class=\"t\">|</code> <span class=\"nt\">Disjunction</span></span> evaluates as\n        follows:</p>\n\n        <ol class=\"proc\">\n          <li>Evaluate <i>Alternative</i> to obtain a Matcher <i>m1</i>.</li>\n          <li>Evaluate <i>Disjunction</i> to obtain a Matcher <i>m2</i>.</li>\n          <li>Return an internal Matcher closure that takes two arguments, a State <i>x</i> and a Continuation <i>c</i>, and\n              performs the following steps when evaluated:\n            <ol class=\"nested proc\">\n              <li><a href=\"/sec/sec-call.html\">Call</a> <i>m1</i>(<i>x</i>, <i>c</i>) and let <i>r</i> be its result.</li>\n              <li>If <i>r</i> is not <b>failure</b>, return <i>r</i>.</li>\n              <li><a href=\"/sec/sec-call.html\">Call</a> <i>m2</i>(<i>x</i>, <i>c</i>) and return its result.</li>\n            </ol>\n          </li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The <code>|</code> regular expression operator separates two alternatives. The pattern\n          first tries to match the left <span class=\"nt\">Alternative</span> (followed by the sequel of the regular expression); if\n          it fails, it tries to match the right <span class=\"nt\">Disjunction</span> (followed by the sequel of the regular\n          expression). If the left <span class=\"nt\">Alternative</span>, the right <span class=\"nt\">Disjunction</span>, and the\n          sequel all have choice points, all choices in the sequel are tried before moving on to the next choice in the left <span class=\"nt\">Alternative</span>. If choices in the left <span class=\"nt\">Alternative</span> are exhausted, the right <span class=\"nt\">Disjunction</span> is tried instead of the left <span class=\"nt\">Alternative</span>. Any capturing\n          parentheses inside a portion of the pattern skipped by <code>|</code> produce <b>undefined</b> values instead of\n          Strings. Thus, for example,</p>\n\n          <pre>/a|ab/.exec(&quot;abc&quot;)</pre>\n\n          <p>returns the result <code>&quot;a&quot;</code> and not <code>&quot;ab&quot;</code>. Moreover,</p>\n\n          <pre>/((a)|(ab))((c)|(bc))/.exec(&quot;abc&quot;)</pre>\n\n          <p>returns the array</p>\n\n          <pre>[&quot;abc&quot;, &quot;a&quot;, &quot;a&quot;, undefined, &quot;bc&quot;, undefined, &quot;bc&quot;]</pre>\n\n          <p>and not</p>\n\n          <pre>[&quot;abc&quot;, &quot;ab&quot;, undefined, &quot;ab&quot;, &quot;c&quot;, &quot;c&quot;, undefined]</pre>\n\n          <p></p>\n        </div>\n      "}