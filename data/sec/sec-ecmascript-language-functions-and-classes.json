{"id":"sec-ecmascript-language-functions-and-classes","html":"\n  <div class=\"front\">\n    <h1><span class=\"secnum\" id=\"sec-14\"><a href=\"/sec/sec-ecmascript-language-functions-and-classes.html\" title=\"link to this section\">14</a></span> ECMAScript Language: Functions and Classes</h1>\n\n    <div class=\"note\">\n      <p><span class=\"nh\">NOTE</span> Various ECMAScript language elements cause the creation of ECMAScript function objects (<a href=\"/sec/sec-ecmascript-function-objects.html\">9.2</a>). Evaluation of such functions starts with the execution of their [[Call]]\n      internal method (<a href=\"/sec/sec-ecmascript-function-objects-call-thisargument-argumentslist.html\">9.2.1</a>).</p>\n    </div>\n  </div>\n\n  <section id=\"sec-function-definitions\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-14.1\"><a href=\"/sec/sec-function-definitions.html\" title=\"link to this section\">14.1</a></span>\n          Function Definitions</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">FunctionDeclaration</span><sub class=\"g-params\">[Yield, Default]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">function</code> <span class=\"nt\">BindingIdentifier</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n        <div class=\"rhs\"><span class=\"grhsannot\">[+Default]</span> <code class=\"t\">function</code> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">FunctionExpression</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">function</code> <span class=\"nt\">BindingIdentifier</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">StrictFormalParameters</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">FormalParameters</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">FormalParameters</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"grhsannot\">[empty]</span></div>\n        <div class=\"rhs\"><span class=\"nt\">FormalParameterList</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">FormalParameterList</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">FunctionRestParameter</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">FormalsList</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">FormalsList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">,</code> <span class=\"nt\">FunctionRestParameter</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">FormalsList</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">FormalParameter</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">FormalsList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">,</code> <span class=\"nt\">FormalParameter</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">FunctionRestParameter</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">BindingRestElement</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">FormalParameter</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">BindingElement</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">FunctionBody</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">FunctionStatementList</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">FunctionStatementList</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">StatementList</span><sub class=\"g-params\">[?Yield, Return]</sub><sub class=\"g-opt\">opt</sub></div>\n      </div>\n    </div>\n\n    <section id=\"sec-directive-prologues-and-the-use-strict-directive\">\n      <h1><span class=\"secnum\" id=\"sec-14.1.1\"><a href=\"/sec/sec-directive-prologues-and-the-use-strict-directive.html\" title=\"link to this section\">14.1.1</a></span> Directive Prologues and the Use Strict Directive</h1>\n\n      <p>A Directive Prologue is the longest sequence of <span class=\"nt\">ExpressionStatement</span> productions occurring as the\n      initial <span class=\"nt\">StatementListItem</span> or <span class=\"nt\">ModuleItem</span> productions of a <span class=\"nt\">FunctionBody</span>, a <span class=\"nt\">ScriptBody</span>, or a <span class=\"nt\">ModuleBody</span> and where each\n      <span class=\"nt\">ExpressionStatement</span> in the sequence consists entirely of a <span class=\"nt\">StringLiteral</span>\n      token followed by a semicolon<span style=\"font-family: Times New Roman\">.</span> The semicolon may appear explicitly or may\n      be inserted by <a href=\"/sec/sec-automatic-semicolon-insertion.html\">automatic semicolon insertion</a>. A Directive Prologue may be\n      an empty sequence.</p>\n\n      <p>A Use Strict Directive is an <span class=\"nt\">ExpressionStatement</span> in a Directive Prologue whose <span class=\"nt\">StringLiteral</span> is either the exact code unit sequences <code>&quot;use</code>&#xA0;<code>strict&quot;</code> or\n      <code>&apos;use</code>&#xA0;<code>strict&apos;</code>. A Use Strict Directive may not contain an <span class=\"nt\">EscapeSequence</span> or <span class=\"nt\">LineContinuation</span>.</p>\n\n      <p>A Directive Prologue may contain more than one Use Strict Directive. However, an implementation may issue a warning if\n      this occurs.</p>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> The <span class=\"nt\">ExpressionStatement</span> productions of a Directive Prologue are\n        evaluated normally during evaluation of the containing production. Implementations may define implementation specific\n        meanings for <span class=\"nt\">ExpressionStatement</span> productions which are not a Use Strict Directive and which occur\n        in a Directive Prologue. If an appropriate notification mechanism exists, an implementation should issue a warning if it\n        encounters in a Directive Prologue an <span class=\"nt\">ExpressionStatement</span> that is not a Use Strict Directive and\n        which does not have a meaning defined by the implementation.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum\" id=\"sec-14.1.2\"><a href=\"/sec/sec-function-definitions-static-semantics-early-errors.html\" title=\"link to this section\">14.1.2</a></span> Static Semantics:  Early Errors</h1>\n\n      <p><span class=\"prod\"><span class=\"nt\">FunctionDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code>\n      <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></span><br><span class=\"prod\"><span class=\"nt\">FunctionDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></span><br><span class=\"prod\"><span class=\"nt\">FunctionExpression</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <span class=\"nt\">BindingIdentifier</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span>\n      <code class=\"t\">}</code></span></p>\n\n      <ul>\n        <li>\n          <p>If the source code matching this production is <a href=\"/sec/sec-strict-mode-code.html\">strict code</a>, the Early Error rules\n          for <span class=\"prod\"><span class=\"nt\">StrictFormalParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">FormalParameters</span></span> are applied.</p>\n        </li>\n\n        <li>\n          <p>If the source code matching this production is <a href=\"/sec/sec-strict-mode-code.html\">strict code</a>, it is a Syntax Error\n          if <span class=\"nt\">BindingIdentifier</span> is the <span class=\"nt\">IdentifierName</span> <code>eval</code> or the\n          <span class=\"nt\">IdentifierName</span> <code>arguments</code>.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if any element of the BoundNames of <span class=\"nt\">FormalParameters</span> also occurs in the\n          LexicallyDeclaredNames of <span class=\"nt\">FunctionBody</span>.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if <span class=\"nt\">FormalParameters</span> Contains <span class=\"nt\">SuperProperty</span> is\n          <span style=\"font-family: Times New Roman\"><b><i>true</i></b></span>.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if <span class=\"nt\">FunctionBody</span> Contains <span class=\"nt\">SuperProperty</span> is <span style=\"font-family: Times New Roman\"><b><i>true</i></b></span>.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if <span class=\"nt\">FormalParameters</span> Contains <span class=\"nt\">SuperCall</span> is <span style=\"font-family: Times New Roman\"><b><i>true</i></b></span>.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if <span class=\"nt\">FunctionBody</span> Contains <span class=\"nt\">SuperCall</span> is <span style=\"font-family: Times New Roman\"><b><i>true</i></b></span>.</p>\n        </li>\n      </ul>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE 1</span> The <span style=\"font-family: Times New Roman\">LexicallyDeclaredNames</span> of a <span class=\"nt\">FunctionBody</span> does not include identifiers bound using var or function declarations.</p>\n      </div>\n\n      <div class=\"gp prod\"><span class=\"nt\">StrictFormalParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">FormalParameters</span></div>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if <span style=\"font-family: Times New Roman\">BoundNames of <i>FormalParameters</i></span>\n          contains any duplicate elements.</p>\n        </li>\n      </ul>\n      <div class=\"gp prod\"><span class=\"nt\">FormalParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">FormalParameterList</span></div>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if IsSimpleParameterList of <span class=\"nt\">FormalParameterList</span> is <span class=\"value\">false</span> and <span style=\"font-family: Times New Roman\">BoundNames of\n          <i>FormalParameterList</i></span> contains any duplicate elements.</p>\n        </li>\n      </ul>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE 2</span> Multiple occurrences of the same <span class=\"nt\">BindingIdentifier</span> in a <span class=\"nt\">FormalParameterList</span> is only allowed for functions and generator functions which have simple parameter\n        lists  and which are not defined in <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a>.</p>\n      </div>\n\n      <div class=\"gp prod\"><span class=\"nt\">FunctionBody</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionStatementList</span></div>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if the LexicallyDeclaredNames of <span class=\"nt\">FunctionStatementList</span> contains any\n          duplicate entries.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if any element of the LexicallyDeclaredNames of <span class=\"nt\">FunctionStatementList</span>\n          also occurs in the VarDeclaredNames of <span class=\"nt\">FunctionStatementList</span>.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if ContainsDuplicateLabels of <span style=\"font-family: Times New\n          Roman\"><i>FunctionStatementList</i> with argument &#xAB; &#xBB; is <b>true</b>.</span></p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if ContainsUndefinedBreakTarget of <span style=\"font-family: Times New\n          Roman\"><i>FunctionStatementList</i> with argument &#xAB; &#xBB; is <b>true</b>.</span></p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if ContainsUndefinedContinueTarget of <span style=\"font-family: Times New\n          Roman\"><i>FunctionStatementList</i> with arguments &#xAB; &#xBB; and &#xAB; &#xBB; is <b>true</b>.</span></p>\n        </li>\n      </ul>\n    </section>\n\n    <section id=\"sec-function-definitions-static-semantics-boundnames\">\n      <h1><span class=\"secnum\" id=\"sec-14.1.3\"><a href=\"/sec/sec-function-definitions-static-semantics-boundnames.html\" title=\"link to this section\">14.1.3</a></span> Static Semantics:  BoundNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-identifiers-static-semantics-boundnames.html\">12.1.2</a>, <a href=\"/sec/sec-let-and-const-declarations-static-semantics-boundnames.html\">13.3.1.2</a>, <a href=\"/sec/sec-variable-statement-static-semantics-boundnames.html\">13.3.2.1</a>, <a href=\"/sec/sec-destructuring-binding-patterns-static-semantics-boundnames.html\">13.3.3.1</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-boundnames.html\">13.7.5.2</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-boundnames.html\">14.2.2</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-boundnames.html\">14.4.2</a>, <a href=\"/sec/sec-class-definitions-static-semantics-boundnames.html\">14.5.2</a>, <a href=\"/sec/sec-imports-static-semantics-boundnames.html\">15.2.2.2</a>, <a href=\"/sec/sec-exports-static-semantics-boundnames.html\">15.2.3.2</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">FunctionDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return the BoundNames of <i>BindingIdentifier</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FunctionDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return &#xAB;<code>&quot;*default*&quot;</code>&#xBB;.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> <code>&quot;*default*&quot;</code> is used within this specification as a synthetic name for\n        hoistable anonymous functions that are defined using export declarations.</p>\n      </div>\n\n      <div class=\"gp prod\"><span class=\"nt\">FormalParameters</span> <span class=\"geq\">:</span> <span class=\"grhsannot\">[empty]</span></div>\n      <ol class=\"proc\">\n        <li>Return an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FormalParameterList</span> <span class=\"geq\">:</span> <span class=\"nt\">FormalsList</span> <code class=\"t\">,</code> <span class=\"nt\">FunctionRestParameter</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>names</i> be BoundNames of <i>FormalsList</i>.</li>\n        <li>Append to <i>names</i> the BoundNames of <i>FunctionRestParameter.</i></li>\n        <li>Return <i>names</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FormalsList</span> <span class=\"geq\">:</span> <span class=\"nt\">FormalsList</span> <code class=\"t\">,</code> <span class=\"nt\">FormalParameter</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>names</i> be BoundNames of <i>FormalsList</i>.</li>\n        <li>Append to <i>names</i> the elements of BoundNames of <i>FormalParameter.</i></li>\n        <li>Return <i>names</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-function-definitions-static-semantics-contains\">\n      <h1><span class=\"secnum\" id=\"sec-14.1.4\"><a href=\"/sec/sec-function-definitions-static-semantics-contains.html\" title=\"link to this section\">14.1.4</a></span> Static Semantics:  Contains</h1>\n\n      <p>With parameter <var>symbol</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-static-semantic-rules.html\">5.3</a>, <a href=\"/sec/sec-object-initializer-static-semantics-contains.html\">12.2.6.3</a>, <a href=\"/sec/sec-static-semantics-static-semantics-contains.html\">12.3.1.1</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-contains.html\">14.2.3</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-contains.html\">14.4.4</a>, <a href=\"/sec/sec-class-definitions-static-semantics-contains.html\">14.5.4</a></p>\n\n      <div class=\"gp prod\"><span class=\"nt\">FunctionDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n\n      <p><span class=\"prod\"><span class=\"nt\">FunctionDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code>\n      <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></span><br><span class=\"prod\"><span class=\"nt\">FunctionExpression</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <span class=\"nt\">BindingIdentifier</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span>\n      <code class=\"t\">}</code></span></p>\n\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> Static semantic rules that depend upon substructure generally do not look into function\n        definitions.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-function-definitions-static-semantics-containsexpression\">\n      <h1><span class=\"secnum\" id=\"sec-14.1.5\"><a href=\"/sec/sec-function-definitions-static-semantics-containsexpression.html\" title=\"link to this section\">14.1.5</a></span> Static Semantics:  ContainsExpression</h1>\n\n      <p>See also: <a href=\"/sec/sec-destructuring-binding-patterns-static-semantics-containsexpression.html\">13.3.3.2</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-containsexpression.html\">14.2.4</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">FormalParameters</span> <span class=\"geq\">:</span> <span class=\"grhsannot\">[empty]</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FormalParameterList</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionRestParameter</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FormalParameterList</span> <span class=\"geq\">:</span> <span class=\"nt\">FormalsList</span> <code class=\"t\">,</code> <span class=\"nt\">FunctionRestParameter</span></div>\n      <ol class=\"proc\">\n        <li>Return ContainsExpression of <i>FormalsList</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FormalsList</span> <span class=\"geq\">:</span> <span class=\"nt\">FormalsList</span> <code class=\"t\">,</code> <span class=\"nt\">FormalParameter</span></div>\n      <ol class=\"proc\">\n        <li>If ContainsExpression of <i>FormalsList</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsExpression of <i>FormalParameter</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-function-definitions-static-semantics-expectedargumentcount\">\n      <h1><span class=\"secnum\" id=\"sec-14.1.6\"><a href=\"/sec/sec-function-definitions-static-semantics-expectedargumentcount.html\" title=\"link to this section\">14.1.6</a></span> Static Semantics:  ExpectedArgumentCount</h1>\n\n      <p>See also: <a href=\"/sec/sec-arrow-function-definitions-static-semantics-expectedargumentcount.html\">14.2.5</a>, <a href=\"/sec/sec-method-definitions-static-semantics-expectedargumentcount.html\">14.3.3</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">FormalParameters</span> <span class=\"geq\">:</span> <span class=\"grhsannot\">[empty]</span></div>\n      <ol class=\"proc\">\n        <li>Return 0.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FormalParameterList</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionRestParameter</span></div>\n      <ol class=\"proc\">\n        <li>Return 0.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FormalParameterList</span> <span class=\"geq\">:</span> <span class=\"nt\">FormalsList</span> <code class=\"t\">,</code> <span class=\"nt\">FunctionRestParameter</span></div>\n      <ol class=\"proc\">\n        <li>Return the ExpectedArgumentCount of <i>FormalsList</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> The <span style=\"font-family: Times New Roman\">ExpectedArgumentCount</span> of a <span class=\"nt\">FormalParameterList</span> is the number of <span class=\"nt\">FormalParameters</span> to the left of either the\n        rest parameter or the first <span class=\"nt\">FormalParameter</span> with an Initializer. A <span class=\"nt\">FormalParameter</span> without an initializer is allowed after the first parameter with an initializer but such\n        parameters are considered to be optional with <span class=\"value\">undefined</span> as their default value.</p>\n      </div>\n\n      <div class=\"gp prod\"><span class=\"nt\">FormalsList</span> <span class=\"geq\">:</span> <span class=\"nt\">FormalParameter</span></div>\n      <ol class=\"proc\">\n        <li>If HasInitializer of <i>FormalParameter</i>  is <b>true</b> return 0</li>\n        <li>Return 1.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FormalsList</span> <span class=\"geq\">:</span> <span class=\"nt\">FormalsList</span> <code class=\"t\">,</code> <span class=\"nt\">FormalParameter</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>count</i> be the ExpectedArgumentCount of <i>FormalsList.</i></li>\n        <li>If HasInitializer of <i>FormalsList</i> is <b>true</b> or HasInitializer of <i>FormalParameter</i> is <b>true</b>,\n            return <i>count</i>.</li>\n        <li>Return <i>count</i>+1.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-function-definitions-static-semantics-hasinitializer\">\n      <h1><span class=\"secnum\" id=\"sec-14.1.7\"><a href=\"/sec/sec-function-definitions-static-semantics-hasinitializer.html\" title=\"link to this section\">14.1.7</a></span> Static Semantics:  HasInitializer</h1>\n\n      <p>See also: <a href=\"/sec/sec-destructuring-binding-patterns-static-semantics-hasinitializer.html\">13.3.3.3</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-hasinitializer.html\">14.2.6</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">FormalParameters</span> <span class=\"geq\">:</span> <span class=\"grhsannot\">[empty]</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FormalParameterList</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionRestParameter</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FormalParameterList</span> <span class=\"geq\">:</span> <span class=\"nt\">FormalsList</span> <code class=\"t\">,</code> <span class=\"nt\">FunctionRestParameter</span></div>\n      <ol class=\"proc\">\n        <li>If HasInitializer of <i>FormalsList</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FormalsList</span> <span class=\"geq\">:</span> <span class=\"nt\">FormalsList</span> <code class=\"t\">,</code> <span class=\"nt\">FormalParameter</span></div>\n      <ol class=\"proc\">\n        <li>If HasInitializer of <i>FormalsList</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return HasInitializer of <i>FormalParameter</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-function-definitions-static-semantics-hasname\">\n      <h1><span class=\"secnum\" id=\"sec-14.1.8\"><a href=\"/sec/sec-function-definitions-static-semantics-hasname.html\" title=\"link to this section\">14.1.8</a></span> Static Semantics:  HasName</h1>\n\n      <p>See also: <a href=\"/sec/sec-semantics-static-semantics-hasname.html\">12.2.1.2</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-hasname.html\">14.2.7</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-hasname.html\">14.4.7</a>, <a href=\"/sec/sec-class-definitions-static-semantics-hasname.html\">14.5.6</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">FunctionExpression</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FunctionExpression</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>true</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-isanonymousfunctiondefinition\">\n      <h1><span class=\"secnum\" id=\"sec-14.1.9\"><a href=\"/sec/sec-isanonymousfunctiondefinition.html\" title=\"link to this section\">14.1.9</a></span> Static Semantics:  IsAnonymousFunctionDefinition ( production )</h1>\n\n      <p class=\"normalbefore\">The abstract operation IsAnonymousFunctionDefinition determines if its argument is a function\n      definition that does not bind a name. The argument <var>production</var> is the result of parsing an <span class=\"nt\">AssignmentExpression</span> or <span class=\"nt\">Initializer</span>. The following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>If IsFunctionDefinition of <i>production</i> is <b>false</b>, return <b>false</b>.</li>\n        <li>Let <i>hasName</i> be the result of HasName of <i>production</i>.</li>\n        <li>If <i>hasName</i> is <b>true</b>, return <b>false</b>.</li>\n        <li>Return <b>true</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-function-definitions-static-semantics-isconstantdeclaration\">\n      <h1><span class=\"secnum\" id=\"sec-14.1.10\"><a href=\"/sec/sec-function-definitions-static-semantics-isconstantdeclaration.html\" title=\"link to this section\">14.1.10</a></span> Static Semantics:  IsConstantDeclaration</h1>\n\n      <p>See also: <a href=\"/sec/sec-let-and-const-declarations-static-semantics-isconstantdeclaration.html\">13.3.1.3</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-isconstantdeclaration.html\">14.4.8</a>, <a href=\"/sec/sec-class-definitions-static-semantics-isconstantdeclaration.html\">14.5.7</a>, <a href=\"/sec/sec-exports-static-semantics-isconstantdeclaration.html\">15.2.3.7</a>.</p>\n\n      <p><span class=\"prod\"><span class=\"nt\">FunctionDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code>\n      <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></span><br><span class=\"prod\"><span class=\"nt\">FunctionDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></span></p>\n\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-function-definitions-static-semantics-isfunctiondefinition\">\n      <h1><span class=\"secnum\" id=\"sec-14.1.11\"><a href=\"/sec/sec-function-definitions-static-semantics-isfunctiondefinition.html\" title=\"link to this section\">14.1.11</a></span> Static Semantics:  IsFunctionDefinition</h1>\n\n      <p>See also: <a href=\"/sec/sec-semantics-static-semantics-isfunctiondefinition.html\">12.2.1.3</a>, <a href=\"/sec/sec-grouping-operator-static-semantics-isfunctiondefinition.html\">12.2.10.2</a>, <a href=\"/sec/sec-static-semantics-static-semantics-isfunctiondefinition.html\">12.3.1.2</a>, <a href=\"/sec/sec-postfix-expressions-static-semantics-isfunctiondefinition.html\">12.4.2</a>, <a href=\"/sec/sec-unary-operators-static-semantics-isfunctiondefinition.html\">12.5.2</a>, <a href=\"/sec/sec-multiplicative-operators-static-semantics-isfunctiondefinition.html\">12.6.1</a>, <a href=\"/sec/sec-additive-operators-static-semantics-isfunctiondefinition.html\">12.7.1</a>, <a href=\"/sec/sec-bitwise-shift-operators-static-semantics-isfunctiondefinition.html\">12.8.1</a>, <a href=\"/sec/sec-relational-operators-static-semantics-isfunctiondefinition.html\">12.9.1</a>, <a href=\"/sec/sec-equality-operators-static-semantics-isfunctiondefinition.html\">12.10.1</a>, <a href=\"/sec/sec-binary-bitwise-operators-static-semantics-isfunctiondefinition.html\">12.11.1</a>, <a href=\"/sec/sec-binary-logical-operators-static-semantics-isfunctiondefinition.html\">12.12.1</a>, <a href=\"/sec/sec-conditional-operator-static-semantics-isfunctiondefinition.html\">12.13.1</a>, <a href=\"/sec/sec-assignment-operators-static-semantics-isfunctiondefinition.html\">12.14.2</a>, <a href=\"/sec/sec-comma-operator-static-semantics-isfunctiondefinition.html\">12.15.1</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-isfunctiondefinition.html\">14.4.9</a>, <a href=\"/sec/sec-class-definitions-static-semantics-isfunctiondefinition.html\">14.5.8</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">FunctionExpression</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>true</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FunctionExpression</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>true</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-function-definitions-static-semantics-issimpleparameterlist\">\n      <h1><span class=\"secnum\" id=\"sec-14.1.12\"><a href=\"/sec/sec-function-definitions-static-semantics-issimpleparameterlist.html\" title=\"link to this section\">14.1.12</a></span> Static Semantics:  IsSimpleParameterList</h1>\n\n      <p>See also: <a href=\"/sec/sec-destructuring-binding-patterns-static-semantics-issimpleparameterlist.html\">13.3.3.4</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-issimpleparameterlist.html\">14.2.8</a></p>\n\n      <div class=\"gp prod\"><span class=\"nt\">FormalParameters</span> <span class=\"geq\">:</span> <span class=\"grhsannot\">[empty]</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>true</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FormalParameterList</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionRestParameter</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FormalParameterList</span> <span class=\"geq\">:</span> <span class=\"nt\">FormalsList</span> <code class=\"t\">,</code> <span class=\"nt\">FunctionRestParameter</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FormalsList</span> <span class=\"geq\">:</span> <span class=\"nt\">FormalsList</span> <code class=\"t\">,</code> <span class=\"nt\">FormalParameter</span></div>\n      <ol class=\"proc\">\n        <li>If IsSimpleParameterList of <i>FormalsList</i> is <b>false</b>, return <b>false</b>.</li>\n        <li>Return IsSimpleParameterList of <i>FormalParameter</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FormalParameter</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingElement</span></div>\n      <ol class=\"proc\">\n        <li>Return IsSimpleParameterList of <i>BindingElement</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-function-definitions-static-semantics-lexicallydeclarednames\">\n      <h1><span class=\"secnum\" id=\"sec-14.1.13\"><a href=\"/sec/sec-function-definitions-static-semantics-lexicallydeclarednames.html\" title=\"link to this section\">14.1.13</a></span> Static Semantics:  LexicallyDeclaredNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-block-static-semantics-lexicallydeclarednames.html\">13.2.5</a>, <a href=\"/sec/sec-switch-statement-static-semantics-lexicallydeclarednames.html\">13.12.5</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-lexicallydeclarednames.html\">13.13.6</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-lexicallydeclarednames.html\">14.2.10</a>, <a href=\"/sec/sec-scripts-static-semantics-lexicallydeclarednames.html\">15.1.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-lexicallydeclarednames.html\">15.2.1.11</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">FunctionStatementList</span> <span class=\"geq\">:</span> <span class=\"grhsannot\">[empty]</span></div>\n      <ol class=\"proc\">\n        <li>Return an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FunctionStatementList</span> <span class=\"geq\">:</span> <span class=\"nt\">StatementList</span></div>\n      <ol class=\"proc\">\n        <li>Return TopLevelLexicallyDeclaredNames of <i>StatementList</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-function-definitions-static-semantics-lexicallyscopeddeclarations\">\n      <h1><span class=\"secnum\" id=\"sec-14.1.14\"><a href=\"/sec/sec-function-definitions-static-semantics-lexicallyscopeddeclarations.html\" title=\"link to this section\">14.1.14</a></span> Static Semantics:  LexicallyScopedDeclarations</h1>\n\n      <p>See also: <a href=\"/sec/sec-block-static-semantics-lexicallyscopeddeclarations.html\">13.2.6</a>, <a href=\"/sec/sec-switch-statement-static-semantics-lexicallyscopeddeclarations.html\">13.12.6</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-lexicallyscopeddeclarations.html\">13.13.7</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations.html\">14.2.11</a>, <a href=\"/sec/sec-scripts-static-semantics-lexicallyscopeddeclarations.html\">15.1.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-lexicallyscopeddeclarations.html\">15.2.1.12</a>, <a href=\"/sec/sec-exports-static-semantics-lexicallyscopeddeclarations.html\">15.2.3.8</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">FunctionStatementList</span> <span class=\"geq\">:</span> <span class=\"grhsannot\">[empty]</span></div>\n      <ol class=\"proc\">\n        <li>Return an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FunctionStatementList</span> <span class=\"geq\">:</span> <span class=\"nt\">StatementList</span></div>\n      <ol class=\"proc\">\n        <li>Return the TopLevelLexicallyScopedDeclarations of <i>StatementList</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-function-definitions-static-semantics-vardeclarednames\">\n      <h1><span class=\"secnum\" id=\"sec-14.1.15\"><a href=\"/sec/sec-function-definitions-static-semantics-vardeclarednames.html\" title=\"link to this section\">14.1.15</a></span> Static Semantics:  VarDeclaredNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-vardeclarednames.html\">13.1.5</a>, <a href=\"/sec/sec-block-static-semantics-vardeclarednames.html\">13.2.11</a>, <a href=\"/sec/sec-variable-statement-static-semantics-vardeclarednames.html\">13.3.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-vardeclarednames.html\">13.6.5</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-vardeclarednames.html\">13.7.2.4</a>, <a href=\"/sec/sec-while-statement-static-semantics-vardeclarednames.html\">13.7.3.4</a>, <a href=\"/sec/sec-for-statement-static-semantics-vardeclarednames.html\">13.7.4.5</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-vardeclarednames.html\">13.7.5.7</a>, <a href=\"/sec/sec-with-statement-static-semantics-vardeclarednames.html\">13.11.5</a>, <a href=\"/sec/sec-switch-statement-static-semantics-vardeclarednames.html\">13.12.7</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-vardeclarednames.html\">13.13.12</a>, <a href=\"/sec/sec-try-statement-static-semantics-vardeclarednames.html\">13.15.5</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-vardeclarednames.html\">14.2.12</a>, <a href=\"/sec/sec-scripts-static-semantics-vardeclarednames.html\">15.1.5</a>, <a href=\"/sec/sec-module-semantics-static-semantics-vardeclarednames.html\">15.2.1.13</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">FunctionStatementList</span> <span class=\"geq\">:</span> <span class=\"grhsannot\">[empty]</span></div>\n      <ol class=\"proc\">\n        <li>Return an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FunctionStatementList</span> <span class=\"geq\">:</span> <span class=\"nt\">StatementList</span></div>\n      <ol class=\"proc\">\n        <li>Return TopLevelVarDeclaredNames of <i>StatementList</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-function-definitions-static-semantics-varscopeddeclarations\">\n      <h1><span class=\"secnum\" id=\"sec-14.1.16\"><a href=\"/sec/sec-function-definitions-static-semantics-varscopeddeclarations.html\" title=\"link to this section\">14.1.16</a></span> Static Semantics:  VarScopedDeclarations</h1>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-varscopeddeclarations.html\">13.1.6</a>, <a href=\"/sec/sec-block-static-semantics-varscopeddeclarations.html\">13.2.12</a>, <a href=\"/sec/sec-variable-statement-static-semantics-varscopeddeclarations.html\">13.3.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-varscopeddeclarations.html\">13.6.6</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-varscopeddeclarations.html\">13.7.2.5</a>, <a href=\"/sec/sec-while-statement-static-semantics-varscopeddeclarations.html\">13.7.3.5</a>, <a href=\"/sec/sec-for-statement-static-semantics-varscopeddeclarations.html\">13.7.4.6</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations.html\">13.7.5.8</a>, <a href=\"/sec/sec-with-statement-static-semantics-varscopeddeclarations.html\">13.11.6</a>, <a href=\"/sec/sec-switch-statement-static-semantics-varscopeddeclarations.html\">13.12.8</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-varscopeddeclarations.html\">13.13.13</a>, <a href=\"/sec/sec-try-statement-static-semantics-varscopeddeclarations.html\">13.15.6</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-varscopeddeclarations.html\">14.2.13</a>, <a href=\"/sec/sec-scripts-static-semantics-varscopeddeclarations.html\">15.1.6</a>, <a href=\"/sec/sec-module-semantics-static-semantics-varscopeddeclarations.html\">15.2.1.14</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">FunctionStatementList</span> <span class=\"geq\">:</span> <span class=\"grhsannot\">[empty]</span></div>\n      <ol class=\"proc\">\n        <li>Return an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FunctionStatementList</span> <span class=\"geq\">:</span> <span class=\"nt\">StatementList</span></div>\n      <ol class=\"proc\">\n        <li>Return the TopLevelVarScopedDeclarations of <i>StatementList</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-function-definitions-runtime-semantics-evaluatebody\">\n      <h1><span class=\"secnum\" id=\"sec-14.1.17\"><a href=\"/sec/sec-function-definitions-runtime-semantics-evaluatebody.html\" title=\"link to this section\">14.1.17</a></span> Runtime Semantics: EvaluateBody</h1>\n\n      <p>With parameter <var>functionObject</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-arrow-function-definitions-runtime-semantics-evaluatebody.html\">14.2.15</a>, <a href=\"/sec/sec-generator-function-definitions-runtime-semantics-evaluatebody.html\">14.4.11</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">FunctionBody</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionStatementList</span></div>\n      <ol class=\"proc\">\n        <li>Return the result of evaluating <i>FunctionStatementList</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-function-definitions-runtime-semantics-iteratorbindinginitialization\">\n      <h1><span class=\"secnum\" id=\"sec-14.1.18\"><a href=\"/sec/sec-function-definitions-runtime-semantics-iteratorbindinginitialization.html\" title=\"link to this section\">14.1.18</a></span> Runtime Semantics: IteratorBindingInitialization</h1>\n\n      <p>With parameters <var>iteratorRecord</var> and  <var>environment</var>.</p>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> When <b>undefined</b> is passed for <var>environment</var> it indicates that a <a href=\"/sec/sec-putvalue.html\">PutValue</a> operation should be used to assign the initialization value. This is the case for formal\n        parameter lists of non-strict functions. In that case the formal parameter bindings are preinitialized in order to deal\n        with the possibility of multiple parameters with the same name.</p>\n      </div>\n\n      <p>See also: <a href=\"/sec/sec-destructuring-binding-patterns-runtime-semantics-iteratorbindinginitialization.html\">13.3.3.6</a>, <a href=\"/sec/sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization.html\">14.2.14</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">FormalParameters</span> <span class=\"geq\">:</span> <span class=\"grhsannot\">[empty]</span></div>\n      <ol class=\"proc\">\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family: sans-serif\">empty</span>).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FormalParameterList</span> <span class=\"geq\">:</span> <span class=\"nt\">FormalsList</span> <code class=\"t\">,</code> <span class=\"nt\">FunctionRestParameter</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>restIndex</i> be the result of performing IteratorBindingInitialization for <i>FormalsList</i> using\n            <i>iteratorRecord</i>, and <i>environment</i> as the arguments.</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>restIndex</i>).</li>\n        <li>Return the result of performing IteratorBindingInitialization for <i>FunctionRestParameter</i> using\n            <i>iteratorRecord</i> and <i>environment</i> as the arguments.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FormalsList</span> <span class=\"geq\">:</span> <span class=\"nt\">FormalsList</span> <code class=\"t\">,</code> <span class=\"nt\">FormalParameter</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>status</i> be the result of performing IteratorBindingInitialization for <i>FormalsList</i> using\n            <i>iteratorRecord</i> and <i>environment</i> as the arguments.</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n        <li>Return the result of performing IteratorBindingInitialization for <i>FormalParameter</i> using <i>iteratorRecord</i>\n            and <i>environment</i> as the arguments.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FormalParameter</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingElement</span></div>\n      <ol class=\"proc\">\n        <li>If HasInitializer of <i>BindingElement</i> is <b>false</b>, return the result of performing\n            IteratorBindingInitialization for <i>BindingElement</i> using <i>iteratorRecord</i> and <i>environment</i> as the\n            arguments.</li>\n        <li>Let <i>currentContext</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n        <li>Let <i>originalEnv</i> be the <a href=\"/sec/sec-execution-contexts.html\">VariableEnvironment</a> of <i>currentContext</i>.</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: The <a href=\"/sec/sec-execution-contexts.html\">VariableEnvironment</a> and <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> of <i>currentContext</i> are the same.</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>environment</i> and <i>originalEnv</i> are the same.</li>\n        <li>Let <i>paramVarEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>originalEnv</i>).</li>\n        <li>Set the <a href=\"/sec/sec-execution-contexts.html\">VariableEnvironment</a> of <i>currentContext</i> to <i>paramVarEnv</i>.</li>\n        <li>Set the <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> of <i>currentContext</i> to <i>paramVarEnv</i>.</li>\n        <li>Let <i>result</i> be the result of performing IteratorBindingInitialization for <i>BindingElement</i> using\n            <i>iteratorRecord</i> and <i>environment</i> as the arguments.</li>\n        <li>Set the <a href=\"/sec/sec-execution-contexts.html\">VariableEnvironment</a> of <i>currentContext</i> to <i>originalEnv</i>.</li>\n        <li>Set the <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> of <i>currentContext</i> to <i>originalEnv</i>.</li>\n        <li>Return <i>result</i>.</li>\n      </ol>\n\n      <p>The new <a href=\"/sec/sec-environment-records.html\">Environment Record</a> created in step 6 is only used if the <i><span style=\"font-family: Times New Roman\">BindElement</span>&#x2019;</i>s <span class=\"nt\">Initializer</span> contains a direct\n      eval.</p>\n    </section>\n\n    <section id=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\">\n      <h1><span class=\"secnum\" id=\"sec-14.1.19\"><a href=\"/sec/sec-function-definitions-runtime-semantics-instantiatefunctionobject.html\" title=\"link to this section\">14.1.19</a></span> Runtime Semantics: InstantiateFunctionObject</h1>\n\n      <p>With parameter <var>scope</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject.html\">14.4.12</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">FunctionDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the function code for <i>FunctionDeclaration</i> is <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a>, let\n            <i>strict</i> be <b>true</b>. Otherwise let <i>strict</i> be <b>false</b>.</li>\n        <li>Let <i>name</i> be StringValue of <i>BindingIdentifier.</i></li>\n        <li>Let <i>F</i> be <a href=\"/sec/sec-functioncreate.html\">FunctionCreate</a>(<span style=\"font-family: sans-serif\">Normal</span>,\n            <i>FormalParameters</i>, <i>FunctionBody, scope</i>, <i>strict</i>).</li>\n        <li>Perform <a href=\"/sec/sec-makeconstructor.html\">MakeConstructor</a>(<i>F</i>).</li>\n        <li>Perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>F</i>, <i>name</i>).</li>\n        <li>Return <i>F</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FunctionDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the function code for <i>FunctionDeclaration</i> is <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a>, let\n            <i>strict</i> be <b>true</b>. Otherwise let <i>strict</i> be <b>false</b>.</li>\n        <li>Let <i>F</i> be <a href=\"/sec/sec-functioncreate.html\">FunctionCreate</a>(<span style=\"font-family: sans-serif\">Normal</span>,\n            <i>FormalParameters</i>, <i>FunctionBody, scope</i>, <i>strict</i>).</li>\n        <li>Perform <a href=\"/sec/sec-makeconstructor.html\">MakeConstructor</a>(<i>F</i>).</li>\n        <li>Perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>F</i>, <code>&quot;default&quot;</code>).</li>\n        <li>Return <i>F</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> An anonymous <span class=\"nt\">FunctionDeclaration</span> can only occur as part of an\n        <code>export default</code> declaration.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum\" id=\"sec-14.1.20\"><a href=\"/sec/sec-function-definitions-runtime-semantics-evaluation.html\" title=\"link to this section\">14.1.20</a></span> Runtime Semantics: Evaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">FunctionDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family: sans-serif\">empty</span>).</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE 1</span> An alternative semantics is provided in <a href=\"/sec/sec-block-level-function-declarations-web-legacy-compatibility-semantics.html\">B.3.3</a>.</p>\n      </div>\n\n      <div class=\"gp prod\"><span class=\"nt\">FunctionDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family: sans-serif\">empty</span>).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FunctionExpression</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the function code for <i>FunctionExpression</i> is <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a>, let\n            <i>strict</i> be <b>true</b>. Otherwise let <i>strict</i> be <b>false</b>.</li>\n        <li>Let <i>scope</i> be the <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> of <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n        <li>Let <i>closure</i> be <a href=\"/sec/sec-functioncreate.html\">FunctionCreate</a>(<span style=\"font-family:\n            sans-serif\">Normal</span>, <i>FormalParameters</i>, <i>FunctionBody, scope</i>, <i>strict</i>).</li>\n        <li>Perform <a href=\"/sec/sec-makeconstructor.html\">MakeConstructor</a>(<i>closure</i>).</li>\n        <li>Return <i>closure</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">FunctionExpression</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the function code for <i>FunctionExpression</i> is <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a>, let\n            <i>strict</i> be <b>true</b>. Otherwise let <i>strict</i> be <b>false</b>.</li>\n        <li>Let <i>runningContext</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-lexical-environments.html\">Lexical Environment</a>.</li>\n        <li>Let <i>funcEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>runningContext</i>\n            ).</li>\n        <li>Let <i>envRec</i> be <i>funcEnv&#x2019;s</i> <a href=\"/sec/sec-lexical-environments.html\">EnvironmentRecord</a>.</li>\n        <li>Let <i>name</i> be StringValue of <i>BindingIdentifier</i>.</li>\n        <li>Perform <i>envRec.</i>CreateImmutableBinding(<i>name</i>).</li>\n        <li>Let <i>closure</i> be <a href=\"/sec/sec-functioncreate.html\">FunctionCreate</a>(<span style=\"font-family:\n            sans-serif\">Normal</span>, <i>FormalParameters</i>, <i>FunctionBody, funcEnv</i>, <i>strict</i>).</li>\n        <li>Perform <a href=\"/sec/sec-makeconstructor.html\">MakeConstructor</a>(<i>closure</i>).</li>\n        <li>Perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>closure</i>, <i>name</i>).</li>\n        <li>Perform <i>envRec</i>.InitializeBinding(<i>name,</i> <i>closure</i>).</li>\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>closure</i>).</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE 2</span> The <span class=\"nt\">BindingIdentifier</span> in a <span class=\"nt\">FunctionExpression</span> can be referenced from inside the <var>FunctionExpression&apos;s</var> <span class=\"nt\">FunctionBody</span> to allow the function to call itself recursively. However, unlike in a <span class=\"nt\">FunctionDeclaration</span>, the <span class=\"nt\">BindingIdentifier</span> in a <span class=\"nt\">FunctionExpression</span> cannot be referenced from and does not affect the scope enclosing the <span class=\"nt\">FunctionExpression</span>.</p>\n      </div>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE 3</span> A <code>prototype</code> property is automatically created for every function defined\n        using a <span class=\"nt\">FunctionDeclaration</span> or <span class=\"nt\">FunctionExpression</span>, to allow for the\n        possibility that the function will be used as a constructor.</p>\n      </div>\n\n      <div class=\"gp prod\"><span class=\"nt\">FunctionStatementList</span> <span class=\"geq\">:</span> <span class=\"grhsannot\">[empty]</span></div>\n      <ol class=\"proc\">\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<b>undefined</b>).</li>\n      </ol>\n    </section>\n  </section>\n\n  <section id=\"sec-arrow-function-definitions\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-14.2\"><a href=\"/sec/sec-arrow-function-definitions.html\" title=\"link to this section\">14.2</a></span> Arrow Function Definitions</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ArrowFunction</span><sub class=\"g-params\">[In, Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ArrowParameters</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"grhsannot\">[no <span class=\"nt\">LineTerminator</span> here]</span> <code class=\"t\">=&gt;</code> <span class=\"nt\">ConciseBody</span><sub class=\"g-params\">[?In]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ArrowParameters</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">BindingIdentifier</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ConciseBody</span><sub class=\"g-params\">[In]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"grhsannot\">[lookahead &#x2260; { ]</span> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[?In]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      </div>\n\n      <h2>Supplemental Syntax</h2>\n\n      <p>When the production</p>\n\n      <p>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"nt\">ArrowParameters</span><sub>[Yield]</sub>  <b>:</b> <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span><sub>[?Yield]</sub></p>\n\n      <p>is recognized the following grammar is used to refine the interpretation of <span class=\"prod\"><span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span> <span class=\"geq\">:</span></span></p>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ArrowFormalParameters</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">(</code> <span class=\"nt\">StrictFormalParameters</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">)</code></div>\n      </div>\n    </div>\n\n    <section id=\"sec-arrow-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum\" id=\"sec-14.2.1\"><a href=\"/sec/sec-arrow-function-definitions-static-semantics-early-errors.html\" title=\"link to this section\">14.2.1</a></span> Static Semantics:  Early Errors</h1>\n      <div class=\"gp prod\"><span class=\"nt\">ArrowFunction</span> <span class=\"geq\">:</span> <span class=\"nt\">ArrowParameters</span> <code class=\"t\">=&gt;</code> <span class=\"nt\">ConciseBody</span></div>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if <span class=\"nt\">ArrowParameters</span> Contains <span class=\"nt\">YieldExpression</span> is\n          <span style=\"font-family: Times New Roman\"><b><i>true</i></b></span>.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if <span class=\"nt\">ConciseBody</span> Contains <span class=\"nt\">YieldExpression</span> is <span style=\"font-family: Times New Roman\"><b><i>true</i></b></span>.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if any element of the <span style=\"font-family: Times New Roman\">BoundNames</span> of <span class=\"nt\">ArrowParameters</span> also occurs in the LexicallyDeclaredNames of <span class=\"nt\">ConciseBody</span>.</p>\n        </li>\n      </ul>\n\n      <p><span class=\"nt\">ArrowParameters</span><sub>[Yield]</sub> <b>:</b> <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span><sub>[?Yield]</sub></p>\n\n      <ul>\n        <li>\n          <p>If the <sub>[Yield]</sub> grammar parameter is present  on  <span class=\"nt\">ArrowParameters</span>, it is a Syntax\n          Error if the lexical token sequence matched by <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span><sub>[?Yield]</sub> cannot be parsed with no tokens\n          left over using <span class=\"nt\">ArrowFormalParameters</span><sub>[Yield]</sub> as the goal symbol.</p>\n        </li>\n\n        <li>\n          <p>If the <sub>[Yield]</sub> grammar parameter is not present on <span class=\"nt\">ArrowParameters</span>, it is a Syntax\n          Error if the lexical token sequence matched by <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span><sub>[?Yield]</sub> cannot be parsed with no tokens\n          left over using <span class=\"nt\">ArrowFormalParameters</span> as the goal symbol.</p>\n        </li>\n\n        <li>\n          <p>All early errors rules for <span class=\"nt\">ArrowFormalParameters</span> and its derived productions also apply to\n          CoveredFormalsList of <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span><sub>[?Yield]</sub>.</p>\n        </li>\n      </ul>\n    </section>\n\n    <section id=\"sec-arrow-function-definitions-static-semantics-boundnames\">\n      <h1><span class=\"secnum\" id=\"sec-14.2.2\"><a href=\"/sec/sec-arrow-function-definitions-static-semantics-boundnames.html\" title=\"link to this section\">14.2.2</a></span> Static Semantics:  BoundNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-identifiers-static-semantics-boundnames.html\">12.1.2</a>, <a href=\"/sec/sec-let-and-const-declarations-static-semantics-boundnames.html\">13.3.1.2</a>, <a href=\"/sec/sec-variable-statement-static-semantics-boundnames.html\">13.3.2.1</a>, <a href=\"/sec/sec-destructuring-binding-patterns-static-semantics-boundnames.html\">13.3.3.1</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-boundnames.html\">13.7.5.2</a>, <a href=\"/sec/sec-function-definitions-static-semantics-boundnames.html\">14.1.3</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-boundnames.html\">14.4.2</a>, <a href=\"/sec/sec-class-definitions-static-semantics-boundnames.html\">14.5.2</a>, <a href=\"/sec/sec-imports-static-semantics-boundnames.html\">15.2.2.2</a>, <a href=\"/sec/sec-exports-static-semantics-boundnames.html\">15.2.3.2</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ArrowParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>formals</i> be CoveredFormalsList of <i>CoverParenthesizedExpressionAndArrowParameterList</i>.</li>\n        <li>Return the BoundNames of <i>formals</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-arrow-function-definitions-static-semantics-contains\">\n      <h1><span class=\"secnum\" id=\"sec-14.2.3\"><a href=\"/sec/sec-arrow-function-definitions-static-semantics-contains.html\" title=\"link to this section\">14.2.3</a></span> Static Semantics:  Contains</h1>\n\n      <p>With parameter <var>symbol</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-static-semantic-rules.html\">5.3</a>, <a href=\"/sec/sec-object-initializer-static-semantics-contains.html\">12.2.6.3</a>, <a href=\"/sec/sec-static-semantics-static-semantics-contains.html\">12.3.1.1</a>, <a href=\"/sec/sec-function-definitions-static-semantics-contains.html\">14.1.4</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-contains.html\">14.4.4</a>, <a href=\"/sec/sec-class-definitions-static-semantics-contains.html\">14.5.4</a></p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ArrowFunction</span> <span class=\"geq\">:</span> <span class=\"nt\">ArrowParameters</span> <code class=\"t\">=&gt;</code> <span class=\"nt\">ConciseBody</span></div>\n      <ol class=\"proc\">\n        <li>If <i>symbol</i> is not one of <i>NewTarget</i>, <i>SuperProperty, SuperCall,</i> <code>super</code> or\n            <code>this</code>, return <b>false</b>.</li>\n        <li>If <i>ArrowParameters</i> Contains <i>symbol</i> is <b>true</b>, return <b>true</b>;</li>\n        <li>Return <i>ConciseBody</i> Contains <i>symbol</i> .</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> Normally, <span style=\"font-family: Times New Roman\">Contains</span> does not look inside\n        most function forms  However, <span style=\"font-family: Times New Roman\">Contains</span> is used to detect\n        <code>new.target</code>, <code>this</code>, and <code>super</code> usage within an <span class=\"nt\">ArrowFunction</span>.</p>\n      </div>\n\n      <div class=\"gp prod\"><span class=\"nt\">ArrowParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>formals</i> be CoveredFormalsList of <i>CoverParenthesizedExpressionAndArrowParameterList</i>.</li>\n        <li>Return <i>formals</i> Contains <i>symbol</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-arrow-function-definitions-static-semantics-containsexpression\">\n      <h1><span class=\"secnum\" id=\"sec-14.2.4\"><a href=\"/sec/sec-arrow-function-definitions-static-semantics-containsexpression.html\" title=\"link to this section\">14.2.4</a></span> Static Semantics:  ContainsExpression</h1>\n\n      <p>See also: <a href=\"/sec/sec-destructuring-binding-patterns-static-semantics-containsexpression.html\">13.3.3.2</a>, <a href=\"/sec/sec-function-definitions-static-semantics-containsexpression.html\">14.1.5</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ArrowParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n\n      <p><span class=\"prod\"><span class=\"nt\">ArrowParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span></span></p>\n\n      <ol class=\"proc\">\n        <li>Let <i>formals</i> be CoveredFormalsList of <i>CoverParenthesizedExpressionAndArrowParameterList</i>.</li>\n        <li>Return the ContainsExpression of <i>formals</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-arrow-function-definitions-static-semantics-expectedargumentcount\">\n      <h1><span class=\"secnum\" id=\"sec-14.2.5\"><a href=\"/sec/sec-arrow-function-definitions-static-semantics-expectedargumentcount.html\" title=\"link to this section\">14.2.5</a></span> Static Semantics:  ExpectedArgumentCount</h1>\n\n      <p>See also: <a href=\"/sec/sec-function-definitions-static-semantics-expectedargumentcount.html\">14.1.6</a>,<a href=\"/sec/sec-method-definitions-static-semantics-expectedargumentcount.html\">14.3.3</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ArrowParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span></div>\n      <ol class=\"proc\">\n        <li>Return 1.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ArrowParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>formals</i> be CoveredFormalsList of <i>CoverParenthesizedExpressionAndArrowParameterList</i>.</li>\n        <li>Return the ExpectedArgumentCount of <i>formals</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-arrow-function-definitions-static-semantics-hasinitializer\">\n      <h1><span class=\"secnum\" id=\"sec-14.2.6\"><a href=\"/sec/sec-arrow-function-definitions-static-semantics-hasinitializer.html\" title=\"link to this section\">14.2.6</a></span> Static Semantics:  HasInitializer</h1>\n\n      <p>See also: <a href=\"/sec/sec-destructuring-binding-patterns-static-semantics-hasinitializer.html\">13.3.3.3</a>, <a href=\"/sec/sec-function-definitions-static-semantics-hasinitializer.html\">14.1.7</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ArrowParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ArrowParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>formals</i> be CoveredFormalsList of <i>CoverParenthesizedExpressionAndArrowParameterList</i>.</li>\n        <li>Return the HasInitializer of <i>formals</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-arrow-function-definitions-static-semantics-hasname\">\n      <h1><span class=\"secnum\" id=\"sec-14.2.7\"><a href=\"/sec/sec-arrow-function-definitions-static-semantics-hasname.html\" title=\"link to this section\">14.2.7</a></span> Static Semantics:  HasName</h1>\n\n      <p>See also: <a href=\"/sec/sec-semantics-static-semantics-hasname.html\">12.2.1.2</a>, <a href=\"/sec/sec-function-definitions-static-semantics-hasname.html\">14.1.8</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-hasname.html\">14.4.7</a>, <a href=\"/sec/sec-class-definitions-static-semantics-hasname.html\">14.5.6</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ArrowFunction</span> <span class=\"geq\">:</span> <span class=\"nt\">ArrowParameters</span> <code class=\"t\">=&gt;</code> <span class=\"nt\">ConciseBody</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-arrow-function-definitions-static-semantics-issimpleparameterlist\">\n      <h1><span class=\"secnum\" id=\"sec-14.2.8\"><a href=\"/sec/sec-arrow-function-definitions-static-semantics-issimpleparameterlist.html\" title=\"link to this section\">14.2.8</a></span> Static Semantics:  IsSimpleParameterList</h1>\n\n      <p>See also: <a href=\"/sec/sec-destructuring-binding-patterns-static-semantics-issimpleparameterlist.html\">13.3.3.4</a>, <a href=\"/sec/sec-function-definitions-static-semantics-issimpleparameterlist.html\">14.1.12</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ArrowParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>true</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ArrowParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>formals</i> be CoveredFormalsList of <i>CoverParenthesizedExpressionAndArrowParameterList</i>.</li>\n        <li>Return the IsSimpleParameterList of <i>formals</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-static-semantics-coveredformalslist\">\n      <h1><span class=\"secnum\" id=\"sec-14.2.9\"><a href=\"/sec/sec-static-semantics-coveredformalslist.html\" title=\"link to this section\">14.2.9</a></span> Static Semantics:  CoveredFormalsList</h1>\n      <div class=\"gp prod\"><span class=\"nt\">ArrowParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span></div>\n      <ol class=\"proc\">\n        <li>Return <i>BindingIdentifier</i>.</li>\n      </ol>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code></div>\n        <div class=\"rhs\"><code class=\"t\">(</code> <code class=\"t\">)</code></div>\n        <div class=\"rhs\"><code class=\"t\">(</code> <code class=\"t\">...</code> <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">)</code></div>\n        <div class=\"rhs\"><code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">,</code> <code class=\"t\">...</code> <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">)</code></div>\n      </div>\n\n      <ol class=\"proc\">\n        <li>If the <sub>[Yield]</sub> grammar parameter is present for\n            <i>CoverParenthesizedExpressionAndArrowParameterList</i><sub>[Yield]</sub> return the result of parsing the lexical\n            token stream matched by <i>CoverParenthesizedExpressionAndArrowParameterList</i><sub>[Yield]</sub> using\n            <i>ArrowFormalParameters</i><sub>[Yield]</sub> as the goal symbol.</li>\n        <li>If the <sub>[Yield]</sub> grammar parameter is not present for\n            <i>CoverParenthesizedExpressionAndArrowParameterList</i><sub>[Yield]</sub> return the result of parsing the lexical\n            token stream matched by <i>CoverParenthesizedExpressionAndArrowParameterList</i> using <i>ArrowFormalParameters</i> as\n            the goal symbol.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-arrow-function-definitions-static-semantics-lexicallydeclarednames\">\n      <h1><span class=\"secnum\" id=\"sec-14.2.10\"><a href=\"/sec/sec-arrow-function-definitions-static-semantics-lexicallydeclarednames.html\" title=\"link to this section\">14.2.10</a></span> Static Semantics:  LexicallyDeclaredNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-block-static-semantics-lexicallydeclarednames.html\">13.2.5</a>, <a href=\"/sec/sec-switch-statement-static-semantics-lexicallydeclarednames.html\">13.12.5</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-lexicallydeclarednames.html\">13.13.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-lexicallydeclarednames.html\">14.1.13</a>, <a href=\"/sec/sec-scripts-static-semantics-lexicallydeclarednames.html\">15.1.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-lexicallydeclarednames.html\">15.2.1.11</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ConciseBody</span> <span class=\"geq\">:</span> <span class=\"nt\">AssignmentExpression</span></div>\n      <ol class=\"proc\">\n        <li>Return an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations\">\n      <h1><span class=\"secnum\" id=\"sec-14.2.11\"><a href=\"/sec/sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations.html\" title=\"link to this section\">14.2.11</a></span> Static Semantics:  LexicallyScopedDeclarations</h1>\n\n      <p>See also: <a href=\"/sec/sec-block-static-semantics-lexicallyscopeddeclarations.html\">13.2.6</a>, <a href=\"/sec/sec-switch-statement-static-semantics-lexicallyscopeddeclarations.html\">13.12.6</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-lexicallyscopeddeclarations.html\">13.13.7</a>, <a href=\"/sec/sec-function-definitions-static-semantics-lexicallyscopeddeclarations.html\">14.1.14</a>, <a href=\"/sec/sec-scripts-static-semantics-lexicallyscopeddeclarations.html\">15.1.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-lexicallyscopeddeclarations.html\">15.2.1.12</a>, <a href=\"/sec/sec-exports-static-semantics-lexicallyscopeddeclarations.html\">15.2.3.8</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ConciseBody</span> <span class=\"geq\">:</span> <span class=\"nt\">AssignmentExpression</span></div>\n      <ol class=\"proc\">\n        <li>Return an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-arrow-function-definitions-static-semantics-vardeclarednames\">\n      <h1><span class=\"secnum\" id=\"sec-14.2.12\"><a href=\"/sec/sec-arrow-function-definitions-static-semantics-vardeclarednames.html\" title=\"link to this section\">14.2.12</a></span> Static Semantics:  VarDeclaredNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-vardeclarednames.html\">13.1.5</a>, <a href=\"/sec/sec-block-static-semantics-vardeclarednames.html\">13.2.11</a>, <a href=\"/sec/sec-variable-statement-static-semantics-vardeclarednames.html\">13.3.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-vardeclarednames.html\">13.6.5</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-vardeclarednames.html\">13.7.2.4</a>, <a href=\"/sec/sec-while-statement-static-semantics-vardeclarednames.html\">13.7.3.4</a>, <a href=\"/sec/sec-for-statement-static-semantics-vardeclarednames.html\">13.7.4.5</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-vardeclarednames.html\">13.7.5.7</a>, <a href=\"/sec/sec-with-statement-static-semantics-vardeclarednames.html\">13.11.5</a>, <a href=\"/sec/sec-switch-statement-static-semantics-vardeclarednames.html\">13.12.7</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-vardeclarednames.html\">13.13.12</a>, <a href=\"/sec/sec-try-statement-static-semantics-vardeclarednames.html\">13.15.5</a>, <a href=\"/sec/sec-function-definitions-static-semantics-vardeclarednames.html\">14.1.15</a>, <a href=\"/sec/sec-scripts-static-semantics-vardeclarednames.html\">15.1.5</a>, <a href=\"/sec/sec-module-semantics-static-semantics-vardeclarednames.html\">15.2.1.13</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ConciseBody</span> <span class=\"geq\">:</span> <span class=\"nt\">AssignmentExpression</span></div>\n      <ol class=\"proc\">\n        <li>Return an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-arrow-function-definitions-static-semantics-varscopeddeclarations\">\n      <h1><span class=\"secnum\" id=\"sec-14.2.13\"><a href=\"/sec/sec-arrow-function-definitions-static-semantics-varscopeddeclarations.html\" title=\"link to this section\">14.2.13</a></span> Static Semantics:  VarScopedDeclarations</h1>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-varscopeddeclarations.html\">13.1.6</a>, <a href=\"/sec/sec-block-static-semantics-varscopeddeclarations.html\">13.2.12</a>, <a href=\"/sec/sec-variable-statement-static-semantics-varscopeddeclarations.html\">13.3.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-varscopeddeclarations.html\">13.6.6</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-varscopeddeclarations.html\">13.7.2.5</a>, <a href=\"/sec/sec-while-statement-static-semantics-varscopeddeclarations.html\">13.7.3.5</a>, <a href=\"/sec/sec-for-statement-static-semantics-varscopeddeclarations.html\">13.7.4.6</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations.html\">13.7.5.8</a>, <a href=\"/sec/sec-with-statement-static-semantics-varscopeddeclarations.html\">13.11.6</a>, <a href=\"/sec/sec-switch-statement-static-semantics-varscopeddeclarations.html\">13.12.8</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-varscopeddeclarations.html\">13.13.13</a>, <a href=\"/sec/sec-try-statement-static-semantics-varscopeddeclarations.html\">13.15.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-varscopeddeclarations.html\">14.1.16</a>, <a href=\"/sec/sec-scripts-static-semantics-varscopeddeclarations.html\">15.1.6</a>, <a href=\"/sec/sec-module-semantics-static-semantics-varscopeddeclarations.html\">15.2.1.14</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ConciseBody</span> <span class=\"geq\">:</span> <span class=\"nt\">AssignmentExpression</span></div>\n      <ol class=\"proc\">\n        <li>Return an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization\">\n      <h1><span class=\"secnum\" id=\"sec-14.2.14\"><a href=\"/sec/sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization.html\" title=\"link to this section\">14.2.14</a></span> Runtime Semantics: IteratorBindingInitialization</h1>\n\n      <p>With parameters <var>iteratorRecord</var> and <var>environment</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-destructuring-binding-patterns-runtime-semantics-iteratorbindinginitialization.html\">13.3.3.6</a>, <a href=\"/sec/sec-function-definitions-runtime-semantics-iteratorbindinginitialization.html\">14.1.18</a>.</p>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> When <b>undefined</b> is passed for <var>environment</var> it indicates that a <a href=\"/sec/sec-putvalue.html\">PutValue</a> operation should be used to assign the initialization value. This is the case for formal\n        parameter lists of non-strict functions. In that case the formal parameter bindings are preinitialized in order to deal\n        with the possibility of multiple parameters with the same name.</p>\n      </div>\n\n      <div class=\"gp prod\"><span class=\"nt\">ArrowParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span></div>\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <i>iteratorRecord</i>.[[done]] is <b>false.</b></li>\n        <li>Let <i>next</i> be <a href=\"/sec/sec-iteratorstep.html\">IteratorStep</a>(<i>iteratorRecord</i>.[[iterator]]).</li>\n        <li>If <i>next</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, set\n            <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n        <li>If <i>next</i> is <b>false</b>, set <i>iteratorRecord</i>.[[done]] to <b>true</b></li>\n        <li>Else\n          <ol class=\"block\">\n            <li>Let <i>v</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>next</i>).</li>\n            <li>If <i>v</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, set\n                <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>v</i>).</li>\n          </ol>\n        </li>\n        <li>If <i>iteratorRecord</i>.[[done]] is <b>true</b>, let <i>v</i> be <b>undefined</b>.</li>\n        <li>Return the result of performing BindingInitialization for <i>BindingIdentifier</i> using <i>v</i> and\n            <i>environment</i> as the arguments.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ArrowParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>formals</i> be CoveredFormalsList of <i>CoverParenthesizedExpressionAndArrowParameterList</i>.</li>\n        <li>Return the result of performing IteratorBindingInitialization of <i>formals</i> with arguments <i>iteratorRecord</i>\n            and <i>environment</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-arrow-function-definitions-runtime-semantics-evaluatebody\">\n      <h1><span class=\"secnum\" id=\"sec-14.2.15\"><a href=\"/sec/sec-arrow-function-definitions-runtime-semantics-evaluatebody.html\" title=\"link to this section\">14.2.15</a></span> Runtime Semantics: EvaluateBody</h1>\n\n      <p>With parameter <var>functionObject</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-function-definitions-runtime-semantics-evaluatebody.html\">14.1.17</a>, <a href=\"/sec/sec-generator-function-definitions-runtime-semantics-evaluatebody.html\">14.4.11</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ConciseBody</span> <span class=\"geq\">:</span> <span class=\"nt\">AssignmentExpression</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>exprRef</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n        <li>Let <i>exprValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>exprValue</i>).</li>\n        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family:\n            sans-serif\">return</span>, [[value]]: <i>exprValue</i>, [[target]]: <span style=\"font-family:\n            sans-serif\">empty</span>}.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-arrow-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum\" id=\"sec-14.2.16\"><a href=\"/sec/sec-arrow-function-definitions-runtime-semantics-evaluation.html\" title=\"link to this section\">14.2.16</a></span> Runtime Semantics: Evaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">ArrowFunction</span> <span class=\"geq\">:</span> <span class=\"nt\">ArrowParameters</span> <code class=\"t\">=&gt;</code> <span class=\"nt\">ConciseBody</span></div>\n      <ol class=\"proc\">\n        <li>If the function code for this <i>ArrowFunction</i> is <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a> (<a href=\"/sec/sec-strict-mode-code.html\">10.2.1</a>), let  <i>strict</i> be <b>true</b>. Otherwise let <i>strict</i> be\n            <b>false</b>.</li>\n        <li>Let <i>scope</i> be the <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> of <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n        <li>Let <i>parameters</i> be CoveredFormalsList of <i>ArrowParameters</i>.</li>\n        <li>Let <i>closure</i> be <a href=\"/sec/sec-functioncreate.html\">FunctionCreate</a>(<span style=\"font-family:\n            sans-serif\">Arrow</span>, <i>parameters</i>, <i>ConciseBody, scope</i>, <i>strict</i>).</li>\n        <li>Return <i>closure</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> An <span class=\"nt\">ArrowFunction</span> does not define local bindings for\n        <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code>. Any reference to\n        <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code> within an <span class=\"nt\">ArrowFunction</span> must resolve to a binding in a lexically enclosing environment. Typically this will be the\n        Function Environment of an immediately enclosing function. Even though an <span class=\"nt\">ArrowFunction</span> may\n        contain references to <code>super</code>, the function object created in step 4 is not made into a method by performing <a href=\"/sec/sec-makemethod.html\">MakeMethod</a>. An <span class=\"nt\">ArrowFunction</span> that references <code>super</code> is\n        always contained within a non-<span class=\"nt\">ArrowFunction</span> and the necessary state to implement\n        <code>super</code> is accessible via the <var>scope</var> that is captured by the function object of the <span style=\"font-family: Times New Roman\"><i>ArrowFunction</i>.</span></p>\n      </div>\n    </section>\n  </section>\n\n  <section id=\"sec-method-definitions\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-14.3\"><a href=\"/sec/sec-method-definitions.html\" title=\"link to this section\">14.3</a></span> Method\n          Definitions</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">MethodDefinition</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">PropertyName</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">(</code> <span class=\"nt\">StrictFormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n        <div class=\"rhs\"><span class=\"nt\">GeneratorMethod</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">get</code> <span class=\"nt\">PropertyName</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">(</code> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n        <div class=\"rhs\"><code class=\"t\">set</code> <span class=\"nt\">PropertyName</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">(</code> <span class=\"nt\">PropertySetParameterList</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">PropertySetParameterList</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">FormalParameter</span></div>\n      </div>\n    </div>\n\n    <section id=\"sec-method-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum\" id=\"sec-14.3.1\"><a href=\"/sec/sec-method-definitions-static-semantics-early-errors.html\" title=\"link to this section\">14.3.1</a></span> Static Semantics:  Early Errors</h1>\n      <div class=\"gp prod\"><span class=\"nt\">MethodDefinition</span> <span class=\"geq\">:</span> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">StrictFormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if any element of the <span style=\"font-family: Times New Roman\">BoundNames</span> of <span class=\"nt\">StrictFormalParameters</span> also occurs in the <span style=\"font-family: Times New\n          Roman\">LexicallyDeclaredNames</span> of <span class=\"nt\">FunctionBody</span>.</p>\n        </li>\n      </ul>\n      <div class=\"gp prod\"><span class=\"nt\">MethodDefinition</span> <span class=\"geq\">:</span> <code class=\"t\">set</code> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">PropertySetParameterList</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if <span style=\"font-family: Times New Roman\">BoundNames of\n          <i>PropertySetParameterList</i></span> contains any duplicate elements.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if any element of the BoundNames of <span class=\"nt\">PropertySetParameterList</span> also occurs\n          in the LexicallyDeclaredNames of <span class=\"nt\">FunctionBody</span>.</p>\n        </li>\n      </ul>\n    </section>\n\n    <section id=\"sec-method-definitions-static-semantics-computedpropertycontains\">\n      <h1><span class=\"secnum\" id=\"sec-14.3.2\"><a href=\"/sec/sec-method-definitions-static-semantics-computedpropertycontains.html\" title=\"link to this section\">14.3.2</a></span> Static Semantics:  ComputedPropertyContains</h1>\n\n      <p>With parameter <var>symbol</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-object-initializer-static-semantics-computedpropertycontains.html\">12.2.6.2</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-computedpropertycontains.html\">14.4.3</a>, <a href=\"/sec/sec-class-definitions-static-semantics-computedpropertycontains.html\">14.5.5</a>.</p>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">MethodDefinition</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">StrictFormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n        <div class=\"rhs\"><code class=\"t\">get</code> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n        <div class=\"rhs\"><code class=\"t\">set</code> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">PropertySetParameterList</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      </div>\n\n      <ol class=\"proc\">\n        <li>Return the result of ComputedPropertyContains for <i>PropertyName</i> with argument <i>symbol</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-method-definitions-static-semantics-expectedargumentcount\">\n      <h1><span class=\"secnum\" id=\"sec-14.3.3\"><a href=\"/sec/sec-method-definitions-static-semantics-expectedargumentcount.html\" title=\"link to this section\">14.3.3</a></span> Static Semantics:  ExpectedArgumentCount</h1>\n\n      <p>See also: <a href=\"/sec/sec-function-definitions-static-semantics-expectedargumentcount.html\">14.1.6</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-expectedargumentcount.html\">14.2.5</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">PropertySetParameterList</span> <span class=\"geq\">:</span> <span class=\"nt\">FormalParameter</span></div>\n      <ol class=\"proc\">\n        <li>If HasInitializer of <i>FormalParameter</i>  is <b>true</b> return 0</li>\n        <li>Return 1.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-method-definitions-static-semantics-hascomputedpropertykey\">\n      <h1><span class=\"secnum\" id=\"sec-14.3.4\"><a href=\"/sec/sec-method-definitions-static-semantics-hascomputedpropertykey.html\" title=\"link to this section\">14.3.4</a></span> Static Semantics:  HasComputedPropertyKey</h1>\n\n      <p>See also: <a href=\"/sec/sec-object-initializer-static-semantics-hascomputedpropertykey.html\">12.2.6.4</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-hascomputedpropertykey.html\">14.4.5</a></p>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">MethodDefinition</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">StrictFormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n        <div class=\"rhs\"><code class=\"t\">get</code> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n        <div class=\"rhs\"><code class=\"t\">set</code> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">PropertySetParameterList</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      </div>\n\n      <ol class=\"proc\">\n        <li>Return HasComputedPropertyKey of <i>PropertyName</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-method-definitions-static-semantics-hasdirectsuper\">\n      <h1><span class=\"secnum\" id=\"sec-14.3.5\"><a href=\"/sec/sec-method-definitions-static-semantics-hasdirectsuper.html\" title=\"link to this section\">14.3.5</a></span> Static Semantics:  HasDirectSuper</h1>\n\n      <p>See also: <a href=\"/sec/sec-generator-function-definitions-static-semantics-hasdirectsuper.html\">14.4.6</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">MethodDefinition</span> <span class=\"geq\">:</span> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">StrictFormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If <i>StrictFormalParameters</i> Contains <i>SuperCall</i> is <b>true</b>, return <b>true.</b></li>\n        <li>Return <i>FunctionBody</i> Contains <i>SuperCall</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">MethodDefinition</span> <span class=\"geq\">:</span> <code class=\"t\">get</code> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <i>FunctionBody</i> Contains <i>SuperCall</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">MethodDefinition</span> <span class=\"geq\">:</span> <code class=\"t\">set</code> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">PropertySetParameterList</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If <i>PropertySetParameterList</i> Contains <i>SuperCall</i> is <b>true</b>, return <b>true.</b></li>\n        <li>Return <i>FunctionBody</i> Contains <i>SuperCall</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-method-definitions-static-semantics-propname\">\n      <h1><span class=\"secnum\" id=\"sec-14.3.6\"><a href=\"/sec/sec-method-definitions-static-semantics-propname.html\" title=\"link to this section\">14.3.6</a></span> Static Semantics:  PropName</h1>\n\n      <p>See also: <a href=\"/sec/sec-object-initializer-static-semantics-propname.html\">12.2.6.6</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-propname.html\">14.4.10</a>, <a href=\"/sec/sec-class-definitions-static-semantics-propname.html\">14.5.12</a></p>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">MethodDefinition</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">StrictFormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n        <div class=\"rhs\"><code class=\"t\">get</code> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n        <div class=\"rhs\"><code class=\"t\">set</code> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">PropertySetParameterList</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      </div>\n\n      <ol class=\"proc\">\n        <li>Return PropName of <i>PropertyName</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-static-semantics-specialmethod\">\n      <h1><span class=\"secnum\" id=\"sec-14.3.7\"><a href=\"/sec/sec-static-semantics-specialmethod.html\" title=\"link to this section\">14.3.7</a></span> Static Semantics:  SpecialMethod</h1>\n      <div class=\"gp prod\"><span class=\"nt\">MethodDefinition</span> <span class=\"geq\">:</span> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">StrictFormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">MethodDefinition</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">GeneratorMethod</span></div>\n        <div class=\"rhs\"><code class=\"t\">get</code> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n        <div class=\"rhs\"><code class=\"t\">set</code> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">PropertySetParameterList</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      </div>\n\n      <ol class=\"proc\">\n        <li>Return <b>true</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-runtime-semantics-definemethod\">\n      <h1><span class=\"secnum\" id=\"sec-14.3.8\"><a href=\"/sec/sec-runtime-semantics-definemethod.html\" title=\"link to this section\">14.3.8</a></span> Runtime Semantics: DefineMethod</h1>\n\n      <p>With parameters <var>object</var> and optional parameter <span style=\"font-family: Times New\n      Roman\"><i>functionPrototype</i>.</span></p>\n\n      <div class=\"gp prod\"><span class=\"nt\">MethodDefinition</span> <span class=\"geq\">:</span> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">StrictFormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Let <i>propKey</i> be the result of evaluating <i>PropertyName</i>.</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>propKey</i>).</li>\n        <li>If the function code for this <i>MethodDefinition</i> is <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a>, let\n            <i>strict</i> be <b>true</b>. Otherwise let <i>strict</i> be <b>false</b>.</li>\n        <li>Let <i>scope</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n        <li>If <i>functionPrototype</i> was passed as a parameter, let <i>kind</i> be <span style=\"font-family:\n            sans-serif\">Normal</span>; otherwise let <i>kind</i> be <span style=\"font-family: sans-serif\">Method</span>.</li>\n        <li>Let <i>closure</i> be <a href=\"/sec/sec-functioncreate.html\">FunctionCreate</a>(<i>kind</i>, <i>StrictFormalParameters</i>,\n            <i>FunctionBody, scope</i>, <i>strict</i>). If <i>functionPrototype</i> was passed as a parameter then pass its value\n            as the <i>functionPrototype</i> optional argument of <a href=\"/sec/sec-functioncreate.html\">FunctionCreate</a>.</li>\n        <li>Perform <a href=\"/sec/sec-makemethod.html\">MakeMethod</a>(<i>closure</i>, <i>object</i>).</li>\n        <li>Return the Record{[[key]]: <i>propKey</i>, [[closure]]: <i>closure</i>}.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">\n      <h1><span class=\"secnum\" id=\"sec-14.3.9\"><a href=\"/sec/sec-method-definitions-runtime-semantics-propertydefinitionevaluation.html\" title=\"link to this section\">14.3.9</a></span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n\n      <p>With parameters <var>object</var> and <span style=\"font-family: Times New Roman\"><i>enumerable</i>.</span></p>\n\n      <p>See also: <a href=\"/sec/sec-object-initializer-runtime-semantics-propertydefinitionevaluation.html\">12.2.6.9</a>, <a href=\"/sec/sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation.html\">14.4.13</a>, B.3.1</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">MethodDefinition</span> <span class=\"geq\">:</span> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">StrictFormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Let <i>methodDef</i> be DefineMethod of <i>MethodDefinition</i> with argument <i>object</i>.</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>methodDef</i>).</li>\n        <li>Perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>methodDef</i>.[[closure]],\n            <i>methodDef</i>.[[key]]).</li>\n        <li>Let <i>desc</i> be the <a href=\"/sec/sec-property-descriptor-specification-type.html\">Property Descriptor</a>{[[Value]]:\n            <i>methodDef</i>.[[closure]], [[Writable]]: <b>true</b>, [[Enumerable]]: <i>enumerable</i>, [[Configurable]]:\n            <b>true</b>}.</li>\n        <li>Return <a href=\"/sec/sec-definepropertyorthrow.html\">DefinePropertyOrThrow</a>(<i>object</i>, <i>methodDef</i>.[[key]],\n            <i>desc</i>).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">MethodDefinition</span> <span class=\"geq\">:</span> <span class=\"nt\">GeneratorMethod</span></div>\n\n      <p>See <a href=\"/sec/sec-generator-function-definitions.html\">14.4</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">MethodDefinition</span> <span class=\"geq\">:</span> <code class=\"t\">get</code> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Let <i>propKey</i> be the result of evaluating <i>PropertyName</i>.</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>propKey</i>).</li>\n        <li>If the function code for this <i>MethodDefinition</i> is <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a>, let\n            <i>strict</i> be <b>true</b>. Otherwise let <i>strict</i> be <b>false</b>.</li>\n        <li>Let <i>scope</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n        <li>Let <i>formalParameterList</i> be the production  <span class=\"prod\"><span class=\"nt\">FormalParameters</span> <span class=\"geq\">:</span> <span class=\"grhsannot\">[empty]</span></span></li>\n        <li>Let <i>closure</i> be <a href=\"/sec/sec-functioncreate.html\">FunctionCreate</a>(<span style=\"font-family:\n            sans-serif\">Method</span>, <i>formalParameterList</i>, <i>FunctionBody, scope</i>, <i>strict</i>).</li>\n        <li>Perform <a href=\"/sec/sec-makemethod.html\">MakeMethod</a>(<i>closure</i>, <i>object</i>).</li>\n        <li>Perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>closure</i>, <i>propKey</i>,\n            <code>&quot;<b>get</b>&quot;</code>).</li>\n        <li>Let <i>desc</i> be the PropertyDescriptor{[[Get]]: <i>closure</i>, [[Enumerable]]: <i>enumerable</i>,\n            [[Configurable]]: <b>true</b>}</li>\n        <li>Return <a href=\"/sec/sec-definepropertyorthrow.html\">DefinePropertyOrThrow</a>(<i>object</i>, <i>propKey</i>,\n            <i>desc</i>).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">MethodDefinition</span> <span class=\"geq\">:</span> <code class=\"t\">set</code> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">PropertySetParameterList</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">FunctionBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Let <i>propKey</i> be the result of evaluating <i>PropertyName</i>.</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>propKey</i>).</li>\n        <li>If the function code for this <i>MethodDefinition</i> is <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a>, let\n            <i>strict</i> be <b>true</b>. Otherwise let <i>strict</i> be <b>false</b>.</li>\n        <li>Let <i>scope</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n        <li>Let <i>closure</i> be <a href=\"/sec/sec-functioncreate.html\">FunctionCreate</a>(<span style=\"font-family:\n            sans-serif\">Method</span>, <i>PropertySetParameterList</i>, <i>FunctionBody, scope</i>, <i>strict</i>).</li>\n        <li>Perform <a href=\"/sec/sec-makemethod.html\">MakeMethod</a>(<i>closure</i>, <i>object</i>).</li>\n        <li>Perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>closure</i>, <i>propKey</i>,\n            <code>&quot;<b>set</b>&quot;</code>).</li>\n        <li>Let <i>desc</i> be the PropertyDescriptor{[[Set]]: <i>closure</i>, [[Enumerable]]: <i>enumerable</i>,\n            [[Configurable]]: <b>true</b>}</li>\n        <li>Return <a href=\"/sec/sec-definepropertyorthrow.html\">DefinePropertyOrThrow</a>(<i>object</i>, <i>propKey</i>,\n            <i>desc</i>).</li>\n      </ol>\n    </section>\n  </section>\n\n  <section id=\"sec-generator-function-definitions\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-14.4\"><a href=\"/sec/sec-generator-function-definitions.html\" title=\"link to this section\">14.4</a></span> Generator Function Definitions</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">GeneratorMethod</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">*</code> <span class=\"nt\">PropertyName</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">(</code> <span class=\"nt\">StrictFormalParameters</span><sub class=\"g-params\">[Yield]</sub> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">GeneratorDeclaration</span><sub class=\"g-params\">[Yield, Default]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">function</code> <code class=\"t\">*</code> <span class=\"nt\">BindingIdentifier</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span><sub class=\"g-params\">[Yield]</sub> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n        <div class=\"rhs\"><span class=\"grhsannot\">[+Default]</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span><sub class=\"g-params\">[Yield]</sub> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">GeneratorExpression</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">function</code> <code class=\"t\">*</code> <span class=\"nt\">BindingIdentifier</span><sub class=\"g-params\">[Yield]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span><sub class=\"g-params\">[Yield]</sub> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">GeneratorBody</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">FunctionBody</span><sub class=\"g-params\">[Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">YieldExpression</span><sub class=\"g-params\">[In]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">yield</code></div>\n        <div class=\"rhs\"><code class=\"t\">yield</code> <span class=\"grhsannot\">[no <span class=\"nt\">LineTerminator</span> here]</span> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[?In, Yield]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">yield</code> <span class=\"grhsannot\">[no <span class=\"nt\">LineTerminator</span> here]</span> <code class=\"t\">*</code> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[?In, Yield]</sub></div>\n      </div>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE 1</span> The syntactic context immediately following <code>yield</code> requires use of the <span class=\"nt\">InputElementRegExpOrTemplateTail</span> lexical goal.</p>\n      </div>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE 2</span> <span class=\"nt\">YieldExpression</span> cannot be used within the <span class=\"nt\">FormalParameters</span> of a generator function because any expressions that are part of <span class=\"nt\">FormalParameters</span> are evaluated before the resulting generator object is in a resumable state.</p>\n      </div>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE 3</span> Abstract operations relating to generator objects are defined in <a href=\"/sec/sec-generator-abstract-operations.html\">25.3.3</a>.</p>\n      </div>\n    </div>\n\n    <section id=\"sec-generator-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum\" id=\"sec-14.4.1\"><a href=\"/sec/sec-generator-function-definitions-static-semantics-early-errors.html\" title=\"link to this section\">14.4.1</a></span> Static Semantics:  Early Errors</h1>\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorMethod</span> <span class=\"geq\">:</span> <code class=\"t\">*</code> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">StrictFormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if HasDirectSuper of <span class=\"nt\">GeneratorMethod</span>  is <span style=\"font-family: Times\n          New Roman\"><b><i>true</i></b></span>.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if <span class=\"nt\">StrictFormalParameters</span> Contains <span class=\"nt\">YieldExpression</span> is <span style=\"font-family: Times New Roman\"><b><i>true</i></b></span>.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if any element of the <span style=\"font-family: Times New Roman\">BoundNames</span> of <span class=\"nt\">StrictFormalParameters</span> also occurs in the <span style=\"font-family: Times New\n          Roman\">LexicallyDeclaredNames</span> of <span class=\"nt\">GeneratorBody</span>.</p>\n        </li>\n      </ul>\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ul>\n        <li>It is a Syntax Error if HasDirectSuper of <span class=\"nt\">GeneratorDeclaration</span> is <span style=\"font-family:\n            Times New Roman\"><b><i>true</i></b></span>.</li>\n      </ul>\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorExpression</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <span class=\"nt\">BindingIdentifier</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ul>\n        <li>It is a Syntax Error if HasDirectSuper of <span class=\"nt\">GeneratorExpression</span> is <span style=\"font-family:\n            Times New Roman\"><b><i>true</i></b></span>.</li>\n      </ul>\n\n      <p><span class=\"prod\"><span class=\"nt\">GeneratorDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span>\n      <code class=\"t\">}</code></span><br><span class=\"prod\"><span class=\"nt\">GeneratorExpression</span> <span class=\"geq\">:</span>\n      <code class=\"t\">function</code> <code class=\"t\">*</code> <span class=\"nt\">BindingIdentifier</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></span></p>\n\n      <ul>\n        <li>\n          <p>If the source code matching this production is <a href=\"/sec/sec-strict-mode-code.html\">strict code</a>, the Early Error rules\n          for <span class=\"prod\"><span class=\"nt\">StrictFormalParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">FormalParameters</span></span> are applied.</p>\n        </li>\n\n        <li>\n          <p>If the source code matching this production is <a href=\"/sec/sec-strict-mode-code.html\">strict code</a>, it is a Syntax Error\n          if <span class=\"nt\">BindingIdentifier</span> is the <span class=\"nt\">IdentifierName</span> <code>eval</code> or the\n          <span class=\"nt\">IdentifierName</span> <code>arguments</code>.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if any element of the <span style=\"font-family: Times New Roman\">BoundNames</span> of <span class=\"nt\">FormalParameters</span> also occurs in the <span style=\"font-family: Times New\n          Roman\">LexicallyDeclaredNames</span> of <span class=\"nt\">GeneratorBody</span>.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if <span class=\"nt\">FormalParameters</span> Contains <span class=\"nt\">YieldExpression</span> is\n          <span style=\"font-family: Times New Roman\"><b><i>true</i></b></span>.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if <span class=\"nt\">FormalParameters</span> Contains <span class=\"nt\">SuperProperty</span> is\n          <span style=\"font-family: Times New Roman\"><b><i>true</i></b></span>.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if <span class=\"nt\">GeneratorBody</span> Contains <span class=\"nt\">SuperProperty</span> is <span style=\"font-family: Times New Roman\"><b><i>true</i></b></span>.</p>\n        </li>\n      </ul>\n    </section>\n\n    <section id=\"sec-generator-function-definitions-static-semantics-boundnames\">\n      <h1><span class=\"secnum\" id=\"sec-14.4.2\"><a href=\"/sec/sec-generator-function-definitions-static-semantics-boundnames.html\" title=\"link to this section\">14.4.2</a></span> Static Semantics:  BoundNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-identifiers-static-semantics-boundnames.html\">12.1.2</a>, <a href=\"/sec/sec-let-and-const-declarations-static-semantics-boundnames.html\">13.3.1.2</a>, <a href=\"/sec/sec-variable-statement-static-semantics-boundnames.html\">13.3.2.1</a>, <a href=\"/sec/sec-destructuring-binding-patterns-static-semantics-boundnames.html\">13.3.3.1</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-boundnames.html\">13.7.5.2</a>, <a href=\"/sec/sec-function-definitions-static-semantics-boundnames.html\">14.1.3</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-boundnames.html\">14.2.2</a>, <a href=\"/sec/sec-class-definitions-static-semantics-boundnames.html\">14.5.2</a>, <a href=\"/sec/sec-imports-static-semantics-boundnames.html\">15.2.2.2</a>, <a href=\"/sec/sec-exports-static-semantics-boundnames.html\">15.2.3.2</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return the BoundNames of <i>BindingIdentifier</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return &#xAB;<code>&quot;*default*&quot;</code>&#xBB;.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> <code>&quot;*default*&quot;</code> is used within this specification as a synthetic name for\n        hoistable anonymous functions that are defined using export declarations.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-generator-function-definitions-static-semantics-computedpropertycontains\">\n      <h1><span class=\"secnum\" id=\"sec-14.4.3\"><a href=\"/sec/sec-generator-function-definitions-static-semantics-computedpropertycontains.html\" title=\"link to this section\">14.4.3</a></span> Static Semantics:  ComputedPropertyContains</h1>\n\n      <p>With parameter <var>symbol</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-object-initializer-static-semantics-computedpropertycontains.html\">12.2.6.2</a>, <a href=\"/sec/sec-method-definitions-static-semantics-computedpropertycontains.html\">14.3.2</a>, <a href=\"/sec/sec-class-definitions-static-semantics-computedpropertycontains.html\">14.5.5</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorMethod</span> <span class=\"geq\">:</span> <code class=\"t\">*</code> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">StrictFormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return the result of ComputedPropertyContains for <i>PropertyName</i> with argument <i>symbol</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-generator-function-definitions-static-semantics-contains\">\n      <h1><span class=\"secnum\" id=\"sec-14.4.4\"><a href=\"/sec/sec-generator-function-definitions-static-semantics-contains.html\" title=\"link to this section\">14.4.4</a></span> Static Semantics:  Contains</h1>\n\n      <p>With parameter <var>symbol</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-static-semantic-rules.html\">5.3</a>, <a href=\"/sec/sec-object-initializer-static-semantics-contains.html\">12.2.6.3</a>, <a href=\"/sec/sec-static-semantics-static-semantics-contains.html\">12.3.1.1</a>, <a href=\"/sec/sec-function-definitions-static-semantics-contains.html\">14.1.4</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-contains.html\">14.2.3</a>, <a href=\"/sec/sec-class-definitions-static-semantics-contains.html\">14.5.4</a></p>\n\n      <p><span class=\"prod\"><span class=\"nt\">GeneratorDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span>\n      <code class=\"t\">}GeneratorDeclaration</code> <code class=\"t\">:</code> <code class=\"t\">function</code> <code class=\"t\">*</code> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></span></p>\n\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorExpression</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <span class=\"nt\">BindingIdentifier</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> Static semantic rules that depend upon substructure generally do not look into function\n        definitions.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-generator-function-definitions-static-semantics-hascomputedpropertykey\">\n      <h1><span class=\"secnum\" id=\"sec-14.4.5\"><a href=\"/sec/sec-generator-function-definitions-static-semantics-hascomputedpropertykey.html\" title=\"link to this section\">14.4.5</a></span> Static Semantics:  HasComputedPropertyKey</h1>\n\n      <p>See also: <a href=\"/sec/sec-object-initializer-static-semantics-hascomputedpropertykey.html\">12.2.6.4</a>, <a href=\"/sec/sec-method-definitions-static-semantics-hascomputedpropertykey.html\">14.3.4</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorMethod</span> <span class=\"geq\">:</span> <code class=\"t\">*</code> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">StrictFormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return IsComputedPropertyKey of <i>PropertyName</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-generator-function-definitions-static-semantics-hasdirectsuper\">\n      <h1><span class=\"secnum\" id=\"sec-14.4.6\"><a href=\"/sec/sec-generator-function-definitions-static-semantics-hasdirectsuper.html\" title=\"link to this section\">14.4.6</a></span> Static Semantics:  HasDirectSuper</h1>\n\n      <p>See also: <a href=\"/sec/sec-method-definitions-static-semantics-hasdirectsuper.html\">14.3.5</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorMethod</span> <span class=\"geq\">:</span> <code class=\"t\">*</code> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">StrictFormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If <i>StrictFormalParameters</i> Contains <i>SuperCall</i> is <b>true</b>, return <b>true.</b></li>\n        <li>Return <i>GeneratorBody</i> Contains <i>SuperCall</i>.</li>\n      </ol>\n\n      <p><span class=\"prod\"><span class=\"nt\">GeneratorDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span>\n      <code class=\"t\">}</code> <span class=\"nt\">GeneratorDeclaration</span> <code class=\"t\">:</code> <code class=\"t\">function</code> <code class=\"t\">*</code> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></span><br><span class=\"prod\"><span class=\"nt\">GeneratorExpression</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></span><br><span class=\"prod\"><span class=\"nt\">GeneratorExpression</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code>\n      <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></span></p>\n\n      <ol class=\"proc\">\n        <li>If <i>FormalParameters</i> Contains <i>SuperCall</i> is <b>true</b>, return <b>true.</b></li>\n        <li>Return <i>GeneratorBody</i> Contains <i>SuperCall</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-generator-function-definitions-static-semantics-hasname\">\n      <h1><span class=\"secnum\" id=\"sec-14.4.7\"><a href=\"/sec/sec-generator-function-definitions-static-semantics-hasname.html\" title=\"link to this section\">14.4.7</a></span> Static Semantics:  HasName</h1>\n\n      <p>See also: <a href=\"/sec/sec-semantics-static-semantics-hasname.html\">12.2.1.2</a>, <a href=\"/sec/sec-function-definitions-static-semantics-hasname.html\">14.1.8</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-hasname.html\">14.2.7</a>, <a href=\"/sec/sec-class-definitions-static-semantics-hasname.html\">14.5.6</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorExpression</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorExpression</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>true</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-generator-function-definitions-static-semantics-isconstantdeclaration\">\n      <h1><span class=\"secnum\" id=\"sec-14.4.8\"><a href=\"/sec/sec-generator-function-definitions-static-semantics-isconstantdeclaration.html\" title=\"link to this section\">14.4.8</a></span> Static Semantics:  IsConstantDeclaration</h1>\n\n      <p>See also: <a href=\"/sec/sec-let-and-const-declarations-static-semantics-isconstantdeclaration.html\">13.3.1.3</a>, <a href=\"/sec/sec-function-definitions-static-semantics-isconstantdeclaration.html\">14.1.10</a>, <a href=\"/sec/sec-class-definitions-static-semantics-isconstantdeclaration.html\">14.5.7</a>, <a href=\"/sec/sec-exports-static-semantics-isconstantdeclaration.html\">15.2.3.7</a>.</p>\n\n      <p><span class=\"prod\"><span class=\"nt\">GeneratorDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span>\n      <code class=\"t\">}GeneratorDeclaration</code> <code class=\"t\">:</code> <code class=\"t\">function</code> <code class=\"t\">*</code> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></span></p>\n\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-generator-function-definitions-static-semantics-isfunctiondefinition\">\n      <h1><span class=\"secnum\" id=\"sec-14.4.9\"><a href=\"/sec/sec-generator-function-definitions-static-semantics-isfunctiondefinition.html\" title=\"link to this section\">14.4.9</a></span> Static Semantics:  IsFunctionDefinition</h1>\n\n      <p>See also: <a href=\"/sec/sec-semantics-static-semantics-isfunctiondefinition.html\">12.2.1.3</a>, <a href=\"/sec/sec-grouping-operator-static-semantics-isfunctiondefinition.html\">12.2.10.2</a>, <a href=\"/sec/sec-static-semantics-static-semantics-isfunctiondefinition.html\">12.3.1.2</a>, <a href=\"/sec/sec-postfix-expressions-static-semantics-isfunctiondefinition.html\">12.4.2</a>, <a href=\"/sec/sec-unary-operators-static-semantics-isfunctiondefinition.html\">12.5.2</a>, <a href=\"/sec/sec-multiplicative-operators-static-semantics-isfunctiondefinition.html\">12.6.1</a>, <a href=\"/sec/sec-additive-operators-static-semantics-isfunctiondefinition.html\">12.7.1</a>, <a href=\"/sec/sec-bitwise-shift-operators-static-semantics-isfunctiondefinition.html\">12.8.1</a>, <a href=\"/sec/sec-relational-operators-static-semantics-isfunctiondefinition.html\">12.9.1</a>, <a href=\"/sec/sec-equality-operators-static-semantics-isfunctiondefinition.html\">12.10.1</a>, <a href=\"/sec/sec-binary-bitwise-operators-static-semantics-isfunctiondefinition.html\">12.11.1</a>, <a href=\"/sec/sec-binary-logical-operators-static-semantics-isfunctiondefinition.html\">12.12.1</a>, <a href=\"/sec/sec-conditional-operator-static-semantics-isfunctiondefinition.html\">12.13.1</a>, <a href=\"/sec/sec-assignment-operators-static-semantics-isfunctiondefinition.html\">12.14.2</a>, <a href=\"/sec/sec-comma-operator-static-semantics-isfunctiondefinition.html\">12.15.1</a>, <a href=\"/sec/sec-function-definitions-static-semantics-isfunctiondefinition.html\">14.1.11</a>, <a href=\"/sec/sec-class-definitions-static-semantics-isfunctiondefinition.html\">14.5.8</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorExpression</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>true</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorExpression</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>true</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-generator-function-definitions-static-semantics-propname\">\n      <h1><span class=\"secnum\" id=\"sec-14.4.10\"><a href=\"/sec/sec-generator-function-definitions-static-semantics-propname.html\" title=\"link to this section\">14.4.10</a></span> Static Semantics:  PropName</h1>\n\n      <p>See also: <a href=\"/sec/sec-object-initializer-static-semantics-propname.html\">12.2.6.6</a>, <a href=\"/sec/sec-method-definitions-static-semantics-propname.html\">14.3.6</a>, <a href=\"/sec/sec-class-definitions-static-semantics-propname.html\">14.5.12</a></p>\n\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorMethod</span> <span class=\"geq\">:</span> <code class=\"t\">*</code> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">StrictFormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return PropName of <i>PropertyName</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-generator-function-definitions-runtime-semantics-evaluatebody\">\n      <h1><span class=\"secnum\" id=\"sec-14.4.11\"><a href=\"/sec/sec-generator-function-definitions-runtime-semantics-evaluatebody.html\" title=\"link to this section\">14.4.11</a></span> Runtime Semantics: EvaluateBody</h1>\n\n      <p>With parameter <var>functionObject</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-function-definitions-runtime-semantics-evaluatebody.html\">14.1.17</a>, <a href=\"/sec/sec-arrow-function-definitions-runtime-semantics-evaluatebody.html\">14.2.15</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorBody</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionBody</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>G</i> be <a href=\"/sec/sec-ordinarycreatefromconstructor.html\">OrdinaryCreateFromConstructor</a>(<i>functionObject</i>,\n            <code>&quot;%GeneratorPrototype%&quot;</code>, &#xAB;&#x200D;[[GeneratorState]], [[GeneratorContext]]&#xBB; ).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>G</i>).</li>\n        <li>Perform <a href=\"/sec/sec-generatorstart.html\">GeneratorStart</a>(<i>G</i>, <i>FunctionBody</i>).</li>\n        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family:\n            sans-serif\">return</span>, [[value]]: <i>G</i>, [[target]]: <span style=\"font-family: sans-serif\">empty</span>}.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> If the generator was invoked using [[Call]], the <code>this</code> binding will have\n        already been initialized in the normal manner. If the generator was invoked using [[Construct]], the <code>this</code>\n        bind is not initialized and any references to <code>this</code> within the <span class=\"nt\">FunctionBody</span> will\n        produce a <span class=\"value\">ReferenceError</span> exception.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\">\n      <h1><span class=\"secnum\" id=\"sec-14.4.12\"><a href=\"/sec/sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject.html\" title=\"link to this section\">14.4.12</a></span> Runtime Semantics: InstantiateFunctionObject</h1>\n\n      <p>With parameter <var>scope</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-function-definitions-runtime-semantics-instantiatefunctionobject.html\">14.1.19</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the function code for <i>GeneratorDeclaration</i> is <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a>, let\n            <i>strict</i> be <b>true</b>. Otherwise let <i>strict</i> be <b>false</b>.</li>\n        <li>Let <i>name</i> be StringValue of <i>BindingIdentifier.</i></li>\n        <li>Let <i>F</i> be <a href=\"/sec/sec-generatorfunctioncreate.html\">GeneratorFunctionCreate</a>(<span style=\"font-family:\n            sans-serif\">Normal</span>, <i>FormalParameters</i>, <i>GeneratorBody</i>, <i>scope</i>, <i>strict</i>).</li>\n        <li>Let <i>prototype</i> be <a href=\"/sec/sec-objectcreate.html\">ObjectCreate</a>(<span style=\"font-family:\n            sans-serif\">%GeneratorPrototype%</span>).</li>\n        <li>Perform <a href=\"/sec/sec-makeconstructor.html\">MakeConstructor</a>(<i>F</i>, <b>true</b>, <i>prototype</i>).</li>\n        <li>Perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>F</i>, <i>name</i>).</li>\n        <li>Return <i>F</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the function code for <i>GeneratorDeclaration</i> is <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a>, let\n            <i>strict</i> be <b>true</b>. Otherwise let <i>strict</i> be <b>false</b>.</li>\n        <li>Let <i>F</i> be <a href=\"/sec/sec-generatorfunctioncreate.html\">GeneratorFunctionCreate</a>(<span style=\"font-family:\n            sans-serif\">Normal</span>, <i>FormalParameters</i>, <i>GeneratorBody</i>, <i>scope</i>, <i>strict</i>).</li>\n        <li>Let <i>prototype</i> be <a href=\"/sec/sec-objectcreate.html\">ObjectCreate</a>(<span style=\"font-family:\n            sans-serif\">%GeneratorPrototype%</span>).</li>\n        <li>Perform <a href=\"/sec/sec-makeconstructor.html\">MakeConstructor</a>(<i>F</i>, <b>true</b>, <i>prototype</i>).</li>\n        <li>Perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>F</i>, <code>&quot;default&quot;</code>).</li>\n        <li>Return <i>F</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> An anonymous <span class=\"nt\">GeneratorDeclaration</span> can only occur as part of an\n        <code>export default</code> declaration.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\">\n      <h1><span class=\"secnum\" id=\"sec-14.4.13\"><a href=\"/sec/sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation.html\" title=\"link to this section\">14.4.13</a></span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n\n      <p>With parameter <var>object</var> and <span style=\"font-family: Times New Roman\"><i>enumerable</i>.</span></p>\n\n      <p>See also: <a href=\"/sec/sec-object-initializer-runtime-semantics-propertydefinitionevaluation.html\">12.2.6.9</a>, <a href=\"/sec/sec-method-definitions-runtime-semantics-propertydefinitionevaluation.html\">14.3.9</a>, B.3.1</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorMethod</span> <span class=\"geq\">:</span> <code class=\"t\">*</code> <span class=\"nt\">PropertyName</span> <code class=\"t\">(</code> <span class=\"nt\">StrictFormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Let <i>propKey</i> be the result of evaluating <i>PropertyName</i>.</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>propKey</i>).</li>\n        <li>If the function code for this <i>GeneratorMethod</i> is <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a>, let\n            <i>strict</i> be <b>true</b>. Otherwise let <i>strict</i> be <b>false</b>.</li>\n        <li>Let <i>scope</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n        <li>Let <i>closure</i> be <a href=\"/sec/sec-generatorfunctioncreate.html\">GeneratorFunctionCreate</a>(<span style=\"font-family:\n            sans-serif\">Method</span>, <i>StrictFormalParameters</i>, <i>GeneratorBody, scope</i>, <i>strict</i>).</li>\n        <li>Perform <a href=\"/sec/sec-makemethod.html\">MakeMethod</a>(<i>closure</i>, <i>object</i>).</li>\n        <li>Let <i>prototype</i> be <a href=\"/sec/sec-objectcreate.html\">ObjectCreate</a>(<span style=\"font-family:\n            sans-serif\">%GeneratorPrototype</span>%).</li>\n        <li>Perform <a href=\"/sec/sec-makeconstructor.html\">MakeConstructor</a>(<i>closure</i>, <b>true</b>, <i>prototype</i>).</li>\n        <li>Perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>closure</i>, <i>propKey</i>).</li>\n        <li>Let <i>desc</i> be the <a href=\"/sec/sec-property-descriptor-specification-type.html\">Property Descriptor</a>{[[Value]]:\n            <i>closure</i>, [[Writable]]: <b>true</b>, [[Enumerable]]: <i>enumerable</i>, [[Configurable]]: <b>true</b>}.</li>\n        <li>Return <a href=\"/sec/sec-definepropertyorthrow.html\">DefinePropertyOrThrow</a>(<i>object</i>, <i>propKey</i>,\n            <i>desc</i>).</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum\" id=\"sec-14.4.14\"><a href=\"/sec/sec-generator-function-definitions-runtime-semantics-evaluation.html\" title=\"link to this section\">14.4.14</a></span> Runtime Semantics: Evaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorExpression</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the function code for this <i>GeneratorExpression</i> is <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a>, let\n            <i>strict</i> be <b>true</b>. Otherwise let <i>strict</i> be <b>false</b>.</li>\n        <li>Let <i>scope</i> be the <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> of <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n        <li>Let <i>closure</i> be <a href=\"/sec/sec-generatorfunctioncreate.html\">GeneratorFunctionCreate</a>(<span style=\"font-family:\n            sans-serif\">Normal</span>, <i>FormalParameters</i>, <i>GeneratorBody, scope</i>, <i>strict</i>).</li>\n        <li>Let <i>prototype</i> be <a href=\"/sec/sec-objectcreate.html\">ObjectCreate</a>(<span style=\"font-family:\n            sans-serif\">%GeneratorPrototype%</span>).</li>\n        <li>Perform <a href=\"/sec/sec-makeconstructor.html\">MakeConstructor</a>(<i>closure</i>, <b>true</b>, <i>prototype</i>).</li>\n        <li>Return <i>closure</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorExpression</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the function code for this <i>GeneratorExpression</i> is <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a>, let\n            <i>strict</i> be <b>true</b>. Otherwise let <i>strict</i> be <b>false</b>.</li>\n        <li>Let <i>runningContext</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-lexical-environments.html\">Lexical Environment</a>.</li>\n        <li>Let <i>funcEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>runningContext</i>).</li>\n        <li>Let <i>envRec</i> be <i>funcEnv&#x2019;s</i> <a href=\"/sec/sec-lexical-environments.html\">EnvironmentRecord</a>.</li>\n        <li>Let <i>name</i> be StringValue of <i>BindingIdentifier</i>.</li>\n        <li>Perform <i>envRec.</i>CreateImmutableBinding(<i>name</i>).</li>\n        <li>Let <i>closure</i> be <a href=\"/sec/sec-generatorfunctioncreate.html\">GeneratorFunctionCreate</a>(<span style=\"font-family:\n            sans-serif\">Normal</span>, <i>FormalParameters</i>, <i>GeneratorBody, funcEnv</i>, <i>strict</i>).</li>\n        <li>Let <i>prototype</i> be <a href=\"/sec/sec-objectcreate.html\">ObjectCreate</a>(<span style=\"font-family:\n            sans-serif\">%GeneratorPrototype%</span>).</li>\n        <li>Perform <a href=\"/sec/sec-makeconstructor.html\">MakeConstructor</a> (<i>closure</i>, <b>true</b>, <i>prototype</i>).</li>\n        <li>Perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>closure</i>, <i>name</i>).</li>\n        <li>Perform <i>envRec.</i>InitializeBinding(<i>name,</i> <i>closure</i>).</li>\n        <li>Return <i>closure</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> The <span class=\"nt\">BindingIdentifier</span> in a <span class=\"nt\">GeneratorExpression</span> can be referenced from inside the <var>GeneratorExpression&apos;s</var> <span class=\"nt\">FunctionBody</span> to allow the generator code to call itself recursively. However, unlike in a <span class=\"nt\">GeneratorDeclaration</span>, the <span class=\"nt\">BindingIdentifier</span> in a <span class=\"nt\">GeneratorExpression</span> cannot be referenced from and does not affect the scope enclosing the <span class=\"nt\">GeneratorExpression</span>.</p>\n      </div>\n\n      <div class=\"gp prod\"><span class=\"nt\">YieldExpression</span> <span class=\"geq\">:</span> <code class=\"t\">yield</code></div>\n      <ol class=\"proc\">\n        <li>Return <a href=\"/sec/sec-generatoryield.html\">GeneratorYield</a>(<a href=\"/sec/sec-createiterresultobject.html\">CreateIterResultObject</a>(<b>undefined</b>, <b>false</b>)).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">YieldExpression</span> <span class=\"geq\">:</span> <code class=\"t\">yield</code> <span class=\"nt\">AssignmentExpression</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>exprRef</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n        <li>Let <i>value</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>value</i>).</li>\n        <li>Return <a href=\"/sec/sec-generatoryield.html\">GeneratorYield</a>(<a href=\"/sec/sec-createiterresultobject.html\">CreateIterResultObject</a>(<i>value</i>, <b>false</b>)).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">YieldExpression</span> <span class=\"geq\">:</span> <code class=\"t\">yield</code> <code class=\"t\">*</code> <span class=\"nt\">AssignmentExpression</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>exprRef</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n        <li>Let <i>value</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n        <li>Let <i>iterator</i> be <a href=\"/sec/sec-getiterator.html\">GetIterator</a>(<i>value</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>iterator</i>)<i>.</i></li>\n        <li>Let <i>received</i> be <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<b>undefined</b>).</li>\n        <li>Repeat\n          <ol class=\"block\">\n            <li>If <i>received</i>.[[type]] is <span style=\"font-family: sans-serif\">normal</span>, then\n              <ol class=\"block\">\n                <li>Let <i>innerResult</i> be <a href=\"/sec/sec-iteratornext.html\">IteratorNext</a>(<i>iterator</i>,\n                    <i>received</i>.[[value]]).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>innerResult</i>).</li>\n                <li>Let <i>done</i> be <a href=\"/sec/sec-iteratorcomplete.html\">IteratorComplete</a>(<i>innerResult</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>done</i>).</li>\n                <li>If <i>done</i> is <b>true</b>, then\n                  <ol class=\"block\">\n                    <li>Return <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a> (<i>innerResult</i>).</li>\n                  </ol>\n                </li>\n                <li>Let <i>received</i>  be <a href=\"/sec/sec-generatoryield.html\">GeneratorYield</a>(<i>innerResult</i>).</li>\n              </ol>\n            </li>\n            <li>Else if <i>received</i>.[[type]] is <span style=\"font-family: sans-serif\">throw</span>, then\n              <ol class=\"block\">\n                <li>Let <i>throw</i> be <a href=\"/sec/sec-getmethod.html\">GetMethod</a>(<i>iterator</i>, <code>&quot;throw&quot;</code>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>throw</i>)<span style=\"font-family:\n                    sans-serif\">.</span></li>\n                <li>If <i>throw</i> is not <b>undefined</b>, then\n                  <ol class=\"block\">\n                    <li>Let <i>innerResult</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>throw</i>, <i>iterator</i>,\n                        &#xAB;&#x200D;<i>received</i>.[[value]]&#xBB;).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>innerResult</i>)<span style=\"font-family:\n                        sans-serif\">.</span></li>\n                    <li>NOTE:  Exceptions from the inner iterator <code>throw</code> method are propagated. Normal completions\n                        from an inner <code>throw</code> method are processed similarly to an inner <code>next</code>.</li>\n                    <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>innerResult</i>) is not Object, throw a\n                        <b>TypeError</b> exception.</li>\n                    <li>Let <i>done</i> be <a href=\"/sec/sec-iteratorcomplete.html\">IteratorComplete</a>(<i>innerResult</i>).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>done</i>).</li>\n                    <li>If <i>done</i> is <b>true</b>, then\n                      <ol class=\"block\">\n                        <li>Let <i>value</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>innerResult</i>).</li>\n                        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>value</i>).</li>\n                        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family: sans-serif\">return</span> , [[value]]:<i>value</i>, [[target]]:<span style=\"font-family: sans-serif\">empty</span>}.</li>\n                      </ol>\n                    </li>\n                    <li>Let <i>received</i>  be <a href=\"/sec/sec-generatoryield.html\">GeneratorYield</a>(<i>innerResult</i>).</li>\n                  </ol>\n                </li>\n                <li>Else,\n                  <ol class=\"block\">\n                    <li>NOTE:  If <var>iterator</var> does not have a <code>throw</code> method, this throw is going to terminate\n                        the <code>yield*</code> loop. But first we need to give <var>iterator</var> a chance to clean up.</li>\n                    <li>Let <i>closeResult</i> be <a href=\"/sec/sec-iteratorclose.html\">IteratorClose</a>(<i>iterator</i>, <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family:\n                        sans-serif\">normal</span> , [[value]]: <span style=\"font-family: sans-serif\">empty</span>,\n                        [[target]]:<span style=\"font-family: sans-serif\">empty</span>}).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>closeResult</i>).</li>\n                    <li>NOTE: The next step throws a <span class=\"value\">TypeError</span> to indicate that there was a\n                        <code>yield*</code> protocol violation: <var>iterator</var> does not have a <code>throw</code>\n                        method.</li>\n                    <li>Throw a <b>TypeError</b> exception.</li>\n                  </ol>\n                </li>\n              </ol>\n            </li>\n            <li>Else,\n              <ol class=\"block\">\n                <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>received</i>.[[type]] is <span style=\"font-family:\n                    sans-serif\">return</span>.</li>\n                <li>Let <i>return</i> be <a href=\"/sec/sec-getmethod.html\">GetMethod</a>(<i>iterator</i>, <code>&quot;return&quot;</code>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>return</i>)<span style=\"font-family:\n                    sans-serif\">.</span></li>\n                <li>If <i>return</i> is <b>undefined</b>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>received</i>).</li>\n                <li>Let <i>innerReturnResult</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>return</i>, <i>iterator</i>,\n                    &#xAB;&#x200D;<i>received</i>.[[value]]&#xBB;).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>innerReturnResult</i>)<span style=\"font-family:\n                    sans-serif\">.</span></li>\n                <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>innerReturnResult</i>) is not Object, throw a\n                    <b>TypeError</b> exception.</li>\n                <li>Let <i>done</i> be <a href=\"/sec/sec-iteratorcomplete.html\">IteratorComplete</a>(<i>innerReturnResult</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>done</i>).</li>\n                <li>If <i>done</i> is <b>true</b>, then\n                  <ol class=\"block\">\n                    <li>Let <i>value</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>innerReturnResult</i>).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>value</i>).</li>\n                    <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family: sans-serif\">return</span> , [[value]]: <i>value</i>, [[target]]:<span style=\"font-family: sans-serif\">empty</span>}.</li>\n                  </ol>\n                </li>\n                <li>Let <i>received</i>  be <a href=\"/sec/sec-generatoryield.html\">GeneratorYield</a>(<i>innerReturnResult</i>).</li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n      </ol>\n    </section>\n  </section>\n\n  <section id=\"sec-class-definitions\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-14.5\"><a href=\"/sec/sec-class-definitions.html\" title=\"link to this section\">14.5</a></span> Class\n          Definitions</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ClassDeclaration</span><sub class=\"g-params\">[Yield, Default]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">class</code> <span class=\"nt\">BindingIdentifier</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">ClassTail</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"grhsannot\">[+Default]</span> <code class=\"t\">class</code> <span class=\"nt\">ClassTail</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ClassExpression</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">class</code> <span class=\"nt\">BindingIdentifier</span><sub class=\"g-params\">[?Yield]</sub><sub class=\"g-opt\">opt</sub> <span class=\"nt\">ClassTail</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ClassTail</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ClassHeritage</span><sub class=\"g-params\">[?Yield]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">{</code> <span class=\"nt\">ClassBody</span><sub class=\"g-params\">[?Yield]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ClassHeritage</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">extends</code> <span class=\"nt\">LeftHandSideExpression</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ClassBody</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ClassElementList</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ClassElementList</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ClassElement</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">ClassElementList</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">ClassElement</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ClassElement</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">MethodDefinition</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">static</code> <span class=\"nt\">MethodDefinition</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">;</code></div>\n      </div>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> A <span class=\"nt\">ClassBody</span> is always <a href=\"/sec/sec-strict-mode-code.html\">strict\n        code</a>.</p>\n      </div>\n    </div>\n\n    <section id=\"sec-class-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum\" id=\"sec-14.5.1\"><a href=\"/sec/sec-class-definitions-static-semantics-early-errors.html\" title=\"link to this section\">14.5.1</a></span> Static Semantics:  Early Errors</h1>\n      <div class=\"gp prod\"><span class=\"nt\">ClassTail</span> <span class=\"geq\">:</span> <span class=\"nt\">ClassHeritage</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">{</code> <span class=\"nt\">ClassBody</span> <code class=\"t\">}</code></div>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if <span class=\"nt\">ClassHeritage</span> is not present <span style=\"font-family: Times New\n          Roman\"><i>and the following algorithm evaluates to <b>true</b>:</i></span></p>\n\n          <ol class=\"proc\">\n            <li>Let <i>constructor</i> be ConstructorMethod of <i>ClassBody</i>.</li>\n            <li>If <i>constructor</i> is <span style=\"font-family: sans-serif\">empty</span>, return <b>false</b>.</li>\n            <li>Return HasDirectSuper of <i>constructor</i>.</li>\n          </ol>\n        </li>\n      </ul>\n      <div class=\"gp prod\"><span class=\"nt\">ClassBody</span> <span class=\"geq\">:</span> <span class=\"nt\">ClassElementList</span></div>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if <span style=\"font-family: Times New Roman\">PrototypePropertyNameList</span> of <span class=\"nt\">ClassElementList</span> <var>contains more than one occurrence of</var> <code>&quot;constructor&quot;</code>.</p>\n        </li>\n      </ul>\n      <div class=\"gp prod\"><span class=\"nt\">ClassElement</span> <span class=\"geq\">:</span> <span class=\"nt\">MethodDefinition</span></div>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if <span style=\"font-family: Times New Roman\">PropName</span> of <span class=\"nt\">MethodDefinition</span> is not <code>&quot;constructor&quot;</code> <var>and</var> HasDirectSuper of <span class=\"nt\">MethodDefinition</span> is <span style=\"font-family: Times New Roman\"><b><i>true</i></b></span>.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if <span style=\"font-family: Times New Roman\">PropName</span> of <span class=\"nt\">MethodDefinition</span> is <code>&quot;constructor&quot;</code> <var>and SpecialMethod of</var> <span class=\"nt\">MethodDefinition</span> <var>is</var> <span style=\"font-family: Times New\n          Roman\"><i><b>true</b>.</i></span></p>\n        </li>\n      </ul>\n      <div class=\"gp prod\"><span class=\"nt\">ClassElement</span> <span class=\"geq\">:</span> <code class=\"t\">static</code> <span class=\"nt\">MethodDefinition</span></div>\n      <ul>\n        <li>It is a Syntax Error if HasDirectSuper of <span class=\"nt\">MethodDefinition</span> is <span style=\"font-family: Times\n            New Roman\"><b><i>true</i></b></span>.</li>\n        <li>It is a Syntax Error if <span style=\"font-family: Times New Roman\">PropName</span> of <span class=\"nt\">MethodDefinition</span> <var>is</var> <code>&quot;prototype&quot;</code><var>.</var></li>\n      </ul>\n    </section>\n\n    <section id=\"sec-class-definitions-static-semantics-boundnames\">\n      <h1><span class=\"secnum\" id=\"sec-14.5.2\"><a href=\"/sec/sec-class-definitions-static-semantics-boundnames.html\" title=\"link to this section\">14.5.2</a></span> Static Semantics:  BoundNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-identifiers-static-semantics-boundnames.html\">12.1.2</a>, <a href=\"/sec/sec-let-and-const-declarations-static-semantics-boundnames.html\">13.3.1.2</a>, <a href=\"/sec/sec-variable-statement-static-semantics-boundnames.html\">13.3.2.1</a>, <a href=\"/sec/sec-destructuring-binding-patterns-static-semantics-boundnames.html\">13.3.3.1</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-boundnames.html\">13.7.5.2</a>, <a href=\"/sec/sec-function-definitions-static-semantics-boundnames.html\">14.1.3</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-boundnames.html\">14.2.2</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-boundnames.html\">14.4.2</a>, <a href=\"/sec/sec-imports-static-semantics-boundnames.html\">15.2.2.2</a>, <a href=\"/sec/sec-exports-static-semantics-boundnames.html\">15.2.3.2</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ClassDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">class</code> <span class=\"nt\">BindingIdentifier</span> <span class=\"nt\">ClassTail</span></div>\n      <ol class=\"proc\">\n        <li>Return the BoundNames of <i>BindingIdentifier</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ClassDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">class</code> <span class=\"nt\">ClassTail</span></div>\n      <ol class=\"proc\">\n        <li>Return &#xAB;<code>&quot;*default*&quot;</code>&#xBB;.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-static-semantics-constructormethod\">\n      <h1><span class=\"secnum\" id=\"sec-14.5.3\"><a href=\"/sec/sec-static-semantics-constructormethod.html\" title=\"link to this section\">14.5.3</a></span> Static Semantics:  ConstructorMethod</h1>\n      <div class=\"gp prod\"><span class=\"nt\">ClassElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">ClassElement</span></div>\n      <ol class=\"proc\">\n        <li>If <i>ClassElement</i> is the production <span class=\"prod\"><span class=\"nt\">ClassElement</span> <span class=\"geq\">:</span> <code class=\"t\">;</code></span> , return <span style=\"font-family: sans-serif\">empty</span>.</li>\n        <li>If IsStatic of <i>ClassElement</i> is <b>true</b>, return <span style=\"font-family: sans-serif\">empty</span>.</li>\n        <li>If PropName of <i>ClassElement</i> is not <code>&quot;constructor&quot;</code>, return <span style=\"font-family:\n            sans-serif\">empty</span>.</li>\n        <li>Return <i>ClassElement</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ClassElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">ClassElementList</span> <span class=\"nt\">ClassElement</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>head</i> be ConstructorMethod of <i>ClassElementList.</i></li>\n        <li>If <i>head</i> is not <span style=\"font-family: sans-serif\">empty</span>, return <i>head</i>.</li>\n        <li>If <i>ClassElement</i> is the production <span class=\"prod\"><span class=\"nt\">ClassElement</span> <span class=\"geq\">:</span> <code class=\"t\">;</code></span> , return <span style=\"font-family: sans-serif\">empty</span>.</li>\n        <li>If IsStatic of <i>ClassElement</i> is <b>true</b>, return <span style=\"font-family: sans-serif\">empty</span>.</li>\n        <li>If PropName of <i>ClassElement</i> is not <code>&quot;constructor&quot;</code>, return <span style=\"font-family:\n            sans-serif\">empty</span>.</li>\n        <li>Return <i>ClassElement</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> Early Error rules ensure that there is only one method definition named\n        <code>&quot;constructor&quot;</code> and that it is not an accessor property or generator definition.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-class-definitions-static-semantics-contains\">\n      <h1><span class=\"secnum\" id=\"sec-14.5.4\"><a href=\"/sec/sec-class-definitions-static-semantics-contains.html\" title=\"link to this section\">14.5.4</a></span> Static Semantics:  Contains</h1>\n\n      <p>With parameter <var>symbol</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-static-semantic-rules.html\">5.3</a>, <a href=\"/sec/sec-object-initializer-static-semantics-contains.html\">12.2.6.3</a>, <a href=\"/sec/sec-static-semantics-static-semantics-contains.html\">12.3.1.1</a>, <a href=\"/sec/sec-function-definitions-static-semantics-contains.html\">14.1.4</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-contains.html\">14.2.3</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-contains.html\">14.4.4</a></p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ClassTail</span> <span class=\"geq\">:</span> <span class=\"nt\">ClassHeritage</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">{</code> <span class=\"nt\">ClassBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If <i>symbol</i> is <i>ClassBody</i>, return <b>true</b>.</li>\n        <li>If <i>symbol</i> is <i>ClassHeritage</i>, then\n          <ol class=\"block\">\n            <li>If <i>ClassHeritage</i> is present, return <b>true</b> otherwise return <b>false</b>.</li>\n          </ol>\n        </li>\n        <li>Let <i>inHeritage</i> be <i>ClassHeritage</i> Contains <i>symbol</i>.</li>\n        <li>If <i>inHeritage</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return the result of ComputedPropertyContains for <i>ClassBody</i> with argument <i>symbol</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> Static semantic rules that depend upon substructure generally do not look into class\n        bodies except for <span class=\"nt\">PropertyName</span> productions.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-class-definitions-static-semantics-computedpropertycontains\">\n      <h1><span class=\"secnum\" id=\"sec-14.5.5\"><a href=\"/sec/sec-class-definitions-static-semantics-computedpropertycontains.html\" title=\"link to this section\">14.5.5</a></span> Static Semantics:  ComputedPropertyContains</h1>\n\n      <p>With parameter <var>symbol</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-object-initializer-static-semantics-computedpropertycontains.html\">12.2.6.2</a>, <a href=\"/sec/sec-method-definitions-static-semantics-computedpropertycontains.html\">14.3.2</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-computedpropertycontains.html\">14.4.3</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ClassElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">ClassElementList</span> <span class=\"nt\">ClassElement</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>inList</i> be the result of ComputedPropertyContains for <i>ClassElementList</i> with argument\n            <i>symbol.</i></li>\n        <li>If <i>inList</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return the result of ComputedPropertyContains for <i>ClassElement</i> with argument <i>symbol</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ClassElement</span> <span class=\"geq\">:</span> <span class=\"nt\">MethodDefinition</span></div>\n      <ol class=\"proc\">\n        <li>Return the result of ComputedPropertyContains for <i>MethodDefinition</i> with argument <i>symbol</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ClassElement</span> <span class=\"geq\">:</span> <code class=\"t\">static</code> <span class=\"nt\">MethodDefinition</span></div>\n      <ol class=\"proc\">\n        <li>Return the result of ComputedPropertyContains for <i>MethodDefinition</i> with argument <i>symbol</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ClassElement</span> <span class=\"geq\">:</span> <code class=\"t\">;</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-class-definitions-static-semantics-hasname\">\n      <h1><span class=\"secnum\" id=\"sec-14.5.6\"><a href=\"/sec/sec-class-definitions-static-semantics-hasname.html\" title=\"link to this section\">14.5.6</a></span> Static Semantics:  HasName</h1>\n\n      <p>See also: <a href=\"/sec/sec-semantics-static-semantics-hasname.html\">12.2.1.2</a>, <a href=\"/sec/sec-function-definitions-static-semantics-hasname.html\">14.1.8</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-hasname.html\">14.2.7</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-hasname.html\">14.4.7</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ClassExpression</span> <span class=\"geq\">:</span> <code class=\"t\">class</code> <span class=\"nt\">ClassTail</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ClassExpression</span> <span class=\"geq\">:</span> <code class=\"t\">class</code> <span class=\"nt\">BindingIdentifier</span> <span class=\"nt\">ClassTail</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>true</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-class-definitions-static-semantics-isconstantdeclaration\">\n      <h1><span class=\"secnum\" id=\"sec-14.5.7\"><a href=\"/sec/sec-class-definitions-static-semantics-isconstantdeclaration.html\" title=\"link to this section\">14.5.7</a></span> Static Semantics:  IsConstantDeclaration</h1>\n\n      <p>See also: <a href=\"/sec/sec-let-and-const-declarations-static-semantics-isconstantdeclaration.html\">13.3.1.3</a>, <a href=\"/sec/sec-function-definitions-static-semantics-isconstantdeclaration.html\">14.1.10</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-isconstantdeclaration.html\">14.4.8</a>, <a href=\"/sec/sec-exports-static-semantics-isconstantdeclaration.html\">15.2.3.7</a>.</p>\n\n      <p><span class=\"prod\"><span class=\"nt\">ClassDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">class</code> <span class=\"nt\">BindingIdentifier</span> <span class=\"nt\">ClassTail</span></span></p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ClassDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">class</code> <span class=\"nt\">ClassTail</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-class-definitions-static-semantics-isfunctiondefinition\">\n      <h1><span class=\"secnum\" id=\"sec-14.5.8\"><a href=\"/sec/sec-class-definitions-static-semantics-isfunctiondefinition.html\" title=\"link to this section\">14.5.8</a></span> Static Semantics:  IsFunctionDefinition</h1>\n\n      <p>See also: <a href=\"/sec/sec-semantics-static-semantics-isfunctiondefinition.html\">12.2.1.3</a>, <a href=\"/sec/sec-grouping-operator-static-semantics-isfunctiondefinition.html\">12.2.10.2</a>, <a href=\"/sec/sec-static-semantics-static-semantics-isfunctiondefinition.html\">12.3.1.2</a>, <a href=\"/sec/sec-postfix-expressions-static-semantics-isfunctiondefinition.html\">12.4.2</a>, <a href=\"/sec/sec-unary-operators-static-semantics-isfunctiondefinition.html\">12.5.2</a>, <a href=\"/sec/sec-multiplicative-operators-static-semantics-isfunctiondefinition.html\">12.6.1</a>, <a href=\"/sec/sec-additive-operators-static-semantics-isfunctiondefinition.html\">12.7.1</a>, <a href=\"/sec/sec-bitwise-shift-operators-static-semantics-isfunctiondefinition.html\">12.8.1</a>, <a href=\"/sec/sec-relational-operators-static-semantics-isfunctiondefinition.html\">12.9.1</a>, <a href=\"/sec/sec-equality-operators-static-semantics-isfunctiondefinition.html\">12.10.1</a>, <a href=\"/sec/sec-binary-bitwise-operators-static-semantics-isfunctiondefinition.html\">12.11.1</a>, <a href=\"/sec/sec-binary-logical-operators-static-semantics-isfunctiondefinition.html\">12.12.1</a>, <a href=\"/sec/sec-conditional-operator-static-semantics-isfunctiondefinition.html\">12.13.1</a>, <a href=\"/sec/sec-assignment-operators-static-semantics-isfunctiondefinition.html\">12.14.2</a>, <a href=\"/sec/sec-comma-operator-static-semantics-isfunctiondefinition.html\">12.15.1</a>, <a href=\"/sec/sec-function-definitions-static-semantics-isfunctiondefinition.html\">14.1.11</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-isfunctiondefinition.html\">14.4.9</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ClassExpression</span> <span class=\"geq\">:</span> <code class=\"t\">class</code> <span class=\"nt\">ClassTail</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>true</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ClassExpression</span> <span class=\"geq\">:</span> <code class=\"t\">class</code> <span class=\"nt\">BindingIdentifier</span> <span class=\"nt\">ClassTail</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>true</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-static-semantics-isstatic\">\n      <h1><span class=\"secnum\" id=\"sec-14.5.9\"><a href=\"/sec/sec-static-semantics-isstatic.html\" title=\"link to this section\">14.5.9</a></span> Static Semantics:  IsStatic</h1>\n      <div class=\"gp prod\"><span class=\"nt\">ClassElement</span> <span class=\"geq\">:</span> <span class=\"nt\">MethodDefinition</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ClassElement</span> <span class=\"geq\">:</span> <code class=\"t\">static</code> <span class=\"nt\">MethodDefinition</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>true</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ClassElement</span> <span class=\"geq\">:</span> <code class=\"t\">;</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-static-semantics-nonconstructormethoddefinitions\">\n      <h1><span class=\"secnum\" id=\"sec-14.5.10\"><a href=\"/sec/sec-static-semantics-nonconstructormethoddefinitions.html\" title=\"link to this section\">14.5.10</a></span> Static Semantics:  NonConstructorMethodDefinitions</h1>\n      <div class=\"gp prod\"><span class=\"nt\">ClassElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">ClassElement</span></div>\n      <ol class=\"proc\">\n        <li>If <i>ClassElement</i> is the production <span class=\"prod\"><span class=\"nt\">ClassElement</span> <span class=\"geq\">:</span> <code class=\"t\">;</code></span> , return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>If IsStatic of <i>ClassElement</i> is <b>false</b> and PropName of <i>ClassElement</i> is <code>&quot;constructor&quot;</code>,\n            return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing <i>ClassElement</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ClassElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">ClassElementList</span> <span class=\"nt\">ClassElement</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>list</i> be NonConstructorMethodDefinitions of <i>ClassElementList.</i></li>\n        <li>If <i>ClassElement</i> is the production <span class=\"prod\"><span class=\"nt\">ClassElement</span> <span class=\"geq\">:</span> <code class=\"t\">;</code></span> , return <i>list</i>.</li>\n        <li>If IsStatic of <i>ClassElement</i> is <b>false</b> and PropName of <i>ClassElement</i> is <code>&quot;constructor&quot;</code>,\n            return <i>list</i>.</li>\n        <li>Append  <i>ClassElement</i> to the end of <i>list</i>.</li>\n        <li>Return <i>list</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-static-semantics-prototypepropertynamelist\">\n      <h1><span class=\"secnum\" id=\"sec-14.5.11\"><a href=\"/sec/sec-static-semantics-prototypepropertynamelist.html\" title=\"link to this section\">14.5.11</a></span> Static Semantics:  PrototypePropertyNameList</h1>\n      <div class=\"gp prod\"><span class=\"nt\">ClassElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">ClassElement</span></div>\n      <ol class=\"proc\">\n        <li>If PropName of <i>ClassElement</i> is <span style=\"font-family: sans-serif\">empty</span>, return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>If IsStatic of <i>ClassElement</i> is <b>true</b>, return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing PropName of <i>ClassElement</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ClassElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">ClassElementList</span> <span class=\"nt\">ClassElement</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>list</i> be PrototypePropertyNameList of <i>ClassElementList.</i></li>\n        <li>If PropName of <i>ClassElement</i> is <span style=\"font-family: sans-serif\">empty</span>, return <i>list</i>.</li>\n        <li>If IsStatic of <i>ClassElement</i> is <b>true</b>, return <i>list</i>.</li>\n        <li>Append  PropName of <i>ClassElement</i> to the end of <i>list</i>.</li>\n        <li>Return <i>list</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-class-definitions-static-semantics-propname\">\n      <h1><span class=\"secnum\" id=\"sec-14.5.12\"><a href=\"/sec/sec-class-definitions-static-semantics-propname.html\" title=\"link to this section\">14.5.12</a></span> Static Semantics:  PropName</h1>\n\n      <p>See also: <a href=\"/sec/sec-object-initializer-static-semantics-propname.html\">12.2.6.6</a>, <a href=\"/sec/sec-method-definitions-static-semantics-propname.html\">14.3.6</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-propname.html\">14.4.10</a></p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ClassElement</span> <span class=\"geq\">:</span> <code class=\"t\">;</code></div>\n      <ol class=\"proc\">\n        <li>Return <span style=\"font-family: sans-serif\">empty</span>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-static-semantics-staticpropertynamelist\">\n      <h1><span class=\"secnum\" id=\"sec-14.5.13\"><a href=\"/sec/sec-static-semantics-staticpropertynamelist.html\" title=\"link to this section\">14.5.13</a></span> Static Semantics:  StaticPropertyNameList</h1>\n      <div class=\"gp prod\"><span class=\"nt\">ClassElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">ClassElement</span></div>\n      <ol class=\"proc\">\n        <li>If PropName of <i>ClassElement</i> is <span style=\"font-family: sans-serif\">empty</span>, return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>If IsStatic of <i>ClassElement</i> is <b>false</b>, return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing PropName of <i>ClassElement</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ClassElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">ClassElementList</span> <span class=\"nt\">ClassElement</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>list</i> be StaticPropertyNameList of <i>ClassElementList.</i></li>\n        <li>If PropName of <i>ClassElement</i> is <span style=\"font-family: sans-serif\">empty</span>, return <i>list</i>.</li>\n        <li>If IsStatic of <i>ClassElement</i> is <b>false</b>, return <i>list</i>.</li>\n        <li>Append  PropName of <i>ClassElement</i> to the end of <i>list</i>.</li>\n        <li>Return <i>list</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-runtime-semantics-classdefinitionevaluation\">\n      <h1><span class=\"secnum\" id=\"sec-14.5.14\"><a href=\"/sec/sec-runtime-semantics-classdefinitionevaluation.html\" title=\"link to this section\">14.5.14</a></span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n\n      <p>With parameter <var>className</var>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ClassTail</span> <span class=\"geq\">:</span> <span class=\"nt\">ClassHeritage</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">{</code> <span class=\"nt\">ClassBody</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Let <i>lex</i> be the <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> of <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n        <li>Let <i>classScope</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>lex</i>).</li>\n        <li>Let <i>classScopeEnvRec</i> be <i>classScope</i>&#x2019;s <a href=\"/sec/sec-lexical-environments.html\">EnvironmentRecord</a>.</li>\n        <li>If <i>className</i> is not <b>undefined</b>, then\n          <ol class=\"block\">\n            <li>Perform <i>classScopeEnvRec.</i>CreateImmutableBinding(<i>className</i>, <b>true</b>).</li>\n          </ol>\n        </li>\n        <li>If <i>ClassHeritage</i><sub>opt</sub> is not present, then\n          <ol class=\"block\">\n            <li>Let <i>protoParent</i> be the intrinsic object %ObjectPrototype%.</li>\n            <li>Let <i>constructorParent</i> be the intrinsic object %FunctionPrototype%.</li>\n          </ol>\n        </li>\n        <li>Else\n          <ol class=\"block\">\n            <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>classScope</i>.</li>\n            <li>Let <i>superclass</i> be the result of evaluating <i>ClassHeritage</i>.</li>\n            <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>lex</i>.</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>superclass</i>).</li>\n            <li>If <i>superclass</i> is <b>null</b>, then\n              <ol class=\"block\">\n                <li>Let <i>protoParent</i> be <b>null</b>.</li>\n                <li>Let <i>constructorParent</i> be the intrinsic object %FunctionPrototype%.</li>\n              </ol>\n            </li>\n            <li>Else if <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a>(<i>superclass</i>) is <b>false</b>, throw a\n                <b>TypeError</b> exception.</li>\n            <li>Else\n              <ol class=\"block\">\n                <li>If <i>superclass</i> has a [[FunctionKind]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n                    slot</a> whose value is <code>&quot;generator&quot;</code>, throw a <b>TypeError</b> exception.</li>\n                <li>Let <i>protoParent</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>superclass</i>, <code>&quot;prototype&quot;</code>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>protoParent</i>).</li>\n                <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>protoParent</i>) is neither Object nor Null,\n                    throw a <b>TypeError</b> exception.</li>\n                <li>Let <i>constructorParent</i> be <i>superclass</i>.</li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>Let <i>proto</i> be <a href=\"/sec/sec-objectcreate.html\">ObjectCreate</a>(<i>protoParent</i>).</li>\n        <li>If <i>ClassBody</i><sub>opt</sub> is not present, let <i>constructor</i> be <span style=\"font-family:\n            sans-serif\">empty</span>.</li>\n        <li>Else, let <i>constructor</i> be ConstructorMethod of <i>ClassBody</i>.</li>\n        <li>If <i>constructor</i> is <span style=\"font-family: sans-serif\">empty</span>, then,\n          <ol class=\"block\">\n            <li>If <i>ClassHeritage</i><sub>opt</sub> is present, then\n              <ol class=\"block\">\n                <li>Let <i>constructor</i> be the result of parsing the source\n                    text<br>&#xA0;&#xA0;&#xA0;&#xA0;<code>constructor(... args){ super</code> <code>(...args);}<br></code>using\n                    the syntactic grammar with the goal symbol <i>MethodDefinition.</i></li>\n              </ol>\n            </li>\n            <li>Else,\n              <ol class=\"block\">\n                <li>Let <i>constructor</i> be the result of parsing the source text<br>&#xA0;&#xA0;&#xA0;&#xA0;<code>constructor(\n                    ){ }<br></code>using the syntactic grammar with the goal symbol <i>MethodDefinition.</i></li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>classScope</i>.</li>\n        <li>Let <i>constructorInfo</i> be the result of performing DefineMethod for <i>constructor</i> with arguments <i>proto</i>\n            and <i>constructorParent</i> as the optional <i>functionPrototype</i> argument.</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <i>constructorInfo</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n        <li>Let <i>F</i> be <i>constructorInfo</i>.[[closure]]</li>\n        <li>If <i>ClassHeritage</i><sub>opt</sub> is present, set <i>F</i>&#x2019;s [[ConstructorKind]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <code>&quot;derived&quot;</code>.</li>\n        <li>Perform <a href=\"/sec/sec-makeconstructor.html\">MakeConstructor</a>(<i>F</i>, <b>false</b>, <i>proto</i>).</li>\n        <li>Perform <a href=\"/sec/sec-makeclassconstructor.html\">MakeClassConstructor</a>(<i>F</i>).</li>\n        <li>Perform <a href=\"/sec/sec-createmethodproperty.html\">CreateMethodProperty</a>(<i>proto</i>, <code>&quot;constructor&quot;</code>,\n            <i>F</i>)<i>.</i></li>\n        <li>If <i>ClassBody</i><sub>opt</sub> is not present, let <i>methods</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>Else, let <i>methods</i> be NonConstructorMethodDefinitions of <i>ClassBody</i>.</li>\n        <li>For each <i>ClassElement</i> <i>m</i> in order from <i>methods</i>\n          <ol class=\"block\">\n            <li>If IsStatic of <i>m</i> is <b>false</b>, then\n              <ol class=\"block\">\n                <li>Let <i>status</i> be the result of performing PropertyDefinitionEvaluation for <i>m</i> with arguments\n                    <i>proto</i> and <b>false</b>.</li>\n              </ol>\n            </li>\n            <li>Else,\n              <ol class=\"block\">\n                <li>Let <i>status</i> be the result of performing PropertyDefinitionEvaluation for <i>m</i> with arguments\n                    <i>F</i> and <b>false</b>.</li>\n              </ol>\n            </li>\n            <li>If <i>status</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n              <ol class=\"block\">\n                <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>lex</i>.</li>\n                <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>status</i>).</li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>lex</i>.</li>\n        <li>If <i>className</i> is not <b>undefined</b>, then\n          <ol class=\"block\">\n            <li>Perform <i>classScopeEnvRec.</i>InitializeBinding(<i>className</i>, <i>F</i>).</li>\n          </ol>\n        </li>\n        <li>Return <i>F</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-runtime-semantics-bindingclassdeclarationevaluation\">\n      <h1><span class=\"secnum\" id=\"sec-14.5.15\"><a href=\"/sec/sec-runtime-semantics-bindingclassdeclarationevaluation.html\" title=\"link to this section\">14.5.15</a></span> Runtime Semantics: BindingClassDeclarationEvaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">ClassDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">class</code> <span class=\"nt\">BindingIdentifier</span> <span class=\"nt\">ClassTail</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>className</i> be StringValue of <i>BindingIdentifier</i>.</li>\n        <li>Let <i>value</i> be the result of ClassDefinitionEvaluation of <i>ClassTail</i> with argument <i>className.</i></li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>value</i>).</li>\n        <li>Let <i>hasNameProperty</i> be <a href=\"/sec/sec-hasownproperty.html\">HasOwnProperty</a>(<i>value</i>,\n            <code>&quot;name&quot;</code>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>hasNameProperty</i>).</li>\n        <li>If <i>hasNameProperty</i> is <b>false</b>, then perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>value</i>, <i>className</i>).</li>\n        <li>Let <i>env</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n        <li>Let <i>status</i> be <a href=\"/sec/sec-initializeboundname.html\">InitializeBoundName</a>(<i>className</i>, <i>value</i>,\n            <i>env</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n        <li>Return <i>value</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ClassDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">class</code> <span class=\"nt\">ClassTail</span></div>\n      <ol class=\"proc\">\n        <li>Return the result of ClassDefinitionEvaluation of <i>ClassTail</i> with argument <b>undefined</b><i>.</i></li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> <span class=\"prod\"><span class=\"nt\">ClassDeclaration</span> <span class=\"geq\">:</span>\n        <code class=\"t\">class</code> <span class=\"nt\">ClassTail</span></span> <var>only occurs as part of an</var> <span class=\"nt\">ExportDeclaration</span> and the setting of a  name property and establishing its binding are handled as part\n        of the evaluation action for that production. See <a href=\"/sec/sec-exports-runtime-semantics-evaluation.html\">15.2.3.11</a>.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-class-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum\" id=\"sec-14.5.16\"><a href=\"/sec/sec-class-definitions-runtime-semantics-evaluation.html\" title=\"link to this section\">14.5.16</a></span> Runtime Semantics: Evaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">ClassDeclaration</span> <span class=\"geq\">:</span> <code class=\"t\">class</code> <span class=\"nt\">BindingIdentifier</span> <span class=\"nt\">ClassTail</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>status</i> be the result of BindingClassDeclarationEvaluation of this <i>ClassDeclaration.</i></li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family: sans-serif\">empty</span>).</li>\n      </ol>\n\n      <p class=\"Note\"><var>NOTE 1</var>\t<span class=\"prod\"><span class=\"nt\">ClassDeclaration</span> <span class=\"geq\">:</span>\n      <code class=\"t\">class</code> <span class=\"nt\">ClassTail</span></span> <var>only occurs as part of an</var> <span class=\"nt\">ExportDeclaration</span> and is never directly evaluated.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ClassExpression</span> <span class=\"geq\">:</span> <code class=\"t\">class</code> <span class=\"nt\">BindingIdentifier</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">ClassTail</span></div>\n      <ol class=\"proc\">\n        <li>If <i>BindingIdentifier</i><sub>opt</sub> is not  present, let <i>className</i> be <b>undefined</b>.</li>\n        <li>Else, let <i>className</i> be StringValue of <i>BindingIdentifier</i>.</li>\n        <li>Let <i>value</i> be the result of ClassDefinitionEvaluation of <i>ClassTail</i> with argument <i>className</i>.</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>value</i>).</li>\n        <li>If <i>className</i> is not <b>undefined</b>, then\n          <ol class=\"block\">\n            <li>Let <i>hasNameProperty</i> be <a href=\"/sec/sec-hasownproperty.html\">HasOwnProperty</a>(<i>value</i>,\n                <code>&quot;name&quot;</code>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>hasNameProperty</i>).</li>\n            <li>If <i>hasNameProperty</i> is <b>false</b>, then\n              <ol class=\"block\">\n                <li>Perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>value</i>, <i>className</i>).</li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>value</i>).</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE 2</span> If the class definition included a <code>name</code> static method then that method is\n        not over-written with a <code>name</code> data property for the class name.</p>\n      </div>\n    </section>\n  </section>\n\n  <section id=\"sec-tail-position-calls\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-14.6\"><a href=\"/sec/sec-tail-position-calls.html\" title=\"link to this section\">14.6</a></span> Tail\n          Position Calls</h1>\n    </div>\n\n    <section id=\"sec-isintailposition\">\n      <h1><span class=\"secnum\" id=\"sec-14.6.1\"><a href=\"/sec/sec-isintailposition.html\" title=\"link to this section\">14.6.1</a></span>\n          Static Semantics: IsInTailPosition(nonterminal)</h1>\n\n      <p class=\"normalbefore\">The abstract operation IsInTailPosition with argument <var>nonterminal</var> performs the following\n      steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>nonterminal</i> is a parsed grammar production.</li>\n        <li>If the source code matching <i>nonterminal</i> is not <a href=\"/sec/sec-strict-mode-code.html\">strict code</a>, return\n            <b>false.</b></li>\n        <li>If <i>nonterminal</i> is not contained within a <i>FunctionBody</i> or <i>ConciseBody</i>, return <b>false</b>.</li>\n        <li>Let <i>body</i> be the <i>FunctionBody</i> or <i>ConciseBody</i> that most closely contains <i>nonterminal</i>.</li>\n        <li>If <i>body</i> is the <i>FunctionBody</i> of a <i>GeneratorBody</i>, return <b>false</b>.</li>\n        <li>Return the result of HasProductionInTailPosition of <i>body</i> with argument <i>nonterminal</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> Tail Position calls are only defined in <a href=\"/sec/sec-strict-mode-code.html\">strict mode\n        code</a> because of a common non-standard language extension (<a href=\"/sec/sec-addrestrictedfunctionproperties.html\">see\n        9.2.7</a>) that enables  observation of the chain of caller contexts.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-static-semantics-hasproductionintailposition\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-14.6.2\"><a href=\"/sec/sec-static-semantics-hasproductionintailposition.html\" title=\"link to this section\">14.6.2</a></span> Static Semantics: HasProductionInTailPosition</h1>\n\n        <p>With parameter <var>nonterminal</var>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> <var>nonterminal</var> is a parsed grammar production that represent a specific range of\n          source text. When the following algorithms compare <var>nonterminal</var> to other grammar symbols they are testing\n          whether the same source text was matched by both symbols.</p>\n        </div>\n      </div>\n\n      <section id=\"sec-statement-rules\">\n        <h1><span class=\"secnum\" id=\"sec-14.6.2.1\"><a href=\"/sec/sec-statement-rules.html\" title=\"link to this section\">14.6.2.1</a></span>\n            Statement Rules</h1>\n        <div class=\"gp prod\"><span class=\"nt\">ConciseBody</span> <span class=\"geq\">:</span> <span class=\"nt\">AssignmentExpression</span></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>AssignmentExpression</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">StatementList</span> <span class=\"geq\">:</span> <span class=\"nt\">StatementList</span> <span class=\"nt\">StatementListItem</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>has</i> be HasProductionInTailPosition of <i>StatementList</i> with argument <i>nonterminal</i>.</li>\n          <li>If <i>has</i> is <b>true</b>, return <b>true</b>.</li>\n          <li>Return HasProductionInTailPosition of <i>StatementListItem</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n\n        <p><span class=\"prod\"><span class=\"nt\">FunctionStatementList</span> <span class=\"geq\">:</span> <span class=\"grhsannot\">[empty]</span></span></p>\n\n        <p><span class=\"prod\"><span class=\"nt\">StatementListItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Declaration</span></span></p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">Statement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">VariableStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">EmptyStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ExpressionStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ContinueStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">BreakStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ThrowStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">DebuggerStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">Block</span> <code class=\"t\">:</code> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n          <div class=\"rhs\"><span class=\"nt\">ReturnStatement</span> <code class=\"t\">:</code> <code class=\"t\">return</code> <code class=\"t\">;</code></div>\n          <div class=\"rhs\"><span class=\"nt\">LabelledItem</span> <code class=\"t\">:</code> <span class=\"nt\">FunctionDeclaration</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">CaseBlock</span> <code class=\"t\">:</code> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IfStatement</span> <span class=\"geq\">:</span> <code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span> <code class=\"t\">else</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>has</i> be HasProductionInTailPosition of the first <i>Statement</i> with argument <i>nonterminal</i>.</li>\n          <li>If <i>has</i> is <b>true</b>, return <b>true</b>.</li>\n          <li>Return HasProductionInTailPosition of the second <i>Statement</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n\n        <p><span class=\"prod\"><span class=\"nt\">IfStatement</span> <span class=\"geq\">:</span> <code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></span></p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">do</code> <span class=\"nt\">Statement</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <code class=\"t\">;</code></div>\n          <div class=\"rhs\"><code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">WithStatement</span> <code class=\"t\">:</code> <code class=\"t\">with</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>Statement</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">LabelledStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">LabelIdentifier</span> <code class=\"t\">:</code> <span class=\"nt\">LabelledItem</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>LabelledItem</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ReturnStatement</span> <span class=\"geq\">:</span> <code class=\"t\">return</code> <span class=\"nt\">Expression</span> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>Expression</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">SwitchStatement</span> <span class=\"geq\">:</span> <code class=\"t\">switch</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">CaseBlock</span></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>CaseBlock</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>has</i> be <b>false</b>.</li>\n          <li>If the first <i>CaseClauses</i> is present, let <i>has</i> be HasProductionInTailPosition of the first\n              <i>CaseClauses</i> with argument <i>nonterminal</i>.</li>\n          <li>If <i>has</i> is <b>true</b>, return <b>true</b>.</li>\n          <li>Let <i>has</i> be HasProductionInTailPosition of the <i>DefaultClause</i> with argument <i>nonterminal</i>.</li>\n          <li>If <i>has</i> is <b>true</b>, return <b>true</b>.</li>\n          <li>If the second <i>CaseClauses</i> is present, let <i>has</i> be HasProductionInTailPosition of the second\n              <i>CaseClauses</i> with argument <i>nonterminal</i>.</li>\n          <li>Return <i>has</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">CaseClauses</span> <span class=\"geq\">:</span> <span class=\"nt\">CaseClauses</span> <span class=\"nt\">CaseClause</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>has</i> be HasProductionInTailPosition of <i>CaseClauses</i> with argument <i>nonterminal</i>.</li>\n          <li>If <i>has</i> is <b>true</b>, return <b>true</b>.</li>\n          <li>Return HasProductionInTailPosition of <i>CaseClause</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n\n        <p><span class=\"prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></span></p>\n\n        <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n        <ol class=\"proc\">\n          <li>If <i>StatementList</i> is present, return HasProductionInTailPosition of <i>StatementList</i> with argument\n              <i>nonterminal</i>.</li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Catch</span></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>Catch</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n\n        <p><span class=\"prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Finally</span></span></p>\n\n        <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Catch</span> <span class=\"nt\">Finally</span></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>Finally</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">Catch</span> <span class=\"geq\">:</span> <code class=\"t\">catch</code> <code class=\"t\">(</code> <span class=\"nt\">CatchParameter</span> <code class=\"t\">)</code> <span class=\"nt\">Block</span></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>Block</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-expression-rules\">\n        <h1><span class=\"secnum\" id=\"sec-14.6.2.2\"><a href=\"/sec/sec-expression-rules.html\" title=\"link to this section\">14.6.2.2</a></span> Expression Rules</h1>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> A potential tail position call that is immediately followed by return <a href=\"/sec/sec-getvalue.html\">GetValue</a> of the call result is also a possible tail position call. Function calls cannot return\n          reference values, so such a <a href=\"/sec/sec-getvalue.html\">GetValue</a> operation will always returns the same value as the\n          actual function call result.</p>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">AssignmentExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">YieldExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ArrowFunction</span></div>\n          <div class=\"rhs\"><span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">=</code> <span class=\"nt\">AssignmentExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">LeftHandSideExpression</span> <span class=\"nt\">AssignmentOperator</span> <span class=\"nt\">AssignmentExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">BitwiseANDExpression</span> <code class=\"t\">:</code> <span class=\"nt\">BitwiseANDExpression</span> <code class=\"t\">&amp;</code> <span class=\"nt\">EqualityExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">BitwiseXORExpression</span> <code class=\"t\">:</code> <span class=\"nt\">BitwiseXORExpression</span> <code class=\"t\">^</code> <span class=\"nt\">BitwiseANDExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">BitwiseORExpression</span> <code class=\"t\">:</code> <span class=\"nt\">BitwiseORExpression</span> <code class=\"t\">|</code> <span class=\"nt\">BitwiseXORExpression</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">EqualityExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">EqualityExpression</span> <code class=\"t\">==</code> <span class=\"nt\">RelationalExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">EqualityExpression</span> <code class=\"t\">!=</code> <span class=\"nt\">RelationalExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">EqualityExpression</span> <code class=\"t\">===</code> <span class=\"nt\">RelationalExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">EqualityExpression</span> <code class=\"t\">!==</code> <span class=\"nt\">RelationalExpression</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">RelationalExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">RelationalExpression</span> <code class=\"t\">&lt;</code> <span class=\"nt\">ShiftExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">RelationalExpression</span> <code class=\"t\">&gt;</code> <span class=\"nt\">ShiftExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">RelationalExpression</span> <code class=\"t\">&lt;=</code> <span class=\"nt\">ShiftExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">RelationalExpression</span> <code class=\"t\">&gt;=</code> <span class=\"nt\">ShiftExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">RelationalExpression</span> <code class=\"t\">instanceof</code> <span class=\"nt\">ShiftExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">RelationalExpression</span> <code class=\"t\">in</code> <span class=\"nt\">ShiftExpression</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">ShiftExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ShiftExpression</span> <code class=\"t\">&lt;&lt;</code> <span class=\"nt\">AdditiveExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ShiftExpression</span> <code class=\"t\">&gt;&gt;</code> <span class=\"nt\">AdditiveExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ShiftExpression</span> <code class=\"t\">&gt;&gt;&gt;</code> <span class=\"nt\">AdditiveExpression</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">AdditiveExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">AdditiveExpression</span> <code class=\"t\">+</code> <span class=\"nt\">MultiplicativeExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">AdditiveExpression</span> <code class=\"t\">-</code> <span class=\"nt\">MultiplicativeExpression</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">MultiplicativeExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MultiplicativeExpression</span> <span class=\"nt\">MultiplicativeOperator</span> <span class=\"nt\">UnaryExpression</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">UnaryExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">delete</code> <span class=\"nt\">UnaryExpression</span></div>\n          <div class=\"rhs\"><code class=\"t\">void</code> <span class=\"nt\">UnaryExpression</span></div>\n          <div class=\"rhs\"><code class=\"t\">typeof</code> <span class=\"nt\">UnaryExpression</span></div>\n          <div class=\"rhs\"><code class=\"t\">++</code> <span class=\"nt\">UnaryExpression</span></div>\n          <div class=\"rhs\"><code class=\"t\">--</code> <span class=\"nt\">UnaryExpression</span></div>\n          <div class=\"rhs\"><code class=\"t\">+</code> <span class=\"nt\">UnaryExpression</span></div>\n          <div class=\"rhs\"><code class=\"t\">-</code> <span class=\"nt\">UnaryExpression</span></div>\n          <div class=\"rhs\"><code class=\"t\">~</code> <span class=\"nt\">UnaryExpression</span></div>\n          <div class=\"rhs\"><code class=\"t\">!</code> <span class=\"nt\">UnaryExpression</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">PostfixExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">++</code></div>\n          <div class=\"rhs\"><span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">--</code></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">CallExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">SuperCall</span></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <code class=\"t\">[</code> <span class=\"nt\">Expression</span> <code class=\"t\">]</code></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n          <div class=\"rhs\"><span class=\"nt\">NewExpression</span> <code class=\"t\">:</code> <code class=\"t\">new</code> <span class=\"nt\">NewExpression</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <code class=\"t\">[</code> <span class=\"nt\">Expression</span> <code class=\"t\">]</code></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n          <div class=\"rhs\"><span class=\"nt\">SuperProperty</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MetaProperty</span></div>\n          <div class=\"rhs\"><code class=\"t\">new</code> <span class=\"nt\">MemberExpression</span> <span class=\"nt\">Arguments</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">this</code></div>\n          <div class=\"rhs\"><span class=\"nt\">IdentifierReference</span></div>\n          <div class=\"rhs\"><span class=\"nt\">Literal</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ArrayLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ObjectLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">FunctionExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ClassExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">GeneratorExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">RegularExpressionLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">TemplateLiteral</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">Expression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">AssignmentExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">Expression</span> <code class=\"t\">,</code> <span class=\"nt\">AssignmentExpression</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>AssignmentExpression</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ConditionalExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">LogicalORExpression</span> <code class=\"t\">?</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">:</code> <span class=\"nt\">AssignmentExpression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>has</i> be HasProductionInTailPosition of the first <i>AssignmentExpression</i> with argument\n              <i>nonterminal</i>.</li>\n          <li>If <i>has</i> is <b>true</b>, return <b>true</b>.</li>\n          <li>Return HasProductionInTailPosition of the second <i>AssignmentExpression</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LogicalANDExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">LogicalANDExpression</span> <code class=\"t\">&amp;&amp;</code> <span class=\"nt\">BitwiseORExpression</span></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>BitwiseORExpression</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LogicalORExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">LogicalORExpression</span> <code class=\"t\">||</code> <span class=\"nt\">LogicalANDExpression</span></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>LogicalANDExpression</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">CallExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <span class=\"nt\">Arguments</span></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <span class=\"nt\">Arguments</span></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <span class=\"nt\">TemplateLiteral</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>If this <i>CallExpression</i> is <i>nonterminal</i>, return <b>true</b>.</li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <span class=\"nt\">TemplateLiteral</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>If this <i>MemberExpression</i> is <i>nonterminal</i>, return <b>true</b>.</li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>expr</i> be CoveredParenthesizedExpression of <i>CoverParenthesizedExpressionAndArrowParameterList</i>.</li>\n          <li>Return HasProductionInTailPosition of <i>expr</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">ParenthesizedExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>Expression</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-preparefortailcall\">\n      <h1><span class=\"secnum\" id=\"sec-14.6.3\"><a href=\"/sec/sec-preparefortailcall.html\" title=\"link to this section\">14.6.3</a></span>\n          Runtime Semantics: PrepareForTailCall ( )</h1>\n\n      <p class=\"normalbefore\">The abstract operation PrepareForTailCall performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>leafContext</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n        <li><a href=\"/sec/sec-execution-contexts.html\">Suspend</a> <i>leafContext</i>.</li>\n        <li>Pop <i>leafContext</i> from <a href=\"/sec/sec-execution-contexts.html\">the execution context stack</a>. The <a href=\"/sec/sec-execution-contexts.html\">execution context</a> now on the top of the stack becomes <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>leafContext</i> has no further use. It will never be activated as\n            <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n      </ol>\n\n      <p>A tail position call must either release any transient internal resources associated with the currently executing\n      function <a href=\"/sec/sec-execution-contexts.html\">execution context</a> before invoking the target function or reuse those\n      resources in support of the target function.</p>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> For example, a tail position call should only grow an implementation&#x2019;s activation\n        record stack by the amount that the size of the target function&#x2019;s activation record exceeds the size of the calling\n        function&#x2019;s activation record. If the target function&#x2019;s activation record is smaller, then the total size of\n        the stack should decrease.</p>\n      </div>\n    </section>\n  </section>\n"}