{"id":"sec-ecmascript-language-statements-and-declarations","html":"\n  <div class=\"front\">\n    <h1><span class=\"secnum\" id=\"sec-13\"><a href=\"/sec/sec-ecmascript-language-statements-and-declarations.html\" title=\"link to this section\">13</a></span> ECMAScript Language: Statements and Declarations</h1>\n    <h2>Syntax</h2>\n\n    <div class=\"gp\">\n      <div class=\"lhs\"><span class=\"nt\">Statement</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n      <div class=\"rhs\"><span class=\"nt\">BlockStatement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      <div class=\"rhs\"><span class=\"nt\">VariableStatement</span><sub class=\"g-params\">[?Yield]</sub></div>\n      <div class=\"rhs\"><span class=\"nt\">EmptyStatement</span></div>\n      <div class=\"rhs\"><span class=\"nt\">ExpressionStatement</span><sub class=\"g-params\">[?Yield]</sub></div>\n      <div class=\"rhs\"><span class=\"nt\">IfStatement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      <div class=\"rhs\"><span class=\"nt\">BreakableStatement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      <div class=\"rhs\"><span class=\"nt\">ContinueStatement</span><sub class=\"g-params\">[?Yield]</sub></div>\n      <div class=\"rhs\"><span class=\"nt\">BreakStatement</span><sub class=\"g-params\">[?Yield]</sub></div>\n      <div class=\"rhs\"><span class=\"grhsannot\">[+Return]</span> <span class=\"nt\">ReturnStatement</span><sub class=\"g-params\">[?Yield]</sub></div>\n      <div class=\"rhs\"><span class=\"nt\">WithStatement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      <div class=\"rhs\"><span class=\"nt\">LabelledStatement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      <div class=\"rhs\"><span class=\"nt\">ThrowStatement</span><sub class=\"g-params\">[?Yield]</sub></div>\n      <div class=\"rhs\"><span class=\"nt\">TryStatement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      <div class=\"rhs\"><span class=\"nt\">DebuggerStatement</span></div>\n    </div>\n\n    <div class=\"gp\">\n      <div class=\"lhs\"><span class=\"nt\">Declaration</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n      <div class=\"rhs\"><span class=\"nt\">HoistableDeclaration</span><sub class=\"g-params\">[?Yield]</sub></div>\n      <div class=\"rhs\"><span class=\"nt\">ClassDeclaration</span><sub class=\"g-params\">[?Yield]</sub></div>\n      <div class=\"rhs\"><span class=\"nt\">LexicalDeclaration</span><sub class=\"g-params\">[In, ?Yield]</sub></div>\n    </div>\n\n    <div class=\"gp\">\n      <div class=\"lhs\"><span class=\"nt\">HoistableDeclaration</span><sub class=\"g-params\">[Yield, Default]</sub> <span class=\"geq\">:</span></div>\n      <div class=\"rhs\"><span class=\"nt\">FunctionDeclaration</span><sub class=\"g-params\">[?Yield,?Default]</sub></div>\n      <div class=\"rhs\"><span class=\"nt\">GeneratorDeclaration</span><sub class=\"g-params\">[?Yield, ?Default]</sub></div>\n    </div>\n\n    <div class=\"gp\">\n      <div class=\"lhs\"><span class=\"nt\">BreakableStatement</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n      <div class=\"rhs\"><span class=\"nt\">IterationStatement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      <div class=\"rhs\"><span class=\"nt\">SwitchStatement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n    </div>\n  </div>\n\n  <section id=\"sec-statement-semantics\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-13.1\"><a href=\"/sec/sec-statement-semantics.html\" title=\"link to this section\">13.1</a></span>\n          Statement Semantics</h1>\n    </div>\n\n    <section id=\"sec-statement-semantics-static-semantics-containsduplicatelabels\">\n      <h1><span class=\"secnum\" id=\"sec-13.1.1\"><a href=\"/sec/sec-statement-semantics-static-semantics-containsduplicatelabels.html\" title=\"link to this section\">13.1.1</a></span> Static Semantics: ContainsDuplicateLabels</h1>\n\n      <p>With argument <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-block-static-semantics-containsduplicatelabels.html\">13.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsduplicatelabels.html\">13.6.2</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsduplicatelabels.html\">13.7.2.1</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsduplicatelabels.html\">13.7.3.1</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsduplicatelabels.html\">13.7.4.2</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels.html\">13.7.5.3</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsduplicatelabels.html\">13.11.2</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsduplicatelabels.html\">13.12.2</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsduplicatelabels.html\">13.13.2</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsduplicatelabels.html\">13.15.2</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsduplicatelabels.html\">15.2.1.2</a>.</p>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">Statement</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">VariableStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">EmptyStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ExpressionStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ContinueStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">BreakStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ReturnStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ThrowStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">DebuggerStatement</span></div>\n      </div>\n\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-statement-semantics-static-semantics-containsundefinedbreaktarget\">\n      <h1><span class=\"secnum\" id=\"sec-13.1.2\"><a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedbreaktarget.html\" title=\"link to this section\">13.1.2</a></span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n\n      <p>With argument <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-block-static-semantics-containsundefinedbreaktarget.html\">13.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedbreaktarget.html\">13.6.3</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.2.2</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.3.2</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.4.3</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget.html\">13.7.5.4</a>, <a href=\"/sec/sec-break-statement-static-semantics-containsundefinedbreaktarget.html\">13.9.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedbreaktarget.html\">13.11.3</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedbreaktarget.html\">13.12.3</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedbreaktarget.html\">13.13.3</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsundefinedbreaktarget.html\">13.15.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedbreaktarget.html\">15.2.1.3</a>.</p>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">Statement</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">VariableStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">EmptyStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ExpressionStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ContinueStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ReturnStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ThrowStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">DebuggerStatement</span></div>\n      </div>\n\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-statement-semantics-static-semantics-containsundefinedcontinuetarget\">\n      <h1><span class=\"secnum\" id=\"sec-13.1.3\"><a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedcontinuetarget.html\" title=\"link to this section\">13.1.3</a></span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n\n      <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-block-static-semantics-containsundefinedcontinuetarget.html\">13.2.4</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedcontinuetarget.html\">13.6.4</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.2.3</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.3.3</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.4.4</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget.html\">13.7.5.5</a>, <a href=\"/sec/sec-continue-statement-static-semantics-containsundefinedcontinuetarget.html\">13.8.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedcontinuetarget.html\">13.11.4</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedcontinuetarget.html\">13.12.4</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedcontinuetarget.html\">13.13.4</a>,<a href=\"/sec/sec-try-statement-static-semantics-containsundefinedcontinuetarget.html\">13.15.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedcontinuetarget.html\">15.2.1.4</a>.</p>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">Statement</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">VariableStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">EmptyStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ExpressionStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">BreakStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ReturnStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ThrowStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">DebuggerStatement</span></div>\n      </div>\n\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">BreakableStatement</span> <span class=\"geq\">:</span> <span class=\"nt\">IterationStatement</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>newIterationSet</i> be a copy of  <i>iterationSet</i> with all the elements of <i>labelSet</i> appended.</li>\n        <li>Return ContainsUndefinedContinueTarget of <i>IterationStatement</i> with arguments <i>newIterationSet</i> and &#xAB;\n            &#xBB;.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-static-semantics-declarationpart\">\n      <h1><span class=\"secnum\" id=\"sec-13.1.4\"><a href=\"/sec/sec-static-semantics-declarationpart.html\" title=\"link to this section\">13.1.4</a></span> Static Semantics:  DeclarationPart</h1>\n      <div class=\"gp prod\"><span class=\"nt\">HoistableDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionDeclaration</span></div>\n      <ol class=\"proc\">\n        <li>Return <i>FunctionDeclaration</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">HoistableDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">GeneratorDeclaration</span></div>\n      <ol class=\"proc\">\n        <li>Return <i>GeneratorDeclaration</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">Declaration</span> <span class=\"geq\">:</span> <span class=\"nt\">ClassDeclaration</span></div>\n      <ol class=\"proc\">\n        <li>Return <i>ClassDeclaration</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">Declaration</span> <span class=\"geq\">:</span> <span class=\"nt\">LexicalDeclaration</span></div>\n      <ol class=\"proc\">\n        <li>Return <i>LexicalDeclaration</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-statement-semantics-static-semantics-vardeclarednames\">\n      <h1><span class=\"secnum\" id=\"sec-13.1.5\"><a href=\"/sec/sec-statement-semantics-static-semantics-vardeclarednames.html\" title=\"link to this section\">13.1.5</a></span> Static Semantics:  VarDeclaredNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-block-static-semantics-vardeclarednames.html\">13.2.11</a>, <a href=\"/sec/sec-variable-statement-static-semantics-vardeclarednames.html\">13.3.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-vardeclarednames.html\">13.6.5</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-vardeclarednames.html\">13.7.2.4</a>, <a href=\"/sec/sec-while-statement-static-semantics-vardeclarednames.html\">13.7.3.4</a>, <a href=\"/sec/sec-for-statement-static-semantics-vardeclarednames.html\">13.7.4.5</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-vardeclarednames.html\">13.7.5.7</a>, <a href=\"/sec/sec-with-statement-static-semantics-vardeclarednames.html\">13.11.5</a>, <a href=\"/sec/sec-switch-statement-static-semantics-vardeclarednames.html\">13.12.7</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-vardeclarednames.html\">13.13.12</a>, <a href=\"/sec/sec-try-statement-static-semantics-vardeclarednames.html\">13.15.5</a>, <a href=\"/sec/sec-function-definitions-static-semantics-vardeclarednames.html\">14.1.15</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-vardeclarednames.html\">14.2.12</a>, <a href=\"/sec/sec-scripts-static-semantics-vardeclarednames.html\">15.1.5</a>, <a href=\"/sec/sec-module-semantics-static-semantics-vardeclarednames.html\">15.2.1.13</a>.</p>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">Statement</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">EmptyStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ExpressionStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ContinueStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">BreakStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ReturnStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ThrowStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">DebuggerStatement</span></div>\n      </div>\n\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-statement-semantics-static-semantics-varscopeddeclarations\">\n      <h1><span class=\"secnum\" id=\"sec-13.1.6\"><a href=\"/sec/sec-statement-semantics-static-semantics-varscopeddeclarations.html\" title=\"link to this section\">13.1.6</a></span> Static Semantics:  VarScopedDeclarations</h1>\n\n      <p>See also: <a href=\"/sec/sec-block-static-semantics-varscopeddeclarations.html\">13.2.12</a>, <a href=\"/sec/sec-variable-statement-static-semantics-varscopeddeclarations.html\">13.3.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-varscopeddeclarations.html\">13.6.6</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-varscopeddeclarations.html\">13.7.2.5</a>, <a href=\"/sec/sec-while-statement-static-semantics-varscopeddeclarations.html\">13.7.3.5</a>, <a href=\"/sec/sec-for-statement-static-semantics-varscopeddeclarations.html\">13.7.4.6</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations.html\">13.7.5.8</a>, <a href=\"/sec/sec-with-statement-static-semantics-varscopeddeclarations.html\">13.11.6</a>, <a href=\"/sec/sec-switch-statement-static-semantics-varscopeddeclarations.html\">13.12.8</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-varscopeddeclarations.html\">13.13.13</a>, <a href=\"/sec/sec-try-statement-static-semantics-varscopeddeclarations.html\">13.15.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-varscopeddeclarations.html\">14.1.16</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-varscopeddeclarations.html\">14.2.13</a>, <a href=\"/sec/sec-scripts-static-semantics-varscopeddeclarations.html\">15.1.6</a>, <a href=\"/sec/sec-module-semantics-static-semantics-varscopeddeclarations.html\">15.2.1.14</a>.</p>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">Statement</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">EmptyStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ExpressionStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ContinueStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">BreakStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ReturnStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ThrowStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">DebuggerStatement</span></div>\n      </div>\n\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-statement-semantics-runtime-semantics-labelledevaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.1.7\"><a href=\"/sec/sec-statement-semantics-runtime-semantics-labelledevaluation.html\" title=\"link to this section\">13.1.7</a></span> Runtime Semantics: LabelledEvaluation</h1>\n\n      <p>With argument <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-do-while-statement-runtime-semantics-labelledevaluation.html\">13.7.2.6</a>, <a href=\"/sec/sec-while-statement-runtime-semantics-labelledevaluation.html\">13.7.3.6</a>, <a href=\"/sec/sec-for-statement-runtime-semantics-labelledevaluation.html\">13.7.4.7</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation.html\">13.7.5.11</a>, <a href=\"/sec/sec-labelled-statements-runtime-semantics-labelledevaluation.html\">13.13.14</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">BreakableStatement</span> <span class=\"geq\">:</span> <span class=\"nt\">IterationStatement</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>stmtResult</i> be the result of performing LabelledEvaluation of <i>IterationStatement</i> with argument\n            <i>labelSet</i>.</li>\n        <li>If <i>stmtResult</i>.[[type]] is <span style=\"font-family: sans-serif\">break</span>, then\n          <ol class=\"block\">\n            <li>If <i>stmtResult</i>.[[target]] is <span style=\"font-family: sans-serif\">empty</span>, then\n              <ol class=\"block\">\n                <li>If <i>stmtResult</i>.[[value]] is <span style=\"font-family: sans-serif\">empty</span>, let <i>stmtResult</i> be\n                    <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<b>undefined</b>).</li>\n                <li>Else, let <i>stmtResult</i> be <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>stmtResult</i>.[[value]]).</li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>stmtResult</i>).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">BreakableStatement</span> <span class=\"geq\">:</span> <span class=\"nt\">SwitchStatement</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>stmtResult</i> be the result of evaluating <i>SwitchStatement</i>.</li>\n        <li>If <i>stmtResult</i>.[[type]] is <span style=\"font-family: sans-serif\">break</span>, then\n          <ol class=\"block\">\n            <li>If <i>stmtResult</i>.[[target]] is <span style=\"font-family: sans-serif\">empty</span>, then\n              <ol class=\"block\">\n                <li>If <i>stmtResult</i>.[[value]] is <span style=\"font-family: sans-serif\">empty</span>, let <i>stmtResult</i> be\n                    <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<b>undefined</b>).</li>\n                <li>Else, let <i>stmtResult</i> be <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>stmtResult</i>.[[value]]).</li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>stmtResult</i>).</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> A <span class=\"nt\">BreakableStatement</span> is one that can be exited via an unlabelled\n        <var>BreakStatement.</var></p>\n      </div>\n    </section>\n\n    <section id=\"sec-statement-semantics-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.1.8\"><a href=\"/sec/sec-statement-semantics-runtime-semantics-evaluation.html\" title=\"link to this section\">13.1.8</a></span> Runtime Semantics: Evaluation</h1>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">HoistableDeclaration</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">GeneratorDeclaration</span></div>\n      </div>\n\n      <ol class=\"proc\">\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family: sans-serif\">empty</span>).</li>\n      </ol>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">HoistableDeclaration</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">FunctionDeclaration</span></div>\n      </div>\n\n      <ol class=\"proc\">\n        <li>Return the result of evaluating <i>FunctionDeclaration</i>.</li>\n      </ol>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">BreakableStatement</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">IterationStatement</span></div>\n        <div class=\"rhs\"><span class=\"nt\">SwitchStatement</span></div>\n      </div>\n\n      <ol class=\"proc\">\n        <li>Let <i>newLabelSet</i>  be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>Return the result of performing LabelledEvaluation of this <i>BreakableStatement</i> with argument\n            <i>newLabelSet</i>.</li>\n      </ol>\n    </section>\n  </section>\n\n  <section id=\"sec-block\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-13.2\"><a href=\"/sec/sec-block.html\" title=\"link to this section\">13.2</a></span> Block</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">BlockStatement</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">Block</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">Block</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">{</code> <span class=\"nt\">StatementList</span><sub class=\"g-params\">[?Yield, ?Return]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">StatementList</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">StatementListItem</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">StatementList</span><sub class=\"g-params\">[?Yield, ?Return]</sub> <span class=\"nt\">StatementListItem</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">StatementListItem</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">Declaration</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n    </div>\n\n    <section id=\"sec-block-static-semantics-early-errors\">\n      <h1><span class=\"secnum\" id=\"sec-13.2.1\"><a href=\"/sec/sec-block-static-semantics-early-errors.html\" title=\"link to this section\">13.2.1</a></span> Static Semantics:  Early Errors</h1>\n      <div class=\"gp prod\"><span class=\"nt\">Block</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">StatementList</span> <code class=\"t\">}</code></div>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if the LexicallyDeclaredNames of <span class=\"nt\">StatementList</span> contains any duplicate\n          entries.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if any element of the LexicallyDeclaredNames of <span class=\"nt\">StatementList</span> also\n          occurs in the VarDeclaredNames of <span class=\"nt\">StatementList</span>.</p>\n        </li>\n      </ul>\n    </section>\n\n    <section id=\"sec-block-static-semantics-containsduplicatelabels\">\n      <h1><span class=\"secnum\" id=\"sec-13.2.2\"><a href=\"/sec/sec-block-static-semantics-containsduplicatelabels.html\" title=\"link to this section\">13.2.2</a></span> Static Semantics: ContainsDuplicateLabels</h1>\n\n      <p>With argument <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsduplicatelabels.html\">13.1.1</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsduplicatelabels.html\">13.6.2</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsduplicatelabels.html\">13.7.2.1</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsduplicatelabels.html\">13.7.3.1</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsduplicatelabels.html\">13.7.4.2</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels.html\">13.7.5.3</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsduplicatelabels.html\">13.11.2</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsduplicatelabels.html\">13.12.2</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsduplicatelabels.html\">13.13.2</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsduplicatelabels.html\">13.15.2</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsduplicatelabels.html\">15.2.1.2</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">Block</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementList</span> <span class=\"geq\">:</span> <span class=\"nt\">StatementList</span> <span class=\"nt\">StatementListItem</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasDuplicates</i> be ContainsDuplicateLabels of <i>StatementList</i> with argument <i>labelSet</i>.</li>\n        <li>If <i>hasDuplicates</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsDuplicateLabels of <i>StatementListItem</i> with argument <i>labelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementListItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Declaration</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-block-static-semantics-containsundefinedbreaktarget\">\n      <h1><span class=\"secnum\" id=\"sec-13.2.3\"><a href=\"/sec/sec-block-static-semantics-containsundefinedbreaktarget.html\" title=\"link to this section\">13.2.3</a></span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n\n      <p>With argument <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedbreaktarget.html\">13.1.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedbreaktarget.html\">13.6.3</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.2.2</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.3.2</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.4.3</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget.html\">13.7.5.4</a>, <a href=\"/sec/sec-break-statement-static-semantics-containsundefinedbreaktarget.html\">13.9.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedbreaktarget.html\">13.11.3</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedbreaktarget.html\">13.12.3</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedbreaktarget.html\">13.13.3</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsundefinedbreaktarget.html\">13.15.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedbreaktarget.html\">15.2.1.3</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">Block</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementList</span> <span class=\"geq\">:</span> <span class=\"nt\">StatementList</span> <span class=\"nt\">StatementListItem</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedBreakTarget of <i>StatementList</i> with argument\n            <i>labelSet</i>.</li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsUndefinedBreakTarget of <i>StatementListItem</i> with argument <i>labelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementListItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Declaration</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-block-static-semantics-containsundefinedcontinuetarget\">\n      <h1><span class=\"secnum\" id=\"sec-13.2.4\"><a href=\"/sec/sec-block-static-semantics-containsundefinedcontinuetarget.html\" title=\"link to this section\">13.2.4</a></span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n\n      <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedcontinuetarget.html\">13.1.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedcontinuetarget.html\">13.6.4</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.2.3</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.3.3</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.4.4</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget.html\">13.7.5.5</a>, <a href=\"/sec/sec-continue-statement-static-semantics-containsundefinedcontinuetarget.html\">13.8.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedcontinuetarget.html\">13.11.4</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedcontinuetarget.html\">13.12.4</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedcontinuetarget.html\">13.13.4</a>,<a href=\"/sec/sec-try-statement-static-semantics-containsundefinedcontinuetarget.html\">13.15.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedcontinuetarget.html\">15.2.1.4</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">Block</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementList</span> <span class=\"geq\">:</span> <span class=\"nt\">StatementList</span> <span class=\"nt\">StatementListItem</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedContinueTarget of <i>StatementList</i> with arguments\n            <i>iterationSet</i> and &#xAB; &#xBB;.</li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsUndefinedContinueTarget of <i>StatementListItem</i> with arguments <i>iterationSet</i> and\n            &#xAB;&#xA0;&#xBB;.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementListItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Declaration</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-block-static-semantics-lexicallydeclarednames\">\n      <h1><span class=\"secnum\" id=\"sec-13.2.5\"><a href=\"/sec/sec-block-static-semantics-lexicallydeclarednames.html\" title=\"link to this section\">13.2.5</a></span> Static Semantics:  LexicallyDeclaredNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-switch-statement-static-semantics-lexicallydeclarednames.html\">13.12.5</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-lexicallydeclarednames.html\">13.13.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-lexicallydeclarednames.html\">14.1.13</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-lexicallydeclarednames.html\">14.2.10</a>, <a href=\"/sec/sec-scripts-static-semantics-lexicallydeclarednames.html\">15.1.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-lexicallydeclarednames.html\">15.2.1.11</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">Block</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementList</span> <span class=\"geq\">:</span> <span class=\"nt\">StatementList</span> <span class=\"nt\">StatementListItem</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>names</i> be LexicallyDeclaredNames of <i>StatementList</i>.</li>\n        <li>Append to <i>names</i> the elements of the LexicallyDeclaredNames of <i>StatementListItem.</i></li>\n        <li>Return <i>names</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementListItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>If <i>Statement</i> is <span class=\"prod\"><span class=\"nt\">Statement</span> <span class=\"geq\">:</span> <span class=\"nt\">LabelledStatement</span></span> , return LexicallyDeclaredNames of <i>LabelledStatement</i>.</li>\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementListItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Declaration</span></div>\n      <ol class=\"proc\">\n        <li>Return the BoundNames of <i>Declaration</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-block-static-semantics-lexicallyscopeddeclarations\">\n      <h1><span class=\"secnum\" id=\"sec-13.2.6\"><a href=\"/sec/sec-block-static-semantics-lexicallyscopeddeclarations.html\" title=\"link to this section\">13.2.6</a></span> Static Semantics:  LexicallyScopedDeclarations</h1>\n\n      <p>See also: <a href=\"/sec/sec-switch-statement-static-semantics-lexicallyscopeddeclarations.html\">13.12.6</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-lexicallyscopeddeclarations.html\">13.13.7</a>, <a href=\"/sec/sec-function-definitions-static-semantics-lexicallyscopeddeclarations.html\">14.1.14</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations.html\">14.2.11</a>, <a href=\"/sec/sec-scripts-static-semantics-lexicallyscopeddeclarations.html\">15.1.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-lexicallyscopeddeclarations.html\">15.2.1.12</a>, <a href=\"/sec/sec-exports-static-semantics-lexicallyscopeddeclarations.html\">15.2.3.8</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">StatementList</span> <span class=\"geq\">:</span> <span class=\"nt\">StatementList</span> <span class=\"nt\">StatementListItem</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>declarations</i> be LexicallyScopedDeclarations of <i>StatementList</i>.</li>\n        <li>Append to <i>declarations</i> the elements of the LexicallyScopedDeclarations of <i>StatementListItem.</i></li>\n        <li>Return <i>declarations</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementListItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>If <i>Statement</i> is <span class=\"prod\"><span class=\"nt\">Statement</span> <span class=\"geq\">:</span> <span class=\"nt\">LabelledStatement</span></span> , return LexicallyScopedDeclarations of <i>LabelledStatement</i>.</li>\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementListItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Declaration</span></div>\n      <ol class=\"proc\">\n        <li>Return a new <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing DeclarationPart of\n            <i>Declaration</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-block-static-semantics-toplevellexicallydeclarednames\">\n      <h1><span class=\"secnum\" id=\"sec-13.2.7\"><a href=\"/sec/sec-block-static-semantics-toplevellexicallydeclarednames.html\" title=\"link to this section\">13.2.7</a></span> Static Semantics:  TopLevelLexicallyDeclaredNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-labelled-statements-static-semantics-toplevellexicallydeclarednames.html\">13.13.8</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">StatementList</span> <span class=\"geq\">:</span> <span class=\"nt\">StatementList</span> <span class=\"nt\">StatementListItem</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>names</i> be TopLevelLexicallyDeclaredNames of <i>StatementList</i>.</li>\n        <li>Append to <i>names</i> the elements of the TopLevelLexicallyDeclaredNames of <i>StatementListItem.</i></li>\n        <li>Return <i>names</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementListItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementListItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Declaration</span></div>\n      <ol class=\"proc\">\n        <li>If <i>Declaration</i> is <span class=\"prod\"><span class=\"nt\">Declaration</span> <span class=\"geq\">:</span> <span class=\"nt\">HoistableDeclaration</span></span> , then\n          <ol class=\"block\">\n            <li>If <i>HoistableDeclaration</i> is <span class=\"prod\"><span class=\"nt\">HoistableDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionDeclaration</span></span> , return &#xAB; &#xBB;.</li>\n            <li>If <i>HoistableDeclaration</i> is <span class=\"prod\"><span class=\"nt\">HoistableDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">GeneratorDeclaration</span></span> , return &#xAB; &#xBB;.</li>\n          </ol>\n        </li>\n        <li>Return the BoundNames of <i>Declaration</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> At the top level of a function, or script,  function declarations are treated like var\n        declarations rather than like lexical declarations.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-block-static-semantics-toplevellexicallyscopeddeclarations\">\n      <h1><span class=\"secnum\" id=\"sec-13.2.8\"><a href=\"/sec/sec-block-static-semantics-toplevellexicallyscopeddeclarations.html\" title=\"link to this section\">13.2.8</a></span> Static Semantics:  TopLevelLexicallyScopedDeclarations</h1>\n\n      <p>See also: <a href=\"/sec/sec-labelled-statements-static-semantics-toplevellexicallyscopeddeclarations.html\">13.13.9</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">Block</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementList</span> <span class=\"geq\">:</span> <span class=\"nt\">StatementList</span> <span class=\"nt\">StatementListItem</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>declarations</i> be TopLevelLexicallyScopedDeclarations of <i>StatementList</i>.</li>\n        <li>Append to <i>declarations</i> the elements of the TopLevelLexicallyScopedDeclarations of\n            <i>StatementListItem.</i></li>\n        <li>Return <i>declarations</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementListItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementListItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Declaration</span></div>\n      <ol class=\"proc\">\n        <li>If <i>Declaration</i> is <span class=\"prod\"><span class=\"nt\">Declaration</span> <span class=\"geq\">:</span> <span class=\"nt\">HoistableDeclaration</span></span> , then\n          <ol class=\"block\">\n            <li>If <i>HoistableDeclaration</i> is <span class=\"prod\"><span class=\"nt\">HoistableDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionDeclaration</span></span> , return &#xAB; &#xBB;.</li>\n            <li>If <i>HoistableDeclaration</i> is <span class=\"prod\"><span class=\"nt\">HoistableDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">GeneratorDeclaration</span></span> , return &#xAB; &#xBB;.</li>\n          </ol>\n        </li>\n        <li>Return a new <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing <i>Declaration</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-block-static-semantics-toplevelvardeclarednames\">\n      <h1><span class=\"secnum\" id=\"sec-13.2.9\"><a href=\"/sec/sec-block-static-semantics-toplevelvardeclarednames.html\" title=\"link to this section\">13.2.9</a></span> Static Semantics:  TopLevelVarDeclaredNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-labelled-statements-static-semantics-toplevelvardeclarednames.html\">13.13.10</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">Block</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementList</span> <span class=\"geq\">:</span> <span class=\"nt\">StatementList</span> <span class=\"nt\">StatementListItem</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>names</i> be TopLevelVarDeclaredNames of <i>StatementList</i>.</li>\n        <li>Append to <i>names</i> the elements of the TopLevelVarDeclaredNames of <i>StatementListItem.</i></li>\n        <li>Return <i>names</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementListItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Declaration</span></div>\n      <ol class=\"proc\">\n        <li>If <i>Declaration</i> is <span class=\"prod\"><span class=\"nt\">Declaration</span> <span class=\"geq\">:</span> <span class=\"nt\">HoistableDeclaration</span></span> , then\n          <ol class=\"block\">\n            <li>If <i>HoistableDeclaration</i> is <span class=\"prod\"><span class=\"nt\">HoistableDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionDeclaration</span></span> , return the BoundNames of\n                <i>FunctionDeclaration</i>.</li>\n            <li>If <i>HoistableDeclaration</i> is <span class=\"prod\"><span class=\"nt\">HoistableDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">GeneratorDeclaration</span></span> , return the BoundNames of\n                <i>GeneratorDeclaration</i>.</li>\n          </ol>\n        </li>\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementListItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>If <i>Statement</i> is <span class=\"prod\"><span class=\"nt\">Statement</span> <span class=\"geq\">:</span> <span class=\"nt\">LabelledStatement</span></span> , return TopLevelVarDeclaredNames of <i>Statement</i>.</li>\n        <li>Return VarDeclaredNames of <i>Statement</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> At the top level of a function or script, inner function declarations are treated like var\n        declarations.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-block-static-semantics-toplevelvarscopeddeclarations\">\n      <h1><span class=\"secnum\" id=\"sec-13.2.10\"><a href=\"/sec/sec-block-static-semantics-toplevelvarscopeddeclarations.html\" title=\"link to this section\">13.2.10</a></span> Static Semantics:  TopLevelVarScopedDeclarations</h1>\n\n      <p>See also: <a href=\"/sec/sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations.html\">13.13.11</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">Block</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementList</span> <span class=\"geq\">:</span> <span class=\"nt\">StatementList</span> <span class=\"nt\">StatementListItem</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>declarations</i> be TopLevelVarScopedDeclarations of <i>StatementList</i>.</li>\n        <li>Append to <i>declarations</i> the elements of the TopLevelVarScopedDeclarations of <i>StatementListItem.</i></li>\n        <li>Return <i>declarations</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementListItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>If <i>Statement</i> is <span class=\"prod\"><span class=\"nt\">Statement</span> <span class=\"geq\">:</span> <span class=\"nt\">LabelledStatement</span></span> , return TopLevelVarScopedDeclarations of <i>Statement</i>.</li>\n        <li>Return VarScopedDeclarations of <i>Statement</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementListItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Declaration</span></div>\n      <ol class=\"proc\">\n        <li>If <i>Declaration</i> is <span class=\"prod\"><span class=\"nt\">Declaration</span> <span class=\"geq\">:</span> <span class=\"nt\">HoistableDeclaration</span></span> , then\n          <ol class=\"block\">\n            <li>If <i>HoistableDeclaration</i> is <span class=\"prod\"><span class=\"nt\">HoistableDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionDeclaration</span></span> , return\n                &#xAB;&#xA0;<i>FunctionDeclaration</i> &#xBB;.</li>\n            <li>If <i>HoistableDeclaration</i> is <span class=\"prod\"><span class=\"nt\">HoistableDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">GeneratorDeclaration</span></span> , return\n                &#xAB;&#xA0;<i>GeneratorDeclaration</i> &#xBB;.</li>\n          </ol>\n        </li>\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-block-static-semantics-vardeclarednames\">\n      <h1><span class=\"secnum\" id=\"sec-13.2.11\"><a href=\"/sec/sec-block-static-semantics-vardeclarednames.html\" title=\"link to this section\">13.2.11</a></span> Static Semantics:  VarDeclaredNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-vardeclarednames.html\">13.1.5</a>, <a href=\"/sec/sec-variable-statement-static-semantics-vardeclarednames.html\">13.3.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-vardeclarednames.html\">13.6.5</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-vardeclarednames.html\">13.7.2.4</a>, <a href=\"/sec/sec-while-statement-static-semantics-vardeclarednames.html\">13.7.3.4</a>, <a href=\"/sec/sec-for-statement-static-semantics-vardeclarednames.html\">13.7.4.5</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-vardeclarednames.html\">13.7.5.7</a>, <a href=\"/sec/sec-with-statement-static-semantics-vardeclarednames.html\">13.11.5</a>, <a href=\"/sec/sec-switch-statement-static-semantics-vardeclarednames.html\">13.12.7</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-vardeclarednames.html\">13.13.12</a>, <a href=\"/sec/sec-try-statement-static-semantics-vardeclarednames.html\">13.15.5</a>, <a href=\"/sec/sec-function-definitions-static-semantics-vardeclarednames.html\">14.1.15</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-vardeclarednames.html\">14.2.12</a>, <a href=\"/sec/sec-scripts-static-semantics-vardeclarednames.html\">15.1.5</a>, <a href=\"/sec/sec-module-semantics-static-semantics-vardeclarednames.html\">15.2.1.13</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">Block</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementList</span> <span class=\"geq\">:</span> <span class=\"nt\">StatementList</span> <span class=\"nt\">StatementListItem</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>names</i> be VarDeclaredNames of <i>StatementList</i>.</li>\n        <li>Append to <i>names</i> the elements of the VarDeclaredNames of <i>StatementListItem.</i></li>\n        <li>Return <i>names</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementListItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Declaration</span></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-block-static-semantics-varscopeddeclarations\">\n      <h1><span class=\"secnum\" id=\"sec-13.2.12\"><a href=\"/sec/sec-block-static-semantics-varscopeddeclarations.html\" title=\"link to this section\">13.2.12</a></span> Static Semantics:  VarScopedDeclarations</h1>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-varscopeddeclarations.html\">13.1.6</a>, <a href=\"/sec/sec-variable-statement-static-semantics-varscopeddeclarations.html\">13.3.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-varscopeddeclarations.html\">13.6.6</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-varscopeddeclarations.html\">13.7.2.5</a>, <a href=\"/sec/sec-while-statement-static-semantics-varscopeddeclarations.html\">13.7.3.5</a>, <a href=\"/sec/sec-for-statement-static-semantics-varscopeddeclarations.html\">13.7.4.6</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations.html\">13.7.5.8</a>, <a href=\"/sec/sec-with-statement-static-semantics-varscopeddeclarations.html\">13.11.6</a>, <a href=\"/sec/sec-switch-statement-static-semantics-varscopeddeclarations.html\">13.12.8</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-varscopeddeclarations.html\">13.13.13</a>, <a href=\"/sec/sec-try-statement-static-semantics-varscopeddeclarations.html\">13.15.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-varscopeddeclarations.html\">14.1.16</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-varscopeddeclarations.html\">14.2.13</a>, <a href=\"/sec/sec-scripts-static-semantics-varscopeddeclarations.html\">15.1.6</a>, <a href=\"/sec/sec-module-semantics-static-semantics-varscopeddeclarations.html\">15.2.1.14</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">Block</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementList</span> <span class=\"geq\">:</span> <span class=\"nt\">StatementList</span> <span class=\"nt\">StatementListItem</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>declarations</i> be VarScopedDeclarations of <i>StatementList</i>.</li>\n        <li>Append to <i>declarations</i> the elements of the VarScopedDeclarations of <i>StatementListItem.</i></li>\n        <li>Return <i>declarations</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">StatementListItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Declaration</span></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-block-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.2.13\"><a href=\"/sec/sec-block-runtime-semantics-evaluation.html\" title=\"link to this section\">13.2.13</a></span> Runtime Semantics: Evaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">Block</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family: sans-serif\">empty</span>).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">Block</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">StatementList</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Let <i>oldEnv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n        <li>Let <i>blockEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>oldEnv</i>).</li>\n        <li>Perform <a href=\"/sec/sec-blockdeclarationinstantiation.html\">BlockDeclarationInstantiation</a>(<i>StatementList,</i>\n            <i>blockEnv</i>).</li>\n        <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>blockEnv</i>.</li>\n        <li>Let <i>blockValue</i> be the result of evaluating <i>StatementList</i>.</li>\n        <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n        <li>Return <i>blockValue</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE 1</span> No matter how control leaves the <span class=\"nt\">Block</span> the <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> is always restored to its former state.</p>\n      </div>\n\n      <div class=\"gp prod\"><span class=\"nt\">StatementList</span> <span class=\"geq\">:</span> <span class=\"nt\">StatementList</span> <span class=\"nt\">StatementListItem</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>sl</i> be the result of evaluating <i>StatementList</i>.</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>sl</i>).</li>\n        <li>Let <i>s</i> be the result of evaluating <i>StatementListItem</i>.</li>\n        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>s</i>, <i>sl</i>.[[value]])).</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE 2</span> The value of a <span class=\"nt\">StatementList</span> is the value of the last value\n        producing item in the <span class=\"nt\">StatementList</span>. For example, the following calls to the <code>eval</code>\n        function all return the value 1:</p>\n\n        <p><code>eval(&quot;1;;;;;&quot;)</code></p>\n\n        <p><code>eval(&quot;1;{}&quot;)</code></p>\n\n        <p><code>eval(&quot;1;var a;&quot;)</code></p>\n      </div>\n    </section>\n\n    <section id=\"sec-blockdeclarationinstantiation\">\n      <h1><span class=\"secnum\" id=\"sec-13.2.14\"><a href=\"/sec/sec-blockdeclarationinstantiation.html\" title=\"link to this section\">13.2.14</a></span> Runtime Semantics: BlockDeclarationInstantiation( code, env )</h1>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span>  When a <span class=\"nt\">Block</span> or <span class=\"nt\">CaseBlock</span> production is\n        evaluated a new declarative <a href=\"/sec/sec-environment-records.html\">Environment Record</a> is created and bindings for each\n        block scoped variable, constant, function, generator function, or class declared in the block are instantiated in the <a href=\"/sec/sec-environment-records.html\">Environment Record</a>.</p>\n      </div>\n\n      <p>BlockDeclarationInstantiation is performed as follows using arguments <var>code</var> and <var>env</var>. <var>code</var>\n      is the grammar production corresponding to the body of the block. <var>env</var> is the declarative <a href=\"/sec/sec-environment-records.html\">Environment Record</a> in which bindings are to be created.</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>declarations</i> be the LexicallyScopedDeclarations of <i>code</i>.</li>\n        <li>For each element <i>d</i> in <i>declarations</i> do\n          <ol class=\"block\">\n            <li>For each element <i>dn</i> of the BoundNames of <i>d</i> do\n              <ol class=\"block\">\n                <li>If IsConstantDeclaration of <i>d</i> is <b>true</b>, then\n                  <ol class=\"block\">\n                    <li>Let <i>status</i> be <i>env</i>.CreateImmutableBinding(<i>dn</i>, <b>true</b>).</li>\n                  </ol>\n                </li>\n                <li>Else,\n                  <ol class=\"block\">\n                    <li>Let <i>status</i> be <i>env</i>.CreateMutableBinding(<i>dn</i>, <b>false</b>).</li>\n                  </ol>\n                </li>\n                <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is never an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n              </ol>\n            </li>\n            <li>If <i>d</i> is a <i>GeneratorDeclaration</i> production or a <i>FunctionDeclaration</i> production, then\n              <ol class=\"block\">\n                <li>Let <i>fn</i> be the sole element of the BoundNames of <i>d</i></li>\n                <li>Let <i>fo</i> be the result of performing  InstantiateFunctionObject  for <i>d</i> with argument\n                    <i>env</i>.</li>\n                <li>Perform <i>env</i>.InitializeBinding(<i>fn</i>, <i>fo</i>).</li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n      </ol>\n    </section>\n  </section>\n\n  <section id=\"sec-declarations-and-the-variable-statement\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-13.3\"><a href=\"/sec/sec-declarations-and-the-variable-statement.html\" title=\"link to this section\">13.3</a></span> Declarations and the Variable Statement</h1>\n    </div>\n\n    <section id=\"sec-let-and-const-declarations\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.1\"><a href=\"/sec/sec-let-and-const-declarations.html\" title=\"link to this section\">13.3.1</a></span> Let and Const Declarations</h1>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> <code>let</code> and <code>const</code> declarations define variables that are scoped to\n          <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>. The variables are created when their containing <a href=\"/sec/sec-lexical-environments.html\">Lexical Environment</a> is instantiated but may not be accessed in any way until the\n          variable&#x2019;s <span class=\"nt\">LexicalBinding</span> is evaluated. A variable defined by a <span class=\"nt\">LexicalBinding</span> with an <span class=\"nt\">Initializer</span> is assigned the value of its <span style=\"font-family: Times New Roman\"><i>Initializer</i>&#x2019;s</span> <span class=\"nt\">AssignmentExpression</span> when\n          the <span class=\"nt\">LexicalBinding</span> is evaluated, not when the variable is created. If a <span class=\"nt\">LexicalBinding</span> in a <code>let</code> declaration does not have an <span class=\"nt\">Initializer</span>\n          the variable is assigned the value <b>undefined</b> when the <span class=\"nt\">LexicalBinding</span> is evaluated.</p>\n        </div>\n\n        <h2>Syntax</h2>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">LexicalDeclaration</span><sub class=\"g-params\">[In, Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">LetOrConst</span> <span class=\"nt\">BindingList</span><sub class=\"g-params\">[?In, ?Yield]</sub> <code class=\"t\">;</code></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">LetOrConst</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">let</code></div>\n          <div class=\"rhs\"><code class=\"t\">const</code></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">BindingList</span><sub class=\"g-params\">[In, Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">LexicalBinding</span><sub class=\"g-params\">[?In, ?Yield]</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">BindingList</span><sub class=\"g-params\">[?In, ?Yield]</sub> <code class=\"t\">,</code> <span class=\"nt\">LexicalBinding</span><sub class=\"g-params\">[?In, ?Yield]</sub></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">LexicalBinding</span><sub class=\"g-params\">[In, Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">BindingIdentifier</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">Initializer</span><sub class=\"g-params\">[?In, ?Yield]</sub><sub class=\"g-opt\">opt</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">BindingPattern</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">Initializer</span><sub class=\"g-params\">[?In, ?Yield]</sub></div>\n        </div>\n      </div>\n\n      <section id=\"sec-let-and-const-declarations-static-semantics-early-errors\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.1.1\"><a href=\"/sec/sec-let-and-const-declarations-static-semantics-early-errors.html\" title=\"link to this section\">13.3.1.1</a></span> Static Semantics:  Early Errors</h1>\n        <div class=\"gp prod\"><span class=\"nt\">LexicalDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">LetOrConst</span> <span class=\"nt\">BindingList</span> <code class=\"t\">;</code></div>\n        <ul>\n          <li>It is a Syntax Error if the BoundNames of <span class=\"nt\">BindingList</span> contains <code>&quot;let&quot;</code>.</li>\n          <li>It is a Syntax Error if the BoundNames of <span class=\"nt\">BindingList</span> contains any duplicate entries.</li>\n        </ul>\n        <div class=\"gp prod\"><span class=\"nt\">LexicalBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span> <span class=\"nt\">Initializer</span><sub class=\"g-opt\">opt</sub></div>\n        <ul>\n          <li>\n            <p>It is a Syntax Error if <span class=\"nt\">Initializer</span> is not present and IsConstantDeclaration of the <span class=\"nt\">LexicalDeclaration</span> containing this production is <span class=\"value\">true</span>.</p>\n          </li>\n        </ul>\n      </section>\n\n      <section id=\"sec-let-and-const-declarations-static-semantics-boundnames\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.1.2\"><a href=\"/sec/sec-let-and-const-declarations-static-semantics-boundnames.html\" title=\"link to this section\">13.3.1.2</a></span> Static Semantics:  BoundNames</h1>\n\n        <p>See also: <a href=\"/sec/sec-identifiers-static-semantics-boundnames.html\">12.1.2</a>, <a href=\"/sec/sec-variable-statement-static-semantics-boundnames.html\">13.3.2.1</a>, <a href=\"/sec/sec-destructuring-binding-patterns-static-semantics-boundnames.html\">13.3.3.1</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-boundnames.html\">13.7.5.2</a>, <a href=\"/sec/sec-function-definitions-static-semantics-boundnames.html\">14.1.3</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-boundnames.html\">14.2.2</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-boundnames.html\">14.4.2</a>, <a href=\"/sec/sec-class-definitions-static-semantics-boundnames.html\">14.5.2</a>, <a href=\"/sec/sec-imports-static-semantics-boundnames.html\">15.2.2.2</a>, <a href=\"/sec/sec-exports-static-semantics-boundnames.html\">15.2.3.2</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">LexicalDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">LetOrConst</span> <span class=\"nt\">BindingList</span> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Return the BoundNames of <i>BindingList</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingList</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingList</span> <code class=\"t\">,</code> <span class=\"nt\">LexicalBinding</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>names</i> be the BoundNames of <i>BindingList</i>.</li>\n          <li>Append to <i>names</i> the elements of the BoundNames of <i>LexicalBinding.</i></li>\n          <li>Return <i>names</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LexicalBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span> <span class=\"nt\">Initializer</span><sub class=\"g-opt\">opt</sub></div>\n        <ol class=\"proc\">\n          <li>Return the BoundNames of <i>BindingIdentifier</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LexicalBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingPattern</span> <span class=\"nt\">Initializer</span></div>\n        <ol class=\"proc\">\n          <li>Return the BoundNames of <i>BindingPattern</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-let-and-const-declarations-static-semantics-isconstantdeclaration\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.1.3\"><a href=\"/sec/sec-let-and-const-declarations-static-semantics-isconstantdeclaration.html\" title=\"link to this section\">13.3.1.3</a></span> Static Semantics:  IsConstantDeclaration</h1>\n\n        <p>See also: <a href=\"/sec/sec-function-definitions-static-semantics-isconstantdeclaration.html\">14.1.10</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-isconstantdeclaration.html\">14.4.8</a>, <a href=\"/sec/sec-class-definitions-static-semantics-isconstantdeclaration.html\">14.5.7</a>, <a href=\"/sec/sec-exports-static-semantics-isconstantdeclaration.html\">15.2.3.7</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">LexicalDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">LetOrConst</span> <span class=\"nt\">BindingList</span> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Return IsConstantDeclaration of <i>LetOrConst</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LetOrConst</span> <span class=\"geq\">:</span> <code class=\"t\">let</code></div>\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LetOrConst</span> <span class=\"geq\">:</span> <code class=\"t\">const</code></div>\n        <ol class=\"proc\">\n          <li>Return <b>true</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-let-and-const-declarations-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.1.4\"><a href=\"/sec/sec-let-and-const-declarations-runtime-semantics-evaluation.html\" title=\"link to this section\">13.3.1.4</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">LexicalDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">LetOrConst</span> <span class=\"nt\">BindingList</span> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>next</i> be the result of evaluating <i>BindingList</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n          <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family:\n              sans-serif\">empty</span>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingList</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingList</span> <code class=\"t\">,</code> <span class=\"nt\">LexicalBinding</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>next</i> be the result of evaluating <i>BindingList</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n          <li>Return the result of evaluating <i>LexicalBinding</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LexicalBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>lhs</i> be <a href=\"/sec/sec-resolvebinding.html\">ResolveBinding</a>(StringValue of <i>BindingIdentifier</i>).</li>\n          <li>Return <a href=\"/sec/sec-initializereferencedbinding.html\">InitializeReferencedBinding</a>(<i>lhs</i>,\n              <b>undefined</b>).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> A static semantics rule ensures that this form of <span class=\"nt\">LexicalBinding</span>\n          never occurs in a <code>const</code> declaration.</p>\n        </div>\n\n        <div class=\"gp prod\"><span class=\"nt\">LexicalBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span> <span class=\"nt\">Initializer</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>bindingId</i> be StringValue of <i>BindingIdentifier.</i></li>\n          <li>Let <i>lhs</i> be <a href=\"/sec/sec-resolvebinding.html\">ResolveBinding</a>(<i>bindingId</i>).</li>\n          <li>Let <i>rhs</i> be the result of evaluating <i>Initializer</i>.</li>\n          <li>Let <i>value</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>rhs</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>value</i>).</li>\n          <li>If <a href=\"/sec/sec-isanonymousfunctiondefinition.html\">IsAnonymousFunctionDefinition</a>(<i>Initializer)</i> is\n              <b>true</b>, then\n            <ol class=\"block\">\n              <li>Let <i>hasNameProperty</i> be <a href=\"/sec/sec-hasownproperty.html\">HasOwnProperty</a>(<i>value</i>,\n                  <code>&quot;name&quot;</code>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>hasNameProperty</i>).</li>\n              <li>If <i>hasNameProperty</i> is <b>false</b>, perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>value</i>, <i>bindingId</i>).</li>\n            </ol>\n          </li>\n          <li>Return <a href=\"/sec/sec-initializereferencedbinding.html\">InitializeReferencedBinding</a>(<i>lhs</i>, <i>value</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LexicalBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingPattern</span> <span class=\"nt\">Initializer</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>rhs</i> be the result of evaluating <i>Initializer</i>.</li>\n          <li>Let <i>value</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>rhs</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>value</i>).</li>\n          <li>Let <i>env</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n          <li>Return the result of performing BindingInitialization for <i>BindingPattern</i> using <i>value</i> and <i>env</i> as\n              the <i>arguments</i>.</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-variable-statement\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.2\"><a href=\"/sec/sec-variable-statement.html\" title=\"link to this section\">13.3.2</a></span>\n            Variable Statement</h1>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> A <code>var</code> statement declares variables that are scoped to <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">VariableEnvironment</a>. Var variables are created when their containing <a href=\"/sec/sec-lexical-environments.html\">Lexical Environment</a> is instantiated and are initialized to <b>undefined</b> when\n          created. Within the scope of any <a href=\"/sec/sec-execution-contexts.html\">VariableEnvironment</a> a common <span class=\"nt\">BindingIdentifier</span> may appear in more than one <span class=\"nt\">VariableDeclaration</span> but those\n          declarations collective define only one variable. A variable defined by a <span class=\"nt\">VariableDeclaration</span>\n          with an <span class=\"nt\">Initializer</span> is assigned the value of its <span style=\"font-family: Times New\n          Roman\"><i>Initializer</i>&#x2019;s</span> <span class=\"nt\">AssignmentExpression</span> when the <span class=\"nt\">VariableDeclaration</span> is executed, not when the variable is created.</p>\n        </div>\n\n        <h2>Syntax</h2>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">VariableStatement</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">;</code></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">VariableDeclarationList</span><sub class=\"g-params\">[In, Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">VariableDeclaration</span><sub class=\"g-params\">[?In, ?Yield]</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">VariableDeclarationList</span><sub class=\"g-params\">[?In, ?Yield]</sub> <code class=\"t\">,</code> <span class=\"nt\">VariableDeclaration</span><sub class=\"g-params\">[?In, ?Yield]</sub></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">VariableDeclaration</span><sub class=\"g-params\">[In, Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">BindingIdentifier</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">Initializer</span><sub class=\"g-params\">[?In, ?Yield]</sub><sub class=\"g-opt\">opt</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">BindingPattern</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">Initializer</span><sub class=\"g-params\">[?In, ?Yield]</sub></div>\n        </div>\n      </div>\n\n      <section id=\"sec-variable-statement-static-semantics-boundnames\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.2.1\"><a href=\"/sec/sec-variable-statement-static-semantics-boundnames.html\" title=\"link to this section\">13.3.2.1</a></span> Static Semantics:  BoundNames</h1>\n\n        <p>See also: <a href=\"/sec/sec-identifiers-static-semantics-boundnames.html\">12.1.2</a>, <a href=\"/sec/sec-let-and-const-declarations-static-semantics-boundnames.html\">13.3.1.2</a>, <a href=\"/sec/sec-destructuring-binding-patterns-static-semantics-boundnames.html\">13.3.3.1</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-boundnames.html\">13.7.5.2</a>, <a href=\"/sec/sec-function-definitions-static-semantics-boundnames.html\">14.1.3</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-boundnames.html\">14.2.2</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-boundnames.html\">14.4.2</a>, <a href=\"/sec/sec-class-definitions-static-semantics-boundnames.html\">14.5.2</a>, <a href=\"/sec/sec-imports-static-semantics-boundnames.html\">15.2.2.2</a>, <a href=\"/sec/sec-exports-static-semantics-boundnames.html\">15.2.3.2</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">VariableDeclarationList</span> <span class=\"geq\">:</span> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">,</code> <span class=\"nt\">VariableDeclaration</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>names</i> be BoundNames of <i>VariableDeclarationList</i>.</li>\n          <li>Append to <i>names</i> the elements of BoundNames of <i>VariableDeclaration.</i></li>\n          <li>Return <i>names</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">VariableDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span> <span class=\"nt\">Initializer</span><sub class=\"g-opt\">opt</sub></div>\n        <ol class=\"proc\">\n          <li>Return the BoundNames of <i>BindingIdentifier</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">VariableDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingPattern</span> <span class=\"nt\">Initializer</span></div>\n        <ol class=\"proc\">\n          <li>Return the BoundNames of <i>BindingPattern</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-variable-statement-static-semantics-vardeclarednames\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.2.2\"><a href=\"/sec/sec-variable-statement-static-semantics-vardeclarednames.html\" title=\"link to this section\">13.3.2.2</a></span> Static Semantics:  VarDeclaredNames</h1>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-vardeclarednames.html\">13.1.5</a>, <a href=\"/sec/sec-block-static-semantics-vardeclarednames.html\">13.2.11</a>, <a href=\"/sec/sec-if-statement-static-semantics-vardeclarednames.html\">13.6.5</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-vardeclarednames.html\">13.7.2.4</a>, <a href=\"/sec/sec-while-statement-static-semantics-vardeclarednames.html\">13.7.3.4</a>, <a href=\"/sec/sec-for-statement-static-semantics-vardeclarednames.html\">13.7.4.5</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-vardeclarednames.html\">13.7.5.7</a>, <a href=\"/sec/sec-with-statement-static-semantics-vardeclarednames.html\">13.11.5</a>, <a href=\"/sec/sec-switch-statement-static-semantics-vardeclarednames.html\">13.12.7</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-vardeclarednames.html\">13.13.12</a>, <a href=\"/sec/sec-try-statement-static-semantics-vardeclarednames.html\">13.15.5</a>, <a href=\"/sec/sec-function-definitions-static-semantics-vardeclarednames.html\">14.1.15</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-vardeclarednames.html\">14.2.12</a>, <a href=\"/sec/sec-scripts-static-semantics-vardeclarednames.html\">15.1.5</a>, <a href=\"/sec/sec-module-semantics-static-semantics-vardeclarednames.html\">15.2.1.13</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">VariableStatement</span> <span class=\"geq\">:</span> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Return BoundNames of <i>VariableDeclarationList.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-variable-statement-static-semantics-varscopeddeclarations\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.2.3\"><a href=\"/sec/sec-variable-statement-static-semantics-varscopeddeclarations.html\" title=\"link to this section\">13.3.2.3</a></span> Static Semantics:  VarScopedDeclarations</h1>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-varscopeddeclarations.html\">13.1.6</a>, <a href=\"/sec/sec-block-static-semantics-varscopeddeclarations.html\">13.2.12</a>, <a href=\"/sec/sec-if-statement-static-semantics-varscopeddeclarations.html\">13.6.6</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-varscopeddeclarations.html\">13.7.2.5</a>, <a href=\"/sec/sec-while-statement-static-semantics-varscopeddeclarations.html\">13.7.3.5</a>, <a href=\"/sec/sec-for-statement-static-semantics-varscopeddeclarations.html\">13.7.4.6</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations.html\">13.7.5.8</a>, <a href=\"/sec/sec-with-statement-static-semantics-varscopeddeclarations.html\">13.11.6</a>, <a href=\"/sec/sec-switch-statement-static-semantics-varscopeddeclarations.html\">13.12.8</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-varscopeddeclarations.html\">13.13.13</a>, <a href=\"/sec/sec-try-statement-static-semantics-varscopeddeclarations.html\">13.15.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-varscopeddeclarations.html\">14.1.16</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-varscopeddeclarations.html\">14.2.13</a>, <a href=\"/sec/sec-scripts-static-semantics-varscopeddeclarations.html\">15.1.6</a>, <a href=\"/sec/sec-module-semantics-static-semantics-varscopeddeclarations.html\">15.2.1.14</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">VariableDeclarationList</span> <span class=\"geq\">:</span> <span class=\"nt\">VariableDeclaration</span></div>\n        <ol class=\"proc\">\n          <li>Return a new <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing <i>VariableDeclaration.</i></li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">VariableDeclarationList</span> <span class=\"geq\">:</span> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">,</code> <span class=\"nt\">VariableDeclaration</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>declarations</i> be VarScopedDeclarations of <i>VariableDeclarationList</i>.</li>\n          <li>Append <i>VariableDeclaration</i> to <i>declarations.</i></li>\n          <li>Return <i>declarations</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-variable-statement-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.2.4\"><a href=\"/sec/sec-variable-statement-runtime-semantics-evaluation.html\" title=\"link to this section\">13.3.2.4</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">VariableStatement</span> <span class=\"geq\">:</span> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>next</i> be the result of evaluating <i>VariableDeclarationList</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n          <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>( <span style=\"font-family:\n              sans-serif\">empty</span>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">VariableDeclarationList</span> <span class=\"geq\">:</span> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">,</code> <span class=\"nt\">VariableDeclaration</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>next</i> be the result of evaluating <i>VariableDeclarationList</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n          <li>Return the result of evaluating <i>VariableDeclaration</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">VariableDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span></div>\n        <ol class=\"proc\">\n          <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family:\n              sans-serif\">empty</span>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">VariableDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span> <span class=\"nt\">Initializer</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>bindingId</i> be StringValue of <i>BindingIdentifier.</i></li>\n          <li>Let <i>lhs</i> be <a href=\"/sec/sec-resolvebinding.html\">ResolveBinding</a>(<i>bindingId</i>)</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>lhs</i>).</li>\n          <li>Let <i>rhs</i> be the result of evaluating <i>Initializer</i>.</li>\n          <li>Let <i>value</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>rhs</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>value</i>).</li>\n          <li>If <a href=\"/sec/sec-isanonymousfunctiondefinition.html\">IsAnonymousFunctionDefinition</a>(<i>Initializer)</i> is\n              <b>true</b>, then\n            <ol class=\"block\">\n              <li>Let <i>hasNameProperty</i> be <a href=\"/sec/sec-hasownproperty.html\">HasOwnProperty</a>(<i>value</i>,\n                  <code>&quot;name&quot;</code>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>hasNameProperty</i>).</li>\n              <li>If <i>hasNameProperty</i> is <b>false</b>, perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>value</i>, <i>bindingId</i>).</li>\n            </ol>\n          </li>\n          <li>Return <a href=\"/sec/sec-putvalue.html\">PutValue</a>(<i>lhs</i>, <i>value</i>).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> If a <span class=\"nt\">VariableDeclaration</span> is nested within a with statement and\n          the <span class=\"nt\">BindingIdentifier</span> in the <span class=\"nt\">VariableDeclaration</span> is the same as a\n          property name of the binding object of the with statement&#x2019;s object <a href=\"/sec/sec-environment-records.html\">Environment\n          Record</a>, then step 7 will assign <var>value</var> to the property instead of assigning to the <a href=\"/sec/sec-execution-contexts.html\">VariableEnvironment</a> binding of the <span class=\"nt\">Identifier</span>.</p>\n        </div>\n\n        <div class=\"gp prod\"><span class=\"nt\">VariableDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingPattern</span> <span class=\"nt\">Initializer</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>rhs</i> be the result of evaluating <i>Initializer</i>.</li>\n          <li>Let <i>rval</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>rhs</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>rval</i>).</li>\n          <li>Return the result of performing BindingInitialization for <i>BindingPattern</i> passing <i>rval</i> and\n              <b>undefined</b> as arguments.</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-destructuring-binding-patterns\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.3\"><a href=\"/sec/sec-destructuring-binding-patterns.html\" title=\"link to this section\">13.3.3</a></span> Destructuring Binding Patterns</h1>\n        <h2>Syntax</h2>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">BindingPattern</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ObjectBindingPattern</span><sub class=\"g-params\">[?Yield]</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">ArrayBindingPattern</span><sub class=\"g-params\">[?Yield]</sub></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">ObjectBindingPattern</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">{</code> <code class=\"t\">}</code></div>\n          <div class=\"rhs\"><code class=\"t\">{</code> <span class=\"nt\">BindingPropertyList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">}</code></div>\n          <div class=\"rhs\"><code class=\"t\">{</code> <span class=\"nt\">BindingPropertyList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">,</code> <code class=\"t\">}</code></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">ArrayBindingPattern</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">[</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">BindingRestElement</span><sub class=\"g-params\">[?Yield]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">]</code></div>\n          <div class=\"rhs\"><code class=\"t\">[</code> <span class=\"nt\">BindingElementList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">]</code></div>\n          <div class=\"rhs\"><code class=\"t\">[</code> <span class=\"nt\">BindingElementList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">,</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">BindingRestElement</span><sub class=\"g-params\">[?Yield]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">]</code></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">BindingPropertyList</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">BindingProperty</span><sub class=\"g-params\">[?Yield]</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">BindingPropertyList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">,</code> <span class=\"nt\">BindingProperty</span><sub class=\"g-params\">[?Yield]</sub></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">BindingElementList</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">BindingElisionElement</span><sub class=\"g-params\">[?Yield]</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">BindingElementList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">,</code> <span class=\"nt\">BindingElisionElement</span><sub class=\"g-params\">[?Yield]</sub></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">BindingElisionElement</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">BindingElement</span><sub class=\"g-params\">[?Yield]</sub></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">BindingProperty</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">SingleNameBinding</span><sub class=\"g-params\">[?Yield]</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">PropertyName</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">:</code> <span class=\"nt\">BindingElement</span><sub class=\"g-params\">[?Yield]</sub></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">BindingElement</span><sub class=\"g-params\">[Yield ]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">SingleNameBinding</span><sub class=\"g-params\">[?Yield]</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">BindingPattern</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">Initializer</span><sub class=\"g-params\">[In, ?Yield]</sub><sub class=\"g-opt\">opt</sub></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">SingleNameBinding</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">BindingIdentifier</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">Initializer</span><sub class=\"g-params\">[In, ?Yield]</sub><sub class=\"g-opt\">opt</sub></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">BindingRestElement</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">...</code> <span class=\"nt\">BindingIdentifier</span><sub class=\"g-params\">[?Yield]</sub></div>\n        </div>\n      </div>\n\n      <section id=\"sec-destructuring-binding-patterns-static-semantics-boundnames\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.3.1\"><a href=\"/sec/sec-destructuring-binding-patterns-static-semantics-boundnames.html\" title=\"link to this section\">13.3.3.1</a></span> Static Semantics:  BoundNames</h1>\n\n        <p>See also: <a href=\"/sec/sec-identifiers-static-semantics-boundnames.html\">12.1.2</a>, <a href=\"/sec/sec-let-and-const-declarations-static-semantics-boundnames.html\">13.3.1.2</a>, <a href=\"/sec/sec-variable-statement-static-semantics-boundnames.html\">13.3.2.1</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-boundnames.html\">13.7.5.2</a>, <a href=\"/sec/sec-function-definitions-static-semantics-boundnames.html\">14.1.3</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-boundnames.html\">14.2.2</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-boundnames.html\">14.4.2</a>, <a href=\"/sec/sec-class-definitions-static-semantics-boundnames.html\">14.5.2</a>, <a href=\"/sec/sec-imports-static-semantics-boundnames.html\">15.2.2.2</a>, <a href=\"/sec/sec-exports-static-semantics-boundnames.html\">15.2.3.2</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">ObjectBindingPattern</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n        <ol class=\"proc\">\n          <li>Return an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArrayBindingPattern</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Return an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArrayBindingPattern</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">BindingRestElement</span> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Return the BoundNames of <i>BindingRestElement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArrayBindingPattern</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">BindingElementList</span> <code class=\"t\">,</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Return the BoundNames of <i>BindingElementList</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArrayBindingPattern</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">BindingElementList</span> <code class=\"t\">,</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">BindingRestElement</span> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>names</i> be BoundNames of <i>BindingElementList</i>.</li>\n          <li>Append to <i>names</i> the elements of BoundNames of <i>BindingRestElement.</i></li>\n          <li>Return <i>names</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingPropertyList</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingPropertyList</span> <code class=\"t\">,</code> <span class=\"nt\">BindingProperty</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>names</i> be BoundNames of <i>BindingPropertyList</i>.</li>\n          <li>Append to <i>names</i> the elements of BoundNames of <i>BindingProperty.</i></li>\n          <li>Return <i>names</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingElementList</span> <code class=\"t\">,</code> <span class=\"nt\">BindingElisionElement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>names</i> be BoundNames of <i>BindingElementList</i>.</li>\n          <li>Append to <i>names</i> the elements of BoundNames of <i>BindingElisionElement.</i></li>\n          <li>Return <i>names</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingElisionElement</span> <span class=\"geq\">:</span> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">BindingElement</span></div>\n        <ol class=\"proc\">\n          <li>Return BoundNames of <i>BindingElement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingProperty</span> <span class=\"geq\">:</span> <span class=\"nt\">PropertyName</span> <code class=\"t\">:</code> <span class=\"nt\">BindingElement</span></div>\n        <ol class=\"proc\">\n          <li>Return the BoundNames of <i>BindingElement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">SingleNameBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span> <span class=\"nt\">Initializer</span><sub class=\"g-opt\">opt</sub></div>\n        <ol class=\"proc\">\n          <li>Return the BoundNames of <i>BindingIdentifier</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingElement</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingPattern</span> <span class=\"nt\">Initializer</span><sub class=\"g-opt\">opt</sub></div>\n        <ol class=\"proc\">\n          <li>Return the BoundNames of <i>BindingPattern</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-destructuring-binding-patterns-static-semantics-containsexpression\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.3.2\"><a href=\"/sec/sec-destructuring-binding-patterns-static-semantics-containsexpression.html\" title=\"link to this section\">13.3.3.2</a></span> Static Semantics:  ContainsExpression</h1>\n\n        <p>See also: <a href=\"/sec/sec-function-definitions-static-semantics-containsexpression.html\">14.1.5</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-containsexpression.html\">14.2.4</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">ObjectBindingPattern</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArrayBindingPattern</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArrayBindingPattern</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">BindingRestElement</span> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArrayBindingPattern</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">BindingElementList</span> <code class=\"t\">,</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Return ContainsExpression of <i>BindingElementList</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArrayBindingPattern</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">BindingElementList</span> <code class=\"t\">,</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">BindingRestElement</span> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Return ContainsExpression of <i>BindingElementList</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingPropertyList</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingPropertyList</span> <code class=\"t\">,</code> <span class=\"nt\">BindingProperty</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>has</i> be ContainsExpression of <i>BindingPropertyList</i>.</li>\n          <li>If <i>has</i> is <b>true</b>, return <b>true</b><i>.</i></li>\n          <li>Return ContainsExpression of <i>BindingProperty</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingElementList</span> <code class=\"t\">,</code> <span class=\"nt\">BindingElisionElement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>has</i> be ContainsExpression of <i>BindingElementList</i>.</li>\n          <li>If <i>has</i> is <b>true</b>, return <b>true</b><i>.</i></li>\n          <li>Return ContainsExpression of <i>BindingElisionElement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingElisionElement</span> <span class=\"geq\">:</span> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">BindingElement</span></div>\n        <ol class=\"proc\">\n          <li>Return ContainsExpression of <i>BindingElement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingProperty</span> <span class=\"geq\">:</span> <span class=\"nt\">PropertyName</span> <code class=\"t\">:</code> <span class=\"nt\">BindingElement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>has</i> be IsComputedPropertyKey of <i>PropertyName</i>.</li>\n          <li>If <i>has</i> is <b>true</b>, return <b>true</b><i>.</i></li>\n          <li>Return the ContainsExpression of <i>BindingElement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingElement</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingPattern</span> <span class=\"nt\">Initializer</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>true</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">SingleNameBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">SingleNameBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span> <span class=\"nt\">Initializer</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>true</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-destructuring-binding-patterns-static-semantics-hasinitializer\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.3.3\"><a href=\"/sec/sec-destructuring-binding-patterns-static-semantics-hasinitializer.html\" title=\"link to this section\">13.3.3.3</a></span> Static Semantics:  HasInitializer</h1>\n\n        <p>See also: <a href=\"/sec/sec-function-definitions-static-semantics-hasinitializer.html\">14.1.7</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-hasinitializer.html\">14.2.6</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">BindingElement</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingPattern</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingElement</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingPattern</span> <span class=\"nt\">Initializer</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>true</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">SingleNameBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">SingleNameBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span> <span class=\"nt\">Initializer</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>true</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-destructuring-binding-patterns-static-semantics-issimpleparameterlist\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.3.4\"><a href=\"/sec/sec-destructuring-binding-patterns-static-semantics-issimpleparameterlist.html\" title=\"link to this section\">13.3.3.4</a></span> Static Semantics:  IsSimpleParameterList</h1>\n\n        <p>See also: <a href=\"/sec/sec-function-definitions-static-semantics-issimpleparameterlist.html\">14.1.12</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-issimpleparameterlist.html\">14.2.8</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">BindingElement</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingPattern</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingElement</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingPattern</span> <span class=\"nt\">Initializer</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">SingleNameBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>true</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">SingleNameBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span> <span class=\"nt\">Initializer</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-destructuring-binding-patterns-runtime-semantics-bindinginitialization\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.3.5\"><a href=\"/sec/sec-destructuring-binding-patterns-runtime-semantics-bindinginitialization.html\" title=\"link to this section\">13.3.3.5</a></span> Runtime Semantics: BindingInitialization</h1>\n\n        <p>With parameters <var>value</var> and <var>environment</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-identifiers-runtime-semantics-bindinginitialization.html\">12.1.5</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization.html\">13.7.5.9</a>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> When <b>undefined</b> is passed for <var>environment</var> it indicates that a <a href=\"/sec/sec-putvalue.html\">PutValue</a> operation should be used to assign the initialization value. This is the case for\n          formal parameter lists of non-strict functions. In that case the formal parameter bindings are preinitialized in order\n          to deal with the possibility of multiple parameters with the same name.</p>\n        </div>\n\n        <div class=\"gp prod\"><span class=\"nt\">BindingPattern</span> <span class=\"geq\">:</span> <span class=\"nt\">ObjectBindingPattern</span></div>\n        <ol class=\"proc\">\n          <li>Let  <i>valid</i> be <a href=\"/sec/sec-requireobjectcoercible.html\">RequireObjectCoercible</a>(<i>value</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>valid</i>).</li>\n          <li>Return the result of performing BindingInitialization for <i>ObjectBindingPattern</i> using <i>value</i> and\n              <i>environment</i> as arguments.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingPattern</span> <span class=\"geq\">:</span> <span class=\"nt\">ArrayBindingPattern</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>iterator</i> be <a href=\"/sec/sec-getiterator.html\">GetIterator</a>(<i>value</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>iterator</i>).</li>\n          <li>Let <i>iteratorRecord</i> be Record {[[iterator]]: <i>iterator</i>, [[done]]: <b>false</b>}.</li>\n          <li>Let <i>result</i> be IteratorBindingInitialization for <i>ArrayBindingPattern</i> using <i>iteratorRecord</i>, and\n              <i>environment</i> as arguments.</li>\n          <li>If <i>iteratorRecord</i>.[[done]] is <b>false</b>, return <a href=\"/sec/sec-iteratorclose.html\">IteratorClose</a>(<i>iterator</i>, <i>result</i>).</li>\n          <li>Return <i>result</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ObjectBindingPattern</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n        <ol class=\"proc\">\n          <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family:\n              sans-serif\">empty</span>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingPropertyList</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingPropertyList</span> <code class=\"t\">,</code> <span class=\"nt\">BindingProperty</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>status</i> be the result of performing BindingInitialization for <i>BindingPropertyList</i> using\n              <i>value</i> and <i>environment</i> as arguments.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n          <li>Return the result of performing BindingInitialization for <i>BindingProperty</i> using <i>value</i> and\n              <i>environment</i> as arguments.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingProperty</span> <span class=\"geq\">:</span> <span class=\"nt\">SingleNameBinding</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>name</i> be the string that is the only element of BoundNames of <i>SingleNameBinding</i>.</li>\n          <li>Return the result of performing KeyedBindingInitialization for <i>SingleNameBinding</i> using  <i>value</i>,\n              <i>environment</i>, and <i>name</i> as the arguments.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingProperty</span> <span class=\"geq\">:</span> <span class=\"nt\">PropertyName</span> <code class=\"t\">:</code> <span class=\"nt\">BindingElement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>P</i> be the result of evaluating <i>PropertyName</i></li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>P</i>).</li>\n          <li>Return the result of performing KeyedBindingInitialization for <i>BindingElement</i> using <i>value</i>,\n              <i>environment</i>, and <i>P</i> as arguments.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-destructuring-binding-patterns-runtime-semantics-iteratorbindinginitialization\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.3.6\"><a href=\"/sec/sec-destructuring-binding-patterns-runtime-semantics-iteratorbindinginitialization.html\" title=\"link to this section\">13.3.3.6</a></span> Runtime Semantics: IteratorBindingInitialization</h1>\n\n        <p>With parameters <var>iteratorRecord,</var> and  <var>environment</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-function-definitions-runtime-semantics-iteratorbindinginitialization.html\">14.1.18</a>, <a href=\"/sec/sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization.html\">14.2.14</a>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> When <b>undefined</b> is passed for <var>environment</var> it indicates that a <a href=\"/sec/sec-putvalue.html\">PutValue</a> operation should be used to assign the initialization value. This is the case for\n          formal parameter lists of non-strict functions. In that case the formal parameter bindings are preinitialized in order\n          to deal with the possibility of multiple parameters with the same name.</p>\n        </div>\n\n        <div class=\"gp prod\"><span class=\"nt\">ArrayBindingPattern</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family:\n              sans-serif\">empty</span>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArrayBindingPattern</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">Elision</span> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Return the result of performing IteratorDestructuringAssignmentEvaluation of <i>Elision</i> with\n              <i>iteratorRecord</i> as the argument.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArrayBindingPattern</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">BindingRestElement</span> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>If <i>Elision</i> is present, then\n            <ol class=\"block\">\n              <li>Let <i>status</i> be the result of performing IteratorDestructuringAssignmentEvaluation of <i>Elision</i> with\n                  <i>iteratorRecord</i> as the argument.</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n            </ol>\n          </li>\n          <li>Return the result of performing IteratorBindingInitialization for <i>BindingRestElement</i>  with\n              <i>iteratorRecord</i> and <i>environment</i> as arguments.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArrayBindingPattern</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">BindingElementList</span> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Return the result of performing IteratorBindingInitialization for <i>BindingElementList</i> with\n              <i>iteratorRecord</i> and <i>environment</i> as arguments.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArrayBindingPattern</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">BindingElementList</span> <code class=\"t\">,</code> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Return the result of performing IteratorBindingInitialization for <i>BindingElementList</i> with\n              <i>iteratorRecord</i> and <i>environment</i> as arguments.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArrayBindingPattern</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">BindingElementList</span> <code class=\"t\">,</code> <span class=\"nt\">Elision</span> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>status</i> be the result of performing IteratorBindingInitialization for <i>BindingElementList</i> with\n              <i>iteratorRecord</i> and <i>environment</i> as arguments.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n          <li>Return the result of performing IteratorDestructuringAssignmentEvaluation of <i>Elision</i> with\n              <i>iteratorRecord</i> as the argument.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArrayBindingPattern</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">BindingElementList</span> <code class=\"t\">,</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">BindingRestElement</span> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>status</i> be the result of performing IteratorBindingInitialization for <i>BindingElementList</i> with\n              <i>iteratorRecord</i> and <i>environment</i> as arguments.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n          <li>If <i>Elision</i> is present, then\n            <ol class=\"block\">\n              <li>Let <i>status</i> be the result of performing IteratorDestructuringAssignmentEvaluation of <i>Elision</i> with\n                  <i>iteratorRecord</i> as the argument.</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n            </ol>\n          </li>\n          <li>Return the result of performing IteratorBindingInitialization for <i>BindingRestElement</i>  with\n              <i>iteratorRecord</i> and <i>environment</i> as arguments.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingElisionElement</span></div>\n        <ol class=\"proc\">\n          <li>Return the result of performing IteratorBindingInitialization for <i>BindingElisionElement</i>  with\n              <i>iteratorRecord</i> and <i>environment</i> as arguments.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingElementList</span> <code class=\"t\">,</code> <span class=\"nt\">BindingElisionElement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>status</i> be the result of performing IteratorBindingInitialization for <i>BindingElementList</i>\n              <i>with</i> <i>iteratorRecord</i> and <i>environment</i> as arguments.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n          <li>Return the result of performing IteratorBindingInitialization for <i>BindingElisionElement</i> using\n              <i>iteratorRecord</i> and <i>environment</i> as arguments.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingElisionElement</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingElement</span></div>\n        <ol class=\"proc\">\n          <li>Return the result of performing IteratorBindingInitialization of <i>BindingElement</i> with <i>iteratorRecord</i>\n              and <i>environment</i> as the arguments.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingElisionElement</span> <span class=\"geq\">:</span> <span class=\"nt\">Elision</span> <span class=\"nt\">BindingElement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>status</i> be the result of performing IteratorDestructuringAssignmentEvaluation of <i>Elision</i> with\n              <i>iteratorRecord</i> as the argument.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n          <li>Return the result of performing IteratorBindingInitialization of <i>BindingElement</i> with <i>iteratorRecord</i>\n              and <i>environment</i> as the arguments.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingElement</span> <span class=\"geq\">:</span> <span class=\"nt\">SingleNameBinding</span></div>\n        <ol class=\"proc\">\n          <li>Return the result of performing IteratorBindingInitialization for <i>SingleNameBinding</i> with <i>iteratorRecord\n              and</i> <i>environment</i> as the arguments.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">SingleNameBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span> <span class=\"nt\">Initializer</span><sub class=\"g-opt\">opt</sub></div>\n        <ol class=\"proc\">\n          <li>Let <i>bindingId</i> be StringValue of <i>BindingIdentifier.</i></li>\n          <li>Let <i>lhs</i> be <a href=\"/sec/sec-resolvebinding.html\">ResolveBinding</a>(<i>bindingId</i>, <i>environment</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>lhs</i>).</li>\n          <li>If <i>iteratorRecord</i>.[[done]] is <b>false</b>, then\n            <ol class=\"block\">\n              <li>Let <i>next</i> be <a href=\"/sec/sec-iteratorstep.html\">IteratorStep</a>(<i>iteratorRecord</i>.[[iterator]]).</li>\n              <li>If <i>next</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, set\n                  <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n              <li>If <i>next</i> is <b>false</b>, set <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>Let <i>v</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>next</i>).</li>\n                  <li>If <i>v</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, set\n                      <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>v</i>).</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>If <i>iteratorRecord</i>.[[done]] is <b>true</b>, let <i>v</i> be <b>undefined</b>.</li>\n          <li>If <i>Initializer</i> is present and <i>v</i> is <b>undefined</b>, then\n            <ol class=\"block\">\n              <li>Let <i>defaultValue</i> be the result of evaluating <i>Initializer</i>.</li>\n              <li>Let <i>v</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>defaultValue</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>v</i>).</li>\n              <li>If <a href=\"/sec/sec-isanonymousfunctiondefinition.html\">IsAnonymousFunctionDefinition</a>(<i>Initializer)</i> is\n                  <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Let <i>hasNameProperty</i> be <a href=\"/sec/sec-hasownproperty.html\">HasOwnProperty</a>(<i>v</i>,\n                      <code>&quot;name&quot;</code>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>hasNameProperty</i>).</li>\n                  <li>If <i>hasNameProperty</i> is <b>false</b>, perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>v</i>, <i>bindingId</i>).</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>If <i>environment</i> is <b>undefined</b>, return <a href=\"/sec/sec-putvalue.html\">PutValue</a>(<i>lhs</i>, <i>v</i>).</li>\n          <li>Return <a href=\"/sec/sec-initializereferencedbinding.html\">InitializeReferencedBinding</a>(<i>lhs</i>, <i>v</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingElement</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingPattern</span> <span class=\"nt\">Initializer</span><sub class=\"g-opt\">opt</sub></div>\n        <ol class=\"proc\">\n          <li>If <i>iteratorRecord</i>.[[done]] is <b>false</b>, then\n            <ol class=\"block\">\n              <li>Let <i>next</i> be <a href=\"/sec/sec-iteratorstep.html\">IteratorStep</a>(<i>iteratorRecord</i>.[[iterator]]).</li>\n              <li>If <i>next</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, set\n                  <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n              <li>If <i>next</i> is <b>false</b>, set <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n              <li>Else\n                <ol class=\"block\">\n                  <li>Let <i>v</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>next</i>).</li>\n                  <li>If <i>v</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, set\n                      <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>v</i>).</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>If <i>iteratorRecord</i>.[[done]] is <b>true</b>, let <i>v</i> be <b>undefined</b>.</li>\n          <li>If <i>Initializer</i> is present and <i>v</i> is <b>undefined</b>, then\n            <ol class=\"block\">\n              <li>Let <i>defaultValue</i> be the result of evaluating <i>Initializer</i>.</li>\n              <li>Let <i>v</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>defaultValue</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>v</i>).</li>\n            </ol>\n          </li>\n          <li>Return the result of performing BindingInitialization of <i>BindingPattern</i> with <i>v</i> and <i>environment</i>\n              as the arguments.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingRestElement</span> <span class=\"geq\">:</span> <code class=\"t\">...</code> <span class=\"nt\">BindingIdentifier</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>lhs</i> be <a href=\"/sec/sec-resolvebinding.html\">ResolveBinding</a>(StringValue of <i>BindingIdentifier,\n              environment</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>lhs</i>).</li>\n          <li>Let <i>A</i> be <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>(0).</li>\n          <li>Let <i>n</i>=0.</li>\n          <li>Repeat<b>,</b>\n            <ol class=\"block\">\n              <li>If <i>iteratorRecord</i>.[[done]] is <b>false</b>,\n                <ol class=\"block\">\n                  <li>Let <i>next</i> be <a href=\"/sec/sec-iteratorstep.html\">IteratorStep</a>(<i>iteratorRecord</i>.[[iterator]]).</li>\n                  <li>If <i>next</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, set\n                      <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n                  <li>If <i>next</i> is <b>false</b>, set <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n                </ol>\n              </li>\n              <li>If <i>iteratorRecord</i>.[[done]] is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>If <i>environment</i> is <b>undefined</b>, return <a href=\"/sec/sec-putvalue.html\">PutValue</a>(<i>lhs</i>,\n                      <i>A</i>).</li>\n                  <li>Return <a href=\"/sec/sec-initializereferencedbinding.html\">InitializeReferencedBinding</a>(<i>lhs</i>,\n                      <i>A</i>).</li>\n                </ol>\n              </li>\n              <li>Let <i>nextValue</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>next</i>).</li>\n              <li>If <i>nextValue</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, set\n                  <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextValue</i>).</li>\n              <li>Let <i>status</i> be <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>A</i>, <a href=\"/sec/sec-tostring.html\">ToString</a> (<i>n</i>), <i>nextValue</i>).</li>\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is <b>true</b>.</li>\n              <li>Increment <i>n</i> by 1.</li>\n            </ol>\n          </li>\n        </ol>\n      </section>\n\n      <section id=\"sec-runtime-semantics-keyedbindinginitialization\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.3.7\"><a href=\"/sec/sec-runtime-semantics-keyedbindinginitialization.html\" title=\"link to this section\">13.3.3.7</a></span> Runtime Semantics: KeyedBindingInitialization</h1>\n\n        <p>With parameters <var>value</var>, <var>environment,</var> and  <var>propertyName</var>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> When <b>undefined</b> is passed for <var>environment</var> it indicates that a <a href=\"/sec/sec-putvalue.html\">PutValue</a> operation should be used to assign the initialization value. This is the case for\n          formal parameter lists of non-strict functions. In that case the formal parameter bindings are preinitialized in order\n          to deal with the possibility of multiple parameters with the same name.</p>\n        </div>\n\n        <div class=\"gp prod\"><span class=\"nt\">BindingElement</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingPattern</span> <span class=\"nt\">Initializer</span><sub class=\"g-opt\">opt</sub></div>\n        <ol class=\"proc\">\n          <li>Let <i>v</i> be <a href=\"/sec/sec-getv.html\">GetV</a>(<i>value</i>, <i>propertyName</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>v</i>).</li>\n          <li>If <i>Initializer</i> is present and <i>v</i> is <b>undefined</b>, then\n            <ol class=\"block\">\n              <li>Let <i>defaultValue</i> be the result of evaluating <i>Initializer</i>.</li>\n              <li>Let <i>v</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>defaultValue</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>v</i>).</li>\n            </ol>\n          </li>\n          <li>Return the result of performing BindingInitialization for <i>BindingPattern</i> passing <i>v</i> and\n              <i>environment</i> as arguments.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">SingleNameBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span> <span class=\"nt\">Initializer</span><sub class=\"g-opt\">opt</sub></div>\n        <ol class=\"proc\">\n          <li>Let <i>bindingId</i> be StringValue of <i>BindingIdentifier.</i></li>\n          <li>Let <i>lhs</i> be <a href=\"/sec/sec-resolvebinding.html\">ResolveBinding</a>(<i>bindingId, environment</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>lhs</i>).</li>\n          <li>Let <i>v</i> be <a href=\"/sec/sec-getv.html\">GetV</a>(<i>value</i>, <i>propertyName</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>v</i>).</li>\n          <li>If <i>Initializer</i> is present and <i>v</i> is <b>undefined</b>, then\n            <ol class=\"block\">\n              <li>Let <i>defaultValue</i> be the result of evaluating <i>Initializer</i>.</li>\n              <li>Let <i>v</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>defaultValue</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>v</i>).</li>\n              <li>If <a href=\"/sec/sec-isanonymousfunctiondefinition.html\">IsAnonymousFunctionDefinition</a>(<i>Initializer</i>) is\n                  <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Let <i>hasNameProperty</i> be <a href=\"/sec/sec-hasownproperty.html\">HasOwnProperty</a>(<i>v</i>,\n                      <code>&quot;name&quot;</code>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>hasNameProperty</i>).</li>\n                  <li>If <i>hasNameProperty</i> is <b>false</b>, perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>v</i>, <i>bindingId</i>).</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>If <i>environment</i> is <b>undefined</b>, return <a href=\"/sec/sec-putvalue.html\">PutValue</a>(<i>lhs</i>, <i>v</i>).</li>\n          <li>Return <a href=\"/sec/sec-initializereferencedbinding.html\">InitializeReferencedBinding</a>(<i>lhs</i>, <i>v</i>).</li>\n        </ol>\n      </section>\n    </section>\n  </section>\n\n  <section id=\"sec-empty-statement\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-13.4\"><a href=\"/sec/sec-empty-statement.html\" title=\"link to this section\">13.4</a></span> Empty\n          Statement</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">EmptyStatement</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">;</code></div>\n      </div>\n    </div>\n\n    <section id=\"sec-empty-statement-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.4.1\"><a href=\"/sec/sec-empty-statement-runtime-semantics-evaluation.html\" title=\"link to this section\">13.4.1</a></span> Runtime Semantics: Evaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">EmptyStatement</span> <span class=\"geq\">:</span> <code class=\"t\">;</code></div>\n      <ol class=\"proc\">\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family: sans-serif\">empty</span>)<span style=\"font-family: sans-serif\">.</span></li>\n      </ol>\n    </section>\n  </section>\n\n  <section id=\"sec-expression-statement\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-13.5\"><a href=\"/sec/sec-expression-statement.html\" title=\"link to this section\">13.5</a></span>\n          Expression Statement</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ExpressionStatement</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"grhsannot\">[lookahead &#x2209; {<code class=\"t\">{</code>, <code class=\"t\">function</code>, <code class=\"t\">class</code>, <code class=\"t\">let [</code>}]</span> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">;</code></div>\n      </div>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> An <span class=\"nt\">ExpressionStatement</span> cannot start with a U+007B (LEFT CURLY\n        BRACKET) because that might make it ambiguous with a <span class=\"nt\">Block</span>. Also, an <span class=\"nt\">ExpressionStatement</span> cannot start with the <code>function</code> or <code>class</code> keywords because\n        that would make it ambiguous with a <span class=\"nt\">FunctionDeclaration</span>, a <span class=\"nt\">GeneratorDeclaration</span>, or a <span class=\"nt\">ClassDeclaration</span>. An <span class=\"nt\">ExpressionStatement</span> cannot start with the two token sequence <code>let [</code> because that would make\n        it ambiguous with a <code>let</code> <span class=\"nt\">LexicalDeclaration</span> whose first <span class=\"nt\">LexicalBinding</span> was an <span class=\"nt\">ArrayBindingPattern</span>.</p>\n      </div>\n    </div>\n\n    <section id=\"sec-expression-statement-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.5.1\"><a href=\"/sec/sec-expression-statement-runtime-semantics-evaluation.html\" title=\"link to this section\">13.5.1</a></span> Runtime Semantics: Evaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">ExpressionStatement</span> <span class=\"geq\">:</span> <span class=\"nt\">Expression</span> <code class=\"t\">;</code></div>\n      <ol class=\"proc\">\n        <li>Let <i>exprRef</i> be the result of evaluating <i>Expression</i>.</li>\n        <li>Return <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n      </ol>\n    </section>\n  </section>\n\n  <section id=\"sec-if-statement\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-13.6\"><a href=\"/sec/sec-if-statement.html\" title=\"link to this section\">13.6</a></span> The\n          <code>if</code> Statement</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">IfStatement</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub> <code class=\"t\">else</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      </div>\n\n      <p>Each <code>else</code> for which the choice of associated <code>if</code> is ambiguous shall be associated with the\n      nearest possible <b>if</b> that would otherwise have no corresponding <code>else</code>.</p>\n    </div>\n\n    <section id=\"sec-if-statement-static-semantics-early-errors\">\n      <h1><span class=\"secnum\" id=\"sec-13.6.1\"><a href=\"/sec/sec-if-statement-static-semantics-early-errors.html\" title=\"link to this section\">13.6.1</a></span> Static Semantics:  Early Errors</h1>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">IfStatement</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span> <code class=\"t\">else</code> <span class=\"nt\">Statement</span></div>\n        <div class=\"rhs\"><code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n      </div>\n\n      <ul>\n        <li>It is a Syntax Error if <a href=\"/sec/sec-islabelledfunction.html\">IsLabelledFunction</a>(<span class=\"nt\">Statement</span>) is\n            <span class=\"value\">true</span>.</li>\n      </ul>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> It is only necessary to apply this rule if the extension specified in  <a href=\"/sec/sec-labelled-function-declarations.html\">B.3.2</a> is implemented.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-if-statement-static-semantics-containsduplicatelabels\">\n      <h1><span class=\"secnum\" id=\"sec-13.6.2\"><a href=\"/sec/sec-if-statement-static-semantics-containsduplicatelabels.html\" title=\"link to this section\">13.6.2</a></span> Static Semantics: ContainsDuplicateLabels</h1>\n\n      <p>With argument <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsduplicatelabels.html\">13.1.1</a>, <a href=\"/sec/sec-block-static-semantics-containsduplicatelabels.html\">13.2.2</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsduplicatelabels.html\">13.7.2.1</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsduplicatelabels.html\">13.7.3.1</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsduplicatelabels.html\">13.7.4.2</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels.html\">13.7.5.3</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsduplicatelabels.html\">13.11.2</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsduplicatelabels.html\">13.12.2</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsduplicatelabels.html\">13.13.2</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsduplicatelabels.html\">13.15.2</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsduplicatelabels.html\">15.2.1.2</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">IfStatement</span> <span class=\"geq\">:</span> <code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span> <code class=\"t\">else</code> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasUndefinedLabels</i> be ContainsDuplicateLabels of <i>the first Statement</i> with argument\n            <i>labelSet</i>.</li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsDuplicateLabels of <i>the second Statement</i> with argument <i>labelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">IfStatement</span> <span class=\"geq\">:</span> <code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Return ContainsDuplicateLabels of <i>Statement</i> with argument <i>labelSet.</i></li>\n      </ol>\n    </section>\n\n    <section id=\"sec-if-statement-static-semantics-containsundefinedbreaktarget\">\n      <h1><span class=\"secnum\" id=\"sec-13.6.3\"><a href=\"/sec/sec-if-statement-static-semantics-containsundefinedbreaktarget.html\" title=\"link to this section\">13.6.3</a></span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n\n      <p>With argument <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedbreaktarget.html\">13.1.2</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedbreaktarget.html\">13.2.3</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.2.2</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.3.2</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.4.3</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget.html\">13.7.5.4</a>, <a href=\"/sec/sec-break-statement-static-semantics-containsundefinedbreaktarget.html\">13.9.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedbreaktarget.html\">13.11.3</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedbreaktarget.html\">13.12.3</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedbreaktarget.html\">13.13.3</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsundefinedbreaktarget.html\">13.15.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedbreaktarget.html\">15.2.1.3</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">IfStatement</span> <span class=\"geq\">:</span> <code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span> <code class=\"t\">else</code> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedBreakTarget of <i>the first Statement</i> with argument\n            <i>labelSet</i>.</li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsUndefinedBreakTarget of <i>the second Statement</i> with argument <i>labelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">IfStatement</span> <span class=\"geq\">:</span> <code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Return ContainsUndefinedBreakTarget of <i>Statement</i> with argument <i>labelSet.</i></li>\n      </ol>\n    </section>\n\n    <section id=\"sec-if-statement-static-semantics-containsundefinedcontinuetarget\">\n      <h1><span class=\"secnum\" id=\"sec-13.6.4\"><a href=\"/sec/sec-if-statement-static-semantics-containsundefinedcontinuetarget.html\" title=\"link to this section\">13.6.4</a></span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n\n      <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedcontinuetarget.html\">13.1.3</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedcontinuetarget.html\">13.2.4</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.2.3</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.3.3</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.4.4</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget.html\">13.7.5.5</a>, <a href=\"/sec/sec-continue-statement-static-semantics-containsundefinedcontinuetarget.html\">13.8.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedcontinuetarget.html\">13.11.4</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedcontinuetarget.html\">13.12.4</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedcontinuetarget.html\">13.13.4</a>,<a href=\"/sec/sec-try-statement-static-semantics-containsundefinedcontinuetarget.html\">13.15.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedcontinuetarget.html\">15.2.1.4</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">IfStatement</span> <span class=\"geq\">:</span> <code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span> <code class=\"t\">else</code> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedContinueTarget of <i>the first Statement</i> with arguments\n            <i>iterationSet</i> and &#xAB; &#xBB;.</li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsUndefinedContinueTarget of <i>the second Statement</i> with arguments <i>iterationSet</i> and &#xAB;\n            &#xBB;<i>.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">IfStatement</span> <span class=\"geq\">:</span> <code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Return ContainsUndefinedContinueTarget of <i>Statement</i> with arguments <i>iterationSet</i> and &#xAB;\n            &#xBB;<i>.</i></li>\n      </ol>\n    </section>\n\n    <section id=\"sec-if-statement-static-semantics-vardeclarednames\">\n      <h1><span class=\"secnum\" id=\"sec-13.6.5\"><a href=\"/sec/sec-if-statement-static-semantics-vardeclarednames.html\" title=\"link to this section\">13.6.5</a></span> Static Semantics:  VarDeclaredNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-vardeclarednames.html\">13.1.5</a>, <a href=\"/sec/sec-block-static-semantics-vardeclarednames.html\">13.2.11</a>, <a href=\"/sec/sec-variable-statement-static-semantics-vardeclarednames.html\">13.3.2.2</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-vardeclarednames.html\">13.7.2.4</a>, <a href=\"/sec/sec-while-statement-static-semantics-vardeclarednames.html\">13.7.3.4</a>, <a href=\"/sec/sec-for-statement-static-semantics-vardeclarednames.html\">13.7.4.5</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-vardeclarednames.html\">13.7.5.7</a>, <a href=\"/sec/sec-with-statement-static-semantics-vardeclarednames.html\">13.11.5</a>, <a href=\"/sec/sec-switch-statement-static-semantics-vardeclarednames.html\">13.12.7</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-vardeclarednames.html\">13.13.12</a>, <a href=\"/sec/sec-try-statement-static-semantics-vardeclarednames.html\">13.15.5</a>, <a href=\"/sec/sec-function-definitions-static-semantics-vardeclarednames.html\">14.1.15</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-vardeclarednames.html\">14.2.12</a>, <a href=\"/sec/sec-scripts-static-semantics-vardeclarednames.html\">15.1.5</a>, <a href=\"/sec/sec-module-semantics-static-semantics-vardeclarednames.html\">15.2.1.13</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">IfStatement</span> <span class=\"geq\">:</span> <code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span> <code class=\"t\">else</code> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>names</i> be VarDeclaredNames of the first <i>Statement</i>.</li>\n        <li>Append to <i>names</i> the elements of the VarDeclaredNames of the second <i>Statement.</i></li>\n        <li>Return <i>names</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">IfStatement</span> <span class=\"geq\">:</span> <code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Return the VarDeclaredNames of <i>Statement</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-if-statement-static-semantics-varscopeddeclarations\">\n      <h1><span class=\"secnum\" id=\"sec-13.6.6\"><a href=\"/sec/sec-if-statement-static-semantics-varscopeddeclarations.html\" title=\"link to this section\">13.6.6</a></span> Static Semantics:  VarScopedDeclarations</h1>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-varscopeddeclarations.html\">13.1.6</a>, <a href=\"/sec/sec-block-static-semantics-varscopeddeclarations.html\">13.2.12</a>, <a href=\"/sec/sec-variable-statement-static-semantics-varscopeddeclarations.html\">13.3.2.3</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-varscopeddeclarations.html\">13.7.2.5</a>, <a href=\"/sec/sec-while-statement-static-semantics-varscopeddeclarations.html\">13.7.3.5</a>, <a href=\"/sec/sec-for-statement-static-semantics-varscopeddeclarations.html\">13.7.4.6</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations.html\">13.7.5.8</a>, <a href=\"/sec/sec-with-statement-static-semantics-varscopeddeclarations.html\">13.11.6</a>, <a href=\"/sec/sec-switch-statement-static-semantics-varscopeddeclarations.html\">13.12.8</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-varscopeddeclarations.html\">13.13.13</a>, <a href=\"/sec/sec-try-statement-static-semantics-varscopeddeclarations.html\">13.15.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-varscopeddeclarations.html\">14.1.16</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-varscopeddeclarations.html\">14.2.13</a>, <a href=\"/sec/sec-scripts-static-semantics-varscopeddeclarations.html\">15.1.6</a>, <a href=\"/sec/sec-module-semantics-static-semantics-varscopeddeclarations.html\">15.2.1.14</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">IfStatement</span> <span class=\"geq\">:</span> <code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span> <code class=\"t\">else</code> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>declarations</i> be VarScopedDeclarations of the first <i>Statement</i>.</li>\n        <li>Append to <i>declarations</i> the elements of the VarScopedDeclarations of the second <i>Statement.</i></li>\n        <li>Return <i>declarations</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">IfStatement</span> <span class=\"geq\">:</span> <code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Return the VarScopedDeclarations of <i>Statement</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-if-statement-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.6.7\"><a href=\"/sec/sec-if-statement-runtime-semantics-evaluation.html\" title=\"link to this section\">13.6.7</a></span> Runtime Semantics:  Evaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">IfStatement</span> <span class=\"geq\">:</span> <code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span> <code class=\"t\">else</code> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>exprRef</i> be the result of evaluating <i>Expression</i>.</li>\n        <li>Let <i>exprValue</i> be <a href=\"/sec/sec-toboolean.html\">ToBoolean</a>(<a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>)).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>exprValue</i>).</li>\n        <li>If <i>exprValue</i> is <b>true</b>, then\n          <ol class=\"block\">\n            <li>Let <i>stmtCompletion</i> be the result of evaluating the first <i>Statement</i>.</li>\n          </ol>\n        </li>\n        <li>Else,\n          <ol class=\"block\">\n            <li>Let <i>stmtCompletion</i> be the result of evaluating the second <i>Statement</i>.</li>\n          </ol>\n        </li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>stmtCompletion</i>).</li>\n        <li>If <i>stmtCompletion</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, return\n            <i>stmtCompletion</i>.</li>\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<b>undefined</b>).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">IfStatement</span> <span class=\"geq\">:</span> <code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>exprRef</i> be the result of evaluating <i>Expression</i>.</li>\n        <li>Let <i>exprValue</i> be <a href=\"/sec/sec-toboolean.html\">ToBoolean</a>(<a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>)).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>exprValue</i>).</li>\n        <li>If <i>exprValue</i> is <b>false</b>, then\n          <ol class=\"block\">\n            <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<b>undefined</b>).</li>\n          </ol>\n        </li>\n        <li>Else,\n          <ol class=\"block\">\n            <li>Let <i>stmtCompletion</i> be the result of evaluating <i>Statement</i>.</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>stmtCompletion</i>).</li>\n            <li>If <i>stmtCompletion</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, return\n                <i>stmtCompletion</i>.</li>\n            <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<b>undefined</b>).</li>\n          </ol>\n        </li>\n      </ol>\n    </section>\n  </section>\n\n  <section id=\"sec-iteration-statements\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-13.7\"><a href=\"/sec/sec-iteration-statements.html\" title=\"link to this section\">13.7</a></span>\n          Iteration Statements</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">IterationStatement</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">do</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <code class=\"t\">;</code></div>\n        <div class=\"rhs\"><code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"grhsannot\">[lookahead &#x2209; {<code class=\"t\">let [</code>}]</span> <span class=\"nt\">Expression</span><sub class=\"g-params\">[?Yield]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"grhsannot\">[lookahead &#x2209; {<code class=\"t\">let [</code>}]</span> <span class=\"nt\">LeftHandSideExpression</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">in</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">in</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">in</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"grhsannot\">[lookahead &#x2260; let ]</span> <span class=\"nt\">LeftHandSideExpression</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ForDeclaration</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">LetOrConst</span> <span class=\"nt\">ForBinding</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ForBinding</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">BindingIdentifier</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">BindingPattern</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n    </div>\n\n    <section id=\"sec-iteration-statements-semantics\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.1\"><a href=\"/sec/sec-iteration-statements-semantics.html\" title=\"link to this section\">13.7.1</a></span> Semantics</h1>\n      </div>\n\n      <section id=\"sec-semantics-static-semantics-early-errors\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.1.1\"><a href=\"/sec/sec-semantics-static-semantics-early-errors.html\" title=\"link to this section\">13.7.1.1</a></span> Static Semantics:  Early Errors</h1>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">do</code> <span class=\"nt\">Statement</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <code class=\"t\">;</code></div>\n          <div class=\"rhs\"><code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ul>\n          <li>It is a Syntax Error if <a href=\"/sec/sec-islabelledfunction.html\">IsLabelledFunction</a>(<span class=\"nt\">Statement</span>)\n              is <span class=\"value\">true</span>.</li>\n        </ul>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> It is only necessary to apply this rule if the extension specified in  <a href=\"/sec/sec-labelled-function-declarations.html\">B.3.2</a> is implemented.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-loopcontinues\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.1.2\"><a href=\"/sec/sec-loopcontinues.html\" title=\"link to this section\">13.7.1.2</a></span>\n            Runtime Semantics: LoopContinues(completion, labelSet)</h1>\n\n        <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">LoopContinues</span> with\n        arguments <var>completion</var> and <var>labelSet</var> is defined by the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>If <i>completion</i>.[[type]] is <span style=\"font-family: sans-serif\">normal</span>, return <b>true</b>.</li>\n          <li>If <i>completion</i>.[[type]] is not <span style=\"font-family: sans-serif\">continue</span>, return\n              <b>false</b>.</li>\n          <li>If <i>completion</i>.[[target]] is <span style=\"font-family: sans-serif\">empty</span>, return <b>true</b>.</li>\n          <li>If <i>completion</i>.[[target]] is an element of <i>labelSet</i>, return <b>true</b>.</li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> Within the <span class=\"nt\">Statement</span> part of an <span class=\"nt\">IterationStatement</span> a <span class=\"nt\">ContinueStatement</span> may be used to begin a new\n          iteration.</p>\n        </div>\n      </section>\n    </section>\n\n    <section id=\"sec-do-while-statement\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.2\"><a href=\"/sec/sec-do-while-statement.html\" title=\"link to this section\">13.7.2</a></span>\n            The <code>do</code>-<code>while</code> Statement</h1>\n      </div>\n\n      <section id=\"sec-do-while-statement-static-semantics-containsduplicatelabels\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.2.1\"><a href=\"/sec/sec-do-while-statement-static-semantics-containsduplicatelabels.html\" title=\"link to this section\">13.7.2.1</a></span> Static Semantics: ContainsDuplicateLabels</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsduplicatelabels.html\">13.1.1</a>, <a href=\"/sec/sec-block-static-semantics-containsduplicatelabels.html\">13.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsduplicatelabels.html\">13.6.2</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsduplicatelabels.html\">13.7.3.1</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsduplicatelabels.html\">13.7.4.2</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels.html\">13.7.5.3</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsduplicatelabels.html\">13.11.2</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsduplicatelabels.html\">13.12.2</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsduplicatelabels.html\">13.13.2</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsduplicatelabels.html\">13.15.2</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsduplicatelabels.html\">15.2.1.2</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">do</code> <span class=\"nt\">Statement</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Return ContainsDuplicateLabels of <i>Statement</i> with argument <i>labelSet.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-do-while-statement-static-semantics-containsundefinedbreaktarget\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.2.2\"><a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedbreaktarget.html\" title=\"link to this section\">13.7.2.2</a></span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedbreaktarget.html\">13.1.2</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedbreaktarget.html\">13.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedbreaktarget.html\">13.6.3</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.3.2</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.4.3</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget.html\">13.7.5.4</a>, <a href=\"/sec/sec-break-statement-static-semantics-containsundefinedbreaktarget.html\">13.9.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedbreaktarget.html\">13.11.3</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedbreaktarget.html\">13.12.3</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedbreaktarget.html\">13.13.3</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsundefinedbreaktarget.html\">13.15.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedbreaktarget.html\">15.2.1.3</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">do</code> <span class=\"nt\">Statement</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Return ContainsUndefinedBreakTarget of <i>Statement</i> with argument <i>labelSet.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-do-while-statement-static-semantics-containsundefinedcontinuetarget\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.2.3\"><a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedcontinuetarget.html\" title=\"link to this section\">13.7.2.3</a></span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n\n        <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedcontinuetarget.html\">13.1.3</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedcontinuetarget.html\">13.2.4</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedcontinuetarget.html\">13.6.4</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.3.3</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.4.4</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget.html\">13.7.5.5</a>, <a href=\"/sec/sec-continue-statement-static-semantics-containsundefinedcontinuetarget.html\">13.8.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedcontinuetarget.html\">13.11.4</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedcontinuetarget.html\">13.12.4</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedcontinuetarget.html\">13.13.4</a>,<a href=\"/sec/sec-try-statement-static-semantics-containsundefinedcontinuetarget.html\">13.15.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedcontinuetarget.html\">15.2.1.4</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">do</code> <span class=\"nt\">Statement</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Return ContainsUndefinedContinueTarget of <i>Statement</i> with arguments <i>iterationSet</i> and\n              &#xAB;&#xA0;&#xBB;<i>.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-do-while-statement-static-semantics-vardeclarednames\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.2.4\"><a href=\"/sec/sec-do-while-statement-static-semantics-vardeclarednames.html\" title=\"link to this section\">13.7.2.4</a></span> Static Semantics:  VarDeclaredNames</h1>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-vardeclarednames.html\">13.1.5</a>, <a href=\"/sec/sec-block-static-semantics-vardeclarednames.html\">13.2.11</a>, <a href=\"/sec/sec-variable-statement-static-semantics-vardeclarednames.html\">13.3.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-vardeclarednames.html\">13.6.5</a>, <a href=\"/sec/sec-while-statement-static-semantics-vardeclarednames.html\">13.7.3.4</a>, <a href=\"/sec/sec-for-statement-static-semantics-vardeclarednames.html\">13.7.4.5</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-vardeclarednames.html\">13.7.5.7</a>, <a href=\"/sec/sec-with-statement-static-semantics-vardeclarednames.html\">13.11.5</a>, <a href=\"/sec/sec-switch-statement-static-semantics-vardeclarednames.html\">13.12.7</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-vardeclarednames.html\">13.13.12</a>, <a href=\"/sec/sec-try-statement-static-semantics-vardeclarednames.html\">13.15.5</a>, <a href=\"/sec/sec-function-definitions-static-semantics-vardeclarednames.html\">14.1.15</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-vardeclarednames.html\">14.2.12</a>, <a href=\"/sec/sec-scripts-static-semantics-vardeclarednames.html\">15.1.5</a>, <a href=\"/sec/sec-module-semantics-static-semantics-vardeclarednames.html\">15.2.1.13</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">do</code> <span class=\"nt\">Statement</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Return the VarDeclaredNames of <i>Statement</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-do-while-statement-static-semantics-varscopeddeclarations\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.2.5\"><a href=\"/sec/sec-do-while-statement-static-semantics-varscopeddeclarations.html\" title=\"link to this section\">13.7.2.5</a></span> Static Semantics:  VarScopedDeclarations</h1>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-varscopeddeclarations.html\">13.1.6</a>, <a href=\"/sec/sec-block-static-semantics-varscopeddeclarations.html\">13.2.12</a>, <a href=\"/sec/sec-variable-statement-static-semantics-varscopeddeclarations.html\">13.3.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-varscopeddeclarations.html\">13.6.6</a>, <a href=\"/sec/sec-while-statement-static-semantics-varscopeddeclarations.html\">13.7.3.5</a>, <a href=\"/sec/sec-for-statement-static-semantics-varscopeddeclarations.html\">13.7.4.6</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations.html\">13.7.5.8</a>, <a href=\"/sec/sec-with-statement-static-semantics-varscopeddeclarations.html\">13.11.6</a>, <a href=\"/sec/sec-switch-statement-static-semantics-varscopeddeclarations.html\">13.12.8</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-varscopeddeclarations.html\">13.13.13</a>, <a href=\"/sec/sec-try-statement-static-semantics-varscopeddeclarations.html\">13.15.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-varscopeddeclarations.html\">14.1.16</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-varscopeddeclarations.html\">14.2.13</a>, <a href=\"/sec/sec-scripts-static-semantics-varscopeddeclarations.html\">15.1.6</a>, <a href=\"/sec/sec-module-semantics-static-semantics-varscopeddeclarations.html\">15.2.1.14</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">do</code> <span class=\"nt\">Statement</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Return the VarScopedDeclarations of <i>Statement</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-do-while-statement-runtime-semantics-labelledevaluation\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.2.6\"><a href=\"/sec/sec-do-while-statement-runtime-semantics-labelledevaluation.html\" title=\"link to this section\">13.7.2.6</a></span> Runtime Semantics: LabelledEvaluation</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-runtime-semantics-labelledevaluation.html\">13.1.7</a>, <a href=\"/sec/sec-while-statement-runtime-semantics-labelledevaluation.html\">13.7.3.6</a>, <a href=\"/sec/sec-for-statement-runtime-semantics-labelledevaluation.html\">13.7.4.7</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation.html\">13.7.5.11</a>, <a href=\"/sec/sec-labelled-statements-runtime-semantics-labelledevaluation.html\">13.13.14</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">do</code> <span class=\"nt\">Statement</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>V</i> = <b>undefined</b>.</li>\n          <li>Repeat\n            <ol class=\"block\">\n              <li>Let <i>stmt</i> be the result of evaluating <i>Statement</i>.</li>\n              <li>If <a href=\"/sec/sec-loopcontinues.html\">LoopContinues</a>(<i>stmt</i>, <i>labelSet</i>) is <b>false</b>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>stmt</i>, <i>V</i>)).</li>\n              <li>If <i>stmt</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, let <i>V</i> =\n                  <i>stmt</i>.[[value]]<i>.</i></li>\n              <li>Let <i>exprRef</i> be the result of evaluating <i>Expression</i>.</li>\n              <li>Let <i>exprValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>exprValue</i>).</li>\n              <li>If <a href=\"/sec/sec-toboolean.html\">ToBoolean</a>(<i>exprValue</i>) is <b>false</b>, return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>V</i>).</li>\n            </ol>\n          </li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-while-statement\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.3\"><a href=\"/sec/sec-while-statement.html\" title=\"link to this section\">13.7.3</a></span> The\n            <code>while</code> Statement</h1>\n      </div>\n\n      <section id=\"sec-while-statement-static-semantics-containsduplicatelabels\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.3.1\"><a href=\"/sec/sec-while-statement-static-semantics-containsduplicatelabels.html\" title=\"link to this section\">13.7.3.1</a></span> Static Semantics: ContainsDuplicateLabels</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsduplicatelabels.html\">13.1.1</a>, <a href=\"/sec/sec-block-static-semantics-containsduplicatelabels.html\">13.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsduplicatelabels.html\">13.6.2</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsduplicatelabels.html\">13.7.2.1</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsduplicatelabels.html\">13.7.4.2</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels.html\">13.7.5.3</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsduplicatelabels.html\">13.11.2</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsduplicatelabels.html\">13.12.2</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsduplicatelabels.html\">13.13.2</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsduplicatelabels.html\">13.15.2</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsduplicatelabels.html\">15.2.1.2</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return ContainsDuplicateLabels of <i>Statement</i> with argument <i>labelSet.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-while-statement-static-semantics-containsundefinedbreaktarget\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.3.2\"><a href=\"/sec/sec-while-statement-static-semantics-containsundefinedbreaktarget.html\" title=\"link to this section\">13.7.3.2</a></span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedbreaktarget.html\">13.1.2</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedbreaktarget.html\">13.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedbreaktarget.html\">13.6.3</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.2.2</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.4.3</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget.html\">13.7.5.4</a>, <a href=\"/sec/sec-break-statement-static-semantics-containsundefinedbreaktarget.html\">13.9.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedbreaktarget.html\">13.11.3</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedbreaktarget.html\">13.12.3</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedbreaktarget.html\">13.13.3</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsundefinedbreaktarget.html\">13.15.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedbreaktarget.html\">15.2.1.3</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return ContainsUndefinedBreakTarget of <i>Statement</i> with argument <i>labelSet.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-while-statement-static-semantics-containsundefinedcontinuetarget\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.3.3\"><a href=\"/sec/sec-while-statement-static-semantics-containsundefinedcontinuetarget.html\" title=\"link to this section\">13.7.3.3</a></span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n\n        <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedcontinuetarget.html\">13.1.3</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedcontinuetarget.html\">13.2.4</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedcontinuetarget.html\">13.6.4</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.2.3</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.4.4</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget.html\">13.7.5.5</a>, <a href=\"/sec/sec-continue-statement-static-semantics-containsundefinedcontinuetarget.html\">13.8.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedcontinuetarget.html\">13.11.4</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedcontinuetarget.html\">13.12.4</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedcontinuetarget.html\">13.13.4</a>,<a href=\"/sec/sec-try-statement-static-semantics-containsundefinedcontinuetarget.html\">13.15.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedcontinuetarget.html\">15.2.1.4</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return ContainsUndefinedContinueTarget of <i>Statement</i> with arguments <i>iterationSet</i> and\n              &#xAB;&#xA0;&#xBB;<i>.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-while-statement-static-semantics-vardeclarednames\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.3.4\"><a href=\"/sec/sec-while-statement-static-semantics-vardeclarednames.html\" title=\"link to this section\">13.7.3.4</a></span> Static Semantics:  VarDeclaredNames</h1>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-vardeclarednames.html\">13.1.5</a>, <a href=\"/sec/sec-block-static-semantics-vardeclarednames.html\">13.2.11</a>, <a href=\"/sec/sec-variable-statement-static-semantics-vardeclarednames.html\">13.3.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-vardeclarednames.html\">13.6.5</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-vardeclarednames.html\">13.7.2.4</a>, <a href=\"/sec/sec-for-statement-static-semantics-vardeclarednames.html\">13.7.4.5</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-vardeclarednames.html\">13.7.5.7</a>, <a href=\"/sec/sec-with-statement-static-semantics-vardeclarednames.html\">13.11.5</a>, <a href=\"/sec/sec-switch-statement-static-semantics-vardeclarednames.html\">13.12.7</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-vardeclarednames.html\">13.13.12</a>, <a href=\"/sec/sec-try-statement-static-semantics-vardeclarednames.html\">13.15.5</a>, <a href=\"/sec/sec-function-definitions-static-semantics-vardeclarednames.html\">14.1.15</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-vardeclarednames.html\">14.2.12</a>, <a href=\"/sec/sec-scripts-static-semantics-vardeclarednames.html\">15.1.5</a>, <a href=\"/sec/sec-module-semantics-static-semantics-vardeclarednames.html\">15.2.1.13</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarDeclaredNames of <i>Statement</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-while-statement-static-semantics-varscopeddeclarations\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.3.5\"><a href=\"/sec/sec-while-statement-static-semantics-varscopeddeclarations.html\" title=\"link to this section\">13.7.3.5</a></span> Static Semantics:  VarScopedDeclarations</h1>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-varscopeddeclarations.html\">13.1.6</a>, <a href=\"/sec/sec-block-static-semantics-varscopeddeclarations.html\">13.2.12</a>, <a href=\"/sec/sec-variable-statement-static-semantics-varscopeddeclarations.html\">13.3.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-varscopeddeclarations.html\">13.6.6</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-varscopeddeclarations.html\">13.7.2.5</a>, <a href=\"/sec/sec-for-statement-static-semantics-varscopeddeclarations.html\">13.7.4.6</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations.html\">13.7.5.8</a>, <a href=\"/sec/sec-with-statement-static-semantics-varscopeddeclarations.html\">13.11.6</a>, <a href=\"/sec/sec-switch-statement-static-semantics-varscopeddeclarations.html\">13.12.8</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-varscopeddeclarations.html\">13.13.13</a>, <a href=\"/sec/sec-try-statement-static-semantics-varscopeddeclarations.html\">13.15.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-varscopeddeclarations.html\">14.1.16</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-varscopeddeclarations.html\">14.2.13</a>, <a href=\"/sec/sec-scripts-static-semantics-varscopeddeclarations.html\">15.1.6</a>, <a href=\"/sec/sec-module-semantics-static-semantics-varscopeddeclarations.html\">15.2.1.14</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarScopedDeclarations of <i>Statement</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-while-statement-runtime-semantics-labelledevaluation\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.3.6\"><a href=\"/sec/sec-while-statement-runtime-semantics-labelledevaluation.html\" title=\"link to this section\">13.7.3.6</a></span> Runtime Semantics: LabelledEvaluation</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-runtime-semantics-labelledevaluation.html\">13.1.7</a>, <a href=\"/sec/sec-do-while-statement-runtime-semantics-labelledevaluation.html\">13.7.2.6</a>, <a href=\"/sec/sec-for-statement-runtime-semantics-labelledevaluation.html\">13.7.4.7</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation.html\">13.7.5.11</a>, <a href=\"/sec/sec-labelled-statements-runtime-semantics-labelledevaluation.html\">13.13.14</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>V</i> = <b>undefined</b>.</li>\n          <li>Repeat\n            <ol class=\"block\">\n              <li>Let <i>exprRef</i> be the result of evaluating <i>Expression</i>.</li>\n              <li>Let <i>exprValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>exprValue</i>).</li>\n              <li>If <a href=\"/sec/sec-toboolean.html\">ToBoolean</a>(<i>exprValue</i>) is <b>false</b>, return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>V</i>).</li>\n              <li>Let <i>stmt</i> be the result of evaluating <i>Statement</i>.</li>\n              <li>If <a href=\"/sec/sec-loopcontinues.html\">LoopContinues</a> (<i>stmt</i>, <i>labelSet</i>) is <b>false</b>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>stmt</i>, <i>V</i>)).</li>\n              <li>If <i>stmt</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, let <i>V</i> =\n                  <i>stmt</i>.[[value]].</li>\n            </ol>\n          </li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-for-statement\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4\"><a href=\"/sec/sec-for-statement.html\" title=\"link to this section\">13.7.4</a></span> The\n            <code>for</code> Statement</h1>\n      </div>\n\n      <section id=\"sec-for-statement-static-semantics-early-errors\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.1\"><a href=\"/sec/sec-for-statement-static-semantics-early-errors.html\" title=\"link to this section\">13.7.4.1</a></span> Static Semantics:  Early Errors</h1>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ul>\n          <li>\n            <p>It is a Syntax Error if any element of the BoundNames of <span class=\"nt\">LexicalDeclaration</span> also occurs in\n            the VarDeclaredNames of <span class=\"nt\">Statement</span>.</p>\n          </li>\n        </ul>\n      </section>\n\n      <section id=\"sec-for-statement-static-semantics-containsduplicatelabels\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.2\"><a href=\"/sec/sec-for-statement-static-semantics-containsduplicatelabels.html\" title=\"link to this section\">13.7.4.2</a></span> Static Semantics: ContainsDuplicateLabels</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsduplicatelabels.html\">13.1.1</a>, <a href=\"/sec/sec-block-static-semantics-containsduplicatelabels.html\">13.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsduplicatelabels.html\">13.6.2</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsduplicatelabels.html\">13.7.2.1</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsduplicatelabels.html\">13.7.3.1</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels.html\">13.7.5.3</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsduplicatelabels.html\">13.11.2</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsduplicatelabels.html\">13.12.2</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsduplicatelabels.html\">13.13.2</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsduplicatelabels.html\">13.15.2</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsduplicatelabels.html\">15.2.1.2</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return ContainsDuplicateLabels of <i>Statement</i> with argument <i>labelSet.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-statement-static-semantics-containsundefinedbreaktarget\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.3\"><a href=\"/sec/sec-for-statement-static-semantics-containsundefinedbreaktarget.html\" title=\"link to this section\">13.7.4.3</a></span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedbreaktarget.html\">13.1.2</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedbreaktarget.html\">13.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedbreaktarget.html\">13.6.3</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.2.2</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.3.2</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget.html\">13.7.5.4</a>, <a href=\"/sec/sec-break-statement-static-semantics-containsundefinedbreaktarget.html\">13.9.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedbreaktarget.html\">13.11.3</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedbreaktarget.html\">13.12.3</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedbreaktarget.html\">13.13.3</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsundefinedbreaktarget.html\">13.15.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedbreaktarget.html\">15.2.1.3</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return ContainsUndefinedBreakTarget of <i>Statement</i> with argument <i>labelSet.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-statement-static-semantics-containsundefinedcontinuetarget\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.4\"><a href=\"/sec/sec-for-statement-static-semantics-containsundefinedcontinuetarget.html\" title=\"link to this section\">13.7.4.4</a></span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n\n        <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedcontinuetarget.html\">13.1.3</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedcontinuetarget.html\">13.2.4</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedcontinuetarget.html\">13.6.4</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.2.3</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.3.3</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget.html\">13.7.5.5</a>, <a href=\"/sec/sec-continue-statement-static-semantics-containsundefinedcontinuetarget.html\">13.8.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedcontinuetarget.html\">13.11.4</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedcontinuetarget.html\">13.12.4</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedcontinuetarget.html\">13.13.4</a>,<a href=\"/sec/sec-try-statement-static-semantics-containsundefinedcontinuetarget.html\">13.15.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedcontinuetarget.html\">15.2.1.4</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return ContainsUndefinedContinueTarget of <i>Statement</i> with arguments <i>iterationSet</i> and\n              &#xAB;&#xA0;&#xBB;<i>.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-statement-static-semantics-vardeclarednames\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.5\"><a href=\"/sec/sec-for-statement-static-semantics-vardeclarednames.html\" title=\"link to this section\">13.7.4.5</a></span> Static Semantics:  VarDeclaredNames</h1>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-vardeclarednames.html\">13.1.5</a>, <a href=\"/sec/sec-block-static-semantics-vardeclarednames.html\">13.2.11</a>, <a href=\"/sec/sec-variable-statement-static-semantics-vardeclarednames.html\">13.3.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-vardeclarednames.html\">13.6.5</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-vardeclarednames.html\">13.7.2.4</a>, <a href=\"/sec/sec-while-statement-static-semantics-vardeclarednames.html\">13.7.3.4</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-vardeclarednames.html\">13.7.5.7</a>, <a href=\"/sec/sec-with-statement-static-semantics-vardeclarednames.html\">13.11.5</a>, <a href=\"/sec/sec-switch-statement-static-semantics-vardeclarednames.html\">13.12.7</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-vardeclarednames.html\">13.13.12</a>, <a href=\"/sec/sec-try-statement-static-semantics-vardeclarednames.html\">13.15.5</a>, <a href=\"/sec/sec-function-definitions-static-semantics-vardeclarednames.html\">14.1.15</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-vardeclarednames.html\">14.2.12</a>, <a href=\"/sec/sec-scripts-static-semantics-vardeclarednames.html\">15.1.5</a>, <a href=\"/sec/sec-module-semantics-static-semantics-vardeclarednames.html\">15.2.1.13</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarDeclaredNames of <i>Statement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>names</i> be BoundNames of <i>VariableDeclarationList</i>.</li>\n          <li>Append to <i>names</i> the elements of the VarDeclaredNames of <i>Statement.</i></li>\n          <li>Return <i>names</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarDeclaredNames of <i>Statement</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-statement-static-semantics-varscopeddeclarations\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.6\"><a href=\"/sec/sec-for-statement-static-semantics-varscopeddeclarations.html\" title=\"link to this section\">13.7.4.6</a></span> Static Semantics:  VarScopedDeclarations</h1>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-varscopeddeclarations.html\">13.1.6</a>, <a href=\"/sec/sec-block-static-semantics-varscopeddeclarations.html\">13.2.12</a>, <a href=\"/sec/sec-variable-statement-static-semantics-varscopeddeclarations.html\">13.3.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-varscopeddeclarations.html\">13.6.6</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-varscopeddeclarations.html\">13.7.2.5</a>, <a href=\"/sec/sec-while-statement-static-semantics-varscopeddeclarations.html\">13.7.3.5</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations.html\">13.7.5.8</a>, <a href=\"/sec/sec-with-statement-static-semantics-varscopeddeclarations.html\">13.11.6</a>, <a href=\"/sec/sec-switch-statement-static-semantics-varscopeddeclarations.html\">13.12.8</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-varscopeddeclarations.html\">13.13.13</a>, <a href=\"/sec/sec-try-statement-static-semantics-varscopeddeclarations.html\">13.15.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-varscopeddeclarations.html\">14.1.16</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-varscopeddeclarations.html\">14.2.13</a>, <a href=\"/sec/sec-scripts-static-semantics-varscopeddeclarations.html\">15.1.6</a>, <a href=\"/sec/sec-module-semantics-static-semantics-varscopeddeclarations.html\">15.2.1.14</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarScopedDeclarations of <i>Statement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>declarations</i> be VarScopedDeclarations of <i>VariableDeclarationList</i>.</li>\n          <li>Append to <i>declarations</i> the elements of the VarScopedDeclarations of <i>Statement.</i></li>\n          <li>Return <i>declarations</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarScopedDeclarations of <i>Statement</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-statement-runtime-semantics-labelledevaluation\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.7\"><a href=\"/sec/sec-for-statement-runtime-semantics-labelledevaluation.html\" title=\"link to this section\">13.7.4.7</a></span> Runtime Semantics: LabelledEvaluation</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-runtime-semantics-labelledevaluation.html\">13.1.7</a>, <a href=\"/sec/sec-do-while-statement-runtime-semantics-labelledevaluation.html\">13.7.2.6</a>, <a href=\"/sec/sec-while-statement-runtime-semantics-labelledevaluation.html\">13.7.3.6</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation.html\">13.7.5.11</a>, <a href=\"/sec/sec-labelled-statements-runtime-semantics-labelledevaluation.html\">13.13.14</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>If the first <i>Expression</i> is present, then\n            <ol class=\"block\">\n              <li>Let <i>exprRef</i> be the result of evaluating the first <i>Expression</i>.</li>\n              <li>Let <i>exprValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>exprValue</i>).</li>\n            </ol>\n          </li>\n          <li>Return <a href=\"/sec/sec-forbodyevaluation.html\">ForBodyEvaluation</a>(the second <i>Expression</i>, the third\n              <i>Expression</i>, <i>Statement</i>, &#xAB; &#xBB;, <i>labelSet</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>varDcl</i> be the result of evaluating <i>VariableDeclarationList</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>varDcl</i>).</li>\n          <li>Return <a href=\"/sec/sec-forbodyevaluation.html\">ForBodyEvaluation</a>(the first <i>Expression</i>, the second\n              <i>Expression</i>, <i>Statement</i>, &#xAB;&#xA0;&#xBB;, <i>labelSet</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>oldEnv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n          <li>Let <i>loopEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>oldEnv</i>).</li>\n          <li>Let <i>isConst</i> be the result of performing IsConstantDeclaration of <i>LexicalDeclaration</i>.</li>\n          <li>Let <i>boundNames</i> be the BoundNames of <i>LexicalDeclaration</i>.</li>\n          <li>For each element <i>dn</i> of <i>boundNames</i> do\n            <ol class=\"block\">\n              <li>If <i>isConst</i> is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Perform <i>loopEnv</i>.CreateImmutableBinding(<i>dn</i>, <b>true</b>).</li>\n                </ol>\n              </li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>Perform <i>loopEnv</i>.CreateMutableBinding(<i>dn,</i> <b>false</b>).</li>\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: The above call to CreateMutableBinding will never return an\n                      <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>loopEnv</i>.</li>\n          <li>Let <i>forDcl</i> be the result of evaluating <i>LexicalDeclaration</i>.</li>\n          <li>If <i>forDcl</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n            <ol class=\"block\">\n              <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n              <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>forDcl</i>).</li>\n            </ol>\n          </li>\n          <li>If <i>isConst</i> is <b>false</b>, let <i>perIterationLets</i> be <i>boundNames</i> otherwise let\n              <i>perIterationLets</i> be &#xAB; &#xBB;.</li>\n          <li>Let <i>bodyResult</i> be <a href=\"/sec/sec-forbodyevaluation.html\">ForBodyEvaluation</a>(the first <i>Expression</i>, the\n              second <i>Expression</i>, <i>Statement</i>, <i>perIterationLets</i>, <i>labelSet</i>).</li>\n          <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n          <li>Return  <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>bodyResult</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-forbodyevaluation\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.8\"><a href=\"/sec/sec-forbodyevaluation.html\" title=\"link to this section\">13.7.4.8</a></span> Runtime Semantics: ForBodyEvaluation( test, increment, stmt,\n            perIterationBindings, labelSet )</h1>\n\n        <p class=\"normalbefore\">The abstract operation ForBodyEvaluation with arguments <var>test</var>, <var>increment</var>,\n        <var>stmt</var>, <var>perIterationBindings</var>, and <var>labelSet</var> is performed as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>V</i> = <b>undefined</b>.</li>\n          <li>Let <i>status</i> be <a href=\"/sec/sec-createperiterationenvironment.html\">CreatePerIterationEnvironment</a>(<i>perIterationBindings</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n          <li>Repeat\n            <ol class=\"block\">\n              <li>If <i>test</i> is not <span style=\"font-family: sans-serif\">[empty]</span>, then\n                <ol class=\"block\">\n                  <li>Let <i>testRef</i> be the result of evaluating <i>test</i>.</li>\n                  <li>Let <i>testValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>testRef</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>testValue</i>).</li>\n                  <li>If <a href=\"/sec/sec-toboolean.html\">ToBoolean</a>(<i>testValue</i>) is <b>false</b>, return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>V</i>).</li>\n                </ol>\n              </li>\n              <li>Let <i>result</i> be the result of evaluating <i>stmt</i>.</li>\n              <li>If <a href=\"/sec/sec-loopcontinues.html\">LoopContinues</a>(<i>result</i>, <i>labelSet</i>) is <b>false</b>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>result</i>, <i>V</i>)).</li>\n              <li>If <i>result</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, let <i>V</i> =\n                  <i>result</i>.[[value]].</li>\n              <li>Let <i>status</i> be <a href=\"/sec/sec-createperiterationenvironment.html\">CreatePerIterationEnvironment</a>(<i>perIterationBindings</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n              <li>If <i>increment</i> is not <span style=\"font-family: sans-serif\">[empty]</span>, then\n                <ol class=\"block\">\n                  <li>Let <i>incRef</i> be the result of evaluating <i>increment</i>.</li>\n                  <li>Let <i>incValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>incRef</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>incValue</i>).</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n        </ol>\n      </section>\n\n      <section id=\"sec-createperiterationenvironment\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.9\"><a href=\"/sec/sec-createperiterationenvironment.html\" title=\"link to this section\">13.7.4.9</a></span> Runtime Semantics: CreatePerIterationEnvironment(\n            perIterationBindings )</h1>\n\n        <p class=\"normalbefore\">The abstract operation CreatePerIterationEnvironment with argument <var>perIterationBindings</var>\n        is performed as follows:</p>\n\n        <ol class=\"proc\">\n          <li>If <i>perIterationBindings</i> has any elements, then\n            <ol class=\"block\">\n              <li>Let <i>lastIterationEnv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n              <li>Let <i>outer</i> be <i>lastIterationEnv</i>&#x2019;s <a href=\"/sec/sec-lexical-environments.html\">outer environment\n                  reference</a>.</li>\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>outer</i> is not <b>null</b>.</li>\n              <li>Let <i>thisIterationEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>outer</i>).</li>\n              <li>For each element <i>bn</i> of <i>perIterationBindings</i> do,\n                <ol class=\"block\">\n                  <li>Let <i>status</i> be <i>thisIterationEnv</i>.CreateMutableBinding(<i>bn</i>, <b>false</b>).</li>\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is never an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                  <li>Let <i>lastValue</i> be <i>lastIterationEnv</i>.GetBindingValue(<i>bn</i>, <b>true</b>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>lastValue</i>).</li>\n                  <li>Perform <i>thisIterationEnv</i>.InitializeBinding(<i>bn</i>, <i>lastValue</i>).</li>\n                </ol>\n              </li>\n              <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>thisIterationEnv.</i></li>\n            </ol>\n          </li>\n          <li>Return <b>undefined</b></li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-for-in-and-for-of-statements\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5\"><a href=\"/sec/sec-for-in-and-for-of-statements.html\" title=\"link to this section\">13.7.5</a></span> The <code>for</code>-<code>in</code> and\n            <code>for</code>-<code>of</code> Statements</h1>\n      </div>\n\n      <section id=\"sec-for-in-and-for-of-statements-static-semantics-early-errors\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.1\"><a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-early-errors.html\" title=\"link to this section\">13.7.5.1</a></span> Static Semantics:  Early Errors</h1>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ul>\n          <li>\n            <p>It is a Syntax Error if <span class=\"nt\">LeftHandSideExpression</span> is either an <span class=\"nt\">ObjectLiteral</span> or an <span class=\"nt\">ArrayLiteral</span> and if the lexical token sequence matched\n            by <span class=\"nt\">LeftHandSideExpression</span> cannot be parsed with no tokens left over using <span class=\"nt\">AssignmentPattern</span> as the goal symbol.</p>\n          </li>\n        </ul>\n\n        <p>If <span class=\"nt\">LeftHandSideExpression</span> is either an <span class=\"nt\">ObjectLiteral</span> or an <span class=\"nt\">ArrayLiteral</span> and if the lexical token sequence matched by <span class=\"nt\">LeftHandSideExpression</span>\n        can be parsed with no tokens left over using <span class=\"nt\">AssignmentPattern</span> as the goal symbol then the\n        following rules are not applied. Instead, the Early Error rules for <span class=\"nt\">AssignmentPattern</span> are\n        used.</p>\n\n        <ul>\n          <li>\n            <p>It is a Syntax Error if <span style=\"font-family: Times New Roman\">IsValidSimpleAssignmentTarget</span> of <span class=\"nt\">LeftHandSideExpression</span> is <span class=\"value\">false</span>.</p>\n          </li>\n\n          <li>\n            <p>It is a Syntax Error if the <span class=\"nt\">LeftHandSideExpression</span> is                    <span class=\"prod\"><span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span> <span class=\"geq\">:</span>\n            <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code></span> and <span class=\"nt\">Expression</span> derives a production that would produce a Syntax Error according to these rules if that\n            production is substituted for <span class=\"nt\">LeftHandSideExpression</span>. This rule is recursively applied.</p>\n          </li>\n        </ul>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The last rule means that the other rules are applied even if parentheses surround <span class=\"nt\">Expression</span>.</p>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ul>\n          <li>\n            <p>It is a Syntax Error if the BoundNames of <span class=\"nt\">ForDeclaration</span> contains <code>&quot;let&quot;</code>.</p>\n          </li>\n\n          <li>\n            <p>It is a Syntax Error if any element of the BoundNames of <span class=\"nt\">ForDeclaration</span> also occurs in the\n            VarDeclaredNames of <span class=\"nt\">Statement</span>.</p>\n          </li>\n\n          <li>\n            <p>It is a Syntax Error if the BoundNames of <span class=\"nt\">ForDeclaration</span> contains any duplicate\n            entries.</p>\n          </li>\n        </ul>\n      </section>\n\n      <section id=\"sec-for-in-and-for-of-statements-static-semantics-boundnames\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.2\"><a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-boundnames.html\" title=\"link to this section\">13.7.5.2</a></span> Static Semantics:  BoundNames</h1>\n\n        <p>See also: <a href=\"/sec/sec-identifiers-static-semantics-boundnames.html\">12.1.2</a>, <a href=\"/sec/sec-let-and-const-declarations-static-semantics-boundnames.html\">13.3.1.2</a>, <a href=\"/sec/sec-variable-statement-static-semantics-boundnames.html\">13.3.2.1</a>, <a href=\"/sec/sec-destructuring-binding-patterns-static-semantics-boundnames.html\">13.3.3.1</a>, <a href=\"/sec/sec-function-definitions-static-semantics-boundnames.html\">14.1.3</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-boundnames.html\">14.2.2</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-boundnames.html\">14.4.2</a>, <a href=\"/sec/sec-class-definitions-static-semantics-boundnames.html\">14.5.2</a>, <a href=\"/sec/sec-imports-static-semantics-boundnames.html\">15.2.2.2</a>, <a href=\"/sec/sec-exports-static-semantics-boundnames.html\">15.2.3.2</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">ForDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">LetOrConst</span> <span class=\"nt\">ForBinding</span></div>\n        <ol class=\"proc\">\n          <li>Return the BoundNames of <i>ForBinding</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.3\"><a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels.html\" title=\"link to this section\">13.7.5.3</a></span> Static Semantics: ContainsDuplicateLabels</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsduplicatelabels.html\">13.1.1</a>, <a href=\"/sec/sec-block-static-semantics-containsduplicatelabels.html\">13.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsduplicatelabels.html\">13.6.2</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsduplicatelabels.html\">13.7.2.1</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsduplicatelabels.html\">13.7.3.1</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsduplicatelabels.html\">13.7.4.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsduplicatelabels.html\">13.11.2</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsduplicatelabels.html\">13.12.2</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsduplicatelabels.html\">13.13.2</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsduplicatelabels.html\">13.15.2</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsduplicatelabels.html\">15.2.1.2</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return ContainsDuplicateLabels of <i>Statement</i> with argument <i>labelSet.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.4\"><a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget.html\" title=\"link to this section\">13.7.5.4</a></span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedbreaktarget.html\">13.1.2</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedbreaktarget.html\">13.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedbreaktarget.html\">13.6.3</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.2.2</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.3.2</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.4.3</a>, <a href=\"/sec/sec-break-statement-static-semantics-containsundefinedbreaktarget.html\">13.9.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedbreaktarget.html\">13.11.3</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedbreaktarget.html\">13.12.3</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedbreaktarget.html\">13.13.3</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsundefinedbreaktarget.html\">13.15.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedbreaktarget.html\">15.2.1.3</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return ContainsUndefinedBreakTarget of <i>Statement</i> with argument <i>labelSet.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.5\"><a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget.html\" title=\"link to this section\">13.7.5.5</a></span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n\n        <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedcontinuetarget.html\">13.1.3</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedcontinuetarget.html\">13.2.4</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedcontinuetarget.html\">13.6.4</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.2.3</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.3.3</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.4.4</a>, <a href=\"/sec/sec-continue-statement-static-semantics-containsundefinedcontinuetarget.html\">13.8.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedcontinuetarget.html\">13.11.4</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedcontinuetarget.html\">13.12.4</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedcontinuetarget.html\">13.13.4</a>,<a href=\"/sec/sec-try-statement-static-semantics-containsundefinedcontinuetarget.html\">13.15.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedcontinuetarget.html\">15.2.1.4</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return ContainsUndefinedContinueTarget of <i>Statement</i> with arguments <i>iterationSet</i> and\n              &#xAB;&#xA0;&#xBB;<i>.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-in-and-for-of-statements-static-semantics-isdestructuring\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.6\"><a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-isdestructuring.html\" title=\"link to this section\">13.7.5.6</a></span> Static Semantics:  IsDestructuring</h1>\n\n        <p>See also: <a href=\"/sec/sec-static-semantics-static-semantics-isdestructuring.html\">12.3.1.3</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">ForDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">LetOrConst</span> <span class=\"nt\">ForBinding</span></div>\n        <ol class=\"proc\">\n          <li>Return IsDestructuring of <i>ForBinding</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ForBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ForBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingPattern</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>true</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.7\"><a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-vardeclarednames.html\" title=\"link to this section\">13.7.5.7</a></span> Static Semantics:  VarDeclaredNames</h1>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-vardeclarednames.html\">13.1.5</a>, <a href=\"/sec/sec-block-static-semantics-vardeclarednames.html\">13.2.11</a>, <a href=\"/sec/sec-variable-statement-static-semantics-vardeclarednames.html\">13.3.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-vardeclarednames.html\">13.6.5</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-vardeclarednames.html\">13.7.2.4</a>, <a href=\"/sec/sec-while-statement-static-semantics-vardeclarednames.html\">13.7.3.4</a>, <a href=\"/sec/sec-for-statement-static-semantics-vardeclarednames.html\">13.7.4.5</a>, <a href=\"/sec/sec-with-statement-static-semantics-vardeclarednames.html\">13.11.5</a>, <a href=\"/sec/sec-switch-statement-static-semantics-vardeclarednames.html\">13.12.7</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-vardeclarednames.html\">13.13.12</a>, <a href=\"/sec/sec-try-statement-static-semantics-vardeclarednames.html\">13.15.5</a>, <a href=\"/sec/sec-function-definitions-static-semantics-vardeclarednames.html\">14.1.15</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-vardeclarednames.html\">14.2.12</a>, <a href=\"/sec/sec-scripts-static-semantics-vardeclarednames.html\">15.1.5</a>, <a href=\"/sec/sec-module-semantics-static-semantics-vardeclarednames.html\">15.2.1.13</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarDeclaredNames of <i>Statement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>names</i> be the BoundNames of <i>ForBinding</i>.</li>\n          <li>Append to <i>names</i> the elements of the VarDeclaredNames of <i>Statement.</i></li>\n          <li>Return <i>names.</i></li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarDeclaredNames of <i>Statement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarDeclaredNames of <i>Statement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>names</i> be the BoundNames of <i>ForBinding</i>.</li>\n          <li>Append to <i>names</i> the elements of the VarDeclaredNames of <i>Statement.</i></li>\n          <li>Return <i>names.</i></li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarDeclaredNames of <i>Statement</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.8\"><a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations.html\" title=\"link to this section\">13.7.5.8</a></span> Static Semantics:  VarScopedDeclarations</h1>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-varscopeddeclarations.html\">13.1.6</a>, <a href=\"/sec/sec-block-static-semantics-varscopeddeclarations.html\">13.2.12</a>, <a href=\"/sec/sec-variable-statement-static-semantics-varscopeddeclarations.html\">13.3.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-varscopeddeclarations.html\">13.6.6</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-varscopeddeclarations.html\">13.7.2.5</a>, <a href=\"/sec/sec-while-statement-static-semantics-varscopeddeclarations.html\">13.7.3.5</a>, <a href=\"/sec/sec-for-statement-static-semantics-varscopeddeclarations.html\">13.7.4.6</a>, <a href=\"/sec/sec-with-statement-static-semantics-varscopeddeclarations.html\">13.11.6</a>, <a href=\"/sec/sec-switch-statement-static-semantics-varscopeddeclarations.html\">13.12.8</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-varscopeddeclarations.html\">13.13.13</a>, <a href=\"/sec/sec-try-statement-static-semantics-varscopeddeclarations.html\">13.15.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-varscopeddeclarations.html\">14.1.16</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-varscopeddeclarations.html\">14.2.13</a>, <a href=\"/sec/sec-scripts-static-semantics-varscopeddeclarations.html\">15.1.6</a>, <a href=\"/sec/sec-module-semantics-static-semantics-varscopeddeclarations.html\">15.2.1.14</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarScopedDeclarations of <i>Statement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>declarations</i> be a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing\n              <i>ForBinding</i>.</li>\n          <li>Append to <i>declarations</i> the elements of the VarScopedDeclarations of <i>Statement.</i></li>\n          <li>Return <i>declarations.</i></li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarScopedDeclarations of <i>Statement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarScopedDeclarations of <i>Statement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>declarations</i> be a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing\n              <i>ForBinding</i>.</li>\n          <li>Append to <i>declarations</i> the elements of the VarScopedDeclarations of <i>Statement.</i></li>\n          <li>Return <i>declarations.</i></li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarScopedDeclarations of <i>Statement</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.9\"><a href=\"/sec/sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization.html\" title=\"link to this section\">13.7.5.9</a></span> Runtime Semantics: BindingInitialization</h1>\n\n        <p>With arguments <var>value</var> and <var>environment</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-identifiers-runtime-semantics-bindinginitialization.html\">12.1.5</a>, <a href=\"/sec/sec-destructuring-binding-patterns-runtime-semantics-bindinginitialization.html\">13.3.3.5</a>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> <b>undefined</b> is passed for <var>environment</var> to indicate that a <a href=\"/sec/sec-putvalue.html\">PutValue</a> operation should be used to assign the initialization value. This is the case for\n          <code>var</code> statements and the formal parameter lists of some non-strict functions (<a href=\"/sec/sec-functiondeclarationinstantiation.html\">see 9.2.12</a>). In those cases a lexical binding is hoisted and\n          preinitialized prior to evaluation of its initializer.</p>\n        </div>\n\n        <div class=\"gp prod\"><span class=\"nt\">ForDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">LetOrConst</span> <span class=\"nt\">ForBinding</span></div>\n        <ol class=\"proc\">\n          <li>Return the result of performing BindingInitialization for <i>ForBinding</i> passing <i>value</i> and\n              <i>environment</i> as the arguments.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-runtime-semantics-bindinginstantiation\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.10\"><a href=\"/sec/sec-runtime-semantics-bindinginstantiation.html\" title=\"link to this section\">13.7.5.10</a></span> Runtime Semantics: BindingInstantiation</h1>\n\n        <p>With argument <var>environment</var>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">ForDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">LetOrConst</span> <span class=\"nt\">ForBinding</span></div>\n        <ol class=\"proc\">\n          <li>For each element <i>name</i> of the BoundNames of <i>ForBinding</i> do\n            <ol class=\"block\">\n              <li>If IsConstantDeclaration of <i>LetOrConst</i> is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Perform <i>environment</i>.CreateImmutableBinding(<i>name</i>, <b>true</b>).</li>\n                </ol>\n              </li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>Perform <i>environment</i>.CreateMutableBinding(<i>name</i>).</li>\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: The above call to CreateMutableBinding will never return an\n                      <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.11\"><a href=\"/sec/sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation.html\" title=\"link to this section\">13.7.5.11</a></span> Runtime Semantics: LabelledEvaluation</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-runtime-semantics-labelledevaluation.html\">13.1.7</a>, <a href=\"/sec/sec-do-while-statement-runtime-semantics-labelledevaluation.html\">13.7.2.6</a>, <a href=\"/sec/sec-while-statement-runtime-semantics-labelledevaluation.html\">13.7.3.6</a>, <a href=\"/sec/sec-for-statement-runtime-semantics-labelledevaluation.html\">13.7.4.7</a>, <a href=\"/sec/sec-labelled-statements-runtime-semantics-labelledevaluation.html\">13.13.14</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>keyResult</i> be ForIn/OfHeadEvaluation( &#xAB; &#xBB;, <i>Expression</i>, <span style=\"font-family:\n              sans-serif\">enumerate</span>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>keyResult</i>).</li>\n          <li>Return ForIn/OfBodyEvaluation(<i>LeftHandSideExpression</i>, <i>Statement</i>, <i>keyResult</i>,  <span style=\"font-family: sans-serif\">assignment</span>, <i>labelSet</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>keyResult</i> be ForIn/OfHeadEvaluation( &#xAB; &#xBB;, <i>Expression</i>, <span style=\"font-family:\n              sans-serif\">enumerate</span>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>keyResult</i>).</li>\n          <li>Return ForIn/OfBodyEvaluation(<i>ForBinding</i>, <i>Statement</i>, <i>keyResult</i>,  <span style=\"font-family:\n              sans-serif\">varBinding</span>, <i>labelSet</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>keyResult</i> be the result of performing ForIn/OfHeadEvaluation(BoundNames of <i>ForDeclaration,</i>\n              <i>Expression</i>, <span style=\"font-family: sans-serif\">enumerate</span>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>keyResult</i>).</li>\n          <li>Return ForIn/OfBodyEvaluation(<i>ForDeclaration</i>, <i>Statement</i>, <i>keyResult</i>, <span style=\"font-family:\n              sans-serif\">lexicalBinding</span>, <i>labelSet</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>keyResult</i> be the result of performing ForIn/OfHeadEvaluation( &#xAB; &#xBB;,\n              <i>AssignmentExpression</i>, <span style=\"font-family: sans-serif\">iterate</span>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>keyResult</i>).</li>\n          <li>Return ForIn/OfBodyEvaluation(<i>LeftHandSideExpression</i>, <i>Statement</i>, <i>keyResult</i>, <span style=\"font-family: sans-serif\">assignment</span>, <i>labelSet</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>keyResult</i> be the result of performing ForIn/OfHeadEvaluation( &#xAB; &#xBB;,\n              <i>AssignmentExpression</i>, <span style=\"font-family: sans-serif\">iterate</span>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>keyResult</i>).</li>\n          <li>Return ForIn/OfBodyEvaluation(<i>ForBinding</i>, <i>Statement</i>, <i>keyResult</i>,  <span style=\"font-family:\n              sans-serif\">varBinding</span>, <i>labelSet</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>keyResult</i> be the result of performing ForIn/OfHeadEvaluation( BoundNames of <i>ForDeclaration</i>,\n              <i>AssignmentExpression</i>, <span style=\"font-family: sans-serif\">iterate</span>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>keyResult</i>).</li>\n          <li>Return ForIn/OfBodyEvaluation(<i>ForDeclaration</i>, <i>Statement</i>, <i>keyResult</i>,  <span style=\"font-family:\n              sans-serif\">lexicalBinding</span>, <i>labelSet</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.12\"><a href=\"/sec/sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind.html\" title=\"link to this section\">13.7.5.12</a></span> Runtime Semantics: ForIn/OfHeadEvaluation ( TDZnames, expr,\n            iterationKind)</h1>\n\n        <p class=\"normalbefore\">The abstract operation ForIn/OfHeadEvaluation is called with arguments <span class=\"nt\">TDZnames</span>, <var>expr</var>, and <span style=\"font-family: Times New Roman\"><i>iterationKind</i>.</span>\n        The value of <var>iterationKind</var> is either <b>enumerate</b> or <b>iterate</b>.</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>oldEnv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n          <li>If <i>TDZnames</i> is not an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>, then\n            <ol class=\"block\">\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>TDZnames</i> has no duplicate entries.</li>\n              <li>Let <i>TDZ</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>oldEnv</i>).</li>\n              <li>For each string <i>name</i> in <i>TDZnames</i>, do\n                <ol class=\"block\">\n                  <li>Let <i>status</i> be <i>TDZ</i>.CreateMutableBinding(<i>name</i>, <b>false</b>).</li>\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is never an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                </ol>\n              </li>\n              <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>TDZ</i>.</li>\n            </ol>\n          </li>\n          <li>Let <i>exprRef</i> be the result of evaluating the production that is <i>expr</i>.</li>\n          <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n          <li>Let <i>exprValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>exprValue</i>).</li>\n          <li>If <i>iterationKind</i> is <span style=\"font-family: sans-serif\">enumerate</span>, then\n            <ol class=\"block\">\n              <li>If <i>exprValue</i>.[[value]] is <b>null</b> or <b>undefined</b>, then\n                <ol class=\"block\">\n                  <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family: sans-serif\">break</span>, [[value]]: <span style=\"font-family: sans-serif\">empty,</span>\n                      [[target]]: <span style=\"font-family: sans-serif\">empty</span>}.</li>\n                </ol>\n              </li>\n              <li>Let <i>obj</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<i>exprValue</i>).</li>\n              <li>Return <i>obj</i>.[[Enumerate]]().</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>iterationKind</i> is <span style=\"font-family:\n                  sans-serif\">iterate</span>.</li>\n              <li>Return <a href=\"/sec/sec-getiterator.html\">GetIterator</a>(<i>exprValue</i>).</li>\n            </ol>\n          </li>\n        </ol>\n      </section>\n\n      <section id=\"sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.13\"><a href=\"/sec/sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset.html\" title=\"link to this section\">13.7.5.13</a></span> Runtime Semantics: ForIn/OfBodyEvaluation ( lhs, stmt, iterator,\n            lhsKind, labelSet )</h1>\n\n        <p class=\"normalbefore\">The abstract operation ForIn/OfBodyEvaluation is called with arguments <var>lhs</var>, <var>stmt,\n        iterator,</var> <var>lhsKind</var>, and <var>labelSet.</var> The value of <var>lhsKind</var> is either <b>assignment</b>,\n        <b>varBinding</b> or <b>lexicalBinding</b>.</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>oldEnv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n          <li>Let <i>V</i> = <b>undefined</b> .</li>\n          <li>Let <i>destructuring</i> be IsDestructuring of <i>lhs</i>.</li>\n          <li>If <i>destructuring</i> is <b>true</b> and if <i>lhsKind</i> is <span style=\"font-family:\n              sans-serif\">assignment</span>, then\n            <ol class=\"block\">\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>lhs</i> is a <i>LeftHandSideExpression</i>.</li>\n              <li>Let <i>assignmentPattern</i> be the parse of the source text corresponding to <i>lhs</i> using\n                  <i>AssignmentPattern</i> as the goal symbol.</li>\n            </ol>\n          </li>\n          <li>Repeat\n            <ol class=\"block\">\n              <li>Let <i>nextResult</i> be <a href=\"/sec/sec-iteratorstep.html\">IteratorStep</a>(<i>iterator</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextResult</i>).</li>\n              <li>If <i>nextResult</i> is <b>false</b>, return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>V</i>).</li>\n              <li>Let <i>nextValue</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>nextResult</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextValue</i>).</li>\n              <li>If <i>lhsKind</i> is either <span style=\"font-family: sans-serif\">assignment</span> or <span style=\"font-family:\n                  sans-serif\">varBinding</span>, then\n                <ol class=\"block\">\n                  <li>If <i>destructuring</i> is <b>false</b>, then\n                    <ol class=\"block\">\n                      <li>Let <i>lhsRef</i> be the result of evaluating <i>lhs</i> ( it may be evaluated repeatedly).</li>\n                    </ol>\n                  </li>\n                </ol>\n              </li>\n              <li>Else\n                <ol class=\"block\">\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>lhsKind</i> is <span style=\"font-family:\n                      sans-serif\">lexicalBinding</span>.</li>\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>lhs</i> is a <i>ForDeclaration</i>.</li>\n                  <li>Let <i>iterationEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>oldEnv</i>).</li>\n                  <li>Perform BindingInstantiation for <i>lhs</i> passing <i>iterationEnv</i> as the argument.</li>\n                  <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>iterationEnv</i>.</li>\n                  <li>If <i>destructuring</i> is <b>false</b>, then\n                    <ol class=\"block\">\n                      <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>lhs</i> binds a single name.</li>\n                      <li>Let <i>lhsName</i> be the sole element of BoundNames of <i>lhs.</i></li>\n                      <li>Let <i>lhsRef</i> be <a href=\"/sec/sec-resolvebinding.html\">ResolveBinding</a>(<i>lhsName</i>).</li>\n                      <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>lhsRef</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                    </ol>\n                  </li>\n                </ol>\n              </li>\n              <li>If <i>destructuring</i> is <b>false</b>, then\n                <ol class=\"block\">\n                  <li>If <i>lhsRef</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n                    <ol class=\"block\">\n                      <li>Let <i>status</i> be <i>lhsRef</i>.</li>\n                    </ol>\n                  </li>\n                  <li>Else if <i>lhsKind</i> is <span style=\"font-family: sans-serif\">lexicalBinding</span>, then\n                    <ol class=\"block\">\n                      <li>Let <i>status</i> be <a href=\"/sec/sec-initializereferencedbinding.html\">InitializeReferencedBinding</a>(<i>lhsRef</i>,\n                          <i>nextValue</i>).</li>\n                    </ol>\n                  </li>\n                  <li>Else,\n                    <ol class=\"block\">\n                      <li>Let <i>status</i> be <a href=\"/sec/sec-putvalue.html\">PutValue</a>(<i>lhsRef</i>,  <i>nextValue</i>).</li>\n                    </ol>\n                  </li>\n                </ol>\n              </li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>If <i>lhsKind</i> is <span style=\"font-family: sans-serif\">assignment</span>, then\n                    <ol class=\"block\">\n                      <li>Let <i>status</i> be the result of performing DestructuringAssignmentEvaluation of\n                          <i>assignmentPattern</i> using <i>nextValue</i> as the argument.</li>\n                    </ol>\n                  </li>\n                  <li>Else if <i>lhsKind</i> is <span style=\"font-family: sans-serif\">varBinding</span>, then\n                    <ol class=\"block\">\n                      <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>lhs</i> is a <i>ForBinding</i>.</li>\n                      <li>Let <i>status</i> be the result of performing BindingInitialization for <i>lhs</i> passing\n                          <i>nextValue</i> and <b>undefined</b> as the arguments.</li>\n                    </ol>\n                  </li>\n                  <li>Else,\n                    <ol class=\"block\">\n                      <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>lhsKind</i> is <span style=\"font-family:\n                          sans-serif\">lexicalBinding</span>.</li>\n                      <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>lhs</i> is a <i>ForDeclaration</i>.</li>\n                      <li>Let <i>status</i> be the result of performing BindingInitialization for <i>lhs</i> passing\n                          <i>nextValue</i> and <i>iterationEnv</i> as arguments.</li>\n                    </ol>\n                  </li>\n                </ol>\n              </li>\n              <li>If <i>status</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n                <ol class=\"block\">\n                  <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n                  <li>Return <a href=\"/sec/sec-iteratorclose.html\">IteratorClose</a>(<i>iterator</i>, <i>status</i>).</li>\n                </ol>\n              </li>\n              <li>Let <i>result</i> be the result  of evaluating <i>stmt</i>.</li>\n              <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n              <li>If <a href=\"/sec/sec-loopcontinues.html\">LoopContinues</a>(<i>result</i>, <i>labelSet</i>) is <b>false</b>, return <a href=\"/sec/sec-iteratorclose.html\">IteratorClose</a>(<i>iterator</i>, <a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>result</i>, <i>V</i>)).</li>\n              <li>If <i>result</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, let <i>V</i> be\n                  <i>result</i>.[[value]].</li>\n            </ol>\n          </li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-in-and-for-of-statements-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.14\"><a href=\"/sec/sec-for-in-and-for-of-statements-runtime-semantics-evaluation.html\" title=\"link to this section\">13.7.5.14</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">ForBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>bindingId</i> be StringValue of <i>BindingIdentifier.</i></li>\n          <li>Return <a href=\"/sec/sec-resolvebinding.html\">ResolveBinding</a>(<i>bindingId</i>)</li>\n        </ol>\n      </section>\n    </section>\n  </section>\n\n  <section id=\"sec-continue-statement\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-13.8\"><a href=\"/sec/sec-continue-statement.html\" title=\"link to this section\">13.8</a></span> The\n          <code>continue</code> Statement</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ContinueStatement</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">continue</code> <code class=\"t\">;</code></div>\n        <div class=\"rhs\"><code class=\"t\">continue</code> <span class=\"grhsannot\">[no <span class=\"nt\">LineTerminator</span> here]</span> <span class=\"nt\">LabelIdentifier</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">;</code></div>\n      </div>\n    </div>\n\n    <section id=\"sec-continue-statement-static-semantics-early-errors\">\n      <h1><span class=\"secnum\" id=\"sec-13.8.1\"><a href=\"/sec/sec-continue-statement-static-semantics-early-errors.html\" title=\"link to this section\">13.8.1</a></span> Static Semantics:  Early Errors</h1>\n\n      <p><span class=\"prod\"><span class=\"nt\">ContinueStatement</span> <span class=\"geq\">:</span> <code class=\"t\">continue</code>\n      <code class=\"t\">;</code></span></p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ContinueStatement</span> <span class=\"geq\">:</span> <code class=\"t\">continue</code> <span class=\"nt\">LabelIdentifier</span> <code class=\"t\">;</code></div>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if this production is not nested, directly or indirectly (but not crossing function boundaries),\n          within an <span class=\"nt\">IterationStatement</span>.</p>\n        </li>\n      </ul>\n    </section>\n\n    <section id=\"sec-continue-statement-static-semantics-containsundefinedcontinuetarget\">\n      <h1><span class=\"secnum\" id=\"sec-13.8.2\"><a href=\"/sec/sec-continue-statement-static-semantics-containsundefinedcontinuetarget.html\" title=\"link to this section\">13.8.2</a></span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n\n      <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedcontinuetarget.html\">13.1.3</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedcontinuetarget.html\">13.2.4</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedcontinuetarget.html\">13.6.4</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.2.3</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.3.3</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.4.4</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget.html\">13.7.5.5</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedcontinuetarget.html\">13.11.4</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedcontinuetarget.html\">13.12.4</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedcontinuetarget.html\">13.13.4</a>,<a href=\"/sec/sec-try-statement-static-semantics-containsundefinedcontinuetarget.html\">13.15.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedcontinuetarget.html\">15.2.1.4</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ContinueStatement</span> <span class=\"geq\">:</span> <code class=\"t\">continue</code> <code class=\"t\">;</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ContinueStatement</span> <span class=\"geq\">:</span> <code class=\"t\">continue</code> <span class=\"nt\">LabelIdentifier</span> <code class=\"t\">;</code></div>\n      <ol class=\"proc\">\n        <li>If the StringValue of <i>LabelIdentifier</i>  is not an element of <i>iterationSet</i>, return <b>true</b>.</li>\n        <li>Return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-continue-statement-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.8.3\"><a href=\"/sec/sec-continue-statement-runtime-semantics-evaluation.html\" title=\"link to this section\">13.8.3</a></span> Runtime Semantics: Evaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">ContinueStatement</span> <span class=\"geq\">:</span> <code class=\"t\">continue</code> <code class=\"t\">;</code></div>\n      <ol class=\"proc\">\n        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family:\n            sans-serif\">continue</span>, [[value]]: <span style=\"font-family: sans-serif\">empty</span>, [[target]]: <span style=\"font-family: sans-serif\">empty</span>}.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ContinueStatement</span> <span class=\"geq\">:</span> <code class=\"t\">continue</code> <span class=\"nt\">LabelIdentifier</span> <code class=\"t\">;</code></div>\n      <ol class=\"proc\">\n        <li>Let <i>label</i> be the StringValue of <i>LabelIdentifier</i>.</li>\n        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family:\n            sans-serif\">continue</span>, [[value]]: <span style=\"font-family: sans-serif\">empty</span>, [[target]]: <i>label</i>\n            }.</li>\n      </ol>\n    </section>\n  </section>\n\n  <section id=\"sec-break-statement\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-13.9\"><a href=\"/sec/sec-break-statement.html\" title=\"link to this section\">13.9</a></span> The\n          <code>break</code> Statement</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">BreakStatement</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">break</code> <code class=\"t\">;</code></div>\n        <div class=\"rhs\"><code class=\"t\">break</code> <span class=\"grhsannot\">[no <span class=\"nt\">LineTerminator</span> here]</span> <span class=\"nt\">LabelIdentifier</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">;</code></div>\n      </div>\n    </div>\n\n    <section id=\"sec-break-statement-static-semantics-early-errors\">\n      <h1><span class=\"secnum\" id=\"sec-13.9.1\"><a href=\"/sec/sec-break-statement-static-semantics-early-errors.html\" title=\"link to this section\">13.9.1</a></span> Static Semantics:  Early Errors</h1>\n      <div class=\"gp prod\"><span class=\"nt\">BreakStatement</span> <span class=\"geq\">:</span> <code class=\"t\">break</code> <code class=\"t\">;</code></div>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if this production is not nested, directly or indirectly (but not crossing function boundaries),\n          within an <span class=\"nt\">IterationStatement</span> or a <span class=\"nt\">SwitchStatement</span>.</p>\n        </li>\n      </ul>\n    </section>\n\n    <section id=\"sec-break-statement-static-semantics-containsundefinedbreaktarget\">\n      <h1><span class=\"secnum\" id=\"sec-13.9.2\"><a href=\"/sec/sec-break-statement-static-semantics-containsundefinedbreaktarget.html\" title=\"link to this section\">13.9.2</a></span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n\n      <p>With argument <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedbreaktarget.html\">13.1.2</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedbreaktarget.html\">13.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedbreaktarget.html\">13.6.3</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.2.2</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.3.2</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.4.3</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget.html\">13.7.5.4</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedbreaktarget.html\">13.11.3</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedbreaktarget.html\">13.12.3</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedbreaktarget.html\">13.13.3</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsundefinedbreaktarget.html\">13.15.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedbreaktarget.html\">15.2.1.3</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">BreakStatement</span> <span class=\"geq\">:</span> <code class=\"t\">break</code> <code class=\"t\">;</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">BreakStatement</span> <span class=\"geq\">:</span> <code class=\"t\">break</code> <span class=\"nt\">LabelIdentifier</span> <code class=\"t\">;</code></div>\n      <ol class=\"proc\">\n        <li>If the StringValue of <i>LabelIdentifier</i>  is not an element of <i>labelSet</i>, return <b>true</b>.</li>\n        <li>Return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-break-statement-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.9.3\"><a href=\"/sec/sec-break-statement-runtime-semantics-evaluation.html\" title=\"link to this section\">13.9.3</a></span> Runtime Semantics: Evaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">BreakStatement</span> <span class=\"geq\">:</span> <code class=\"t\">break</code> <code class=\"t\">;</code></div>\n      <ol class=\"proc\">\n        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family:\n            sans-serif\">break</span>, [[value]]: <span style=\"font-family: sans-serif\">empty</span>, [[target]]: <span style=\"font-family: sans-serif\">empty</span>}.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">BreakStatement</span> <span class=\"geq\">:</span> <code class=\"t\">break</code> <span class=\"nt\">LabelIdentifier</span> <code class=\"t\">;</code></div>\n      <ol class=\"proc\">\n        <li>Let <i>label</i> be the StringValue of  <i>LabelIdentifier</i>.</li>\n        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family:\n            sans-serif\">break</span>, [[value]]: <span style=\"font-family: sans-serif\">empty</span>, [[target]]: <i>label</i>\n            }.</li>\n      </ol>\n    </section>\n  </section>\n\n  <section id=\"sec-return-statement\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-13.10\"><a href=\"/sec/sec-return-statement.html\" title=\"link to this section\">13.10</a></span> The\n          <code>return</code> Statement</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ReturnStatement</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">return</code> <code class=\"t\">;</code></div>\n        <div class=\"rhs\"><code class=\"t\">return</code> <span class=\"grhsannot\">[no <span class=\"nt\">LineTerminator</span> here]</span> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">;</code></div>\n      </div>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> A <code>return</code> statement causes a function to cease execution and return a value to\n        the caller. If <span class=\"nt\">Expression</span> is omitted, the return value is <b>undefined</b>. Otherwise, the return\n        value is the value of <span class=\"nt\">Expression</span>.</p>\n      </div>\n    </div>\n\n    <section id=\"sec-return-statement-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.10.1\"><a href=\"/sec/sec-return-statement-runtime-semantics-evaluation.html\" title=\"link to this section\">13.10.1</a></span> Runtime Semantics: Evaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">ReturnStatement</span> <span class=\"geq\">:</span> <code class=\"t\">return</code> <code class=\"t\">;</code></div>\n      <ol class=\"proc\">\n        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family:\n            sans-serif\">return</span>, [[value]]:  <b>undefined</b>, [[target]]:  <span style=\"font-family:\n            sans-serif\">empty</span>}.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">ReturnStatement</span> <span class=\"geq\">:</span> <code class=\"t\">return</code> <span class=\"nt\">Expression</span> <code class=\"t\">;</code></div>\n      <ol class=\"proc\">\n        <li>Let <i>exprRef</i> be the result of evaluating <i>Expression</i>.</li>\n        <li>Let <i>exprValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>exprValue</i>).</li>\n        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family:\n            sans-serif\">return</span>, [[value]]: <i>exprValue</i>, [[target]]: <span style=\"font-family:\n            sans-serif\">empty</span>}.</li>\n      </ol>\n    </section>\n  </section>\n\n  <section id=\"sec-with-statement\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-13.11\"><a href=\"/sec/sec-with-statement.html\" title=\"link to this section\">13.11</a></span> The\n          <code>with</code> Statement</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">WithStatement</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">with</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      </div>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> The <code>with</code> statement adds an object <a href=\"/sec/sec-environment-records.html\">Environment Record</a> for a computed object to the <a href=\"/sec/sec-lexical-environments.html\">lexical environment</a> of <a href=\"/sec/sec-execution-contexts.html\">the running execution\n        context</a>. It then executes a statement using this augmented <a href=\"/sec/sec-lexical-environments.html\">lexical\n        environment</a>. Finally, it restores the original <a href=\"/sec/sec-lexical-environments.html\">lexical environment</a>.</p>\n      </div>\n    </div>\n\n    <section id=\"sec-with-statement-static-semantics-early-errors\">\n      <h1><span class=\"secnum\" id=\"sec-13.11.1\"><a href=\"/sec/sec-with-statement-static-semantics-early-errors.html\" title=\"link to this section\">13.11.1</a></span> Static Semantics:  Early Errors</h1>\n      <div class=\"gp prod\"><span class=\"nt\">WithStatement</span> <span class=\"geq\">:</span> <code class=\"t\">with</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n      <ul>\n        <li>It is a Syntax Error if the code that matches this production is contained in <a href=\"/sec/sec-strict-mode-code.html\">strict\n            code</a>.</li>\n        <li>It is a Syntax Error if <a href=\"/sec/sec-islabelledfunction.html\">IsLabelledFunction</a>(<span class=\"nt\">Statement</span>) is\n            <span class=\"value\">true</span>.</li>\n      </ul>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> It is only necessary to apply the second rule if the extension specified in  <a href=\"/sec/sec-labelled-function-declarations.html\">B.3.2</a> is implemented.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-with-statement-static-semantics-containsduplicatelabels\">\n      <h1><span class=\"secnum\" id=\"sec-13.11.2\"><a href=\"/sec/sec-with-statement-static-semantics-containsduplicatelabels.html\" title=\"link to this section\">13.11.2</a></span> Static Semantics: ContainsDuplicateLabels</h1>\n\n      <p>With argument <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsduplicatelabels.html\">13.1.1</a>, <a href=\"/sec/sec-block-static-semantics-containsduplicatelabels.html\">13.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsduplicatelabels.html\">13.6.2</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsduplicatelabels.html\">13.7.2.1</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsduplicatelabels.html\">13.7.3.1</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsduplicatelabels.html\">13.7.4.2</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels.html\">13.7.5.3</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsduplicatelabels.html\">13.12.2</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsduplicatelabels.html\">13.13.2</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsduplicatelabels.html\">13.15.2</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsduplicatelabels.html\">15.2.1.2</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">WithStatement</span> <span class=\"geq\">:</span> <code class=\"t\">with</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Return ContainsDuplicateLabels of <i>Statement</i> with argument <i>labelSet.</i></li>\n      </ol>\n    </section>\n\n    <section id=\"sec-with-statement-static-semantics-containsundefinedbreaktarget\">\n      <h1><span class=\"secnum\" id=\"sec-13.11.3\"><a href=\"/sec/sec-with-statement-static-semantics-containsundefinedbreaktarget.html\" title=\"link to this section\">13.11.3</a></span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n\n      <p>With argument <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedbreaktarget.html\">13.1.2</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedbreaktarget.html\">13.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedbreaktarget.html\">13.6.3</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.2.2</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.3.2</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.4.3</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget.html\">13.7.5.4</a>, <a href=\"/sec/sec-break-statement-static-semantics-containsundefinedbreaktarget.html\">13.9.2</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedbreaktarget.html\">13.12.3</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedbreaktarget.html\">13.13.3</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsundefinedbreaktarget.html\">13.15.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedbreaktarget.html\">15.2.1.3</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">WithStatement</span> <span class=\"geq\">:</span> <code class=\"t\">with</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Return ContainsUndefinedBreakTarget of <i>Statement</i> with argument <i>labelSet.</i></li>\n      </ol>\n    </section>\n\n    <section id=\"sec-with-statement-static-semantics-containsundefinedcontinuetarget\">\n      <h1><span class=\"secnum\" id=\"sec-13.11.4\"><a href=\"/sec/sec-with-statement-static-semantics-containsundefinedcontinuetarget.html\" title=\"link to this section\">13.11.4</a></span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n\n      <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedcontinuetarget.html\">13.1.3</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedcontinuetarget.html\">13.2.4</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedcontinuetarget.html\">13.6.4</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.2.3</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.3.3</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.4.4</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget.html\">13.7.5.5</a>, <a href=\"/sec/sec-continue-statement-static-semantics-containsundefinedcontinuetarget.html\">13.8.2</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedcontinuetarget.html\">13.12.4</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedcontinuetarget.html\">13.13.4</a>,<a href=\"/sec/sec-try-statement-static-semantics-containsundefinedcontinuetarget.html\">13.15.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedcontinuetarget.html\">15.2.1.4</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">WithStatement</span> <span class=\"geq\">:</span> <code class=\"t\">with</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Return ContainsUndefinedContinueTarget of <i>Statement</i> with arguments <i>iterationSet</i> and\n            &#xAB;&#xA0;&#xBB;<i>.</i></li>\n      </ol>\n    </section>\n\n    <section id=\"sec-with-statement-static-semantics-vardeclarednames\">\n      <h1><span class=\"secnum\" id=\"sec-13.11.5\"><a href=\"/sec/sec-with-statement-static-semantics-vardeclarednames.html\" title=\"link to this section\">13.11.5</a></span> Static Semantics:  VarDeclaredNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-vardeclarednames.html\">13.1.5</a>, <a href=\"/sec/sec-block-static-semantics-vardeclarednames.html\">13.2.11</a>, <a href=\"/sec/sec-variable-statement-static-semantics-vardeclarednames.html\">13.3.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-vardeclarednames.html\">13.6.5</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-vardeclarednames.html\">13.7.2.4</a>, <a href=\"/sec/sec-while-statement-static-semantics-vardeclarednames.html\">13.7.3.4</a>, <a href=\"/sec/sec-for-statement-static-semantics-vardeclarednames.html\">13.7.4.5</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-vardeclarednames.html\">13.7.5.7</a>, <a href=\"/sec/sec-switch-statement-static-semantics-vardeclarednames.html\">13.12.7</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-vardeclarednames.html\">13.13.12</a>, <a href=\"/sec/sec-try-statement-static-semantics-vardeclarednames.html\">13.15.5</a>, <a href=\"/sec/sec-function-definitions-static-semantics-vardeclarednames.html\">14.1.15</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-vardeclarednames.html\">14.2.12</a>, <a href=\"/sec/sec-scripts-static-semantics-vardeclarednames.html\">15.1.5</a>, <a href=\"/sec/sec-module-semantics-static-semantics-vardeclarednames.html\">15.2.1.13</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">WithStatement</span> <span class=\"geq\">:</span> <code class=\"t\">with</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Return the VarDeclaredNames of <i>Statement</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-with-statement-static-semantics-varscopeddeclarations\">\n      <h1><span class=\"secnum\" id=\"sec-13.11.6\"><a href=\"/sec/sec-with-statement-static-semantics-varscopeddeclarations.html\" title=\"link to this section\">13.11.6</a></span> Static Semantics:  VarScopedDeclarations</h1>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-varscopeddeclarations.html\">13.1.6</a>, <a href=\"/sec/sec-block-static-semantics-varscopeddeclarations.html\">13.2.12</a>, <a href=\"/sec/sec-variable-statement-static-semantics-varscopeddeclarations.html\">13.3.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-varscopeddeclarations.html\">13.6.6</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-varscopeddeclarations.html\">13.7.2.5</a>, <a href=\"/sec/sec-while-statement-static-semantics-varscopeddeclarations.html\">13.7.3.5</a>, <a href=\"/sec/sec-for-statement-static-semantics-varscopeddeclarations.html\">13.7.4.6</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations.html\">13.7.5.8</a>, <a href=\"/sec/sec-switch-statement-static-semantics-varscopeddeclarations.html\">13.12.8</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-varscopeddeclarations.html\">13.13.13</a>, <a href=\"/sec/sec-try-statement-static-semantics-varscopeddeclarations.html\">13.15.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-varscopeddeclarations.html\">14.1.16</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-varscopeddeclarations.html\">14.2.13</a>, <a href=\"/sec/sec-scripts-static-semantics-varscopeddeclarations.html\">15.1.6</a>, <a href=\"/sec/sec-module-semantics-static-semantics-varscopeddeclarations.html\">15.2.1.14</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">WithStatement</span> <span class=\"geq\">:</span> <code class=\"t\">with</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Return the VarScopedDeclarations of <i>Statement</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-with-statement-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.11.7\"><a href=\"/sec/sec-with-statement-runtime-semantics-evaluation.html\" title=\"link to this section\">13.11.7</a></span> Runtime Semantics: Evaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">WithStatement</span> <span class=\"geq\">:</span> <code class=\"t\">with</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>val</i> be the result of evaluating <i>Expression</i>.</li>\n        <li>Let <i>obj</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>val</i>)).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>obj</i>).</li>\n        <li>Let <i>oldEnv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n        <li>Let <i>newEnv</i> be <a href=\"/sec/sec-newobjectenvironment.html\">NewObjectEnvironment</a>(<i>obj</i>, <i>oldEnv</i>).</li>\n        <li>Set the <i>withEnvironment</i> flag of <i>newEnv&#x2019;s</i> <a href=\"/sec/sec-lexical-environments.html\">EnvironmentRecord</a>\n            to <b>true</b>.</li>\n        <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>newEnv</i>.</li>\n        <li>Let <i>C</i> be the result of evaluating <i>Statement</i>.</li>\n        <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-lexical-environments.html\">Lexical Environment</a> to <i>oldEnv</i>.</li>\n        <li>If <i>C</i>.[[type]] is <span style=\"font-family: sans-serif\">normal</span> and <i>C</i>.[[value]] is <span style=\"font-family: sans-serif\">empty</span>, return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<b>undefined</b>).</li>\n        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>C</i>).</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> No matter how control leaves the embedded <span class=\"nt\">Statement</span>, whether\n        normally or by some form of <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a> or exception, the <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> is always restored to its former state.</p>\n      </div>\n    </section>\n  </section>\n\n  <section id=\"sec-switch-statement\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-13.12\"><a href=\"/sec/sec-switch-statement.html\" title=\"link to this section\">13.12</a></span> The\n          <code>switch</code> Statement</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">SwitchStatement</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">switch</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">CaseBlock</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">CaseBlock</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-params\">[?Yield, ?Return]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n        <div class=\"rhs\"><code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-params\">[?Yield, ?Return]</sub><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span><sub class=\"g-params\">[?Yield, ?Return]</sub> <span class=\"nt\">CaseClauses</span><sub class=\"g-params\">[?Yield, ?Return]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">CaseClauses</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">CaseClause</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">CaseClauses</span><sub class=\"g-params\">[?Yield, ?Return]</sub> <span class=\"nt\">CaseClause</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">CaseClause</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">case</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-params\">[?Yield, ?Return]</sub><sub class=\"g-opt\">opt</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">DefaultClause</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-params\">[?Yield, ?Return]</sub><sub class=\"g-opt\">opt</sub></div>\n      </div>\n    </div>\n\n    <section id=\"sec-switch-statement-static-semantics-early-errors\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.1\"><a href=\"/sec/sec-switch-statement-static-semantics-early-errors.html\" title=\"link to this section\">13.12.1</a></span> Static Semantics:  Early Errors</h1>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span> <code class=\"t\">}</code></div>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if the LexicallyDeclaredNames of <span class=\"nt\">CaseClauses</span> contains any duplicate\n          entries.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if any element of the LexicallyDeclaredNames of <span class=\"nt\">CaseClauses</span> also occurs\n          in the VarDeclaredNames of <span class=\"nt\">CaseClauses</span>.</p>\n        </li>\n      </ul>\n    </section>\n\n    <section id=\"sec-switch-statement-static-semantics-containsduplicatelabels\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.2\"><a href=\"/sec/sec-switch-statement-static-semantics-containsduplicatelabels.html\" title=\"link to this section\">13.12.2</a></span> Static Semantics: ContainsDuplicateLabels</h1>\n\n      <p>With argument <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsduplicatelabels.html\">13.1.1</a>, <a href=\"/sec/sec-block-static-semantics-containsduplicatelabels.html\">13.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsduplicatelabels.html\">13.6.2</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsduplicatelabels.html\">13.7.2.1</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsduplicatelabels.html\">13.7.3.1</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsduplicatelabels.html\">13.7.4.2</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels.html\">13.7.5.3</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsduplicatelabels.html\">13.11.2</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsduplicatelabels.html\">13.13.2</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsduplicatelabels.html\">13.15.2</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsduplicatelabels.html\">15.2.1.2</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">SwitchStatement</span> <span class=\"geq\">:</span> <code class=\"t\">switch</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">CaseBlock</span></div>\n      <ol class=\"proc\">\n        <li>Return ContainsDuplicateLabels of <i>CaseBlock</i> with argument <i>labelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the first <i>CaseClauses</i> is present, then\n          <ol class=\"block\">\n            <li>Let <i>hasDuplicates</i> be ContainsDuplicateLabels of the first <i>CaseClauses</i> with argument\n                <i>labelSet</i>.</li>\n            <li>If <i>hasDuplicates</i> is <b>true</b>, return <b>true</b>.</li>\n          </ol>\n        </li>\n        <li>Let <i>hasDuplicates</i> be ContainsDuplicateLabels of <i>DefaultClause</i> with argument <i>labelSet.</i></li>\n        <li>If <i>hasDuplicates</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>If the second <i>CaseClauses</i> is not present, return <b>false</b>.</li>\n        <li>Return ContainsDuplicateLabels of the second <i>CaseClauses</i> with argument <i>labelSet</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClauses</span> <span class=\"geq\">:</span> <span class=\"nt\">CaseClauses</span> <span class=\"nt\">CaseClause</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasDuplicates</i> be ContainsDuplicateLabels of <i>CaseClauses</i> with argument <i>labelSet</i>.</li>\n        <li>If <i>hasDuplicates</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsDuplicateLabels of <i>CaseClause</i> with argument <i>labelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return ContainsDuplicateLabels of <i>StatementList</i> with argument\n            <i>labelSet</i>.</li>\n        <li>Else return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return ContainsDuplicateLabels of <i>StatementList</i> with argument\n            <i>labelSet</i>.</li>\n        <li>Else return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-switch-statement-static-semantics-containsundefinedbreaktarget\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.3\"><a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedbreaktarget.html\" title=\"link to this section\">13.12.3</a></span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n\n      <p>With argument <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedbreaktarget.html\">13.1.2</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedbreaktarget.html\">13.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedbreaktarget.html\">13.6.3</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.2.2</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.3.2</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.4.3</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget.html\">13.7.5.4</a>, <a href=\"/sec/sec-break-statement-static-semantics-containsundefinedbreaktarget.html\">13.9.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedbreaktarget.html\">13.11.3</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedbreaktarget.html\">13.13.3</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsundefinedbreaktarget.html\">13.15.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedbreaktarget.html\">15.2.1.3</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">SwitchStatement</span> <span class=\"geq\">:</span> <code class=\"t\">switch</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">CaseBlock</span></div>\n      <ol class=\"proc\">\n        <li>Return ContainsUndefinedBreakTarget of <i>CaseBlock</i> with argument <i>labelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the first <i>CaseClauses</i> is present, then\n          <ol class=\"block\">\n            <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedBreakTarget of the first <i>CaseClauses</i> with argument\n                <i>labelSet</i>.</li>\n            <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n          </ol>\n        </li>\n        <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedBreakTarget of <i>DefaultClause</i> with argument\n            <i>labelSet.</i></li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>If the second <i>CaseClauses</i> is not present, return <b>false</b>.</li>\n        <li>Return ContainsUndefinedBreakTarget of the second <i>CaseClauses</i> with argument <i>labelSet</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClauses</span> <span class=\"geq\">:</span> <span class=\"nt\">CaseClauses</span> <span class=\"nt\">CaseClause</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedBreakTarget of <i>CaseClauses</i> with argument\n            <i>labelSet</i>.</li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsUndefinedBreakTarget of <i>CaseClause</i> with argument <i>labelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return ContainsUndefinedBreakTarget of <i>StatementList</i> with argument\n            <i>labelSet</i>.</li>\n        <li>Else return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return ContainsUndefinedBreakTarget of <i>StatementList</i> with argument\n            <i>labelSet</i>.</li>\n        <li>Else return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-switch-statement-static-semantics-containsundefinedcontinuetarget\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.4\"><a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedcontinuetarget.html\" title=\"link to this section\">13.12.4</a></span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n\n      <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedcontinuetarget.html\">13.1.3</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedcontinuetarget.html\">13.2.4</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedcontinuetarget.html\">13.6.4</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.2.3</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.3.3</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.4.4</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget.html\">13.7.5.5</a>, <a href=\"/sec/sec-continue-statement-static-semantics-containsundefinedcontinuetarget.html\">13.8.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedcontinuetarget.html\">13.11.4</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedcontinuetarget.html\">13.13.4</a>,<a href=\"/sec/sec-try-statement-static-semantics-containsundefinedcontinuetarget.html\">13.15.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedcontinuetarget.html\">15.2.1.4</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">SwitchStatement</span> <span class=\"geq\">:</span> <code class=\"t\">switch</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">CaseBlock</span></div>\n      <ol class=\"proc\">\n        <li>Return ContainsUndefinedContinueTarget of <i>CaseBlock</i> with arguments <i>iterationSet</i> and\n            &#xAB;&#xA0;&#xBB;<i>.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the first <i>CaseClauses</i> is present, then\n          <ol class=\"block\">\n            <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedContinueTarget of the first <i>CaseClauses</i> with arguments\n                <i>iterationSet</i> and &#xAB;&#xA0;&#xBB;.</li>\n            <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n          </ol>\n        </li>\n        <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedContinueTarget of <i>DefaultClause</i> with arguments\n            <i>iterationSet</i> and &#xAB;&#xA0;&#xBB;<i>.</i></li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>If the second <i>CaseClauses</i> is not present, return <b>false</b>.</li>\n        <li>Return ContainsUndefinedContinueTarget of the second <i>CaseClauses</i> with arguments <i>iterationSet</i> and\n            &#xAB;&#xA0;&#xBB;.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClauses</span> <span class=\"geq\">:</span> <span class=\"nt\">CaseClauses</span> <span class=\"nt\">CaseClause</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedContinueTarget of <i>CaseClauses</i> with arguments\n            <i>iterationSet</i> and &#xAB;&#xA0;&#xBB;.</li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsUndefinedContinueTarget of <i>CaseClause</i> with arguments <i>iterationSet</i> and\n            &#xAB;&#xA0;&#xBB;<i>.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return ContainsUndefinedContinueTarget of <i>StatementList</i> with arguments\n            <i>iterationSet</i> and &#xAB;&#xA0;&#xBB;.</li>\n        <li>Else return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return ContainsUndefinedContinueTarget of <i>StatementList</i> with arguments\n            <i>iterationSet</i> and &#xAB;&#xA0;&#xBB;.</li>\n        <li>Else return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-switch-statement-static-semantics-lexicallydeclarednames\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.5\"><a href=\"/sec/sec-switch-statement-static-semantics-lexicallydeclarednames.html\" title=\"link to this section\">13.12.5</a></span> Static Semantics:  LexicallyDeclaredNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-block-static-semantics-lexicallydeclarednames.html\">13.2.5</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-lexicallydeclarednames.html\">13.13.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-lexicallydeclarednames.html\">14.1.13</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-lexicallydeclarednames.html\">14.2.10</a>, <a href=\"/sec/sec-scripts-static-semantics-lexicallydeclarednames.html\">15.1.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-lexicallydeclarednames.html\">15.2.1.11</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the first <i>CaseClauses</i> is present, let <i>names</i> be the LexicallyDeclaredNames of the first\n            <i>CaseClauses</i>.</li>\n        <li>Else let <i>names</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>Append to <i>names</i> the elements of the LexicallyDeclaredNames of the <i>DefaultClause.</i></li>\n        <li>If the second <i>CaseClauses</i> is not present, return <i>names</i>.</li>\n        <li>Else return the result of appending to <i>names</i> the elements of the LexicallyDeclaredNames of the second\n            <i>CaseClauses</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClauses</span> <span class=\"geq\">:</span> <span class=\"nt\">CaseClauses</span> <span class=\"nt\">CaseClause</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>names</i> be LexicallyDeclaredNames of <i>CaseClauses</i>.</li>\n        <li>Append to <i>names</i> the elements of the LexicallyDeclaredNames of <i>CaseClause.</i></li>\n        <li>Return <i>names</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return the LexicallyDeclaredNames of <i>StatementList</i>.</li>\n        <li>Else return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return the LexicallyDeclaredNames of <i>StatementList</i>.</li>\n        <li>Else return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-switch-statement-static-semantics-lexicallyscopeddeclarations\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.6\"><a href=\"/sec/sec-switch-statement-static-semantics-lexicallyscopeddeclarations.html\" title=\"link to this section\">13.12.6</a></span> Static Semantics:  LexicallyScopedDeclarations</h1>\n\n      <p>See also: <a href=\"/sec/sec-block-static-semantics-lexicallyscopeddeclarations.html\">13.2.6</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-lexicallyscopeddeclarations.html\">13.13.7</a>, <a href=\"/sec/sec-function-definitions-static-semantics-lexicallyscopeddeclarations.html\">14.1.14</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations.html\">14.2.11</a>, <a href=\"/sec/sec-scripts-static-semantics-lexicallyscopeddeclarations.html\">15.1.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-lexicallyscopeddeclarations.html\">15.2.1.12</a>, <a href=\"/sec/sec-exports-static-semantics-lexicallyscopeddeclarations.html\">15.2.3.8</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the first <i>CaseClauses</i> is present, let <i>declarations</i> be the LexicallyScopedDeclarations of the first\n            <i>CaseClauses</i>.</li>\n        <li>Else let <i>declarations</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>Append to <i>declarations</i> the elements of the LexicallyScopedDeclarations of the <i>DefaultClause.</i></li>\n        <li>If the second <i>CaseClauses</i> is not present, return <i>declarations</i>.</li>\n        <li>Else return the result of appending to <i>declarations</i> the elements of the LexicallyScopedDeclarations of the\n            second <i>CaseClauses</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClauses</span> <span class=\"geq\">:</span> <span class=\"nt\">CaseClauses</span> <span class=\"nt\">CaseClause</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>declarations</i> be LexicallyScopedDeclarations of <i>CaseClauses</i>.</li>\n        <li>Append to <i>declarations</i> the elements of the LexicallyScopedDeclarations of <i>CaseClause.</i></li>\n        <li>Return <i>declarations</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return the LexicallyScopedDeclarations of <i>StatementList</i>.</li>\n        <li>Else return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return the LexicallyScopedDeclarations of <i>StatementList</i>.</li>\n        <li>Else return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-switch-statement-static-semantics-vardeclarednames\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.7\"><a href=\"/sec/sec-switch-statement-static-semantics-vardeclarednames.html\" title=\"link to this section\">13.12.7</a></span> Static Semantics:  VarDeclaredNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-vardeclarednames.html\">13.1.5</a>, <a href=\"/sec/sec-block-static-semantics-vardeclarednames.html\">13.2.11</a>, <a href=\"/sec/sec-variable-statement-static-semantics-vardeclarednames.html\">13.3.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-vardeclarednames.html\">13.6.5</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-vardeclarednames.html\">13.7.2.4</a>, <a href=\"/sec/sec-while-statement-static-semantics-vardeclarednames.html\">13.7.3.4</a>, <a href=\"/sec/sec-for-statement-static-semantics-vardeclarednames.html\">13.7.4.5</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-vardeclarednames.html\">13.7.5.7</a>, <a href=\"/sec/sec-with-statement-static-semantics-vardeclarednames.html\">13.11.5</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-vardeclarednames.html\">13.13.12</a>, <a href=\"/sec/sec-try-statement-static-semantics-vardeclarednames.html\">13.15.5</a>, <a href=\"/sec/sec-function-definitions-static-semantics-vardeclarednames.html\">14.1.15</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-vardeclarednames.html\">14.2.12</a>, <a href=\"/sec/sec-scripts-static-semantics-vardeclarednames.html\">15.1.5</a>, <a href=\"/sec/sec-module-semantics-static-semantics-vardeclarednames.html\">15.2.1.13</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">SwitchStatement</span> <span class=\"geq\">:</span> <code class=\"t\">switch</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">CaseBlock</span></div>\n      <ol class=\"proc\">\n        <li>Return the VarDeclaredNames of <i>CaseBlock</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the first <i>CaseClauses</i> is present, let <i>names</i> be the VarDeclaredNames of the first\n            <i>CaseClauses</i>.</li>\n        <li>Else let <i>names</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>Append to <i>names</i> the elements of the VarDeclaredNames of the <i>DefaultClause.</i></li>\n        <li>If the second <i>CaseClauses</i> is not present, return <i>names</i>.</li>\n        <li>Else return the result of appending to <i>names</i> the elements of the VarDeclaredNames of the second\n            <i>CaseClauses</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClauses</span> <span class=\"geq\">:</span> <span class=\"nt\">CaseClauses</span> <span class=\"nt\">CaseClause</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>names</i> be VarDeclaredNames of <i>CaseClauses</i>.</li>\n        <li>Append to <i>names</i> the elements of the VarDeclaredNames of <i>CaseClause.</i></li>\n        <li>Return <i>names</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return the VarDeclaredNames of <i>StatementList</i>.</li>\n        <li>Else return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return the VarDeclaredNames of <i>StatementList</i>.</li>\n        <li>Else return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-switch-statement-static-semantics-varscopeddeclarations\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.8\"><a href=\"/sec/sec-switch-statement-static-semantics-varscopeddeclarations.html\" title=\"link to this section\">13.12.8</a></span> Static Semantics:  VarScopedDeclarations</h1>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-varscopeddeclarations.html\">13.1.6</a>, <a href=\"/sec/sec-block-static-semantics-varscopeddeclarations.html\">13.2.12</a>, <a href=\"/sec/sec-variable-statement-static-semantics-varscopeddeclarations.html\">13.3.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-varscopeddeclarations.html\">13.6.6</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-varscopeddeclarations.html\">13.7.2.5</a>, <a href=\"/sec/sec-while-statement-static-semantics-varscopeddeclarations.html\">13.7.3.5</a>, <a href=\"/sec/sec-for-statement-static-semantics-varscopeddeclarations.html\">13.7.4.6</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations.html\">13.7.5.8</a>, <a href=\"/sec/sec-with-statement-static-semantics-varscopeddeclarations.html\">13.11.6</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-varscopeddeclarations.html\">13.13.13</a>, <a href=\"/sec/sec-try-statement-static-semantics-varscopeddeclarations.html\">13.15.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-varscopeddeclarations.html\">14.1.16</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-varscopeddeclarations.html\">14.2.13</a>, <a href=\"/sec/sec-scripts-static-semantics-varscopeddeclarations.html\">15.1.6</a>, <a href=\"/sec/sec-module-semantics-static-semantics-varscopeddeclarations.html\">15.2.1.14</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">SwitchStatement</span> <span class=\"geq\">:</span> <code class=\"t\">switch</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">CaseBlock</span></div>\n      <ol class=\"proc\">\n        <li>Return the VarScopedDeclarations of <i>CaseBlock</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the first <i>CaseClauses</i> is present, let <i>declarations</i> be the VarScopedDeclarations of the first\n            <i>CaseClauses</i>.</li>\n        <li>Else let <i>declarations</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>Append to <i>declarations</i> the elements of the VarScopedDeclarations of the <i>DefaultClause.</i></li>\n        <li>If the second <i>CaseClauses</i> is not present, return <i>declarations</i>.</li>\n        <li>Else return the result of appending to <i>declarations</i> the elements of the VarScopedDeclarations of the second\n            <i>CaseClauses</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClauses</span> <span class=\"geq\">:</span> <span class=\"nt\">CaseClauses</span> <span class=\"nt\">CaseClause</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>declarations</i> be VarScopedDeclarations of <i>CaseClauses</i>.</li>\n        <li>Append to <i>declarations</i> the elements of the VarScopedDeclarations of <i>CaseClause.</i></li>\n        <li>Return <i>declarations</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return the VarScopedDeclarations of <i>StatementList</i>.</li>\n        <li>Else return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return the VarScopedDeclarations of <i>StatementList</i>.</li>\n        <li>Else return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-runtime-semantics-caseblockevaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.9\"><a href=\"/sec/sec-runtime-semantics-caseblockevaluation.html\" title=\"link to this section\">13.12.9</a></span> Runtime Semantics: CaseBlockEvaluation</h1>\n\n      <p>With argument <var>input</var>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<b>undefined</b>).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Let <i>V</i> = <b>undefined</b>.</li>\n        <li>Let <i>A</i> be the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> of <i>CaseClause</i> items in\n            <i>CaseClauses</i>, in source text order.</li>\n        <li>Let <i>found</i> be <b>false</b>.</li>\n        <li>Repeat for each <i>CaseClause</i> <i>C</i> in <i>A</i>,\n          <ol class=\"block\">\n            <li>If <i>found</i> is <b>false</b>, then\n              <ol class=\"block\">\n                <li>Let <i>clauseSelector</i> be the result of CaseSelectorEvaluation of <i>C</i>.</li>\n                <li>If <i>clauseSelector</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n                  <ol class=\"block\">\n                    <li>If <i>clauseSelector</i>.[[value]] is <span style=\"font-family: sans-serif\">empty</span>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <i>clauseSelector</i>.[[type]],\n                        [[value]]:  <b>undefined</b>, [[target]]:  <i>clauseSelector</i>.[[target]]}.</li>\n                    <li>Else, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>clauseSelector</i>).</li>\n                  </ol>\n                </li>\n                <li>Let <i>found</i> be the result of performing Strict Equality Comparison <i>input</i> ===\n                    <i>clauseSelector</i>.[[value]].</li>\n              </ol>\n            </li>\n            <li>If <i>found</i> is <b>true</b>, then\n              <ol class=\"block\">\n                <li>Let <i>R</i> be the result of evaluating <i>C</i>.</li>\n                <li>If <i>R</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, let <i>V</i> =\n                    <i>R</i>.[[value]].</li>\n                <li>If <i>R</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>R</i>, <i>V</i>)).</li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>V</i>).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Let <i>V</i> = <b>undefined</b>.</li>\n        <li>Let <i>A</i> be the list of <i>CaseClause</i> items in the first <i>CaseClauses</i>, in source text order. If the\n            first <i>CaseClauses</i> is not present <i>A</i> is &#xAB; &#xBB;.</li>\n        <li>Let <i>found</i> be <b>false</b>.</li>\n        <li>Repeat for each <i>CaseClause</i> <i>C</i> in <i>A</i>\n          <ol class=\"block\">\n            <li>If <i>found</i> is <b>false</b>, then\n              <ol class=\"block\">\n                <li>Let <i>clauseSelector</i> be the result of CaseSelectorEvaluation of <i>C</i>.</li>\n                <li>If <i>clauseSelector</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n                  <ol class=\"block\">\n                    <li>If <i>clauseSelector</i>.[[value]] is <span style=\"font-family: sans-serif\">empty</span>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <i>clauseSelector</i>.[[type]],\n                        [[value]]:  <b>undefined</b>, [[target]]:  <i>clauseSelector</i>.[[target]]}.</li>\n                    <li>Else, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>clauseSelector</i>).</li>\n                  </ol>\n                </li>\n                <li>Let <i>found</i> be the result of performing Strict Equality Comparison <i>input</i> ===\n                    <i>clauseSelector</i>.[[value]].</li>\n              </ol>\n            </li>\n            <li>If <i>found</i> is <b>true</b>, then\n              <ol class=\"block\">\n                <li>Let <i>R</i> be the result of evaluating <i>C</i>.</li>\n                <li>If <i>R</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, let <i>V</i> =\n                    <i>R</i>.[[value]].</li>\n                <li>If <i>R</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>R</i>, <i>V</i>)).</li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>Let <i>foundInB</i> be <b>false</b>.</li>\n        <li>Let <i>B</i> be the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the <i>CaseClause</i> items\n            in the second <i>CaseClauses</i>, in source text order. If the second <i>CaseClauses</i> is not present <i>B</i> is\n            &#xAB; &#xBB;.</li>\n        <li>If <i>found</i> is <b>false</b>, then\n          <ol class=\"block\">\n            <li>Repeat for  each <i>CaseClause C</i> in <i>B</i>\n              <ol class=\"block\">\n                <li>If <i>foundInB</i> is <b>false</b>, then\n                  <ol class=\"block\">\n                    <li>Let <i>clauseSelector</i> be the result of CaseSelectorEvaluation of <i>C</i>.</li>\n                    <li>If <i>clauseSelector</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>,\n                        then\n                      <ol class=\"block\">\n                        <li>If <i>clauseSelector</i>.[[value]] is <span style=\"font-family: sans-serif\">empty</span>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]:\n                            <i>clauseSelector</i>.[[type]], [[value]]: <b>undefined</b>, [[target]]:\n                            <i>clauseSelector</i>.[[target]]}.</li>\n                        <li>Else, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>clauseSelector</i>).</li>\n                      </ol>\n                    </li>\n                    <li>Let <i>foundInB</i> be the result of performing Strict Equality Comparison <i>input</i> ===\n                        <i>clauseSelector</i>.[[value]].</li>\n                  </ol>\n                </li>\n                <li>If <i>foundInB</i> is <b>true</b>, then\n                  <ol class=\"block\">\n                    <li>Let <i>R</i> be the result of evaluating <i>CaseClause C</i>.</li>\n                    <li>If <i>R</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, let <i>V</i> =\n                        <i>R</i>.[[value]].</li>\n                    <li>If <i>R</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>R</i>, <i>V</i>)).</li>\n                  </ol>\n                </li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>If <i>foundInB</i> is <b>true</b>, return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>V</i>).</li>\n        <li>Let <i>R</i> be the result of evaluating <i>DefaultClause</i>.</li>\n        <li>If <i>R</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, let <i>V</i> =\n            <i>R</i>.[[value]].</li>\n        <li>If <i>R</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>R</i>,\n            <i>V</i>)).</li>\n        <li>Repeat for each <i>CaseClause C</i> in <i>B</i> (NOTE  this is another complete iteration of the second\n            <i>CaseClauses</i>)\n          <ol class=\"block\">\n            <li>Let <i>R</i> be the result of evaluating <i>CaseClause</i> <i>C</i>.</li>\n            <li>If <i>R</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, let <i>V</i> =\n                <i>R</i>.[[value]].</li>\n            <li>If <i>R</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>R</i>, <i>V</i>)).</li>\n          </ol>\n        </li>\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>V</i>).</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-runtime-semantics-caseselectorevaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.10\"><a href=\"/sec/sec-runtime-semantics-caseselectorevaluation.html\" title=\"link to this section\">13.12.10</a></span> Runtime Semantics: CaseSelectorEvaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>Let <i>exprRef</i> be the result of evaluating <i>Expression</i>.</li>\n        <li>Return <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> CaseSelectorEvaluation does not execute the associated <span class=\"nt\">StatementList</span>. It simply evaluates the <span class=\"nt\">Expression</span> and returns the value, which\n        the <span class=\"nt\">CaseBlock</span> algorithm uses to determine which <span class=\"nt\">StatementList</span> to start\n        executing.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-switch-statement-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.11\"><a href=\"/sec/sec-switch-statement-runtime-semantics-evaluation.html\" title=\"link to this section\">13.12.11</a></span> Runtime Semantics: Evaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">SwitchStatement</span> <span class=\"geq\">:</span> <code class=\"t\">switch</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">CaseBlock</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>exprRef</i> be the result of evaluating <i>Expression</i>.</li>\n        <li>Let <i>switchValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>switchValue</i>).</li>\n        <li>Let <i>oldEnv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n        <li>Let <i>blockEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>oldEnv</i>).</li>\n        <li>Perform <a href=\"/sec/sec-blockdeclarationinstantiation.html\">BlockDeclarationInstantiation</a>(<i>CaseBlock,</i>\n            <i>blockEnv</i>).</li>\n        <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>blockEnv</i>.</li>\n        <li>Let <i>R</i> be the result of performing CaseBlockEvaluation of <i>CaseBlock</i> with argument\n            <i>switchValue</i>.</li>\n        <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n        <li>Return <i>R</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> No matter how control leaves the <span class=\"nt\">SwitchStatement</span> the <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> is always restored to its former state.</p>\n      </div>\n\n      <div class=\"gp prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code></div>\n      <ol class=\"proc\">\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family: sans-serif\">empty</span>).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span></div>\n      <ol class=\"proc\">\n        <li>Return the result of evaluating <i>StatementList</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code></div>\n      <ol class=\"proc\">\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family: sans-serif\">empty</span>).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span></div>\n      <ol class=\"proc\">\n        <li>Return the result of evaluating <i>StatementList</i>.</li>\n      </ol>\n    </section>\n  </section>\n\n  <section id=\"sec-labelled-statements\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-13.13\"><a href=\"/sec/sec-labelled-statements.html\" title=\"link to this section\">13.13</a></span>\n          Labelled Statements</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">LabelledStatement</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">LabelIdentifier</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">:</code> <span class=\"nt\">LabelledItem</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">LabelledItem</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">FunctionDeclaration</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> A <span class=\"nt\">Statement</span> may be prefixed by a label. Labelled statements are\n        only used in conjunction with labelled <code>break</code> and <code>continue</code> statements. ECMAScript has no\n        <code>goto</code> statement. A <span class=\"nt\">Statement</span> can be part of a <span class=\"nt\">LabelledStatement</span>, which itself can be part of a <span class=\"nt\">LabelledStatement</span>, and so on.\n        The labels introduced this way are collectively referred to as the &#x201C;current label set&#x201D; when describing the\n        semantics of individual statements. A <span class=\"nt\">LabelledStatement</span> has no semantic meaning other than the\n        introduction of a label to a <i>label set</i>.</p>\n      </div>\n    </div>\n\n    <section id=\"sec-labelled-statements-static-semantics-early-errors\">\n      <h1><span class=\"secnum\" id=\"sec-13.13.1\"><a href=\"/sec/sec-labelled-statements-static-semantics-early-errors.html\" title=\"link to this section\">13.13.1</a></span> Static Semantics:  Early Errors</h1>\n      <div class=\"gp prod\"><span class=\"nt\">LabelledItem</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionDeclaration</span></div>\n      <ul>\n        <li>It is a Syntax Error if any source text matches this rule.</li>\n      </ul>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> An alternative  definition for this rule is provided in <a href=\"/sec/sec-labelled-function-declarations.html\">B.3.2</a>.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-labelled-statements-static-semantics-containsduplicatelabels\">\n      <h1><span class=\"secnum\" id=\"sec-13.13.2\"><a href=\"/sec/sec-labelled-statements-static-semantics-containsduplicatelabels.html\" title=\"link to this section\">13.13.2</a></span> Static Semantics: ContainsDuplicateLabels</h1>\n\n      <p>With argument <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsduplicatelabels.html\">13.1.1</a>, <a href=\"/sec/sec-block-static-semantics-containsduplicatelabels.html\">13.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsduplicatelabels.html\">13.6.2</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsduplicatelabels.html\">13.7.2.1</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsduplicatelabels.html\">13.7.3.1</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsduplicatelabels.html\">13.7.4.2</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels.html\">13.7.5.3</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsduplicatelabels.html\">13.11.2</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsduplicatelabels.html\">13.12.2</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsduplicatelabels.html\">13.15.2</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsduplicatelabels.html\">15.2.1.2</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">LabelledStatement</span> <span class=\"geq\">:</span> <span class=\"nt\">LabelIdentifier</span> <code class=\"t\">:</code> <span class=\"nt\">LabelledItem</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>label</i> be the StringValue of <i>LabelIdentifier</i>.</li>\n        <li>If <i>label</i> is an element of <i>labelSet</i>, return <b>true</b>.</li>\n        <li>Let <i>newLabelSet</i> be a copy of  <i>labelSet</i> with <i>label</i> appended.</li>\n        <li>Return ContainsDuplicateLabels of <i>LabelledItem</i> with argument <i>newLabelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">LabelledItem</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionDeclaration</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-labelled-statements-static-semantics-containsundefinedbreaktarget\">\n      <h1><span class=\"secnum\" id=\"sec-13.13.3\"><a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedbreaktarget.html\" title=\"link to this section\">13.13.3</a></span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n\n      <p>With argument <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedbreaktarget.html\">13.1.2</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedbreaktarget.html\">13.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedbreaktarget.html\">13.6.3</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.2.2</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.3.2</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.4.3</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget.html\">13.7.5.4</a>, <a href=\"/sec/sec-break-statement-static-semantics-containsundefinedbreaktarget.html\">13.9.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedbreaktarget.html\">13.11.3</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedbreaktarget.html\">13.12.3</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsundefinedbreaktarget.html\">13.15.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedbreaktarget.html\">15.2.1.3</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">LabelledStatement</span> <span class=\"geq\">:</span> <span class=\"nt\">LabelIdentifier</span> <code class=\"t\">:</code> <span class=\"nt\">LabelledItem</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>label</i> be the StringValue of <i>LabelIdentifier</i>.</li>\n        <li>Let <i>newLabelSet</i> be a copy of  <i>labelSet</i> with <i>label</i> appended.</li>\n        <li>Return ContainsUndefinedBreakTarget of <i>LabelledItem</i> with argument <i>newLabelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">LabelledItem</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionDeclaration</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-labelled-statements-static-semantics-containsundefinedcontinuetarget\">\n      <h1><span class=\"secnum\" id=\"sec-13.13.4\"><a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedcontinuetarget.html\" title=\"link to this section\">13.13.4</a></span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n\n      <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedcontinuetarget.html\">13.1.3</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedcontinuetarget.html\">13.2.4</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedcontinuetarget.html\">13.6.4</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.2.3</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.3.3</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.4.4</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget.html\">13.7.5.5</a>, <a href=\"/sec/sec-continue-statement-static-semantics-containsundefinedcontinuetarget.html\">13.8.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedcontinuetarget.html\">13.11.4</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedcontinuetarget.html\">13.12.4</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsundefinedcontinuetarget.html\">13.15.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedcontinuetarget.html\">15.2.1.4</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">LabelledStatement</span> <span class=\"geq\">:</span> <span class=\"nt\">LabelIdentifier</span> <code class=\"t\">:</code> <span class=\"nt\">LabelledItem</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>label</i> be the StringValue of <i>LabelIdentifier</i>.</li>\n        <li>Let <i>newLabelSet</i> be a copy of  <i>labelSet</i> with <i>label</i> appended.</li>\n        <li>Return ContainsUndefinedContinueTarget of <i>LabelledItem</i> with arguments <i>iterationSet</i> and\n            <i>newLabelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">LabelledItem</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionDeclaration</span></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-islabelledfunction\">\n      <h1><span class=\"secnum\" id=\"sec-13.13.5\"><a href=\"/sec/sec-islabelledfunction.html\" title=\"link to this section\">13.13.5</a></span>\n          Static Semantics:  IsLabelledFunction ( stmt )</h1>\n\n      <p class=\"normalbefore\">The abstract operation IsLabelledFunction  with argument <var>stmt</var> performs the following\n      steps:</p>\n\n      <ol class=\"proc\">\n        <li>If <i>stmt</i> is not a <i>LabelledStatement</i>, return <b>false</b>.</li>\n        <li>Let <i>item</i> be the <i>LabelledItem</i> component of <i>stmt</i>.</li>\n        <li>If <i>item</i> is <span class=\"prod\"><span class=\"nt\">LabelledItem</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionDeclaration</span></span> , return <b>true</b>.</li>\n        <li>Let <i>subStmt</i> be the <i>Statement</i> component of <i>item</i>.</li>\n        <li>Return IsLabelledFunction(<i>subStmt</i>).</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-labelled-statements-static-semantics-lexicallydeclarednames\">\n      <h1><span class=\"secnum\" id=\"sec-13.13.6\"><a href=\"/sec/sec-labelled-statements-static-semantics-lexicallydeclarednames.html\" title=\"link to this section\">13.13.6</a></span> Static Semantics:  LexicallyDeclaredNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-block-static-semantics-lexicallydeclarednames.html\">13.2.5</a>, <a href=\"/sec/sec-switch-statement-static-semantics-lexicallydeclarednames.html\">13.12.5</a>, <a href=\"/sec/sec-function-definitions-static-semantics-lexicallydeclarednames.html\">14.1.13</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-lexicallydeclarednames.html\">14.2.10</a>, <a href=\"/sec/sec-scripts-static-semantics-lexicallydeclarednames.html\">15.1.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-lexicallydeclarednames.html\">15.2.1.11</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">LabelledStatement</span> <span class=\"geq\">:</span> <span class=\"nt\">LabelIdentifier</span> <code class=\"t\">:</code> <span class=\"nt\">LabelledItem</span></div>\n      <ol class=\"proc\">\n        <li>Return the LexicallyDeclaredNames of <i>LabelledItem</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">LabelledItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">LabelledItem</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionDeclaration</span></div>\n      <ol class=\"proc\">\n        <li>Return BoundNames of <i>FunctionDeclaration</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-labelled-statements-static-semantics-lexicallyscopeddeclarations\">\n      <h1><span class=\"secnum\" id=\"sec-13.13.7\"><a href=\"/sec/sec-labelled-statements-static-semantics-lexicallyscopeddeclarations.html\" title=\"link to this section\">13.13.7</a></span> Static Semantics:  LexicallyScopedDeclarations</h1>\n\n      <p>See also: <a href=\"/sec/sec-block-static-semantics-lexicallyscopeddeclarations.html\">13.2.6</a>, <a href=\"/sec/sec-switch-statement-static-semantics-lexicallyscopeddeclarations.html\">13.12.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-lexicallyscopeddeclarations.html\">14.1.14</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations.html\">14.2.11</a>, <a href=\"/sec/sec-scripts-static-semantics-lexicallyscopeddeclarations.html\">15.1.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-lexicallyscopeddeclarations.html\">15.2.1.12</a>, <a href=\"/sec/sec-exports-static-semantics-lexicallyscopeddeclarations.html\">15.2.3.8</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">LabelledStatement</span> <span class=\"geq\">:</span> <span class=\"nt\">LabelIdentifier</span> <code class=\"t\">:</code> <span class=\"nt\">LabelledItem</span></div>\n      <ol class=\"proc\">\n        <li>Return the LexicallyScopedDeclarations of <i>LabelledItem</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">LabelledItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">LabelledItem</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionDeclaration</span></div>\n      <ol class=\"proc\">\n        <li>Return a new <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing <i>FunctionDeclaration</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-labelled-statements-static-semantics-toplevellexicallydeclarednames\">\n      <h1><span class=\"secnum\" id=\"sec-13.13.8\"><a href=\"/sec/sec-labelled-statements-static-semantics-toplevellexicallydeclarednames.html\" title=\"link to this section\">13.13.8</a></span> Static Semantics:  TopLevelLexicallyDeclaredNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-block-static-semantics-toplevellexicallydeclarednames.html\">13.2.7</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">LabelledStatement</span> <span class=\"geq\">:</span> <span class=\"nt\">LabelIdentifier</span> <code class=\"t\">:</code> <span class=\"nt\">LabelledItem</span></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-labelled-statements-static-semantics-toplevellexicallyscopeddeclarations\">\n      <h1><span class=\"secnum\" id=\"sec-13.13.9\"><a href=\"/sec/sec-labelled-statements-static-semantics-toplevellexicallyscopeddeclarations.html\" title=\"link to this section\">13.13.9</a></span> Static Semantics:  TopLevelLexicallyScopedDeclarations</h1>\n\n      <p>See also: <a href=\"/sec/sec-block-static-semantics-toplevellexicallyscopeddeclarations.html\">13.2.8</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">LabelledStatement</span> <span class=\"geq\">:</span> <span class=\"nt\">LabelIdentifier</span> <code class=\"t\">:</code> <span class=\"nt\">LabelledItem</span></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-labelled-statements-static-semantics-toplevelvardeclarednames\">\n      <h1><span class=\"secnum\" id=\"sec-13.13.10\"><a href=\"/sec/sec-labelled-statements-static-semantics-toplevelvardeclarednames.html\" title=\"link to this section\">13.13.10</a></span> Static Semantics:  TopLevelVarDeclaredNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-block-static-semantics-toplevelvardeclarednames.html\">13.2.9</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">LabelledStatement</span> <span class=\"geq\">:</span> <span class=\"nt\">LabelIdentifier</span> <code class=\"t\">:</code> <span class=\"nt\">LabelledItem</span></div>\n      <ol class=\"proc\">\n        <li>Return the TopLevelVarDeclaredNames of <i>LabelledItem</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">LabelledItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>If <i>Statement</i> is <span class=\"prod\"><span class=\"nt\">Statement</span> <span class=\"geq\">:</span> <span class=\"nt\">LabelledStatement</span></span> , return TopLevelVarDeclaredNames of <i>Statement</i>.</li>\n        <li>Return VarDeclaredNames of <i>Statement</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">LabelledItem</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionDeclaration</span></div>\n      <ol class=\"proc\">\n        <li>Return BoundNames of <i>FunctionDeclaration</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations\">\n      <h1><span class=\"secnum\" id=\"sec-13.13.11\"><a href=\"/sec/sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations.html\" title=\"link to this section\">13.13.11</a></span> Static Semantics:  TopLevelVarScopedDeclarations</h1>\n\n      <p>See also: <a href=\"/sec/sec-block-static-semantics-toplevelvarscopeddeclarations.html\">13.2.10</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">LabelledStatement</span> <span class=\"geq\">:</span> <span class=\"nt\">LabelIdentifier</span> <code class=\"t\">:</code> <span class=\"nt\">LabelledItem</span></div>\n      <ol class=\"proc\">\n        <li>Return the TopLevelVarScopedDeclarations of <i>LabelledItem</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">LabelledItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>If <i>Statement</i> is <span class=\"prod\"><span class=\"nt\">Statement</span> <span class=\"geq\">:</span> <span class=\"nt\">LabelledStatement</span></span> , return TopLevelVarScopedDeclarations of <i>Statement</i>.</li>\n        <li>Return VarScopedDeclarations of <i>Statement</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">LabelledItem</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionDeclaration</span></div>\n      <ol class=\"proc\">\n        <li>Return a new <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing <i>FunctionDeclaration</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-labelled-statements-static-semantics-vardeclarednames\">\n      <h1><span class=\"secnum\" id=\"sec-13.13.12\"><a href=\"/sec/sec-labelled-statements-static-semantics-vardeclarednames.html\" title=\"link to this section\">13.13.12</a></span> Static Semantics:  VarDeclaredNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-vardeclarednames.html\">13.1.5</a>, <a href=\"/sec/sec-block-static-semantics-vardeclarednames.html\">13.2.11</a>, <a href=\"/sec/sec-variable-statement-static-semantics-vardeclarednames.html\">13.3.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-vardeclarednames.html\">13.6.5</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-vardeclarednames.html\">13.7.2.4</a>, <a href=\"/sec/sec-while-statement-static-semantics-vardeclarednames.html\">13.7.3.4</a>, <a href=\"/sec/sec-for-statement-static-semantics-vardeclarednames.html\">13.7.4.5</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-vardeclarednames.html\">13.7.5.7</a>, <a href=\"/sec/sec-with-statement-static-semantics-vardeclarednames.html\">13.11.5</a>, <a href=\"/sec/sec-switch-statement-static-semantics-vardeclarednames.html\">13.12.7</a>, <a href=\"/sec/sec-try-statement-static-semantics-vardeclarednames.html\">13.15.5</a>, <a href=\"/sec/sec-function-definitions-static-semantics-vardeclarednames.html\">14.1.15</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-vardeclarednames.html\">14.2.12</a>, <a href=\"/sec/sec-scripts-static-semantics-vardeclarednames.html\">15.1.5</a>, <a href=\"/sec/sec-module-semantics-static-semantics-vardeclarednames.html\">15.2.1.13</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">LabelledStatement</span> <span class=\"geq\">:</span> <span class=\"nt\">LabelIdentifier</span> <code class=\"t\">:</code> <span class=\"nt\">LabelledItem</span></div>\n      <ol class=\"proc\">\n        <li>Return the VarDeclaredNames of <i>LabelledItem</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">LabelledItem</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionDeclaration</span></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-labelled-statements-static-semantics-varscopeddeclarations\">\n      <h1><span class=\"secnum\" id=\"sec-13.13.13\"><a href=\"/sec/sec-labelled-statements-static-semantics-varscopeddeclarations.html\" title=\"link to this section\">13.13.13</a></span> Static Semantics:  VarScopedDeclarations</h1>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-varscopeddeclarations.html\">13.1.6</a>, <a href=\"/sec/sec-block-static-semantics-varscopeddeclarations.html\">13.2.12</a>, <a href=\"/sec/sec-variable-statement-static-semantics-varscopeddeclarations.html\">13.3.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-varscopeddeclarations.html\">13.6.6</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-varscopeddeclarations.html\">13.7.2.5</a>, <a href=\"/sec/sec-while-statement-static-semantics-varscopeddeclarations.html\">13.7.3.5</a>, <a href=\"/sec/sec-for-statement-static-semantics-varscopeddeclarations.html\">13.7.4.6</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations.html\">13.7.5.8</a>, <a href=\"/sec/sec-with-statement-static-semantics-varscopeddeclarations.html\">13.11.6</a>, <a href=\"/sec/sec-switch-statement-static-semantics-varscopeddeclarations.html\">13.12.8</a>, <a href=\"/sec/sec-try-statement-static-semantics-varscopeddeclarations.html\">13.15.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-varscopeddeclarations.html\">14.1.16</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-varscopeddeclarations.html\">14.2.13</a>, <a href=\"/sec/sec-scripts-static-semantics-varscopeddeclarations.html\">15.1.6</a>, <a href=\"/sec/sec-module-semantics-static-semantics-varscopeddeclarations.html\">15.2.1.14</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">LabelledStatement</span> <span class=\"geq\">:</span> <span class=\"nt\">LabelIdentifier</span> <code class=\"t\">:</code> <span class=\"nt\">LabelledItem</span></div>\n      <ol class=\"proc\">\n        <li>Return the VarScopedDeclarations of <i>LabelledItem</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">LabelledItem</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionDeclaration</span></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-labelled-statements-runtime-semantics-labelledevaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.13.14\"><a href=\"/sec/sec-labelled-statements-runtime-semantics-labelledevaluation.html\" title=\"link to this section\">13.13.14</a></span> Runtime Semantics: LabelledEvaluation</h1>\n\n      <p>With argument <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-runtime-semantics-labelledevaluation.html\">13.1.7</a>, <a href=\"/sec/sec-do-while-statement-runtime-semantics-labelledevaluation.html\">13.7.2.6</a>, <a href=\"/sec/sec-while-statement-runtime-semantics-labelledevaluation.html\">13.7.3.6</a>, <a href=\"/sec/sec-for-statement-runtime-semantics-labelledevaluation.html\">13.7.4.7</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation.html\">13.7.5.11</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">LabelledStatement</span> <span class=\"geq\">:</span> <span class=\"nt\">LabelIdentifier</span> <code class=\"t\">:</code> <span class=\"nt\">LabelledItem</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>label</i> be the StringValue of <i>LabelIdentifier</i>.</li>\n        <li>Append  <i>label</i> as an element of <i>labelSet</i>.</li>\n        <li>Let <i>stmtResult</i> be LabelledEvaluation of <i>LabelledItem</i> with argument <i>labelSet</i>.</li>\n        <li>If <i>stmtResult</i>.[[type]] is <span style=\"font-family: sans-serif\">break</span> and <a href=\"/sec/sec-samevalue.html\">SameValue</a>(<i>stmtResult</i>.[[target]], <i>label</i>), then\n          <ol class=\"block\">\n            <li>Let <i>stmtResult</i> be <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>stmtResult</i>.[[value]]).</li>\n          </ol>\n        </li>\n        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>stmtResult</i>).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">LabelledItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Statement</span></div>\n      <ol class=\"proc\">\n        <li>If <i>Statement</i> is either a <i>LabelledStatement</i> or a <i>BreakableStatement</i>, then\n          <ol class=\"block\">\n            <li>Return LabelledEvaluation of <i>Statement</i> with argument <i>labelSet</i>.</li>\n          </ol>\n        </li>\n        <li>Else,\n          <ol class=\"block\">\n            <li>Return the result of evaluating <i>Statement</i>.</li>\n          </ol>\n        </li>\n      </ol>\n\n      <p><span class=\"prod\"><span class=\"nt\">LabelledItem</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionDeclaration</span></span></p>\n\n      <ol class=\"proc\">\n        <li>Return the result of evaluating <i>FunctionDeclaration</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-labelled-statements-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.13.15\"><a href=\"/sec/sec-labelled-statements-runtime-semantics-evaluation.html\" title=\"link to this section\">13.13.15</a></span> Runtime Semantics: Evaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">LabelledStatement</span> <span class=\"geq\">:</span> <span class=\"nt\">LabelIdentifier</span> <code class=\"t\">:</code> <span class=\"nt\">LabelledItem</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>newLabelSet</i>  be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>Return LabelledEvaluation of <i>LabelledItem</i> with argument <i>newLabelSet</i>.</li>\n      </ol>\n    </section>\n  </section>\n\n  <section id=\"sec-throw-statement\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-13.14\"><a href=\"/sec/sec-throw-statement.html\" title=\"link to this section\">13.14</a></span> The\n          <code>throw</code> Statement</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ThrowStatement</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">throw</code> <span class=\"grhsannot\">[no <span class=\"nt\">LineTerminator</span> here]</span> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">;</code></div>\n      </div>\n    </div>\n\n    <section id=\"sec-throw-statement-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.14.1\"><a href=\"/sec/sec-throw-statement-runtime-semantics-evaluation.html\" title=\"link to this section\">13.14.1</a></span> Runtime Semantics: Evaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">ThrowStatement</span> <span class=\"geq\">:</span> <code class=\"t\">throw</code> <span class=\"nt\">Expression</span> <code class=\"t\">;</code></div>\n      <ol class=\"proc\">\n        <li>Let <i>exprRef</i> be the result of evaluating <i>Expression</i>.</li>\n        <li>Let <i>exprValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>exprValue</i>).</li>\n        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family:\n            sans-serif\">throw</span>, [[value]]: <i>exprValue</i>, [[target]]: <span style=\"font-family:\n            sans-serif\">empty</span>}.</li>\n      </ol>\n    </section>\n  </section>\n\n  <section id=\"sec-try-statement\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-13.15\"><a href=\"/sec/sec-try-statement.html\" title=\"link to this section\">13.15</a></span> The\n          <code>try</code> Statement</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">TryStatement</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">try</code> <span class=\"nt\">Block</span><sub class=\"g-params\">[?Yield, ?Return]</sub> <span class=\"nt\">Catch</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">try</code> <span class=\"nt\">Block</span><sub class=\"g-params\">[?Yield, ?Return]</sub> <span class=\"nt\">Finally</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">try</code> <span class=\"nt\">Block</span><sub class=\"g-params\">[?Yield, ?Return]</sub> <span class=\"nt\">Catch</span><sub class=\"g-params\">[?Yield, ?Return]</sub> <span class=\"nt\">Finally</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">Catch</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">catch</code> <code class=\"t\">(</code> <span class=\"nt\">CatchParameter</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">Block</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">Finally</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">finally</code> <span class=\"nt\">Block</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">CatchParameter</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">BindingIdentifier</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">BindingPattern</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> The <code>try</code> statement encloses a block of code in which an exceptional condition\n        can occur, such as a runtime error or a <code>throw</code> statement. The <code>catch</code> clause provides the\n        exception-handling code. When a catch clause catches an exception, its <span class=\"nt\">CatchParameter</span> is bound to\n        that exception.</p>\n      </div>\n    </div>\n\n    <section id=\"sec-try-statement-static-semantics-early-errors\">\n      <h1><span class=\"secnum\" id=\"sec-13.15.1\"><a href=\"/sec/sec-try-statement-static-semantics-early-errors.html\" title=\"link to this section\">13.15.1</a></span> Static Semantics:  Early Errors</h1>\n      <div class=\"gp prod\"><span class=\"nt\">Catch</span> <span class=\"geq\">:</span> <code class=\"t\">catch</code> <code class=\"t\">(</code> <span class=\"nt\">CatchParameter</span> <code class=\"t\">)</code> <span class=\"nt\">Block</span></div>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if BoundNames <span style=\"font-family: Times New Roman\">of <i>CatchParameter</i></span>\n          contains any duplicate elements.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if any element of the BoundNames of <span class=\"nt\">CatchParameter</span> also occurs in the\n          LexicallyDeclaredNames of <span class=\"nt\">Block</span>.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if any element of the BoundNames of <span class=\"nt\">CatchParameter</span> also occurs in the\n          VarDeclaredNames of <span class=\"nt\">Block</span>.</p>\n        </li>\n      </ul>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> An alternative static semantics for this production is given in <a href=\"/sec/sec-variablestatements-in-catch-blocks.html\">B.3.5</a>.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-try-statement-static-semantics-containsduplicatelabels\">\n      <h1><span class=\"secnum\" id=\"sec-13.15.2\"><a href=\"/sec/sec-try-statement-static-semantics-containsduplicatelabels.html\" title=\"link to this section\">13.15.2</a></span> Static Semantics: ContainsDuplicateLabels</h1>\n\n      <p>With argument <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsduplicatelabels.html\">13.1.1</a>, <a href=\"/sec/sec-block-static-semantics-containsduplicatelabels.html\">13.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsduplicatelabels.html\">13.6.2</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsduplicatelabels.html\">13.7.2.1</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsduplicatelabels.html\">13.7.3.1</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsduplicatelabels.html\">13.7.4.2</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels.html\">13.7.5.3</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsduplicatelabels.html\">13.11.2</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsduplicatelabels.html\">13.12.2</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsduplicatelabels.html\">13.13.2</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsduplicatelabels.html\">15.2.1.2</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Catch</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasDuplicates</i> be ContainsDuplicateLabels of <i>Block</i> with argument <i>labelSet</i>.</li>\n        <li>If <i>hasDuplicates</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsDuplicateLabels of <i>Catch</i> with argument <i>labelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Finally</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasDuplicates</i> be ContainsDuplicateLabels of <i>Block</i> with argument <i>labelSet</i>.</li>\n        <li>If <i>hasDuplicates</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsDuplicateLabels of <i>Finally</i> with argument <i>labelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Catch</span> <span class=\"nt\">Finally</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasDuplicates</i> be ContainsDuplicateLabels of <i>Block</i> with argument <i>labelSet</i>.</li>\n        <li>If <i>hasDuplicates</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Let <i>hasDuplicates</i> be ContainsDuplicateLabels of <i>Catch</i> with argument <i>labelSet</i>.</li>\n        <li>If <i>hasDuplicates</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsDuplicateLabels of <i>Finally</i> with argument <i>labelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">Catch</span> <span class=\"geq\">:</span> <code class=\"t\">catch</code> <code class=\"t\">(</code> <span class=\"nt\">CatchParameter</span> <code class=\"t\">)</code> <span class=\"nt\">Block</span></div>\n      <ol class=\"proc\">\n        <li>Return ContainsDuplicateLabels of <i>Block</i> with argument <i>labelSet.</i></li>\n      </ol>\n    </section>\n\n    <section id=\"sec-try-statement-static-semantics-containsundefinedbreaktarget\">\n      <h1><span class=\"secnum\" id=\"sec-13.15.3\"><a href=\"/sec/sec-try-statement-static-semantics-containsundefinedbreaktarget.html\" title=\"link to this section\">13.15.3</a></span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n\n      <p>With argument <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedbreaktarget.html\">13.1.2</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedbreaktarget.html\">13.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedbreaktarget.html\">13.6.3</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.2.2</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.3.2</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.4.3</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget.html\">13.7.5.4</a>, <a href=\"/sec/sec-break-statement-static-semantics-containsundefinedbreaktarget.html\">13.9.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedbreaktarget.html\">13.11.3</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedbreaktarget.html\">13.12.3</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedbreaktarget.html\">13.13.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedbreaktarget.html\">15.2.1.3</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Catch</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedBreakTarget of <i>Block</i> with argument <i>labelSet</i>.</li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsUndefinedBreakTarget of <i>Catch</i> with argument <i>labelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Finally</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedBreakTarget of <i>Block</i> with argument <i>labelSet</i>.</li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsUndefinedBreakTarget of <i>Finally</i> with argument <i>labelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Catch</span> <span class=\"nt\">Finally</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedBreakTarget of <i>Block</i> with argument <i>labelSet</i>.</li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedBreakTarget of <i>Catch</i> with argument <i>labelSet</i>.</li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsUndefinedBreakTarget of <i>Finally</i> with argument <i>labelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">Catch</span> <span class=\"geq\">:</span> <code class=\"t\">catch</code> <code class=\"t\">(</code> <span class=\"nt\">CatchParameter</span> <code class=\"t\">)</code> <span class=\"nt\">Block</span></div>\n      <ol class=\"proc\">\n        <li>Return ContainsUndefinedBreakTarget of <i>Block</i> with argument <i>labelSet.</i></li>\n      </ol>\n    </section>\n\n    <section id=\"sec-try-statement-static-semantics-containsundefinedcontinuetarget\">\n      <h1><span class=\"secnum\" id=\"sec-13.15.4\"><a href=\"/sec/sec-try-statement-static-semantics-containsundefinedcontinuetarget.html\" title=\"link to this section\">13.15.4</a></span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n\n      <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedcontinuetarget.html\">13.1.3</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedcontinuetarget.html\">13.2.4</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedcontinuetarget.html\">13.6.4</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.2.3</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.3.3</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.4.4</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget.html\">13.7.5.5</a>, <a href=\"/sec/sec-continue-statement-static-semantics-containsundefinedcontinuetarget.html\">13.8.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedcontinuetarget.html\">13.11.4</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedcontinuetarget.html\">13.12.4</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedcontinuetarget.html\">13.13.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedcontinuetarget.html\">15.2.1.4</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Catch</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedContinueTarget of <i>Block</i> with arguments <i>iterationSet</i>\n            and &#xAB;&#xA0;&#xBB;.</li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsUndefinedContinueTarget of <i>Catch</i> with arguments <i>iterationSet</i> and\n            &#xAB;&#xA0;&#xBB;<i>.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Finally</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedContinueTarget of <i>Block</i> with arguments <i>iterationSet</i>\n            and &#xAB;&#xA0;&#xBB;.</li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsUndefinedContinueTarget of <i>Finally</i> with arguments <i>iterationSet</i> and\n            &#xAB;&#xA0;&#xBB;<i>.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Catch</span> <span class=\"nt\">Finally</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedContinueTarget of <i>Block</i> with arguments <i>iterationSet</i>\n            and &#xAB;&#xA0;&#xBB;.</li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedContinueTarget of <i>Catch</i> with arguments <i>iterationSet</i>\n            and &#xAB;&#xA0;&#xBB;.</li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsUndefinedContinueTarget of <i>Finally</i> with arguments <i>iterationSet</i> and\n            &#xAB;&#xA0;&#xBB;<i>.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">Catch</span> <span class=\"geq\">:</span> <code class=\"t\">catch</code> <code class=\"t\">(</code> <span class=\"nt\">CatchParameter</span> <code class=\"t\">)</code> <span class=\"nt\">Block</span></div>\n      <ol class=\"proc\">\n        <li>Return ContainsUndefinedContinueTarget of <i>Block</i> with arguments <i>iterationSet</i> and\n            &#xAB;&#xA0;&#xBB;<i>.</i></li>\n      </ol>\n    </section>\n\n    <section id=\"sec-try-statement-static-semantics-vardeclarednames\">\n      <h1><span class=\"secnum\" id=\"sec-13.15.5\"><a href=\"/sec/sec-try-statement-static-semantics-vardeclarednames.html\" title=\"link to this section\">13.15.5</a></span> Static Semantics:  VarDeclaredNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-vardeclarednames.html\">13.1.5</a>, <a href=\"/sec/sec-block-static-semantics-vardeclarednames.html\">13.2.11</a>, <a href=\"/sec/sec-variable-statement-static-semantics-vardeclarednames.html\">13.3.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-vardeclarednames.html\">13.6.5</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-vardeclarednames.html\">13.7.2.4</a>, <a href=\"/sec/sec-while-statement-static-semantics-vardeclarednames.html\">13.7.3.4</a>, <a href=\"/sec/sec-for-statement-static-semantics-vardeclarednames.html\">13.7.4.5</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-vardeclarednames.html\">13.7.5.7</a>, <a href=\"/sec/sec-with-statement-static-semantics-vardeclarednames.html\">13.11.5</a>, <a href=\"/sec/sec-switch-statement-static-semantics-vardeclarednames.html\">13.12.7</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-vardeclarednames.html\">13.13.12</a>, <a href=\"/sec/sec-function-definitions-static-semantics-vardeclarednames.html\">14.1.15</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-vardeclarednames.html\">14.2.12</a>, <a href=\"/sec/sec-scripts-static-semantics-vardeclarednames.html\">15.1.5</a>, <a href=\"/sec/sec-module-semantics-static-semantics-vardeclarednames.html\">15.2.1.13</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Catch</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>names</i> be VarDeclaredNames of <i>Block</i>.</li>\n        <li>Append to <i>names</i> the elements of the VarDeclaredNames of <i>Catch.</i></li>\n        <li>Return <i>names</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Finally</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>names</i> be VarDeclaredNames of <i>Block</i>.</li>\n        <li>Append to <i>names</i> the elements of the VarDeclaredNames of <i>Finally.</i></li>\n        <li>Return <i>names</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Catch</span> <span class=\"nt\">Finally</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>names</i> be VarDeclaredNames of <i>Block</i>.</li>\n        <li>Append to <i>names</i> the elements of the VarDeclaredNames of <i>Catch.</i></li>\n        <li>Append to <i>names</i> the elements of the VarDeclaredNames of <i>Finally.</i></li>\n        <li>Return <i>names</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">Catch</span> <span class=\"geq\">:</span> <code class=\"t\">catch</code> <code class=\"t\">(</code> <span class=\"nt\">CatchParameter</span> <code class=\"t\">)</code> <span class=\"nt\">Block</span></div>\n      <ol class=\"proc\">\n        <li>Return the VarDeclaredNames of <i>Block</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-try-statement-static-semantics-varscopeddeclarations\">\n      <h1><span class=\"secnum\" id=\"sec-13.15.6\"><a href=\"/sec/sec-try-statement-static-semantics-varscopeddeclarations.html\" title=\"link to this section\">13.15.6</a></span> Static Semantics:  VarScopedDeclarations</h1>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-varscopeddeclarations.html\">13.1.6</a>, <a href=\"/sec/sec-block-static-semantics-varscopeddeclarations.html\">13.2.12</a>, <a href=\"/sec/sec-variable-statement-static-semantics-varscopeddeclarations.html\">13.3.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-varscopeddeclarations.html\">13.6.6</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-varscopeddeclarations.html\">13.7.2.5</a>, <a href=\"/sec/sec-while-statement-static-semantics-varscopeddeclarations.html\">13.7.3.5</a>, <a href=\"/sec/sec-for-statement-static-semantics-varscopeddeclarations.html\">13.7.4.6</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations.html\">13.7.5.8</a>, <a href=\"/sec/sec-with-statement-static-semantics-varscopeddeclarations.html\">13.11.6</a>, <a href=\"/sec/sec-switch-statement-static-semantics-varscopeddeclarations.html\">13.12.8</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-varscopeddeclarations.html\">13.13.13</a>, <a href=\"/sec/sec-function-definitions-static-semantics-varscopeddeclarations.html\">14.1.16</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-varscopeddeclarations.html\">14.2.13</a>, <a href=\"/sec/sec-scripts-static-semantics-varscopeddeclarations.html\">15.1.6</a>, <a href=\"/sec/sec-module-semantics-static-semantics-varscopeddeclarations.html\">15.2.1.14</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Catch</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>declarations</i> be VarScopedDeclarations of <i>Block</i>.</li>\n        <li>Append to <i>declarations</i> the elements of the VarScopedDeclarations of <i>Catch.</i></li>\n        <li>Return <i>declarations</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Finally</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>declarations</i> be VarScopedDeclarations of <i>Block</i>.</li>\n        <li>Append to <i>declarations</i> the elements of the VarScopedDeclarations of <i>Finally.</i></li>\n        <li>Return <i>declarations</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Catch</span> <span class=\"nt\">Finally</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>declarations</i> be VarScopedDeclarations of <i>Block</i>.</li>\n        <li>Append to <i>declarations</i> the elements of the VarScopedDeclarations of <i>Catch.</i></li>\n        <li>Append to <i>declarations</i> the elements of the VarScopedDeclarations of <i>Finally.</i></li>\n        <li>Return <i>declarations</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">Catch</span> <span class=\"geq\">:</span> <code class=\"t\">catch</code> <code class=\"t\">(</code> <span class=\"nt\">CatchParameter</span> <code class=\"t\">)</code> <span class=\"nt\">Block</span></div>\n      <ol class=\"proc\">\n        <li>Return the VarScopedDeclarations of <i>Block</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-runtime-semantics-catchclauseevaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.15.7\"><a href=\"/sec/sec-runtime-semantics-catchclauseevaluation.html\" title=\"link to this section\">13.15.7</a></span> Runtime Semantics: CatchClauseEvaluation</h1>\n\n      <p>with parameter <var>thrownValue</var></p>\n\n      <div class=\"gp prod\"><span class=\"nt\">Catch</span> <span class=\"geq\">:</span> <code class=\"t\">catch</code> <code class=\"t\">(</code> <span class=\"nt\">CatchParameter</span> <code class=\"t\">)</code> <span class=\"nt\">Block</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>oldEnv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n        <li>Let <i>catchEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>oldEnv</i>).</li>\n        <li>For each element <i>argName</i> of the BoundNames of <i>CatchParameter</i>, do\n          <ol class=\"block\">\n            <li>Perform <i>catchEnv</i>.CreateMutableBinding(<i>argName</i>).</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: The above call to CreateMutableBinding will never return an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n          </ol>\n        </li>\n        <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>catchEnv</i>.</li>\n        <li>Let <i>status</i> be the result of performing BindingInitialization for <i>CatchParameter</i> passing\n            <i>thrownValue</i> and <i>catchEnv</i> as arguments.</li>\n        <li>If <i>status</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n          <ol class=\"block\">\n            <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n            <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>status</i>).</li>\n          </ol>\n        </li>\n        <li>Let <i>B</i> be the result of evaluating <i>Block</i>.</li>\n        <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>B</i>).</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> No matter how control leaves the <span class=\"nt\">Block</span> the <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> is always restored to its former state.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-try-statement-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.15.8\"><a href=\"/sec/sec-try-statement-runtime-semantics-evaluation.html\" title=\"link to this section\">13.15.8</a></span> Runtime Semantics: Evaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Catch</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>B</i> be the result of evaluating <i>Block</i>.</li>\n        <li>If <i>B</i>.[[type]] is <span style=\"font-family: sans-serif\">throw</span>, then\n          <ol class=\"block\">\n            <li>Let <i>C</i> be CatchClauseEvaluation of <i>Catch</i> with parameter <i>B</i>.[[value]].</li>\n          </ol>\n        </li>\n        <li>Else <i>B</i>.[[type]] is not <span style=\"font-family: sans-serif\">throw</span><b>,</b>\n          <ol class=\"block\">\n            <li>Let <i>C</i> be <i>B</i>.</li>\n          </ol>\n        </li>\n        <li>If <i>C</i>.[[type]] is <span style=\"font-family: sans-serif\">return</span>, or <i>C</i>.[[type]] is <span style=\"font-family: sans-serif\">throw</span>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>C</i>).</li>\n        <li>If <i>C</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>C</i>).</li>\n        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <i>C</i>.[[type]], [[value]]:\n            <b>undefined</b>, [[target]]: <i>C</i>.[[target]]}.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Finally</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>B</i> be the result of evaluating <i>Block</i>.</li>\n        <li>Let <i>F</i> be the result of evaluating <i>Finally</i>.</li>\n        <li>If <i>F</i>.[[type]] is <span style=\"font-family: sans-serif\">normal</span>, let <i>F</i> be <i>B.</i></li>\n        <li>If <i>F</i>.[[type]] is <span style=\"font-family: sans-serif\">return</span>, or <i>F</i>.[[type]] is <span style=\"font-family: sans-serif\">throw</span>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>F</i>).</li>\n        <li>If <i>F</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>F</i>).</li>\n        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <i>F</i>.[[type]], [[value]]:\n            <b>undefined</b>, [[target]]: <i>F</i>.[[target]]}.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Catch</span> <span class=\"nt\">Finally</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>B</i> be the result of evaluating <i>Block</i>.</li>\n        <li>If <i>B</i>.[[type]] is <span style=\"font-family: sans-serif\">throw</span>, then\n          <ol class=\"block\">\n            <li>Let <i>C</i> be CatchClauseEvaluation of <i>Catch</i> with parameter <i>B</i>.[[value]].</li>\n          </ol>\n        </li>\n        <li>Else <i>B</i>.[[type]] is not <span style=\"font-family: sans-serif\">throw</span><b>,</b> let <i>C</i> be\n            <i>B</i>.</li>\n        <li>Let <i>F</i> be the result of evaluating <i>Finally</i>.</li>\n        <li>If <i>F</i>.[[type]] is <span style=\"font-family: sans-serif\">normal</span>, let <i>F</i> be <i>C</i>.</li>\n        <li>If <i>F</i>.[[type]] is <span style=\"font-family: sans-serif\">return</span>, or <i>F</i>.[[type]] is <span style=\"font-family: sans-serif\">throw</span>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>F</i>).</li>\n        <li>If <i>F</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>F</i>.[[value]]).</li>\n        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <i>F</i>.[[type]], [[value]]:\n            <b>undefined</b>, [[target]]: <i>F</i>.[[target]]}.</li>\n      </ol>\n    </section>\n  </section>\n\n  <section id=\"sec-debugger-statement\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-13.16\"><a href=\"/sec/sec-debugger-statement.html\" title=\"link to this section\">13.16</a></span> The\n          <code>debugger</code> statement</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">DebuggerStatement</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">debugger</code> <code class=\"t\">;</code></div>\n      </div>\n    </div>\n\n    <section id=\"sec-debugger-statement-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.16.1\"><a href=\"/sec/sec-debugger-statement-runtime-semantics-evaluation.html\" title=\"link to this section\">13.16.1</a></span> Runtime Semantics: Evaluation</h1>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> Evaluating the <span class=\"nt\">DebuggerStatement</span> production may allow an\n        implementation to cause a breakpoint when run under a debugger. If a debugger is not present or active this statement has\n        no observable effect.</p>\n      </div>\n\n      <div class=\"gp prod\"><span class=\"nt\">DebuggerStatement</span> <span class=\"geq\">:</span> <code class=\"t\">debugger</code> <code class=\"t\">;</code></div>\n      <ol class=\"proc\">\n        <li>If an implementation defined debugging facility is available and enabled, then\n          <ol class=\"block\">\n            <li>Perform an implementation defined debugging action.</li>\n            <li>Let <i>result</i> be an implementation defined <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>\n                value.</li>\n          </ol>\n        </li>\n        <li>Else\n          <ol class=\"block\">\n            <li>Let <i>result</i> be <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family:\n                sans-serif\">empty</span>).</li>\n          </ol>\n        </li>\n        <li>Return <i>result.</i></li>\n      </ol>\n    </section>\n  </section>\n"}