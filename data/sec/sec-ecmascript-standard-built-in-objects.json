{"id":"sec-ecmascript-standard-built-in-objects","html":"\n  <h1><span class=\"secnum\" id=\"sec-17\"><a href=\"/sec/sec-ecmascript-standard-built-in-objects.html\" title=\"link to this section\">17</a></span> ECMAScript Standard Built-in Objects</h1>\n\n  <p>There are certain built-in objects available whenever an ECMAScript <span class=\"nt\">Script</span> or <span class=\"nt\">Module</span> begins execution. One, the global object, is part of the <a href=\"/sec/sec-lexical-environments.html\">lexical\n  environment</a> of the executing program. Others are accessible as initial properties of the global object or indirectly as\n  properties of accessible built-in objects.</p>\n\n  <p>Unless specified otherwise, a built-in object that is callable as a function is a built-in Function object with the\n  characteristics described in <a href=\"/sec/sec-built-in-function-objects.html\">9.3</a>. Unless specified otherwise, the [[Extensible]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of a built-in object initially has the value\n  <b>true</b>. Every built-in Function object has a [[Realm]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n  slot</a> whose value is the code <a href=\"/sec/sec-code-realms.html\">Realm</a> for which the object was initially created.</p>\n\n  <p>Many built-in objects are functions: they can be invoked with arguments. Some of them furthermore are constructors: they are\n  functions intended for use with the <code>new</code> operator. For each built-in function, this specification describes the\n  arguments required by that function and the properties of that function object. For each built-in constructor, this\n  specification furthermore describes properties of the prototype object of that constructor and properties of specific object\n  instances returned by a <code>new</code> expression that invokes that constructor.</p>\n\n  <p>Unless otherwise specified in the description of a particular function, if a built-in function or constructor is given fewer\n  arguments than the function is specified to require, the function or constructor shall behave exactly as if it had been given\n  sufficient additional arguments, each such argument being the <b>undefined</b> value. Such missing arguments are considered to\n  be &#x201C;not present&#x201D; and may be identified in that manner by specification algorithms. In the description of a\n  particular function, the terms &#x201C;<code>this</code> <span style=\"font-family: Times New Roman\">value</span>&#x201D; and\n  &#x201C;<span style=\"font-family: Times New Roman\">NewTarget</span>&#x201D; have the meanings given in <a href=\"/sec/sec-built-in-function-objects.html\">9.3</a>.</p>\n\n  <p>Unless otherwise specified in the description of a particular function, if a built-in function or constructor described is\n  given more arguments than the function is specified to allow, the extra arguments are evaluated by the call and then ignored by\n  the function. However, an implementation may define implementation specific behaviour relating to such arguments as long as the\n  behaviour is not the throwing of a <b>TypeError</b> exception that is predicated simply on the presence of an extra\n  argument.</p>\n\n  <div class=\"note\">\n    <p><span class=\"nh\">NOTE 1</span> Implementations that add additional capabilities to the set of built-in functions are\n    encouraged to do so by adding new functions rather than adding new parameters to existing functions.</p>\n  </div>\n\n  <p>Unless otherwise specified every built-in function and every built-in constructor has the Function prototype object, which is\n  the initial value of the expression <code>Function.prototype</code> (<a href=\"/sec/sec-properties-of-the-function-prototype-object.html\">19.2.3</a>), as the value of its [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</p>\n\n  <p>Unless otherwise specified every built-in prototype object has the Object prototype object, which is the initial value of the\n  expression <code>Object.prototype</code> (<a href=\"/sec/sec-properties-of-the-object-prototype-object.html\">19.1.3</a>), as the value of\n  its [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>, except the Object prototype\n  object itself.</p>\n\n  <p>Built-in function objects that are not identified as constructors do not implement the [[Construct]] internal method unless\n  otherwise specified in the description of a particular function.</p>\n\n  <p>Unless otherwise specified, each built-in function defined in this specification is created as if by calling the <a href=\"/sec/sec-createbuiltinfunction.html\">CreateBuiltinFunction</a> abstract operation (<a href=\"/sec/sec-createbuiltinfunction.html\">9.3.3</a>).</p>\n\n  <p>Every built-in Function object, including constructors, has a <code>length</code> property whose value is an integer. Unless\n  otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the\n  function description, including optional parameters. However, rest parameters shown using the form &#x201C;...name&#x201D; are not\n  included in the default argument count.</p>\n\n  <div class=\"note\">\n    <p><span class=\"nh\">NOTE 2</span> For example, the function object that is the initial value of the <code>slice</code>\n    property of the String prototype object is described under the subclause heading &#x201C;<a href=\"/sec/sec-string.prototype.slice.html\">String.prototype.slice</a> (start, end)&#x201D; which shows the two named arguments start\n    and end; therefore the value of the <code>length</code> property of that Function object is <code>2</code>.</p>\n  </div>\n\n  <p>Unless otherwise specified, the <code>length</code> property of a built-in Function object has the attributes\n  {&#xA0;[[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]: <b>true</b> }.</p>\n\n  <p>Every built-in Function object, including constructors, that is not identified as an anonymous function has a\n  <code>name</code> property whose value is a String. Unless otherwise specified, this value is the name that is given to the\n  function in this specification. For functions that are specified as properties of objects, the name value is the property name\n  string used to access the function. Functions that are specified as get or set accessor functions of built-in properties have\n  <code>&quot;get &quot;</code> or <code>&quot;set &quot;</code> prepended to the property name string. The value of the <code>name</code> property is\n  explicitly specified for each built-in functions whose <a href=\"/sec/sec-object-type.html\">property key</a> is a Symbol value.</p>\n\n  <p>Unless otherwise specified, the <code>name</code> property of a built-in Function object, if it exists,  has the attributes\n  {&#xA0;[[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]: <b>true</b> }.</p>\n\n  <p>Every other data property described in clauses 18 through 26 and in <a href=\"/sec/sec-additional-built-in-properties.html\">Annex B.2</a> has the attributes {\n  [[Writable]]: <b>true</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]: <b>true</b> } unless otherwise specified.</p>\n\n  <p>Every accessor property described in clauses 18 through 26 and in <a href=\"/sec/sec-additional-built-in-properties.html\">Annex B.2</a> has the attributes\n  {[[Enumerable]]: <b>false</b>, [[Configurable]]: <b>true</b> } unless otherwise specified. If only a get accessor function is\n  described, the set accessor function is the default value, <b>undefined</b>. If only a set accessor is described the get\n  accessor is the default value, <b>undefined</b>.</p>\n"}