{"id":"sec-escaperegexppattern","html":"\n          <h1><span class=\"secnum\" id=\"sec-21.2.3.2.4\"><a href=\"/sec/sec-escaperegexppattern.html\" title=\"link to this section\">21.2.3.2.4</a></span> Runtime Semantics: EscapeRegExpPattern ( P, F )</h1>\n\n          <p>When the abstract operation EscapeRegExpPattern with arguments <var>P</var> and <var>F</var> is called, the following\n          occurs:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>S</i> be a String in the form of a <i>Pattern</i> (<i>Pattern</i><sub>[U]</sub> if <i>F</i> contains\n                <code>&quot;u&quot;</code><span style=\"font-family: sans-serif\">)</span> equivalent to <i>P</i> interpreted as UTF-16\n                encoded Unicode code points (<a href=\"/sec/sec-ecmascript-language-types-string-type.html\">6.1.4</a>), in which certain\n                code points are escaped as described below. <i>S</i> may or may not be identical to <i>P</i>; however, the\n                internal procedure that would result from evaluating <i>S</i> as a <i>Pattern</i> (<i>Pattern</i><sub>[U]</sub> if\n                <i>F</i> contains <code>&quot;u&quot;</code><span style=\"font-family: sans-serif\">)</span> must behave identically to the\n                internal procedure given by the constructed object&apos;s [[RegExpMatcher]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>. Multiple calls to this abstract\n                operation using the same values for <i>P</i> and <i>F</i> must produce identical results.</li>\n            <li>The code points <code>/</code> or any <i>LineTerminator</i> occurring in the pattern shall be escaped in <i>S</i>\n                as necessary to ensure that the String value formed by concatenating the Strings <code>&quot;/&quot;</code>, <i>S</i>,\n                <code>&quot;/&quot;</code>, and <i>F</i> can be parsed (in an appropriate lexical context) as a\n                <i>RegularExpressionLiteral</i> that behaves identically to the constructed regular expression. For example, if\n                <i>P</i> is <code>&quot;/&quot;</code>, then <i>S</i> could be <code>&quot;\\/&quot;</code> or <code>&quot;\\u002F&quot;</code>, among other\n                possibilities, but not <code>&quot;/&quot;</code>, because <code>///</code> followed by <i>F</i> would be parsed as a\n                <i>SingleLineComment</i> rather than a <i>RegularExpressionLiteral</i>. If <i>P</i> is the empty String, this\n                specification can be met by letting <i>S</i> be <code>&quot;(?:)&quot;</code>.</li>\n            <li>Return <i>S</i>.</li>\n          </ol>\n        "}