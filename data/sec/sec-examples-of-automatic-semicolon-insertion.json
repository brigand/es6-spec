{"id":"sec-examples-of-automatic-semicolon-insertion","html":"\n      <h1><span class=\"secnum\" id=\"sec-11.9.2\"><a href=\"/sec/sec-examples-of-automatic-semicolon-insertion.html\" title=\"link to this section\">11.9.2</a></span> Examples of Automatic Semicolon Insertion</h1>\n\n      <p>The source</p>\n\n      <pre class=\"NoteCode\">{ 1 2 } 3</pre>\n\n      <p>is not a valid sentence in the ECMAScript grammar, even with the <a href=\"/sec/sec-automatic-semicolon-insertion.html\">automatic\n      semicolon insertion</a> rules. In contrast, the source</p>\n\n      <pre class=\"NoteCode\">{ 1<br>2 } 3</pre>\n\n      <p>is also not a valid ECMAScript sentence, but is transformed by <a href=\"/sec/sec-automatic-semicolon-insertion.html\">automatic\n      semicolon insertion</a> into the following:</p>\n\n      <pre class=\"NoteCode\">{ 1<br>;2 ;} 3;</pre>\n\n      <p>which is a valid ECMAScript sentence.</p>\n\n      <p>The source</p>\n\n      <pre class=\"NoteCode\">for (a; b<br>)</pre>\n\n      <p>is not a valid ECMAScript sentence and is not altered by <a href=\"/sec/sec-automatic-semicolon-insertion.html\">automatic semicolon\n      insertion</a> because the semicolon is needed for the header of a <code>for</code> statement. Automatic semicolon insertion\n      never inserts one of the two semicolons in the header of a <code>for</code> statement.</p>\n\n      <p>The source</p>\n\n      <pre class=\"NoteCode\">return<br>a + b</pre>\n\n      <p>is transformed by <a href=\"/sec/sec-automatic-semicolon-insertion.html\">automatic semicolon insertion</a> into the following:</p>\n\n      <pre class=\"NoteCode\">return;<br>a + b;</pre>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE 1</span> The expression <code>a + b</code> is not treated as a value to be returned by the\n        <code>return</code> statement, because a <span class=\"nt\">LineTerminator</span> separates it from the token\n        <code>return</code>.</p>\n      </div>\n\n      <p>The source</p>\n\n      <pre class=\"NoteCode\">a = b<br>++c</pre>\n\n      <p>is transformed by <a href=\"/sec/sec-automatic-semicolon-insertion.html\">automatic semicolon insertion</a> into the following:</p>\n\n      <pre class=\"NoteCode\">a = b;<br>++c;</pre>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE 2</span> The token <code>++</code> is not treated as a postfix operator applying to the variable\n        <code>b</code>, because a <span class=\"nt\">LineTerminator</span> occurs between <code>b</code> and <code>++</code>.</p>\n      </div>\n\n      <p>The source</p>\n\n      <pre class=\"NoteCode\">if (a &gt; b)<br>else c = d</pre>\n\n      <p>is not a valid ECMAScript sentence and is not altered by <a href=\"/sec/sec-automatic-semicolon-insertion.html\">automatic semicolon\n      insertion</a> before the <code>else</code> token, even though no production of the grammar applies at that point, because an\n      automatically inserted semicolon would then be parsed as an empty statement.</p>\n\n      <p>The source</p>\n\n      <pre class=\"NoteCode\">a = b + c<br>(d + e).print()</pre>\n\n      <p>is <i>not</i> transformed by <a href=\"/sec/sec-automatic-semicolon-insertion.html\">automatic semicolon insertion</a>, because the\n      parenthesized expression that begins the second line can be interpreted as an argument list for a function call:</p>\n\n      <pre class=\"NoteCode\">a = b + c(d + e).print()</pre>\n\n      <p>In the circumstance that an assignment statement must begin with a left parenthesis, it is a good idea for the programmer\n      to provide an explicit semicolon at the end of the preceding statement rather than to rely on <a href=\"/sec/sec-automatic-semicolon-insertion.html\">automatic semicolon insertion</a>.</p>\n    "}