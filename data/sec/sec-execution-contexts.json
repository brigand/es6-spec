{"id":"sec-execution-contexts","html":"\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-8.3\"><a href=\"/sec/sec-execution-contexts.html\" title=\"link to this section\">8.3</a></span>\n          Execution Contexts</h1>\n\n      <p>An <i>execution context</i> is a specification device that is used to track the runtime evaluation of code by an\n      ECMAScript implementation. At any point in time, there is at most one execution context that is actually executing code.\n      This is known as the <i>running</i> execution context. A stack is used to track execution contexts. The running execution\n      context is always the top element of this stack. A new execution context is created whenever control is transferred from the\n      executable code associated with the currently running execution context to executable code that is not associated with that\n      execution context. The newly created execution context is pushed onto the stack and becomes the running execution\n      context.</p>\n\n      <p>An execution context contains whatever implementation specific state is necessary to track the execution progress of its\n      associated code. Each execution context has at least the state components listed in <a href=\"/sec/table-22.html\">Table 22</a>.</p>\n\n      <figure>\n        <figcaption><span id=\"table-22\">Table 22</span> &#x2014;State Components for All Execution Contexts</figcaption>\n        <table class=\"real-table\">\n          <tr>\n            <th>Component</th>\n            <th>Purpose</th>\n          </tr>\n          <tr>\n            <td>code evaluation state</td>\n            <td>Any state needed to perform, suspend, and resume evaluation of the code associated with this execution context.</td>\n          </tr>\n          <tr>\n            <td>Function</td>\n            <td>If this execution context is evaluating the code of a function object, then the value of this component is that function object. If the context is evaluating the code of a <span class=\"nt\">Script</span> or <span class=\"nt\">Module</span>, the value is <span class=\"value\">null</span>.</td>\n          </tr>\n          <tr>\n            <td><a href=\"/sec/sec-code-realms.html\">Realm</a></td>\n            <td>The <a href=\"/sec/sec-code-realms.html\">Realm</a> from which associated code accesses ECMAScript resources.</td>\n          </tr>\n        </table>\n      </figure>\n\n      <p>Evaluation of code by the running execution context may be suspended at various points defined within this specification.\n      Once the running execution context has been suspended a different execution context may become the running execution context\n      and commence evaluating its code. At some later time a suspended execution context may again become the running execution\n      context and continue evaluating its code at the point where it had previously been suspended. Transition of the running\n      execution context status among execution contexts usually occurs in stack-like last-in/first-out manner. However, some\n      ECMAScript features require non-LIFO transitions of the running execution context.</p>\n\n      <p>The value of the <a href=\"/sec/sec-code-realms.html\">Realm</a> component of the running execution context is also called the\n      <i>current <a href=\"/sec/sec-code-realms.html\">Realm</a></i>. The value of the Function component of the running execution context is\n      also called the <i>active function object.</i></p>\n\n      <p>Execution contexts for ECMAScript code have the additional state components listed in <a href=\"/sec/table-23.html\">Table\n      23</a>.</p>\n\n      <figure>\n        <figcaption><span id=\"table-23\">Table 23</span> &#x2014; Additional State Components for ECMAScript Code Execution Contexts</figcaption>\n        <table class=\"real-table\">\n          <tr>\n            <th>Component</th>\n            <th>Purpose</th>\n          </tr>\n          <tr>\n            <td>LexicalEnvironment</td>\n            <td>Identifies the <a href=\"/sec/sec-lexical-environments.html\">Lexical Environment</a> used to resolve identifier references made by code within this execution context.</td>\n          </tr>\n          <tr>\n            <td>VariableEnvironment</td>\n            <td>Identifies the <a href=\"/sec/sec-lexical-environments.html\">Lexical Environment</a> whose <a href=\"/sec/sec-lexical-environments.html\">EnvironmentRecord</a> holds bindings created by <span class=\"nt\">VariableStatements</span> within this execution context.</td>\n          </tr>\n        </table>\n      </figure>\n\n      <p>The LexicalEnvironment and VariableEnvironment components of an execution context are always Lexical Environments. When\n      an execution context is created its LexicalEnvironment and VariableEnvironment components initially have the same value.</p>\n\n      <p>Execution contexts representing the evaluation of generator objects have the additional state components listed in <a href=\"/sec/table-24.html\">Table 24</a>.</p>\n\n      <figure>\n        <figcaption><span id=\"table-24\">Table 24</span> &#x2014; Additional State Components for Generator Execution Contexts</figcaption>\n        <table class=\"real-table\">\n          <tr>\n            <th>Component</th>\n            <th>Purpose</th>\n          </tr>\n          <tr>\n            <td>Generator</td>\n            <td>The GeneratorObject that this execution context is evaluating.</td>\n          </tr>\n        </table>\n      </figure>\n\n      <p>In most situations only the running execution context (the top of the execution context stack) is directly manipulated by\n      algorithms within this specification. Hence when the terms &#x201C;LexicalEnvironment&#x201D;, and\n      &#x201C;VariableEnvironment&#x201D; are used without qualification they are in reference to those components of the running\n      execution context.</p>\n\n      <p>An execution context is purely a specification mechanism and need not correspond to any particular artefact of an\n      ECMAScript implementation. It is impossible for ECMAScript code to directly access or observe an execution context.</p>\n    </div>\n\n    <section id=\"sec-resolvebinding\">\n      <h1><span class=\"secnum\" id=\"sec-8.3.1\"><a href=\"/sec/sec-resolvebinding.html\" title=\"link to this section\">8.3.1</a></span>\n          ResolveBinding ( name, [env] )</h1>\n\n      <p class=\"normalbefore\">The ResolveBinding abstract operation is used to determine the binding of <var>name</var> passed as\n      a String value. The optional argument <var>env</var> can be used to explicitly provide the <a href=\"/sec/sec-lexical-environments.html\">Lexical Environment</a> that is to be searched for the binding. During execution of\n      ECMAScript code, ResolveBinding is performed using the following algorithm:</p>\n\n      <ol class=\"proc\">\n        <li>If <i>env</i> was not passed or if <i>env</i> is <b>undefined</b>, then\n          <ol class=\"block\">\n            <li>Let <i>env</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n          </ol>\n        </li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <i>env</i> is a <a href=\"/sec/sec-lexical-environments.html\">Lexical\n            Environment</a>.</li>\n        <li>If the code matching the syntactic production that is being evaluated is contained in <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a>, let <i>strict</i> be <b>true</b>, else let <i>strict</i> be\n            <b>false</b>.</li>\n        <li>Return <a href=\"/sec/sec-getidentifierreference.html\">GetIdentifierReference</a>(<i>env</i>, <i>name</i>, <i>strict</i> ).</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> The result of ResolveBinding is always a <a href=\"/sec/sec-reference-specification-type.html\">Reference</a> value with its referenced name component equal to the\n        <var>name</var> argument.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-getthisenvironment\">\n      <h1><span class=\"secnum\" id=\"sec-8.3.2\"><a href=\"/sec/sec-getthisenvironment.html\" title=\"link to this section\">8.3.2</a></span>\n          GetThisEnvironment ( )</h1>\n\n      <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">GetThisEnvironment</span> finds\n      the <a href=\"/sec/sec-environment-records.html\">Environment Record</a> that currently supplies the binding of the keyword\n      <code>this</code>. <span style=\"font-family: Times New Roman\">GetThisEnvironment</span> performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>lex</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n        <li>Repeat\n          <ol class=\"block\">\n            <li>Let <i>envRec</i> be <i>lex</i>&#x2019;s <a href=\"/sec/sec-lexical-environments.html\">EnvironmentRecord</a>.</li>\n            <li>Let <i>exists</i> be <i>envRec</i>.HasThisBinding().</li>\n            <li>If <i>exists</i> is <b>true</b>, return <i>envRec</i>.</li>\n            <li>Let <i>outer</i> be the value of <i>lex&#x2019;s</i> <a href=\"/sec/sec-lexical-environments.html\">outer environment\n                reference</a>.</li>\n            <li>Let <i>lex</i> be <i>outer</i>.</li>\n          </ol>\n        </li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> The loop in step 2 will always terminate because the list of environments always ends with\n        <a href=\"/sec/sec-global-environment-records.html\">the global environment</a> which has a <code>this</code> binding.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-resolvethisbinding\">\n      <h1><span class=\"secnum\" id=\"sec-8.3.3\"><a href=\"/sec/sec-resolvethisbinding.html\" title=\"link to this section\">8.3.3</a></span>\n          ResolveThisBinding ( )</h1>\n\n      <p class=\"normalbefore\">The abstract operation ResolveThisBinding determines the binding of the keyword <code>this</code>\n      using the <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> of <a href=\"/sec/sec-execution-contexts.html\">the running\n      execution context</a>. ResolveThisBinding performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>envRec</i> be <a href=\"/sec/sec-getthisenvironment.html\">GetThisEnvironment</a>( ).</li>\n        <li>Return <i>envRec</i>.GetThisBinding().</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-getnewtarget\">\n      <h1><span class=\"secnum\" id=\"sec-8.3.4\"><a href=\"/sec/sec-getnewtarget.html\" title=\"link to this section\">8.3.4</a></span>\n          GetNewTarget ( )</h1>\n\n      <p class=\"normalbefore\">The abstract operation GetNewTarget determines the NewTarget value using the <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> of <a href=\"/sec/sec-execution-contexts.html\">the running execution\n      context</a>. GetNewTarget performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>envRec</i> be <a href=\"/sec/sec-getthisenvironment.html\">GetThisEnvironment</a>( ).</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>envRec</i> has a [[NewTarget]] field.</li>\n        <li>Return <i>envRec</i>.[[NewTarget]].</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-getglobalobject\">\n      <h1><span class=\"secnum\" id=\"sec-8.3.5\"><a href=\"/sec/sec-getglobalobject.html\" title=\"link to this section\">8.3.5</a></span>\n          GetGlobalObject ( )</h1>\n\n      <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">GetGlobalObject</span> returns the\n      global object used by <a href=\"/sec/sec-execution-contexts.html\">the currently running execution context</a>. <span style=\"font-family: Times New Roman\">GetGlobalObject</span> performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>ctx</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n        <li>Let <i>currentRealm</i> be <i>ctx&#x2019;s</i> <a href=\"/sec/sec-code-realms.html\">Realm</a>.</li>\n        <li>Return <i>currentRealm</i>.[[globalThis]].</li>\n      </ol>\n    </section>\n  "}