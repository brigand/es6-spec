{"id":"sec-for-statement-runtime-semantics-labelledevaluation","html":"\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.7\"><a href=\"/sec/sec-for-statement-runtime-semantics-labelledevaluation.html\" title=\"link to this section\">13.7.4.7</a></span> Runtime Semantics: LabelledEvaluation</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-runtime-semantics-labelledevaluation.html\">13.1.7</a>, <a href=\"/sec/sec-do-while-statement-runtime-semantics-labelledevaluation.html\">13.7.2.6</a>, <a href=\"/sec/sec-while-statement-runtime-semantics-labelledevaluation.html\">13.7.3.6</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation.html\">13.7.5.11</a>, <a href=\"/sec/sec-labelled-statements-runtime-semantics-labelledevaluation.html\">13.13.14</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>If the first <i>Expression</i> is present, then\n            <ol class=\"block\">\n              <li>Let <i>exprRef</i> be the result of evaluating the first <i>Expression</i>.</li>\n              <li>Let <i>exprValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>exprValue</i>).</li>\n            </ol>\n          </li>\n          <li>Return <a href=\"/sec/sec-forbodyevaluation.html\">ForBodyEvaluation</a>(the second <i>Expression</i>, the third\n              <i>Expression</i>, <i>Statement</i>, &#xAB; &#xBB;, <i>labelSet</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>varDcl</i> be the result of evaluating <i>VariableDeclarationList</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>varDcl</i>).</li>\n          <li>Return <a href=\"/sec/sec-forbodyevaluation.html\">ForBodyEvaluation</a>(the first <i>Expression</i>, the second\n              <i>Expression</i>, <i>Statement</i>, &#xAB;&#xA0;&#xBB;, <i>labelSet</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>oldEnv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n          <li>Let <i>loopEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>oldEnv</i>).</li>\n          <li>Let <i>isConst</i> be the result of performing IsConstantDeclaration of <i>LexicalDeclaration</i>.</li>\n          <li>Let <i>boundNames</i> be the BoundNames of <i>LexicalDeclaration</i>.</li>\n          <li>For each element <i>dn</i> of <i>boundNames</i> do\n            <ol class=\"block\">\n              <li>If <i>isConst</i> is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Perform <i>loopEnv</i>.CreateImmutableBinding(<i>dn</i>, <b>true</b>).</li>\n                </ol>\n              </li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>Perform <i>loopEnv</i>.CreateMutableBinding(<i>dn,</i> <b>false</b>).</li>\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: The above call to CreateMutableBinding will never return an\n                      <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>loopEnv</i>.</li>\n          <li>Let <i>forDcl</i> be the result of evaluating <i>LexicalDeclaration</i>.</li>\n          <li>If <i>forDcl</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n            <ol class=\"block\">\n              <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n              <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>forDcl</i>).</li>\n            </ol>\n          </li>\n          <li>If <i>isConst</i> is <b>false</b>, let <i>perIterationLets</i> be <i>boundNames</i> otherwise let\n              <i>perIterationLets</i> be &#xAB; &#xBB;.</li>\n          <li>Let <i>bodyResult</i> be <a href=\"/sec/sec-forbodyevaluation.html\">ForBodyEvaluation</a>(the first <i>Expression</i>, the\n              second <i>Expression</i>, <i>Statement</i>, <i>perIterationLets</i>, <i>labelSet</i>).</li>\n          <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n          <li>Return  <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>bodyResult</i>).</li>\n        </ol>\n      "}