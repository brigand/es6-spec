{"id":"sec-for-statement","html":"\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4\"><a href=\"/sec/sec-for-statement.html\" title=\"link to this section\">13.7.4</a></span> The\n            <code>for</code> Statement</h1>\n      </div>\n\n      <section id=\"sec-for-statement-static-semantics-early-errors\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.1\"><a href=\"/sec/sec-for-statement-static-semantics-early-errors.html\" title=\"link to this section\">13.7.4.1</a></span> Static Semantics:  Early Errors</h1>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ul>\n          <li>\n            <p>It is a Syntax Error if any element of the BoundNames of <span class=\"nt\">LexicalDeclaration</span> also occurs in\n            the VarDeclaredNames of <span class=\"nt\">Statement</span>.</p>\n          </li>\n        </ul>\n      </section>\n\n      <section id=\"sec-for-statement-static-semantics-containsduplicatelabels\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.2\"><a href=\"/sec/sec-for-statement-static-semantics-containsduplicatelabels.html\" title=\"link to this section\">13.7.4.2</a></span> Static Semantics: ContainsDuplicateLabels</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsduplicatelabels.html\">13.1.1</a>, <a href=\"/sec/sec-block-static-semantics-containsduplicatelabels.html\">13.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsduplicatelabels.html\">13.6.2</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsduplicatelabels.html\">13.7.2.1</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsduplicatelabels.html\">13.7.3.1</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels.html\">13.7.5.3</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsduplicatelabels.html\">13.11.2</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsduplicatelabels.html\">13.12.2</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsduplicatelabels.html\">13.13.2</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsduplicatelabels.html\">13.15.2</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsduplicatelabels.html\">15.2.1.2</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return ContainsDuplicateLabels of <i>Statement</i> with argument <i>labelSet.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-statement-static-semantics-containsundefinedbreaktarget\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.3\"><a href=\"/sec/sec-for-statement-static-semantics-containsundefinedbreaktarget.html\" title=\"link to this section\">13.7.4.3</a></span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedbreaktarget.html\">13.1.2</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedbreaktarget.html\">13.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedbreaktarget.html\">13.6.3</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.2.2</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.3.2</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget.html\">13.7.5.4</a>, <a href=\"/sec/sec-break-statement-static-semantics-containsundefinedbreaktarget.html\">13.9.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedbreaktarget.html\">13.11.3</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedbreaktarget.html\">13.12.3</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedbreaktarget.html\">13.13.3</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsundefinedbreaktarget.html\">13.15.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedbreaktarget.html\">15.2.1.3</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return ContainsUndefinedBreakTarget of <i>Statement</i> with argument <i>labelSet.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-statement-static-semantics-containsundefinedcontinuetarget\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.4\"><a href=\"/sec/sec-for-statement-static-semantics-containsundefinedcontinuetarget.html\" title=\"link to this section\">13.7.4.4</a></span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n\n        <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedcontinuetarget.html\">13.1.3</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedcontinuetarget.html\">13.2.4</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedcontinuetarget.html\">13.6.4</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.2.3</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.3.3</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget.html\">13.7.5.5</a>, <a href=\"/sec/sec-continue-statement-static-semantics-containsundefinedcontinuetarget.html\">13.8.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedcontinuetarget.html\">13.11.4</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedcontinuetarget.html\">13.12.4</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedcontinuetarget.html\">13.13.4</a>,<a href=\"/sec/sec-try-statement-static-semantics-containsundefinedcontinuetarget.html\">13.15.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedcontinuetarget.html\">15.2.1.4</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return ContainsUndefinedContinueTarget of <i>Statement</i> with arguments <i>iterationSet</i> and\n              &#xAB;&#xA0;&#xBB;<i>.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-statement-static-semantics-vardeclarednames\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.5\"><a href=\"/sec/sec-for-statement-static-semantics-vardeclarednames.html\" title=\"link to this section\">13.7.4.5</a></span> Static Semantics:  VarDeclaredNames</h1>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-vardeclarednames.html\">13.1.5</a>, <a href=\"/sec/sec-block-static-semantics-vardeclarednames.html\">13.2.11</a>, <a href=\"/sec/sec-variable-statement-static-semantics-vardeclarednames.html\">13.3.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-vardeclarednames.html\">13.6.5</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-vardeclarednames.html\">13.7.2.4</a>, <a href=\"/sec/sec-while-statement-static-semantics-vardeclarednames.html\">13.7.3.4</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-vardeclarednames.html\">13.7.5.7</a>, <a href=\"/sec/sec-with-statement-static-semantics-vardeclarednames.html\">13.11.5</a>, <a href=\"/sec/sec-switch-statement-static-semantics-vardeclarednames.html\">13.12.7</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-vardeclarednames.html\">13.13.12</a>, <a href=\"/sec/sec-try-statement-static-semantics-vardeclarednames.html\">13.15.5</a>, <a href=\"/sec/sec-function-definitions-static-semantics-vardeclarednames.html\">14.1.15</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-vardeclarednames.html\">14.2.12</a>, <a href=\"/sec/sec-scripts-static-semantics-vardeclarednames.html\">15.1.5</a>, <a href=\"/sec/sec-module-semantics-static-semantics-vardeclarednames.html\">15.2.1.13</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarDeclaredNames of <i>Statement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>names</i> be BoundNames of <i>VariableDeclarationList</i>.</li>\n          <li>Append to <i>names</i> the elements of the VarDeclaredNames of <i>Statement.</i></li>\n          <li>Return <i>names</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarDeclaredNames of <i>Statement</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-statement-static-semantics-varscopeddeclarations\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.6\"><a href=\"/sec/sec-for-statement-static-semantics-varscopeddeclarations.html\" title=\"link to this section\">13.7.4.6</a></span> Static Semantics:  VarScopedDeclarations</h1>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-varscopeddeclarations.html\">13.1.6</a>, <a href=\"/sec/sec-block-static-semantics-varscopeddeclarations.html\">13.2.12</a>, <a href=\"/sec/sec-variable-statement-static-semantics-varscopeddeclarations.html\">13.3.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-varscopeddeclarations.html\">13.6.6</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-varscopeddeclarations.html\">13.7.2.5</a>, <a href=\"/sec/sec-while-statement-static-semantics-varscopeddeclarations.html\">13.7.3.5</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations.html\">13.7.5.8</a>, <a href=\"/sec/sec-with-statement-static-semantics-varscopeddeclarations.html\">13.11.6</a>, <a href=\"/sec/sec-switch-statement-static-semantics-varscopeddeclarations.html\">13.12.8</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-varscopeddeclarations.html\">13.13.13</a>, <a href=\"/sec/sec-try-statement-static-semantics-varscopeddeclarations.html\">13.15.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-varscopeddeclarations.html\">14.1.16</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-varscopeddeclarations.html\">14.2.13</a>, <a href=\"/sec/sec-scripts-static-semantics-varscopeddeclarations.html\">15.1.6</a>, <a href=\"/sec/sec-module-semantics-static-semantics-varscopeddeclarations.html\">15.2.1.14</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarScopedDeclarations of <i>Statement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>declarations</i> be VarScopedDeclarations of <i>VariableDeclarationList</i>.</li>\n          <li>Append to <i>declarations</i> the elements of the VarScopedDeclarations of <i>Statement.</i></li>\n          <li>Return <i>declarations</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarScopedDeclarations of <i>Statement</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-statement-runtime-semantics-labelledevaluation\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.7\"><a href=\"/sec/sec-for-statement-runtime-semantics-labelledevaluation.html\" title=\"link to this section\">13.7.4.7</a></span> Runtime Semantics: LabelledEvaluation</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-runtime-semantics-labelledevaluation.html\">13.1.7</a>, <a href=\"/sec/sec-do-while-statement-runtime-semantics-labelledevaluation.html\">13.7.2.6</a>, <a href=\"/sec/sec-while-statement-runtime-semantics-labelledevaluation.html\">13.7.3.6</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation.html\">13.7.5.11</a>, <a href=\"/sec/sec-labelled-statements-runtime-semantics-labelledevaluation.html\">13.13.14</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>If the first <i>Expression</i> is present, then\n            <ol class=\"block\">\n              <li>Let <i>exprRef</i> be the result of evaluating the first <i>Expression</i>.</li>\n              <li>Let <i>exprValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>exprValue</i>).</li>\n            </ol>\n          </li>\n          <li>Return <a href=\"/sec/sec-forbodyevaluation.html\">ForBodyEvaluation</a>(the second <i>Expression</i>, the third\n              <i>Expression</i>, <i>Statement</i>, &#xAB; &#xBB;, <i>labelSet</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>varDcl</i> be the result of evaluating <i>VariableDeclarationList</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>varDcl</i>).</li>\n          <li>Return <a href=\"/sec/sec-forbodyevaluation.html\">ForBodyEvaluation</a>(the first <i>Expression</i>, the second\n              <i>Expression</i>, <i>Statement</i>, &#xAB;&#xA0;&#xBB;, <i>labelSet</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>oldEnv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n          <li>Let <i>loopEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>oldEnv</i>).</li>\n          <li>Let <i>isConst</i> be the result of performing IsConstantDeclaration of <i>LexicalDeclaration</i>.</li>\n          <li>Let <i>boundNames</i> be the BoundNames of <i>LexicalDeclaration</i>.</li>\n          <li>For each element <i>dn</i> of <i>boundNames</i> do\n            <ol class=\"block\">\n              <li>If <i>isConst</i> is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Perform <i>loopEnv</i>.CreateImmutableBinding(<i>dn</i>, <b>true</b>).</li>\n                </ol>\n              </li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>Perform <i>loopEnv</i>.CreateMutableBinding(<i>dn,</i> <b>false</b>).</li>\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: The above call to CreateMutableBinding will never return an\n                      <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>loopEnv</i>.</li>\n          <li>Let <i>forDcl</i> be the result of evaluating <i>LexicalDeclaration</i>.</li>\n          <li>If <i>forDcl</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n            <ol class=\"block\">\n              <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n              <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>forDcl</i>).</li>\n            </ol>\n          </li>\n          <li>If <i>isConst</i> is <b>false</b>, let <i>perIterationLets</i> be <i>boundNames</i> otherwise let\n              <i>perIterationLets</i> be &#xAB; &#xBB;.</li>\n          <li>Let <i>bodyResult</i> be <a href=\"/sec/sec-forbodyevaluation.html\">ForBodyEvaluation</a>(the first <i>Expression</i>, the\n              second <i>Expression</i>, <i>Statement</i>, <i>perIterationLets</i>, <i>labelSet</i>).</li>\n          <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n          <li>Return  <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>bodyResult</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-forbodyevaluation\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.8\"><a href=\"/sec/sec-forbodyevaluation.html\" title=\"link to this section\">13.7.4.8</a></span> Runtime Semantics: ForBodyEvaluation( test, increment, stmt,\n            perIterationBindings, labelSet )</h1>\n\n        <p class=\"normalbefore\">The abstract operation ForBodyEvaluation with arguments <var>test</var>, <var>increment</var>,\n        <var>stmt</var>, <var>perIterationBindings</var>, and <var>labelSet</var> is performed as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>V</i> = <b>undefined</b>.</li>\n          <li>Let <i>status</i> be <a href=\"/sec/sec-createperiterationenvironment.html\">CreatePerIterationEnvironment</a>(<i>perIterationBindings</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n          <li>Repeat\n            <ol class=\"block\">\n              <li>If <i>test</i> is not <span style=\"font-family: sans-serif\">[empty]</span>, then\n                <ol class=\"block\">\n                  <li>Let <i>testRef</i> be the result of evaluating <i>test</i>.</li>\n                  <li>Let <i>testValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>testRef</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>testValue</i>).</li>\n                  <li>If <a href=\"/sec/sec-toboolean.html\">ToBoolean</a>(<i>testValue</i>) is <b>false</b>, return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>V</i>).</li>\n                </ol>\n              </li>\n              <li>Let <i>result</i> be the result of evaluating <i>stmt</i>.</li>\n              <li>If <a href=\"/sec/sec-loopcontinues.html\">LoopContinues</a>(<i>result</i>, <i>labelSet</i>) is <b>false</b>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>result</i>, <i>V</i>)).</li>\n              <li>If <i>result</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, let <i>V</i> =\n                  <i>result</i>.[[value]].</li>\n              <li>Let <i>status</i> be <a href=\"/sec/sec-createperiterationenvironment.html\">CreatePerIterationEnvironment</a>(<i>perIterationBindings</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n              <li>If <i>increment</i> is not <span style=\"font-family: sans-serif\">[empty]</span>, then\n                <ol class=\"block\">\n                  <li>Let <i>incRef</i> be the result of evaluating <i>increment</i>.</li>\n                  <li>Let <i>incValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>incRef</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>incValue</i>).</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n        </ol>\n      </section>\n\n      <section id=\"sec-createperiterationenvironment\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.9\"><a href=\"/sec/sec-createperiterationenvironment.html\" title=\"link to this section\">13.7.4.9</a></span> Runtime Semantics: CreatePerIterationEnvironment(\n            perIterationBindings )</h1>\n\n        <p class=\"normalbefore\">The abstract operation CreatePerIterationEnvironment with argument <var>perIterationBindings</var>\n        is performed as follows:</p>\n\n        <ol class=\"proc\">\n          <li>If <i>perIterationBindings</i> has any elements, then\n            <ol class=\"block\">\n              <li>Let <i>lastIterationEnv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n              <li>Let <i>outer</i> be <i>lastIterationEnv</i>&#x2019;s <a href=\"/sec/sec-lexical-environments.html\">outer environment\n                  reference</a>.</li>\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>outer</i> is not <b>null</b>.</li>\n              <li>Let <i>thisIterationEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>outer</i>).</li>\n              <li>For each element <i>bn</i> of <i>perIterationBindings</i> do,\n                <ol class=\"block\">\n                  <li>Let <i>status</i> be <i>thisIterationEnv</i>.CreateMutableBinding(<i>bn</i>, <b>false</b>).</li>\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is never an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                  <li>Let <i>lastValue</i> be <i>lastIterationEnv</i>.GetBindingValue(<i>bn</i>, <b>true</b>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>lastValue</i>).</li>\n                  <li>Perform <i>thisIterationEnv</i>.InitializeBinding(<i>bn</i>, <i>lastValue</i>).</li>\n                </ol>\n              </li>\n              <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>thisIterationEnv.</i></li>\n            </ol>\n          </li>\n          <li>Return <b>undefined</b></li>\n        </ol>\n      </section>\n    "}