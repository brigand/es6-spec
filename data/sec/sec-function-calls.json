{"id":"sec-function-calls","html":"\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.4\"><a href=\"/sec/sec-function-calls.html\" title=\"link to this section\">12.3.4</a></span>\n            Function Calls</h1>\n      </div>\n\n      <section id=\"sec-function-calls-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.4.1\"><a href=\"/sec/sec-function-calls-runtime-semantics-evaluation.html\" title=\"link to this section\">12.3.4.1</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">CallExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">MemberExpression</span> <span class=\"nt\">Arguments</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>ref</i> be the result of evaluating <i>MemberExpression</i>.</li>\n          <li>Let <i>func</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>ref</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>func</i>).</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>ref</i>) is <a href=\"/sec/sec-reference-specification-type.html\">Reference</a> and <a href=\"/sec/sec-reference-specification-type.html\">IsPropertyReference</a>(<i>ref</i>) is <b>false</b> and <a href=\"/sec/sec-reference-specification-type.html\">GetReferencedName</a>(<i>ref</i>) <i>is</i> <code>&quot;eval&quot;</code>, then\n            <ol class=\"block\">\n              <li>If <a href=\"/sec/sec-samevalue.html\">SameValue</a>(<i>func</i>, %eval%) is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Let <i>argList</i> be ArgumentListEvaluation(<i>Arguments</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>argList</i>).</li>\n                  <li>If <i>argList</i> has no elements, return <b>undefined.</b></li>\n                  <li>Let <i>evalText</i> be the first element of <i>argList</i>.</li>\n                  <li>If the source code matching this <i>CallExpression</i> is <a href=\"/sec/sec-strict-mode-code.html\">strict code</a>,\n                      let <i>strictCaller</i> be <b>true.</b> Otherwise let <i>strictCaller</i> be <b>false.</b></li>\n                  <li>Let <i>evalRealm</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-code-realms.html\">Realm</a>.</li>\n                  <li>Return <a href=\"/sec/sec-performeval.html\">PerformEval</a>(<i>evalText</i>, <i>evalRealm</i>, <i>strictCaller</i>,\n                      <b>true</b>). .</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>ref</i>) is <a href=\"/sec/sec-reference-specification-type.html\">Reference</a>, then\n            <ol class=\"block\">\n              <li>If <a href=\"/sec/sec-reference-specification-type.html\">IsPropertyReference</a>(<i>ref</i>) is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Let <i>thisValue</i> be <a href=\"/sec/sec-getthisvalue.html\">GetThisValue</a>(<i>ref</i>).</li>\n                </ol>\n              </li>\n              <li>Else, the base of <i>ref</i> is an <a href=\"/sec/sec-environment-records.html\">Environment Record</a>\n                <ol class=\"block\">\n                  <li>Let <i>refEnv</i> be <a href=\"/sec/sec-reference-specification-type.html\">GetBase</a>(<i>ref</i>).</li>\n                  <li>Let <i>thisValue</i> be <i>refEnv</i>.WithBaseObject().</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Else <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>ref</i>) is not <a href=\"/sec/sec-reference-specification-type.html\">Reference</a>,\n            <ol class=\"block\">\n              <li>Let <i>thisValue</i> be <b>undefined</b>.</li>\n            </ol>\n          </li>\n          <li>Let <i>thisCall</i> be this <i>CallExpression</i>.</li>\n          <li>Let <i>tailCall</i> be <a href=\"/sec/sec-isintailposition.html\">IsInTailPosition</a>(<i>thisCall</i>). (See <a href=\"/sec/sec-isintailposition.html\">14.6.1</a>)</li>\n          <li>Return <a href=\"/sec/sec-evaluatedirectcall.html\">EvaluateDirectCall</a>(<i>func</i>, <i>thisValue</i>, <i>Arguments</i>,\n              <i>tailCall</i>).</li>\n        </ol>\n\n        <p>A <span class=\"nt\">CallExpression</span> evaluation that executes step 4.a.vii is a <i>direct eval</i>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">CallExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">CallExpression</span> <span class=\"nt\">Arguments</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>ref</i> be the result of evaluating <i>CallExpression</i>.</li>\n          <li>Let <i>thisCall</i> be this <i>CallExpression</i></li>\n          <li>Let <i>tailCall</i> be <a href=\"/sec/sec-isintailposition.html\">IsInTailPosition</a>(<i>thisCall</i>). (See <a href=\"/sec/sec-isintailposition.html\">14.6.1</a>)</li>\n          <li>Return <a href=\"/sec/sec-evaluatecall.html\">EvaluateCall</a>(<i>ref</i>, <i>Arguments</i>, <i>tailCall</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-evaluatecall\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.4.2\"><a href=\"/sec/sec-evaluatecall.html\" title=\"link to this section\">12.3.4.2</a></span>\n            Runtime Semantics: EvaluateCall( ref, arguments, tailPosition )</h1>\n\n        <p class=\"normalbefore\">The abstract operation EvaluateCall takes as arguments a value <var>ref</var>, a syntactic grammar\n        production <var>arguments</var>,  and a Boolean argument <var>tailPosition</var>. It performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>func</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>ref</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>func</i>).</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>ref</i>) is <a href=\"/sec/sec-reference-specification-type.html\">Reference</a>, then\n            <ol class=\"block\">\n              <li>If <a href=\"/sec/sec-reference-specification-type.html\">IsPropertyReference</a>(<i>ref</i>) is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Let <i>thisValue</i> be <a href=\"/sec/sec-getthisvalue.html\">GetThisValue</a>(<i>ref</i>).</li>\n                </ol>\n              </li>\n              <li>Else, the base of <i>ref</i> is an <a href=\"/sec/sec-environment-records.html\">Environment Record</a>\n                <ol class=\"block\">\n                  <li>Let <i>refEnv</i> be <a href=\"/sec/sec-reference-specification-type.html\">GetBase</a>(<i>ref</i>).</li>\n                  <li>Let <i>thisValue</i> be <i>refEnv</i>.WithBaseObject().</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Else <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>ref</i>) is not <a href=\"/sec/sec-reference-specification-type.html\">Reference</a>,\n            <ol class=\"block\">\n              <li>Let <i>thisValue</i> be <b>undefined</b>.</li>\n            </ol>\n          </li>\n          <li>Return <a href=\"/sec/sec-evaluatedirectcall.html\">EvaluateDirectCall</a>(<i>func</i>, <i>thisValue</i>, <i>arguments</i>,\n              <i>tailPosition</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-evaluatedirectcall\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.4.3\"><a href=\"/sec/sec-evaluatedirectcall.html\" title=\"link to this section\">12.3.4.3</a></span> Runtime Semantics: EvaluateDirectCall( func, thisValue, arguments,\n            tailPosition )</h1>\n\n        <p class=\"normalbefore\">The abstract operation EvaluateDirectCall takes as arguments a value <var>func</var>, a value\n        <var>thisValue</var>, a syntactic grammar production <var>arguments</var>, and a Boolean argument <var>tailPosition</var>.\n        It performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>argList</i> be ArgumentListEvaluation(<i>arguments</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>argList</i>).</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>func</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>func</i>) is <b>false</b>, throw a <b>TypeError</b> exception.</li>\n          <li>If <i>tailPosition</i> is <b>true</b>, perform <a href=\"/sec/sec-preparefortailcall.html\">PrepareForTailCall</a>().</li>\n          <li>Let <i>result</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>func</i>, <i>thisValue</i>, <i>argList</i>).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: If <i>tailPosition</i> is <b>true</b>, the above call will not\n              return here, but instead evaluation will continue as if the following return has already occurred.</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: If <i>result</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a> then <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>result</i>) is an <a href=\"/sec/sec-ecmascript-language-types.html\">ECMAScript language type</a>.</li>\n          <li>Return <i>result</i>.</li>\n        </ol>\n      </section>\n    "}