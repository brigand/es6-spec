{"id":"sec-function-properties-of-the-global-object","html":"\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-18.2\"><a href=\"/sec/sec-function-properties-of-the-global-object.html\" title=\"link to this section\">18.2</a></span> Function Properties of the Global Object</h1>\n    </div>\n\n    <section id=\"sec-eval-x\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-18.2.1\"><a href=\"/sec/sec-eval-x.html\" title=\"link to this section\">18.2.1</a></span> eval\n            (x)</h1>\n\n        <p class=\"normalbefore\">The <code>eval</code> function is the %eval% intrinsic object. When the <code>eval</code> function\n        is called with one argument <var>x</var>, the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>evalRealm</i> be the value of the active function object&#x2019;s [[Realm]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Let <i>strictCaller</i> be <b>false</b>.</li>\n          <li>Let <i>directEval</i> be <b>false</b>.</li>\n          <li>Return <a href=\"/sec/sec-performeval.html\">PerformEval</a>(<i>x</i>, <i>evalRealm</i>, <i>strictCaller</i>,\n              <i>directEval</i>).</li>\n        </ol>\n      </div>\n\n      <section id=\"sec-performeval\">\n        <h1><span class=\"secnum\" id=\"sec-18.2.1.1\"><a href=\"/sec/sec-performeval.html\" title=\"link to this section\">18.2.1.1</a></span>\n            Runtime Semantics: PerformEval( x, evalRealm, strictCaller, direct)</h1>\n\n        <p class=\"normalbefore\">The abstract operation PerformEval with arguments <var>x</var>, <var>evalRealm</var>,\n        <var>strictCaller</var>, and <var>direct</var> performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: If <i>direct</i> is <b>false</b> then  <i>strictCaller</i> is also\n              <b>false</b>.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>x</i>) is not String, return <i>x</i>.</li>\n          <li>Let <i>script</i> be the ECMAScript code that is the result of parsing <i>x</i>, interpreted as UTF-16 encoded\n              Unicode text as described in <a href=\"/sec/sec-ecmascript-language-types-string-type.html\">6.1.4</a><i>,</i> for the goal\n              symbol <i>Script</i>. If the parse fails or any early errors are detected, throw a <b>SyntaxError</b> exception (but\n              <a href=\"/sec/sec-error-handling-and-language-extensions.html\">see also clause 16</a>).</li>\n          <li>If <i>script</i> Contains <i>ScriptBody</i> is <b>false</b>, return <b>undefined</b>.</li>\n          <li>Let <i>body</i> be the <i>ScriptBody</i> of <i>script.</i></li>\n          <li>If <i>strictCaller</i> is <b>true</b>, let <i>strictEval</i> be <b>true.</b></li>\n          <li>Else, let <i>strictEval</i> be IsStrict of <i>script</i>.</li>\n          <li>Let <i>ctx</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>. If <i>direct</i> is\n              <b>true</b> <i>ctx</i> will be the <a href=\"/sec/sec-execution-contexts.html\">execution context</a> that performed the direct\n              <code>eval</code>. If <i>direct</i> is <b>false</b> <i>ctx</i> will be the <a href=\"/sec/sec-execution-contexts.html\">execution context</a> for the invocation of the eval function.</li>\n          <li>If <i>direct</i> is <b>true</b>, then\n            <ol class=\"block\">\n              <li>Let <i>lexEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>ctx&#x2019;s</i>\n                  <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>).</li>\n              <li>Let <i>varEnv</i> be <i>ctx&#x2019;s</i> <a href=\"/sec/sec-execution-contexts.html\">VariableEnvironment</a>.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>lexEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>evalRealm</i>.[[globalEnv]]).</li>\n              <li>Let <i>varEnv</i> be <i>evalRealm</i>.[[globalEnv]].</li>\n            </ol>\n          </li>\n          <li>If <i>strictEval</i> is <b>true</b>, let <i>varEnv</i> be <i>lexEnv</i>.</li>\n          <li>If <i>ctx</i> is not already <a href=\"/sec/sec-execution-contexts.html\">suspended</a>, <a href=\"/sec/sec-execution-contexts.html\">Suspend</a> <i>ctx</i>.</li>\n          <li>Let <i>evalCxt</i> be a new <a href=\"/sec/sec-execution-contexts.html\">ECMAScript code execution context</a>.</li>\n          <li>Set the <i>evalCxt&#x2019;s</i> <a href=\"/sec/sec-code-realms.html\">Realm</a>  to <i>evalRealm</i>.</li>\n          <li>Set the <i>evalCxt&#x2019;s</i> <a href=\"/sec/sec-execution-contexts.html\">VariableEnvironment</a> to <i>varEnv</i>.</li>\n          <li>Set the <i>evalCxt&#x2019;s</i> <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>lexEnv</i>.</li>\n          <li>Push <i>evalCxt</i> on to <a href=\"/sec/sec-execution-contexts.html\">the execution context stack</a>; <i>evalCxt</i> is now\n              <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n          <li>Let <i>result</i> be <a href=\"/sec/sec-evaldeclarationinstantiation.html\">EvalDeclarationInstantiation</a>(<i>body</i>,\n              <i>varEnv</i>, <i>lexEnv</i>, <i>strictEval</i>).</li>\n          <li>If <i>result</i>.[[type]] is <span style=\"font-family: sans-serif\">normal</span>, then\n            <ol class=\"block\">\n              <li>Let <i>result</i> be the result of evaluating <i>body</i>.</li>\n            </ol>\n          </li>\n          <li>If <i>result</i>.[[type]] is <span style=\"font-family: sans-serif\">normal</span> and <i>result</i>.[[value]] is\n              <span style=\"font-family: sans-serif\">empty</span>,  then\n            <ol class=\"block\">\n              <li>Let <i>result</i> be <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<b>undefined</b>).</li>\n            </ol>\n          </li>\n          <li><a href=\"/sec/sec-execution-contexts.html\">Suspend</a> <i>evalCxt</i> and remove it from <a href=\"/sec/sec-execution-contexts.html\">the execution context stack</a>.</li>\n          <li>Resume the context that is now on the top of <a href=\"/sec/sec-execution-contexts.html\">the execution context stack</a> as <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n          <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>result</i>).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The eval code cannot instantiate variable or function bindings in the variable\n          environment of the calling context that invoked the eval if the calling context is evaluating formal parameter\n          initializers or if either the code of the calling context or the eval code is <a href=\"/sec/sec-strict-mode-code.html\">strict\n          code</a>. Instead such bindings are instantiated in a new <a href=\"/sec/sec-execution-contexts.html\">VariableEnvironment</a> that\n          is only accessible to the eval code. Bindings introduced by <code>let</code>, <code>const</code>, or <code>class</code>\n          declarations are always instantiated in a new <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-evaldeclarationinstantiation\">\n        <h1><span class=\"secnum\" id=\"sec-18.2.1.2\"><a href=\"/sec/sec-evaldeclarationinstantiation.html\" title=\"link to this section\">18.2.1.2</a></span> Runtime Semantics: EvalDeclarationInstantiation( body, varEnv,\n            lexEnv, strict)</h1>\n\n        <p>When the abstract operation EvalDeclarationInstantiation is called with arguments <var>body</var>, <var>varEnv</var>,\n        <var>lexEnv</var>, and <var>strict</var> the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>varNames</i> be the VarDeclaredNames of <i>body</i>.</li>\n          <li>Let <i>varDeclarations</i> be the VarScopedDeclarations of <i>body</i>.</li>\n          <li>Let <i>lexEnvRec</i> be <i>lexEnv</i>&#x2019;s <a href=\"/sec/sec-lexical-environments.html\">EnvironmentRecord</a>.</li>\n          <li>Let <i>varEnvRec</i> be <i>varEnv</i>&#x2019;s <a href=\"/sec/sec-lexical-environments.html\">EnvironmentRecord</a>.</li>\n          <li>If <i>strict</i> is <b>false</b>, then\n            <ol class=\"block\">\n              <li>If <i>varEnvRec</i> is a global <a href=\"/sec/sec-environment-records.html\">Environment Record</a>, then\n                <ol class=\"block\">\n                  <li>For each <i>name</i> in <i>varNames</i>, do\n                    <ol class=\"block\">\n                      <li>If <i>varEnvRec.</i><a href=\"/sec/sec-haslexicaldeclaration.html\">HasLexicalDeclaration</a>(<i>name</i>) is\n                          <b>true</b>, throw a <b>SyntaxError</b> exception.</li>\n                      <li>NOTE:  <code>eval</code> will not create a global var declaration that would be shadowed by a global\n                          lexical declaration.</li>\n                    </ol>\n                  </li>\n                </ol>\n              </li>\n              <li>Let <i>thisLex</i> be <i>lexEnv</i>.</li>\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: the following loop will terminate.</li>\n              <li>Repeat while <i>thisLex</i> is not the same as <i>varEnv,</i>\n                <ol class=\"block\">\n                  <li>Let <i>thisEnvRec</i> be <i>thisLex</i>&#x2019;s <a href=\"/sec/sec-lexical-environments.html\">EnvironmentRecord</a>.</li>\n                  <li>If <i>thisEnvRec</i> is not an object <a href=\"/sec/sec-environment-records.html\">Environment Record</a>, then\n                    <ol class=\"block\">\n                      <li>NOTE:  The environment of with statements cannot contain any lexical declaration so it doesn&#x2019;t\n                          need to be checked for var/let hoisting conflicts.</li>\n                      <li>For each <i>name</i> in <i>varNames</i>, do\n                        <ol class=\"block\">\n                          <li>If <i>thisEnvRec.</i>HasBinding(<i>name</i>) is <b>true</b>, then\n                            <ol class=\"block\">\n                              <li>Throw a <b>SyntaxError</b> exception.</li>\n                            </ol>\n                          </li>\n                          <li>NOTE:  A direct <code>eval</code> will not hoist var declaration over a like-named lexical\n                              declaration.</li>\n                        </ol>\n                      </li>\n                    </ol>\n                  </li>\n                  <li>Let <i>thisLex</i> be <i>thisLex</i>&#x2019;s <a href=\"/sec/sec-lexical-environments.html\">outer environment\n                      reference</a>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Let <i>functionsToInitialize</i> be an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>Let <i>declaredFunctionNames</i> be an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>For each <i>d</i> in <i>varDeclarations</i>, in reverse list order do\n            <ol class=\"block\">\n              <li>If <i>d</i> is neither a <i>VariableDeclaration</i> or a <i>ForBinding</i>, then\n                <ol class=\"block\">\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>d</i> is either a <i>FunctionDeclaration</i> or a\n                      <i>GeneratorDeclaration</i>.</li>\n                  <li>NOTE\tIf there are multiple <span style=\"font-family: Times New Roman\"><i>FunctionDeclarations</i></span>\n                      for the same name, the last declaration is used.</li>\n                  <li>Let <i>fn</i> be the sole element of the BoundNames of <i>d.</i></li>\n                  <li>If <i>fn</i> is not an element of <i>declaredFunctionNames</i>, then\n                    <ol class=\"block\">\n                      <li>If <i>varEnvRec</i> is a global <a href=\"/sec/sec-environment-records.html\">Environment Record</a>, then\n                        <ol class=\"block\">\n                          <li>Let <i>fnDefinable</i> be <i>varEnvRec</i>.<a href=\"/sec/sec-candeclareglobalfunction.html\">CanDeclareGlobalFunction</a>(<i>fn</i>).</li>\n                          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>fnDefinable</i>).</li>\n                          <li>If <i>fnDefinable</i> is <b>false</b>, throw <b>SyntaxError</b> exception.</li>\n                        </ol>\n                      </li>\n                      <li>Append <i>fn</i> to <i>declaredFunctionNames</i>.</li>\n                      <li>Insert <i>d</i> as the first element of <i>functionsToInitialize</i>.</li>\n                    </ol>\n                  </li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Let <i>declaredVarNames</i> be an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>For each <i>d</i> in <i>varDeclarations</i>, do\n            <ol class=\"block\">\n              <li>If <i>d</i> is a <i>VariableDeclaration</i> or a <i>ForBinding</i>, then\n                <ol class=\"block\">\n                  <li>For each String <i>vn</i> in the BoundNames of <i>d</i>, do\n                    <ol class=\"block\">\n                      <li>If <i>vn</i> is not an element of <i>declaredFunctionNames</i>, then\n                        <ol class=\"block\">\n                          <li>If <i>varEnvRec</i> is a global <a href=\"/sec/sec-environment-records.html\">Environment Record</a>, then\n                            <ol class=\"block\">\n                              <li>Let <i>vnDefinable</i> be <i>varEnvRec.</i><a href=\"/sec/sec-candeclareglobalvar.html\">CanDeclareGlobalVar</a>(<i>vn</i>).</li>\n                              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>vnDefinable</i>).</li>\n                              <li>If <i>vnDefinable</i> is <b>false</b>, throw <b>SyntaxError</b> exception.</li>\n                            </ol>\n                          </li>\n                          <li>If <i>vn</i> is not an element of <i>declaredVarNames</i>, then\n                            <ol class=\"block\">\n                              <li>Append <i>vn</i> to <i>declaredVarNames</i>.</li>\n                            </ol>\n                          </li>\n                        </ol>\n                      </li>\n                    </ol>\n                  </li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>NOTE: No abnormal terminations occur after this algorithm step unless <span style=\"font-family: Times New\n              Roman\"><i>varEnvRec</i></span> is a global <a href=\"/sec/sec-environment-records.html\">Environment Record</a> and the global\n              object is a Proxy exotic object.</li>\n          <li>Let <i>lexDeclarations</i> be the LexicallyScopedDeclarations of <i>body</i>.</li>\n          <li>For each element <i>d</i> in <i>lexDeclarations</i> do\n            <ol class=\"block\">\n              <li>NOTE  Lexically declared names are only instantiated here but not initialized.</li>\n              <li>For each element <i>dn</i> of the BoundNames of <i>d</i> do\n                <ol class=\"block\">\n                  <li>If  IsConstantDeclaration of <i>d</i> is <b>true</b>, then\n                    <ol class=\"block\">\n                      <li>Let <i>status</i> be <i>lexEnvRec</i>.CreateImmutableBinding(<i>dn</i>, <b>true</b>).</li>\n                    </ol>\n                  </li>\n                  <li>Else,\n                    <ol class=\"block\">\n                      <li>Let <i>status</i> be <i>lexEnvRec</i>.CreateMutableBinding(<i>dn</i>, <b>false</b>).</li>\n                    </ol>\n                  </li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>For each production <i>f</i> in <i>functionsToInitialize</i>, do\n            <ol class=\"block\">\n              <li>Let <i>fn</i> be the sole element of the BoundNames of <i>f.</i></li>\n              <li>Let <i>fo</i> be the result of performing InstantiateFunctionObject  for <i>f</i> with argument\n                  <i>lexEnv</i>.</li>\n              <li>If <i>varEnvRec</i> is a global <a href=\"/sec/sec-environment-records.html\">Environment Record</a>, then\n                <ol class=\"block\">\n                  <li>Let <i>status</i> be <i>varEnvRec</i>.<a href=\"/sec/sec-createglobalfunctionbinding.html\">CreateGlobalFunctionBinding</a>(<i>fn</i>, <i>fo</i>,\n                      <b>true</b>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n                </ol>\n              </li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>Let <i>bindingExists</i> be <i>varEnvRec</i>.HasBinding(<i>fn</i>).</li>\n                  <li>If <i>bindingExists</i> is <b>false</b>, then\n                    <ol class=\"block\">\n                      <li>Let <i>status</i> be <i>varEnvRec</i>.CreateMutableBinding(<i>fn</i>, <b>true</b>).</li>\n                      <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a> because of validation preceding\n                          step 12.</li>\n                      <li>Let <i>status</i> be <i>varEnvRec</i>.InitializeBinding(<i>fn</i>, <i>fo</i>).</li>\n                    </ol>\n                  </li>\n                  <li>Else,\n                    <ol class=\"block\">\n                      <li>Let <i>status</i> be <i>varEnvRec</i>.SetMutableBinding(<i>fn</i>, <i>fo</i>, <b>false</b>).</li>\n                    </ol>\n                  </li>\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>For each String <i>vn</i> in <i>declaredVarNames</i>, in list order do\n            <ol class=\"block\">\n              <li>If <i>varEnvRec</i> is a global <a href=\"/sec/sec-environment-records.html\">Environment Record</a>, then\n                <ol class=\"block\">\n                  <li>Let <i>status</i> be <i>varEnvRec.</i><a href=\"/sec/sec-createglobalvarbinding.html\">CreateGlobalVarBinding</a>(<i>vn</i>, <b>true</b>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n                </ol>\n              </li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>Let <i>bindingExists</i> be <i>varEnvRec</i>.HasBinding(<i>vn</i>).</li>\n                  <li>If <i>bindingExists</i> is <b>false</b>, then\n                    <ol class=\"block\">\n                      <li>Let <i>status</i> be <i>varEnvRec</i>.CreateMutableBinding(<i>vn</i>, <b>true</b>).</li>\n                      <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a> because of validation preceding\n                          step 12.</li>\n                      <li>Let <i>status</i> be <i>varEnvRec</i>.InitializeBinding(<i>vn</i>, <b>undefined</b>).</li>\n                      <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                    </ol>\n                  </li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family: sans-serif\">empty</span>)</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> An alternative version of this algorithm is described in <a href=\"/sec/sec-variablestatements-in-catch-blocks.html\">B.3.5</a>.</p>\n        </div>\n      </section>\n    </section>\n\n    <section id=\"sec-isfinite-number\">\n      <h1><span class=\"secnum\" id=\"sec-18.2.2\"><a href=\"/sec/sec-isfinite-number.html\" title=\"link to this section\">18.2.2</a></span>\n          isFinite (number)</h1>\n\n      <p class=\"normalbefore\">The <code>isFinite</code> function is the %isFinite% intrinsic object. When the\n      <code>isFinite</code> function is called with one argument <var>x</var>, the following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>num</i> be <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<i>number</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>num</i>).</li>\n        <li>If <i>num</i> is <b>NaN</b>, <b>+&#x221E;</b>, or <b>&#x2212;&#x221E;</b>, return <b>false</b>.</li>\n        <li>Otherwise, return <b>true</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-isnan-number\">\n      <h1><span class=\"secnum\" id=\"sec-18.2.3\"><a href=\"/sec/sec-isnan-number.html\" title=\"link to this section\">18.2.3</a></span> isNaN\n          (number)</h1>\n\n      <p class=\"normalbefore\">The <code>isNaN</code> function is the %isNaN% intrinsic object. When the <code>isNaN</code>\n      function is called with one argument <var>number</var>, the following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>num</i> be <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<i>number</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>num</i>).</li>\n        <li>If <i>num</i> is <b>NaN</b>, return <b>true</b>.</li>\n        <li>Otherwise, return <b>false</b>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> A reliable way for ECMAScript code to test if a value <code>X</code> is a <b>NaN</b> is an\n        expression of the form <code>X !== X</code>. The result will be <b>true</b> if and only if <code>X</code> is a\n        <b>NaN</b>.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-parsefloat-string\">\n      <h1><span class=\"secnum\" id=\"sec-18.2.4\"><a href=\"/sec/sec-parsefloat-string.html\" title=\"link to this section\">18.2.4</a></span>\n          parseFloat (string)</h1>\n\n      <p>The <code>parseFloat</code> function produces a Number value dictated by interpretation of the contents of the\n      <var>string</var> argument as a decimal literal.</p>\n\n      <p class=\"normalbefore\">The <code>parseFloat</code> function is the %parseFloat% intrinsic object. When the\n      <code>parseFloat</code> function is called with one argument <var>string</var>, the following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>inputString</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>string</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>inputString</i>).</li>\n        <li>Let <i>trimmedString</i> be a substring of <i>inputString</i> consisting of the leftmost code unit that is not a\n            <i>StrWhiteSpaceChar</i> and all code units to the right of that code unit. (In other words, remove leading white\n            space.) If <i>inputString</i> does not contain any such code units, let <i>trimmedString</i> be the empty string.</li>\n        <li>If neither <i>trimmedString</i> nor any prefix of <i>trimmedString</i> satisfies the syntax of a\n            <i>StrDecimalLiteral</i> (<a href=\"/sec/sec-tonumber-applied-to-the-string-type.html\">see 7.1.3.1</a>), return <b>NaN</b>.</li>\n        <li>Let <i>numberString</i> be the longest prefix of <i>trimmedString</i>, which might be <i>trimmedString</i> itself,\n            that satisfies the syntax of a <i>StrDecimalLiteral</i>.</li>\n        <li>Let <i>mathFloat</i> be MV of <i>numberString</i>.</li>\n        <li>If <i>mathFloat</i>=0, then\n          <ol class=\"block\">\n            <li>If the first code unit of <i>trimmedString</i> is <code>&quot;-&quot;</code>, return &#x2212;0.</li>\n            <li>Return +0.</li>\n          </ol>\n        </li>\n        <li>Return the Number value for <i>mathFloat</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> <code>parseFloat</code> may interpret only a leading portion of <var>string</var> as a\n        Number value; it ignores any code units that cannot be interpreted as part of the notation of an decimal literal, and no\n        indication is given that any such code units were ignored.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-parseint-string-radix\">\n      <h1><span class=\"secnum\" id=\"sec-18.2.5\"><a href=\"/sec/sec-parseint-string-radix.html\" title=\"link to this section\">18.2.5</a></span>\n          parseInt (string , radix)</h1>\n\n      <p>The <code>parseInt</code> function produces an integer value dictated by interpretation of the contents of the\n      <var>string</var> argument according to the specified <var>radix</var>. Leading white space in <var>string</var> is ignored.\n      If <var>radix</var> is <b>undefined</b> or 0, it is assumed to be <span style=\"font-family: Times New Roman\">10</span>\n      except when the number begins with the code unit pairs <code>0x</code> or <code>0X</code>, in which case a radix of 16 is\n      assumed. If <var>radix</var> is <span style=\"font-family: Times New Roman\">16,</span> the number may also optionally begin\n      with the code unit pairs <code>0x</code> or <code>0X</code>.</p>\n\n      <p class=\"normalbefore\">The <code>parseInt</code> function is the %parseInt% intrinsic object. When the\n      <code>parseInt</code> function is called, the following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>inputString</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>string</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>string</i>).</li>\n        <li>Let <i>S</i> be a newly created substring of <i>inputString</i> consisting of the first code unit that is not a\n            <i>StrWhiteSpaceChar</i> and all code units following that code unit. (In other words, remove leading white space.) If\n            <i>inputString</i> does not contain any such code unit, let <i>S</i> be the empty string.</li>\n        <li>Let <i>sign</i> be 1.</li>\n        <li>If <i>S</i> is not empty and the first code unit of <i>S</i> is 0x002D (HYPHEN-MINUS), let <i>sign</i> be\n            &#x2212;1.</li>\n        <li>If <i>S</i> is not empty and the first code unit of <i>S</i> is 0x002B (PLUS SIGN) or 0x002D (HYPHEN-MINUS), remove\n            the first code unit from <i>S</i>.</li>\n        <li>Let <i>R</i> = <a href=\"/sec/sec-toint32.html\">ToInt32</a>(<i>radix</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>R</i>).</li>\n        <li>Let <i>stripPrefix</i> be <b>true</b>.</li>\n        <li>If <i>R</i> &#x2260; 0, then\n          <ol class=\"block\">\n            <li>If <i>R</i> &lt; 2 or <i>R</i> &gt; 36, return <b>NaN</b>.</li>\n            <li>If <i>R</i> &#x2260; 16, let <i>stripPrefix</i> be <b>false</b>.</li>\n          </ol>\n        </li>\n        <li>Else <i>R</i> = 0,\n          <ol class=\"block\">\n            <li>Let <i>R</i> = 10.</li>\n          </ol>\n        </li>\n        <li>If <i>stripPrefix</i> is <b>true</b>, then\n          <ol class=\"block\">\n            <li>If the length of <i>S</i> is at least 2 and the first two code units of <i>S</i> are either <code>&quot;0x&quot;</code> or\n                <code>&quot;0X&quot;</code>, remove the first two code units from <i>S</i> and let <i>R</i> = 16.</li>\n          </ol>\n        </li>\n        <li>If <i>S</i> contains a code unit that is not a radix-<i>R</i> digit, let <i>Z</i> be the substring of <i>S</i>\n            consisting of all code units before the first such code unit; otherwise, let <i>Z</i> be <i>S</i>.</li>\n        <li>If <i>Z</i> is empty, return <b>NaN</b>.</li>\n        <li>Let <i>mathInt</i> be the mathematical integer value that is represented by <i>Z</i> in radix-<i>R</i> notation, using\n            the letters <b>A</b>-<b>Z</b> and <b>a</b>-<b>z</b> for digits with values 10 through 35. (However, if <i>R</i> is 10\n            and <i>Z</i> contains more than 20 significant digits, every significant digit after the 20th may be replaced by a\n            <b>0</b> digit, at the option of the implementation; and if <i>R</i> is not 2, 4, 8, 10, 16, or 32, then\n            <i>mathInt</i> may be an implementation-dependent approximation to the mathematical integer value that is represented\n            by <i>Z</i> in radix-<i>R</i> notation.)</li>\n        <li>If <i>mathInt</i> = 0, then\n          <ol class=\"block\">\n            <li>If <i>sign</i> = &#x2212;1,  return &#x2212;0.</li>\n            <li>Return +0.</li>\n          </ol>\n        </li>\n        <li>Let <i>number</i> be the Number value for <i>mathInt</i>.</li>\n        <li>Return <i>sign</i> &#xD7; <i>number</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> <code>parseInt</code> may interpret only a leading portion of <var>string</var> as an\n        integer value; it ignores any code units that cannot be interpreted as part of the notation of an integer, and no\n        indication is given that any such code units were ignored.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-uri-handling-functions\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-18.2.6\"><a href=\"/sec/sec-uri-handling-functions.html\" title=\"link to this section\">18.2.6</a></span> URI Handling Functions</h1>\n\n        <p>Uniform Resource Identifiers, or URIs, are Strings that identify resources (e.g. web pages or files) and transport\n        protocols by which to access them (e.g. HTTP or FTP) on the Internet. The ECMAScript language itself does not provide any\n        support for using URIs except for functions that encode and decode URIs as described in <a href=\"/sec/sec-decodeuri-encodeduri.html\">18.2.6.2</a>, <a href=\"/sec/sec-decodeuricomponent-encodeduricomponent.html\">18.2.6.3</a>, <a href=\"/sec/sec-encodeuri-uri.html\">18.2.6.4</a> and <a href=\"/sec/sec-encodeuricomponent-uricomponent.html\">18.2.6.5</a></p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> Many implementations of ECMAScript provide additional functions and methods that\n          manipulate web pages; these functions are beyond the scope of this standard.</p>\n        </div>\n      </div>\n\n      <section id=\"sec-uri-syntax-and-semantics\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-18.2.6.1\"><a href=\"/sec/sec-uri-syntax-and-semantics.html\" title=\"link to this section\">18.2.6.1</a></span> URI Syntax and Semantics</h1>\n\n          <p>A URI is composed of a sequence of components separated by component separators. The general form is:</p>\n\n          <p>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"prod\"><span class=\"nt\">Scheme</span> <span class=\"geq\">:</span> <span class=\"nt\">First</span> <code class=\"t\">/</code> <span class=\"nt\">Second</span> <code class=\"t\">;</code> <span class=\"nt\">Third</span> <code class=\"t\">?</code> <span class=\"nt\">Fourth</span></span></p>\n\n          <p>where the italicized names represent components and &#x201C;<code>:</code>&#x201D;, &#x201C;<code>/</code>&#x201D;,\n          &#x201C;<code>;</code>&#x201D; and &#x201C;<code>?</code>&#x201D; are reserved for use as separators. The\n          <code>encodeURI</code> and <code>decodeURI</code> functions are intended to work with complete URIs; they assume that\n          any reserved code units in the URI are intended to have special meaning and so are not encoded. The\n          <code>encodeURIComponent</code> and <code>decodeURIComponent</code> functions are intended to work with the individual\n          component parts of a URI; they assume that any reserved code units represent text and so must be encoded so that they\n          are not interpreted as reserved code units when the component is part of a complete URI.</p>\n\n          <p>The following lexical grammar specifies the form of encoded URIs.</p>\n\n          <h2>Syntax</h2>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">uri</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">uriCharacters</span><sub class=\"g-opt\">opt</sub></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">uriCharacters</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">uriCharacter</span> <span class=\"nt\">uriCharacters</span><sub class=\"g-opt\">opt</sub></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">uriCharacter</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">uriReserved</span></div>\n            <div class=\"rhs\"><span class=\"nt\">uriUnescaped</span></div>\n            <div class=\"rhs\"><span class=\"nt\">uriEscaped</span></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">uriReserved</span> <span class=\"geq\">:::</span> <span class=\"grhsmod\">one of</span></div>\n            <div class=\"rhs\"><code class=\"t\">;</code> <code class=\"t\">/</code> <code class=\"t\">?</code> <code class=\"t\">:</code> <code class=\"t\">@</code> <code class=\"t\">&amp;</code> <code class=\"t\">=</code> <code class=\"t\">+</code> <code class=\"t\">$</code> <code class=\"t\">,</code></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">uriUnescaped</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">uriAlpha</span></div>\n            <div class=\"rhs\"><span class=\"nt\">DecimalDigit</span></div>\n            <div class=\"rhs\"><span class=\"nt\">uriMark</span></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">uriEscaped</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><code class=\"t\">%</code> <span class=\"nt\">HexDigit</span> <span class=\"nt\">HexDigit</span></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">uriAlpha</span> <span class=\"geq\">:::</span> <span class=\"grhsmod\">one of</span></div>\n            <div class=\"rhs\"><code class=\"t\">a</code> <code class=\"t\">b</code> <code class=\"t\">c</code> <code class=\"t\">d</code> <code class=\"t\">e</code> <code class=\"t\">f</code> <code class=\"t\">g</code> <code class=\"t\">h</code> <code class=\"t\">i</code> <code class=\"t\">j</code> <code class=\"t\">k</code> <code class=\"t\">l</code> <code class=\"t\">m</code> <code class=\"t\">n</code> <code class=\"t\">o</code> <code class=\"t\">p</code> <code class=\"t\">q</code> <code class=\"t\">r</code> <code class=\"t\">s</code> <code class=\"t\">t</code> <code class=\"t\">u</code> <code class=\"t\">v</code> <code class=\"t\">w</code> <code class=\"t\">x</code> <code class=\"t\">y</code> <code class=\"t\">z</code></div>\n            <div class=\"rhs\"><code class=\"t\">A</code> <code class=\"t\">B</code> <code class=\"t\">C</code> <code class=\"t\">D</code> <code class=\"t\">E</code> <code class=\"t\">F</code> <code class=\"t\">G</code> <code class=\"t\">H</code> <code class=\"t\">I</code> <code class=\"t\">J</code> <code class=\"t\">K</code> <code class=\"t\">L</code> <code class=\"t\">M</code> <code class=\"t\">N</code> <code class=\"t\">O</code> <code class=\"t\">P</code> <code class=\"t\">Q</code> <code class=\"t\">R</code> <code class=\"t\">S</code> <code class=\"t\">T</code> <code class=\"t\">U</code> <code class=\"t\">V</code> <code class=\"t\">W</code> <code class=\"t\">X</code> <code class=\"t\">Y</code> <code class=\"t\">Z</code></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">uriMark</span> <span class=\"geq\">:::</span> <span class=\"grhsmod\">one of</span></div>\n            <div class=\"rhs\"><code class=\"t\">-</code> <code class=\"t\">_</code> <code class=\"t\">.</code> <code class=\"t\">!</code> <code class=\"t\">~</code> <code class=\"t\">*</code> <code class=\"t\">&apos;</code> <code class=\"t\">(</code> <code class=\"t\">)</code></div>\n          </div>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE</span> The above syntax is based upon RFC 2396 and does not reflect changes introduced by the\n            more recent RFC 3986.</p>\n          </div>\n\n          <p><b>Runtime Semantics</b></p>\n\n          <p>When a code unit to be included in a URI is not listed above or is not intended to have the special meaning sometimes\n          given to the reserved code units, that code unit must be encoded. The code unit is transformed into its UTF-8 encoding,\n          with surrogate pairs first converted from UTF-16 to the corresponding code point value. (Note that for code units in the\n          range [0,127] this results in a single octet with the same value.) The resulting sequence of octets is then transformed\n          into a String with each octet represented by an escape sequence of the form <code><b>&quot;%</b>xx<b>&quot;</b></code>.</p>\n        </div>\n\n        <section id=\"sec-encode\">\n          <h1><span class=\"secnum\" id=\"sec-18.2.6.1.1\"><a href=\"/sec/sec-encode.html\" title=\"link to this section\">18.2.6.1.1</a></span>\n              Runtime Semantics: Encode ( string, unescapedSet )</h1>\n\n          <p class=\"normalbefore\">The encoding and escaping process is described by the abstract operation Encode taking two\n          String arguments <var>string</var> and <var>unescapedSet</var>.</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>strLen</i> be the number of code units in <i>string</i>.</li>\n            <li>Let <i>R</i> be the empty String.</li>\n            <li>Let <i>k</i> be 0.</li>\n            <li>Repeat\n              <ol class=\"block\">\n                <li>If <i>k</i> equals <i>strLen</i>, return <i>R</i>.</li>\n                <li>Let <i>C</i> be the code unit at index <i>k</i> within <i>string</i>.</li>\n                <li>If <i>C</i> is in <i>unescapedSet</i>, then\n                  <ol class=\"block\">\n                    <li>Let <i>S</i> be a String containing only the code unit <i>C</i>.</li>\n                    <li>Let <i>R</i> be a new String value computed by concatenating the previous value of <i>R</i> and\n                        <i>S</i>.</li>\n                  </ol>\n                </li>\n                <li>Else <i>C</i> is not in <i>unescapedSet</i>,\n                  <ol class=\"block\">\n                    <li>If the code unit value of <i>C</i> is not less than 0xDC00 and not greater than 0xDFFF, throw a <b><a href=\"/sec/sec-constructor-properties-of-the-global-object-urierror.html\">URIError</a></b> exception.</li>\n                    <li>If the code unit value of <i>C</i> is less than 0xD800 or greater than 0xDBFF, then\n                      <ol class=\"block\">\n                        <li>Let <i>V</i> be the code unit value of <i>C</i>.</li>\n                      </ol>\n                    </li>\n                    <li>Else,\n                      <ol class=\"block\">\n                        <li>Increase <i>k</i> by 1.</li>\n                        <li>If <i>k</i> equals <i>strLen</i>, throw a <b><a href=\"/sec/sec-constructor-properties-of-the-global-object-urierror.html\">URIError</a></b> exception.</li>\n                        <li>Let <i>kChar</i> be the code unit value of the code unit at index <i>k</i> within <i>string</i>.</li>\n                        <li>If <i>kChar</i> is less than 0xDC00 or greater than 0xDFFF, throw a <b><a href=\"/sec/sec-constructor-properties-of-the-global-object-urierror.html\">URIError</a></b> exception.</li>\n                        <li>Let <i>V</i> be <a href=\"/sec/sec-utf16decode.html\">UTF16Decode</a>(<i>C</i>, <i>kChar</i>).</li>\n                      </ol>\n                    </li>\n                    <li>Let <i>Octets</i> be the array of octets resulting by applying the UTF-8 transformation to <i>V</i>, and\n                        let <i>L</i> be the array size.</li>\n                    <li>Let <i>j</i> be 0.</li>\n                    <li>Repeat, while <i>j</i> &lt; <i>L</i>\n                      <ol class=\"block\">\n                        <li>Let <i>jOctet</i> be the value at index <i>j</i> within <i>Octets</i>.</li>\n                        <li>Let <i>S</i> be a String containing three code units <code>&quot;%</code><i>XY</i><code>&quot;</code> where\n                            <i>XY</i> are two uppercase hexadecimal digits encoding the value of <i>jOctet</i>.</li>\n                        <li>Let <i>R</i> be a new String value computed by concatenating the previous value of <i>R</i> and\n                            <i>S</i>.</li>\n                        <li>Increase <i>j</i> by 1.</li>\n                      </ol>\n                    </li>\n                  </ol>\n                </li>\n                <li>Increase <i>k</i> by 1.</li>\n              </ol>\n            </li>\n          </ol>\n        </section>\n\n        <section id=\"sec-decode\">\n          <h1><span class=\"secnum\" id=\"sec-18.2.6.1.2\"><a href=\"/sec/sec-decode.html\" title=\"link to this section\">18.2.6.1.2</a></span>\n              Runtime Semantics: Decode ( string, reservedSet )</h1>\n\n          <p>The unescaping and decoding process is described by the abstract operation Decode taking two String arguments\n          <var>string</var> and <var>reservedSet</var>.</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>strLen</i> be the number of code units in <i>string</i>.</li>\n            <li>Let <i>R</i> be the empty String.</li>\n            <li>Let <i>k</i> be 0.</li>\n            <li>Repeat\n              <ol class=\"block\">\n                <li>If <i>k</i> equals <i>strLen</i>, return <i>R</i>.</li>\n                <li>Let <i>C</i> be the code unit at index <i>k</i> within <i>string</i>.</li>\n                <li>If <i>C</i> is not <code>&quot;<b>%</b>&quot;</code>, then\n                  <ol class=\"block\">\n                    <li>Let <i>S</i> be the String containing only the code unit <i>C</i>.</li>\n                  </ol>\n                </li>\n                <li>Else <i>C</i> is <code>&quot;<b>%</b>&quot;</code>,\n                  <ol class=\"block\">\n                    <li>Let <i>start</i> be <i>k</i>.</li>\n                    <li>If <i>k</i> + 2 is greater than or equal to <i>strLen</i>, throw a <b><a href=\"/sec/sec-constructor-properties-of-the-global-object-urierror.html\">URIError</a></b> exception.</li>\n                    <li>If the code units at index (<i>k</i>+1) and (<i>k</i> + 2) within <i>string</i> do not represent\n                        hexadecimal digits, throw a <b><a href=\"/sec/sec-constructor-properties-of-the-global-object-urierror.html\">URIError</a></b> exception.</li>\n                    <li>Let <i>B</i> be the 8-bit value represented by the two hexadecimal digits at index (<i>k</i> + 1) and\n                        (<i>k</i> + 2).</li>\n                    <li>Increment <i>k</i> by 2.</li>\n                    <li>If the most significant bit in <i>B</i> is 0, then\n                      <ol class=\"block\">\n                        <li>Let <i>C</i> be the code unit with code unit value <i>B</i>.</li>\n                        <li>If <i>C</i> is not in <i>reservedSet</i>, then\n                          <ol class=\"block\">\n                            <li>Let <i>S</i> be the String containing only the code unit <i>C</i>.</li>\n                          </ol>\n                        </li>\n                        <li>Else <i>C</i> is in <i>reservedSet</i>,\n                          <ol class=\"block\">\n                            <li>Let <i>S</i> be the substring of <i>string</i> from index <i>start</i> to index <i>k</i>\n                                inclusive.</li>\n                          </ol>\n                        </li>\n                      </ol>\n                    </li>\n                    <li>Else the most significant bit in <i>B</i> is 1,\n                      <ol class=\"block\">\n                        <li>Let <i>n</i> be the smallest nonnegative integer such that (<i>B</i> &lt;&lt; <i>n</i>) &amp; 0x80 is\n                            equal to 0.</li>\n                        <li>If <i>n</i> equals 1 or <i>n</i> is greater than 4, throw a <b><a href=\"/sec/sec-constructor-properties-of-the-global-object-urierror.html\">URIError</a></b> exception.</li>\n                        <li>Let <i>Octets</i> be an array of 8-bit integers of size <i>n</i>.</li>\n                        <li>Put <i>B</i> into <i>Octets</i> at index 0.</li>\n                        <li>If <i>k</i> + (3 &#xD7; (<i>n</i> &#x2013; 1)) is greater than or equal to <i>strLen</i>, throw a\n                            <b><a href=\"/sec/sec-constructor-properties-of-the-global-object-urierror.html\">URIError</a></b>\n                            exception.</li>\n                        <li>Let <i>j</i> be 1.</li>\n                        <li>Repeat, while <i>j</i> &lt; <i>n</i>\n                          <ol class=\"block\">\n                            <li>Increment <i>k</i> by 1.</li>\n                            <li>If the code unit at index <i>k</i> within <i>string</i> is not <code>&quot;%&quot;</code>, throw a <b><a href=\"/sec/sec-constructor-properties-of-the-global-object-urierror.html\">URIError</a></b> exception.</li>\n                            <li>If the code units at index (<i>k</i> +1) and (<i>k</i> + 2) within <i>string</i> do not represent\n                                hexadecimal digits, throw a <b><a href=\"/sec/sec-constructor-properties-of-the-global-object-urierror.html\">URIError</a></b> exception.</li>\n                            <li>Let <i>B</i> be the 8-bit value represented by the two hexadecimal digits at index (<i>k</i> + 1)\n                                and (<i>k</i> + 2).</li>\n                            <li>If the two most significant bits in <i>B</i> are not 10, throw a <b><a href=\"/sec/sec-constructor-properties-of-the-global-object-urierror.html\">URIError</a></b> exception.</li>\n                            <li>Increment <i>k</i> by 2.</li>\n                            <li>Put <i>B</i> into <i>Octets</i> at index <i>j</i>.</li>\n                            <li>Increment <i>j</i> by 1.</li>\n                          </ol>\n                        </li>\n                        <li>Let <i>V</i> be the value obtained by applying the UTF-8 transformation to <i>Octets</i>, that is,\n                            from an array of octets into a 21-bit value. If <i>Octets</i> does not contain a valid UTF-8 encoding\n                            of a Unicode code point throw a <b><a href=\"/sec/sec-constructor-properties-of-the-global-object-urierror.html\">URIError</a></b> exception.</li>\n                        <li>If <i>V</i> &lt; 0x10000, then\n                          <ol class=\"block\">\n                            <li>Let <i>C</i> be the code unit <i>V</i>.</li>\n                            <li>If <i>C</i> is not in <i>reservedSet</i>, then\n                              <ol class=\"block\">\n                                <li>Let <i>S</i> be the String containing only the code unit <i>C</i>.</li>\n                              </ol>\n                            </li>\n                            <li>Else <i>C</i> is in <i>reservedSet</i>,\n                              <ol class=\"block\">\n                                <li>Let <i>S</i> be the substring of <i>string</i> from index <i>start</i> to index <i>k</i>\n                                    inclusive.</li>\n                              </ol>\n                            </li>\n                          </ol>\n                        </li>\n                        <li>Else <i>V</i> &#x2265; 0x10000,\n                          <ol class=\"block\">\n                            <li>Let <i>L</i> be (((<i>V</i> &#x2013; 0x10000) &amp; 0x3FF) + 0xDC00).</li>\n                            <li>Let <i>H</i> be ((((<i>V</i> &#x2013; 0x10000) &gt;&gt; 10) &amp; 0x3FF) + 0xD800).</li>\n                            <li>Let <i>S</i> be the String containing the two code units <i>H</i> and <i>L</i>.</li>\n                          </ol>\n                        </li>\n                      </ol>\n                    </li>\n                  </ol>\n                </li>\n                <li>Let <i>R</i> be a new String value computed by concatenating the previous value of <i>R</i> and <i>S</i>.</li>\n                <li>Increase <i>k</i> by 1.</li>\n              </ol>\n            </li>\n          </ol>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE</span> This syntax of Uniform Resource Identifiers is based upon RFC 2396 and does not\n            reflect the more recent RFC 3986 which replaces RFC 2396. A formal description and implementation of UTF-8 is given in\n            RFC 3629.</p>\n\n            <p>In UTF-8, characters are encoded using sequences of 1 to 6 octets. The only octet of a sequence of one has the\n            higher-order bit set to 0, the remaining 7 bits being used to encode the character value. In a sequence of n octets,\n            n&gt;1, the initial octet has the n higher-order bits set to 1, followed by a bit set to 0. The remaining bits of that\n            octet contain bits from the value of the character to be encoded. The following octets all have the higher-order bit\n            set to 1 and the following bit set to 0, leaving 6 bits in each to contain bits from the character to be encoded. The\n            possible UTF-8 encodings of ECMAScript characters are specified in <a href=\"/sec/table-43.html\">Table 43</a>.</p>\n\n            <figure>\n              <figcaption><span id=\"table-43\">Table 43</span> (Informative) &#x2014; UTF-8 Encodings</figcaption>\n              <table class=\"real-table\">\n                <tr>\n                  <th>Code Unit Value</th>\n                  <th>Representation</th>\n                  <th>1<sup>st</sup> Octet</th>\n                  <th>2<sup>nd</sup> Octet</th>\n                  <th>3<sup>rd</sup> Octet</th>\n                  <th>4<sup>th</sup> Octet</th>\n                </tr>\n                <tr>\n                  <td><code>0x0000 - 0x007F</code></td>\n                  <td><code>00000000</code> <code><b>0</b><i>zzzzzzz</i></code></td>\n                  <td><code><b>0</b><i>zzzzzzz</i></code></td>\n                  <td></td>\n                  <td></td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td><code>0x0080 - 0x07FF</code></td>\n                  <td><code><b>00000</b><i>yyy yyzzzzzz</i></code></td>\n                  <td><code><b>110</b><i>yyyyy</i></code></td>\n                  <td><code><b>10</b><i>zzzzzz</i></code></td>\n                  <td></td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td><code>0x0800 - 0xD7FF</code></td>\n                  <td><span style=\"font-family: monospace\"><i>xxxxyyyy yyzzzzzz</i></span></td>\n                  <td><code><b>1110</b><i>xxxx</i></code></td>\n                  <td><code><b>10</b><i>yyyyyy</i></code></td>\n                  <td><code><b>10</b><i>zzzzzz</i></code></td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td><code>0xD800 - 0xDBFF<br></code><span style=\"font-family: sans-serif\"><i>followed by<br></i></span><code>0xDC00 &#x2013; 0xDFFF</code></td>\n                  <td><code><b>110110</b><i>vv vvwwwwxx<br></i></code><i><span style=\"font-family: sans-serif\">followed by<br></span></i><code><b>110111</b><i>yy yyzzzzzz</i></code></td>\n                  <td><code><b>11110</b><i>uuu</i></code></td>\n                  <td><code><b>10</b><i>uuwwww</i></code></td>\n                  <td><code><b>10</b><i>xxyyyy</i></code></td>\n                  <td><code><b>10</b><i>zzzzzz</i></code></td>\n                </tr>\n                <tr>\n                  <td><code>0xD800 - 0xDBFF<br></code><span style=\"font-family: sans-serif\"><i>not followed by<br></i></span><code>0xDC00 &#x2013; 0xDFFF</code></td>\n                  <td><span style=\"font-family: sans-serif\"><i>causes</i></span> <code><b><a href=\"/sec/sec-constructor-properties-of-the-global-object-urierror.html\">URIError</a></b></code></td>\n                  <td></td>\n                  <td></td>\n                  <td></td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td><code>0xDC00 &#x2013; 0xDFFF</code></td>\n                  <td><span style=\"font-family: sans-serif\"><i>causes</i></span> <code><b><a href=\"/sec/sec-constructor-properties-of-the-global-object-urierror.html\">URIError</a></b></code></td>\n                  <td></td>\n                  <td></td>\n                  <td></td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td><code>0xE000 - 0xFFFF</code></td>\n                  <td><span style=\"font-family: monospace\"><i>xxxxyyyy yyzzzzzz</i></span></td>\n                  <td><code><b>1110</b><i>xxxx</i></code></td>\n                  <td><code><b>10</b><i>yyyyyy</i></code></td>\n                  <td><code><b>10</b><i>zzzzzz</i></code></td>\n                  <td></td>\n                </tr>\n              </table>\n            </figure>\n\n            <p>Where<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<var>uuuuu</var> <span style=\"font-family: Times New Roman\">=</span>\n            <var>vvvv</var>  <span style=\"font-family: Times New Roman\">+</span> <span style=\"font-family: Times New\n            Roman\">1</span><br>to account for the addition of 0x10000 as in Surrogates, section 3.7, of the Unicode Standard.</p>\n\n            <p>The range of code unit values 0xD800-0xDFFF is used to encode surrogate pairs; the above transformation combines a\n            UTF-16 surrogate pair into a UTF-32 representation and encodes the resulting 21-bit value in UTF-8. Decoding\n            reconstructs the surrogate pair.</p>\n\n            <p>RFC 3629 prohibits the decoding of invalid UTF-8 octet sequences. For example, the invalid sequence C0 80 must not\n            decode into the code unit 0x0000. Implementations of the Decode algorithm are required to throw a <b><a href=\"/sec/sec-constructor-properties-of-the-global-object-urierror.html\">URIError</a></b> when encountering such invalid\n            sequences.</p>\n          </div>\n        </section>\n      </section>\n\n      <section id=\"sec-decodeuri-encodeduri\">\n        <h1><span class=\"secnum\" id=\"sec-18.2.6.2\"><a href=\"/sec/sec-decodeuri-encodeduri.html\" title=\"link to this section\">18.2.6.2</a></span> decodeURI (encodedURI)</h1>\n\n        <p>The <code>decodeURI</code> function computes a new version of a URI in which each escape sequence and UTF-8 encoding of\n        the sort that might be introduced by the <code>encodeURI</code> function is replaced with the UTF-16 encoding of the code\n        points that it represents. Escape sequences that could not have been introduced by <code>encodeURI</code> are not\n        replaced.</p>\n\n        <p class=\"normalbefore\">The <code>decodeURI</code> function is the %decodeURI% intrinsic object. When the\n        <code>decodeURI</code> function is called with one argument <var>encodedURI</var>, the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>uriString</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>encodedURI</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>uriString</i>).</li>\n          <li>Let <i>reservedURISet</i> be a String containing one instance of each code unit valid in <i>uriReserved</i> plus\n              <code>&quot;#&quot;</code>.</li>\n          <li>Return <a href=\"/sec/sec-decode.html\">Decode</a>(<i>uriString</i>, <i>reservedURISet</i>).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The code point <code>&quot;#&quot;</code> is not decoded from escape sequences even though it is\n          not a reserved URI code point.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-decodeuricomponent-encodeduricomponent\">\n        <h1><span class=\"secnum\" id=\"sec-18.2.6.3\"><a href=\"/sec/sec-decodeuricomponent-encodeduricomponent.html\" title=\"link to this section\">18.2.6.3</a></span> decodeURIComponent (encodedURIComponent)</h1>\n\n        <p>The <code>decodeURIComponent</code> function computes a new version of a URI in which each escape sequence and UTF-8\n        encoding of the sort that might be introduced by the <code>encodeURIComponent</code> function is replaced with the UTF-16\n        encoding of the code points that it represents.</p>\n\n        <p class=\"normalbefore\">The <code>decodeURIComponent</code> function is the %decodeURIComponent% intrinsic object. When\n        the <code>decodeURIComponent</code> function is called with one argument <var>encodedURIComponent</var>, the following\n        steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>componentString</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>encodedURIComponent</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>componentString</i>).</li>\n          <li>Let <i>reservedURIComponentSet</i> be the empty String.</li>\n          <li>Return <a href=\"/sec/sec-decode.html\">Decode</a>(<i>componentString</i>, <i>reservedURIComponentSet</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-encodeuri-uri\">\n        <h1><span class=\"secnum\" id=\"sec-18.2.6.4\"><a href=\"/sec/sec-encodeuri-uri.html\" title=\"link to this section\">18.2.6.4</a></span>\n            encodeURI (uri)</h1>\n\n        <p>The <code>encodeURI</code> function computes a new version of a UTF-16 encoded (<a href=\"/sec/sec-ecmascript-language-types-string-type.html\">6.1.4</a>) URI in which each instance of certain code points is replaced\n        by one, two, three, or four escape sequences representing the UTF-8 encoding of the code points.</p>\n\n        <p class=\"normalbefore\">The <code>encodeURI</code> function is the %encodeURI% intrinsic object. When the\n        <code>encodeURI</code> function is called with one argument <span class=\"nt\">uri</span>, the following steps are\n        taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>uriString</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>uri</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>uriString</i>).</li>\n          <li>Let <i>unescapedURISet</i> be a String containing one instance of each code unit valid in <i>uriReserved</i> and\n              <i>uriUnescaped</i> plus &quot;<code>#</code>&quot;.</li>\n          <li>Return <a href=\"/sec/sec-encode.html\">Encode</a>(<i>uriString</i>, <i>unescapedURISet</i>).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The code unit <code>&quot;#&quot;</code> is not encoded to an escape sequence even though it is\n          not a reserved or unescaped URI code point.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-encodeuricomponent-uricomponent\">\n        <h1><span class=\"secnum\" id=\"sec-18.2.6.5\"><a href=\"/sec/sec-encodeuricomponent-uricomponent.html\" title=\"link to this section\">18.2.6.5</a></span> encodeURIComponent (uriComponent)</h1>\n\n        <p>The <code>encodeURIComponent</code> function computes a new version of a UTF-16 encoded (<a href=\"/sec/sec-ecmascript-language-types-string-type.html\">6.1.4</a>) URI in which each instance of certain code points is replaced\n        by one, two, three, or four escape sequences representing the UTF-8 encoding of the code point.</p>\n\n        <p class=\"normalbefore\">The <code>encodeURIComponent</code> function is the %encodeURIComponent% intrinsic object. When\n        the <code>encodeURIComponent</code> function is called with one argument <span class=\"nt\">uriComponent</span>, the\n        following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>componentString</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>uriComponent</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>componentString</i>).</li>\n          <li>Let <i>unescapedURIComponentSet</i> be a String containing one instance of each code unit valid in\n              <i>uriUnescaped</i>.</li>\n          <li>Return <a href=\"/sec/sec-encode.html\">Encode</a>(<i>componentString</i>, <i>unescapedURIComponentSet</i>).</li>\n        </ol>\n      </section>\n    </section>\n  "}