{"id":"sec-function.prototype-@@hasinstance","html":"\n        <h1><span class=\"secnum\" id=\"sec-19.2.3.6\"><a href=\"/sec/sec-function.prototype-@@hasinstance.html\" title=\"link to this section\">19.2.3.6</a></span> Function.prototype[@@hasInstance] ( V )</h1>\n\n        <p class=\"normalbefore\">When the @@hasInstance method of an object <var>F</var> is called with value <var>V</var>, the\n        following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>F</i> be the <b>this</b> value.</li>\n          <li>Return <a href=\"/sec/sec-ordinaryhasinstance.html\">OrdinaryHasInstance</a>(<i>F</i>, <i>V</i>).</li>\n        </ol>\n\n        <p>The value of the <code>name</code> property of this function is <code>&quot;[Symbol.hasInstance]&quot;</code>.</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <span class=\"value\">false</span>,\n        [[Configurable]]: <span class=\"value\">false</span> }.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> This is the default implementation of <code>@@hasInstance</code> that most functions\n          inherit. <code>@@hasInstance</code> is called by the <code>instanceof</code> operator to determine whether a value is an\n          instance of a specific constructor. An expression such as</p>\n\n          <p>&#xA0;&#xA0;&#xA0;<code>v instanceof F</code></p>\n\n          <p>evaluates as</p>\n\n          <p>&#xA0;&#xA0;&#xA0;<code>F[@@hasInstance](v)</code></p>\n\n          <p>A constructor function can control which objects are recognized as its instances by <code>instanceof</code> by\n          exposing a different <code>@@hasInstance</code> method on the function.</p>\n        </div>\n\n        <p>This property is non-writable and non-configurable to prevent tampering that could be used to globally expose the\n        target function of a <a href=\"/sec/sec-bound-function-exotic-objects.html\">bound function</a>.</p>\n      "}