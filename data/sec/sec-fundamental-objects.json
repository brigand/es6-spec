{"id":"sec-fundamental-objects","html":"\n  <div class=\"front\">\n    <h1><span class=\"secnum\" id=\"sec-19\"><a href=\"/sec/sec-fundamental-objects.html\" title=\"link to this section\">19</a></span> Fundamental\n        Objects</h1>\n  </div>\n\n  <section id=\"sec-object-objects\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-19.1\"><a href=\"/sec/sec-object-objects.html\" title=\"link to this section\">19.1</a></span> Object\n          Objects</h1>\n    </div>\n\n    <section id=\"sec-object-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.1\"><a href=\"/sec/sec-object-constructor.html\" title=\"link to this section\">19.1.1</a></span>\n            The Object Constructor</h1>\n\n        <p>The Object constructor is the %Object% intrinsic object and the initial value of the <code>Object</code> property of\n        the global object. When called as a constructor it creates a new ordinary object. When <code>Object</code> is called as a\n        function rather than as a constructor, it performs a type conversion.</p>\n\n        <p>The <code>Object</code> constructor is designed to be subclassable. It may be used as the value of an\n        <code>extends</code> clause of a class definition.</p>\n      </div>\n\n      <section id=\"sec-object-value\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.1.1\"><a href=\"/sec/sec-object-value.html\" title=\"link to this section\">19.1.1.1</a></span>\n            Object ( [ value ] )</h1>\n\n        <p class=\"normalbefore\">When <code>Object</code> function is called with optional argument <var>value</var>, the following\n        steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If NewTarget is neither <b>undefined</b> nor the active function<i>,</i> then\n            <ol class=\"block\">\n              <li>Return <a href=\"/sec/sec-ordinarycreatefromconstructor.html\">OrdinaryCreateFromConstructor</a>(NewTarget,\n                  <code>&quot;%ObjectPrototype%&quot;</code>).</li>\n            </ol>\n          </li>\n          <li>If <i>value</i> is <b>null</b>, <b>undefined</b> or not supplied, return <a href=\"/sec/sec-objectcreate.html\">ObjectCreate</a>(%ObjectPrototype%).</li>\n          <li>Return <a href=\"/sec/sec-toobject.html\">ToObject</a>(<i>value</i>).</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-object-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.2\"><a href=\"/sec/sec-properties-of-the-object-constructor.html\" title=\"link to this section\">19.1.2</a></span> Properties of the Object Constructor</h1>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        Object constructor is the intrinsic object %FunctionPrototype%.</p>\n\n        <p>Besides the <code>length</code> property (whose value is <b>1</b>), the Object constructor has the following\n        properties:</p>\n      </div>\n\n      <section id=\"sec-object.assign\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.2.1\"><a href=\"/sec/sec-object.assign.html\" title=\"link to this section\">19.1.2.1</a></span>\n            Object.assign ( target, ...sources )</h1>\n\n        <p class=\"normalbefore\">The <b>assign</b> function is used to copy the values of all of the enumerable own properties from\n        one or more source objects to a <var>target</var> object. When the <b>assign</b> function is called, the following steps\n        are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>to</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<i>target</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>to</i>).</li>\n          <li>If only one argument was passed, return <i>to</i>.</li>\n          <li>Let <i>sources</i> be the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> of argument values starting\n              with the second argument.</li>\n          <li>For each element <i>nextSource</i> of <i>sources</i>, in ascending index order,\n            <ol class=\"block\">\n              <li>If <i>nextSource</i> is <b>undefined</b> or <b>null</b>, let <i>keys</i> be an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>Let <i>from</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<i>nextSource</i>).</li>\n                  <li>Let <i>keys</i> be <i>from</i>.[[OwnPropertyKeys]]().</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>keys</i>).</li>\n                </ol>\n              </li>\n              <li>Repeat for each element <i>nextKey</i> of <i>keys</i> in <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> order,\n                <ol class=\"block\">\n                  <li>Let <i>desc</i> be <i>from</i>.[[GetOwnProperty]](<i>nextKey</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>desc</i>).</li>\n                  <li>if <i>desc</i> is not <b>undefined</b> and <i>desc</i>.[[Enumerable]] is <b>true</b>, then\n                    <ol class=\"block\">\n                      <li>Let <i>propValue</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>from</i>, <i>nextKey</i>).</li>\n                      <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>propValue</i>).</li>\n                      <li>Let <i>status</i> be <a href=\"/sec/sec-set-o-p-v-throw.html\">Set</a>(<i>to</i>, <i>nextKey</i>, <i>propValue</i>,\n                          <b>true</b>).</li>\n                      <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n                    </ol>\n                  </li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Return <i>to</i>.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>assign</code> method is <b>2</b>.</p>\n      </section>\n\n      <section id=\"sec-object.create\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.2.2\"><a href=\"/sec/sec-object.create.html\" title=\"link to this section\">19.1.2.2</a></span>\n            Object.create ( O [ , Properties ] )</h1>\n\n        <p class=\"normalbefore\">The <b>create</b> function creates a new object with a specified prototype. When the <b>create</b>\n        function is called, the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is neither Object nor Null, throw a\n              <b>TypeError</b> exception.</li>\n          <li>Let <i>obj</i> be <a href=\"/sec/sec-objectcreate.html\">ObjectCreate</a>(<i>O</i>).</li>\n          <li>If the argument <i>Properties</i> is present and not <b>undefined</b>, then\n            <ol class=\"block\">\n              <li>Return <a href=\"/sec/sec-objectdefineproperties.html\">ObjectDefineProperties</a>(<i>obj</i>, <i>Properties</i>).</li>\n            </ol>\n          </li>\n          <li>Return <i>obj</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-object.defineproperties\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-19.1.2.3\"><a href=\"/sec/sec-object.defineproperties.html\" title=\"link to this section\">19.1.2.3</a></span> Object.defineProperties ( O, Properties )</h1>\n\n          <p class=\"normalbefore\">The <b>defineProperties</b> function is used to add own properties and/or update the attributes\n          of existing own properties of an object. When the <b>defineProperties</b> function is called, the following steps are\n          taken:</p>\n\n          <ol class=\"proc\">\n            <li>Return <a href=\"/sec/sec-objectdefineproperties.html\">ObjectDefineProperties</a>(<i>O</i>, <i>Properties</i>).</li>\n          </ol>\n        </div>\n\n        <section id=\"sec-objectdefineproperties\">\n          <h1><span class=\"secnum\" id=\"sec-19.1.2.3.1\"><a href=\"/sec/sec-objectdefineproperties.html\" title=\"link to this section\">19.1.2.3.1</a></span> Runtime Semantics: ObjectDefineProperties ( O, Properties )</h1>\n\n          <p class=\"normalbefore\">The abstract operation ObjectDefineProperties with arguments <var>O</var> and <span class=\"nt\">Properties</span> performs the following steps:</p>\n\n          <ol class=\"proc\">\n            <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is not Object, throw a <b>TypeError</b>\n                exception.</li>\n            <li>Let <i>props</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<i>Properties</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>props</i>).</li>\n            <li>Let <i>keys</i> be <i>props</i>.[[OwnPropertyKeys]]().</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>keys</i>).</li>\n            <li>Let <i>descriptors</i> be an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n            <li>Repeat for each element <i>nextKey</i> of <i>keys</i> in <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> order,\n              <ol class=\"block\">\n                <li>Let <i>propDesc</i> be <i>props</i>.[[GetOwnProperty]](<i>nextKey</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>propDesc</i>).</li>\n                <li>If <i>propDesc</i> is not <b>undefined</b> and <i>propDesc</i>.[[Enumerable]] is <b>true</b>, then\n                  <ol class=\"block\">\n                    <li>Let <i>descObj</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>( <i>props</i>, <i>nextKey</i>).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>descObj</i>).</li>\n                    <li>Let <i>desc</i> be <a href=\"/sec/sec-topropertydescriptor.html\">ToPropertyDescriptor</a>(<i>descObj</i>).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>desc</i>).</li>\n                    <li>Append the pair (a two element <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>) consisting of\n                        <i>nextKey</i> and <i>desc</i> to the end of <i>descriptors</i>.</li>\n                  </ol>\n                </li>\n              </ol>\n            </li>\n            <li>For each <i>pair</i> from <i>descriptors</i> in list order,\n              <ol class=\"block\">\n                <li>Let <i>P</i> be the first element of <i>pair</i>.</li>\n                <li>Let <i>desc</i> be the second element of <i>pair</i>.</li>\n                <li>Let <i>status</i> be <a href=\"/sec/sec-definepropertyorthrow.html\">DefinePropertyOrThrow</a>(<i>O</i>,<i>P</i>,\n                    <i>desc</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n              </ol>\n            </li>\n            <li>Return <i>O</i>.</li>\n          </ol>\n        </section>\n      </section>\n\n      <section id=\"sec-object.defineproperty\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.2.4\"><a href=\"/sec/sec-object.defineproperty.html\" title=\"link to this section\">19.1.2.4</a></span> Object.defineProperty ( O, P, Attributes )</h1>\n\n        <p class=\"normalbefore\">The <b>defineProperty</b> function is used to add an own property and/or update the attributes of\n        an existing own property of an object. When the <b>defineProperty</b> function is called, the following steps are\n        taken:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>Let <i>key</i> be <a href=\"/sec/sec-topropertykey.html\">ToPropertyKey</a>(<i>P</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>key</i>).</li>\n          <li>Let <i>desc</i> be <a href=\"/sec/sec-topropertydescriptor.html\">ToPropertyDescriptor</a>(<i>Attributes</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>desc</i>).</li>\n          <li>Let <i>success</i> be <a href=\"/sec/sec-definepropertyorthrow.html\">DefinePropertyOrThrow</a>(<i>O,key</i>,\n              <i>desc</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>success</i>).</li>\n          <li>Return <i>O</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-object.freeze\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.2.5\"><a href=\"/sec/sec-object.freeze.html\" title=\"link to this section\">19.1.2.5</a></span>\n            Object.freeze ( O )</h1>\n\n        <p class=\"normalbefore\">When the <b>freeze</b> function is called, the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is not Object, return <i>O</i>.</li>\n          <li>Let <i>status</i> be <a href=\"/sec/sec-setintegritylevel.html\">SetIntegrityLevel</a>( <i>O</i>, &quot;<code>frozen</code>&quot;).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n          <li>If <i>status</i> is <b>false</b>, throw a <b>TypeError</b> exception.</li>\n          <li>Return <i>O</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-object.getownpropertydescriptor\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.2.6\"><a href=\"/sec/sec-object.getownpropertydescriptor.html\" title=\"link to this section\">19.1.2.6</a></span> Object.getOwnPropertyDescriptor ( O, P )</h1>\n\n        <p class=\"normalbefore\">When the <code>getOwnPropertyDescriptor</code> function is called, the following steps are\n        taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>obj</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<i>O</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>obj</i>).</li>\n          <li>Let <i>key</i> be <a href=\"/sec/sec-topropertykey.html\">ToPropertyKey</a>(<i>P</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>key</i>).</li>\n          <li>Let <i>desc</i> be <i>obj.</i>[[GetOwnProperty]](<i>key</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>desc</i>).</li>\n          <li>Return <a href=\"/sec/sec-frompropertydescriptor.html\">FromPropertyDescriptor</a>(<i>desc</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-object.getownpropertynames\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.2.7\"><a href=\"/sec/sec-object.getownpropertynames.html\" title=\"link to this section\">19.1.2.7</a></span> Object.getOwnPropertyNames ( O )</h1>\n\n        <p class=\"normalbefore\">When the <b>getOwnPropertyNames</b> function is called, the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Return <a href=\"/sec/sec-getownpropertykeys.html\">GetOwnPropertyKeys</a>(<i>O</i>, String).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-object.getownpropertysymbols\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-19.1.2.8\"><a href=\"/sec/sec-object.getownpropertysymbols.html\" title=\"link to this section\">19.1.2.8</a></span> Object.getOwnPropertySymbols ( O )</h1>\n\n          <p class=\"normalbefore\">When the <b>getOwnPropertySymbols</b> function is called with argument <var>O</var>, the\n          following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li>Return <a href=\"/sec/sec-getownpropertykeys.html\">GetOwnPropertyKeys</a>(<i>O</i>, Symbol).</li>\n          </ol>\n        </div>\n\n        <section id=\"sec-getownpropertykeys\">\n          <h1><span class=\"secnum\" id=\"sec-19.1.2.8.1\"><a href=\"/sec/sec-getownpropertykeys.html\" title=\"link to this section\">19.1.2.8.1</a></span> Runtime Semantics:  GetOwnPropertyKeys ( O, Type )</h1>\n\n          <p class=\"normalbefore\">The abstract operation GetOwnPropertyKeys is called with arguments <var>O</var> and <span class=\"nt\">Type</span> where <var>O</var> is an Object and <span class=\"nt\">Type</span> is one of the ECMAScript\n          specification types String or Symbol. The following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>obj</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<i>O</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>obj</i>).</li>\n            <li>Let <i>keys</i> be <i>obj.</i>[[OwnPropertyKeys]]().</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>keys</i>).</li>\n            <li>Let <i>nameList</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n            <li>Repeat for each element <i>nextKey</i> of <i>keys</i> in <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> order,\n              <ol class=\"block\">\n                <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>nextKey</i>) is <i>Type</i>, then\n                  <ol class=\"block\">\n                    <li>Append <i>nextKey</i> as the last element of <i>nameList</i>.</li>\n                  </ol>\n                </li>\n              </ol>\n            </li>\n            <li>Return <a href=\"/sec/sec-createarrayfromlist.html\">CreateArrayFromList</a>(<i>nameList</i>).</li>\n          </ol>\n        </section>\n      </section>\n\n      <section id=\"sec-object.getprototypeof\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.2.9\"><a href=\"/sec/sec-object.getprototypeof.html\" title=\"link to this section\">19.1.2.9</a></span> Object.getPrototypeOf ( O )</h1>\n\n        <p class=\"normalbefore\">When the <code>getPrototypeOf</code> function is called with argument <var>O</var>, the following\n        steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>obj</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<i>O</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>obj</i>).</li>\n          <li>Return <i>obj.</i>[[GetPrototypeOf]]().</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-object.is\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.2.10\"><a href=\"/sec/sec-object.is.html\" title=\"link to this section\">19.1.2.10</a></span>\n            Object.is ( value1, value2 )</h1>\n\n        <p class=\"normalbefore\">When the <b>is</b> function is called with arguments <var>value1</var> and <var>value2</var> the\n        following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Return <a href=\"/sec/sec-samevalue.html\">SameValue</a>(<i>value1</i>, <i>value2</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-object.isextensible\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.2.11\"><a href=\"/sec/sec-object.isextensible.html\" title=\"link to this section\">19.1.2.11</a></span> Object.isExtensible ( O )</h1>\n\n        <p class=\"normalbefore\">When the <b>isExtensible</b> function is called with argument <var>O</var>, the following steps\n        are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is not Object, return <b>false</b>.</li>\n          <li>Return <a href=\"/sec/sec-isextensible-o.html\">IsExtensible</a>(<i>O</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-object.isfrozen\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.2.12\"><a href=\"/sec/sec-object.isfrozen.html\" title=\"link to this section\">19.1.2.12</a></span> Object.isFrozen ( O )</h1>\n\n        <p class=\"normalbefore\">When the <b>isFrozen</b> function is called with argument <var>O</var>, the following steps are\n        taken:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is not Object, return <b>true</b>.</li>\n          <li>Return <a href=\"/sec/sec-testintegritylevel.html\">TestIntegrityLevel</a>(<i>O</i>, &quot;<code>frozen</code>&quot;).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-object.issealed\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.2.13\"><a href=\"/sec/sec-object.issealed.html\" title=\"link to this section\">19.1.2.13</a></span> Object.isSealed ( O )</h1>\n\n        <p class=\"normalbefore\">When the <b>isSealed</b> function is called with argument <var>O</var>, the following steps are\n        taken:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is not Object, return <b>true</b>.</li>\n          <li>Return <a href=\"/sec/sec-testintegritylevel.html\">TestIntegrityLevel</a>(<i>O</i>, &quot;<code>sealed</code>&quot;).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-object.keys\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.2.14\"><a href=\"/sec/sec-object.keys.html\" title=\"link to this section\">19.1.2.14</a></span>\n            Object.keys ( O )</h1>\n\n        <p class=\"normalbefore\">When the <b>keys</b> function is called with argument <var>O</var>, the following steps are\n        taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>obj</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<i>O</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>obj</i>).</li>\n          <li>Let <i>nameList</i> be <a href=\"/sec/sec-enumerableownnames.html\">EnumerableOwnNames</a>(<i>obj</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nameList</i>).</li>\n          <li>Return <a href=\"/sec/sec-createarrayfromlist.html\">CreateArrayFromList</a>(<i>nameList</i>).</li>\n        </ol>\n\n        <p>If an implementation defines a specific order of enumeration for the for-in statement, the same order must be used for\n        the elements of the array returned in step 4.</p>\n      </section>\n\n      <section id=\"sec-object.preventextensions\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.2.15\"><a href=\"/sec/sec-object.preventextensions.html\" title=\"link to this section\">19.1.2.15</a></span> Object.preventExtensions ( O )</h1>\n\n        <p class=\"normalbefore\">When the <b>preventExtensions</b> function is called, the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is not Object, return <i>O</i>.</li>\n          <li>Let <i>status</i> be <i>O</i>.[[PreventExtensions]]().</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n          <li>If <i>status</i> is <b>false</b>, throw a <b>TypeError</b> exception.</li>\n          <li>Return <i>O</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-object.prototype\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.2.16\"><a href=\"/sec/sec-object.prototype.html\" title=\"link to this section\">19.1.2.16</a></span> Object.prototype</h1>\n\n        <p>The initial value of <code>Object.prototype</code> is the intrinsic object %ObjectPrototype% (<a href=\"/sec/sec-properties-of-the-object-prototype-object.html\">19.1.3</a>).</p>\n\n        <p>This property has the attributes {[[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-object.seal\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.2.17\"><a href=\"/sec/sec-object.seal.html\" title=\"link to this section\">19.1.2.17</a></span>\n            Object.seal ( O )</h1>\n\n        <p class=\"normalbefore\">When the <b>seal</b> function is called, the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is not Object, return <i>O</i>.</li>\n          <li>Let <i>status</i> be <a href=\"/sec/sec-setintegritylevel.html\">SetIntegrityLevel</a>( <i>O</i>,  &quot;<code>sealed</code>&quot;).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n          <li>If <i>status</i> is <b>false</b>, throw a <b>TypeError</b> exception.</li>\n          <li>Return <i>O</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-object.setprototypeof\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.2.18\"><a href=\"/sec/sec-object.setprototypeof.html\" title=\"link to this section\">19.1.2.18</a></span> Object.setPrototypeOf ( O, proto )</h1>\n\n        <p class=\"normalbefore\">When the <code>setPrototypeOf</code> function is called with arguments <span style=\"font-family:\n        Times New Roman\"><i>O</i> and</span> proto, the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>O</i> be <a href=\"/sec/sec-requireobjectcoercible.html\">RequireObjectCoercible</a>(<i>O</i>)<i>.</i></li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>O</i>).</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>proto</i>) is neither Object nor Null, throw a\n              <b>TypeError</b> exception.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is not Object, return <i>O</i>.</li>\n          <li>Let <i>status</i> be <i>O</i>.[[SetPrototypeOf]](<i>proto</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n          <li>If <i>status</i> is <b>false</b>, throw a <b>TypeError</b> exception.</li>\n          <li>Return <i>O</i>.</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-object-prototype-object\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.3\"><a href=\"/sec/sec-properties-of-the-object-prototype-object.html\" title=\"link to this section\">19.1.3</a></span> Properties of the Object Prototype Object</h1>\n\n        <p>The Object prototype object is the intrinsic object %ObjectPrototype%. The Object prototype object is an ordinary\n        object.</p>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        Object prototype object is <span class=\"value\">null</span> and the initial value of the [[Extensible]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is <span class=\"value\">true</span>.</p>\n      </div>\n\n      <section id=\"sec-object.prototype.constructor\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.3.1\"><a href=\"/sec/sec-object.prototype.constructor.html\" title=\"link to this section\">19.1.3.1</a></span> Object.prototype.constructor</h1>\n\n        <p>The initial value of <code>Object.prototype.constructor</code> is the intrinsic object %Object%.</p>\n      </section>\n\n      <section id=\"sec-object.prototype.hasownproperty\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.3.2\"><a href=\"/sec/sec-object.prototype.hasownproperty.html\" title=\"link to this section\">19.1.3.2</a></span> Object.prototype.hasOwnProperty ( V )</h1>\n\n        <p class=\"normalbefore\">When the <code>hasOwnProperty</code> method is called with argument <var>V</var>, the following\n        steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>P</i> be <a href=\"/sec/sec-topropertykey.html\">ToPropertyKey</a>(<i>V</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>P</i>).</li>\n          <li>Let <i>O</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<b>this</b> value).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>O</i>).</li>\n          <li>Return <a href=\"/sec/sec-hasownproperty.html\">HasOwnProperty</a>(<i>O</i>, <i>P</i>).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The ordering of steps 1 and 3 is chosen to ensure that any exception that would have\n          been thrown by step 1 in previous editions of this specification will continue to be thrown even if the <b>this</b>\n          value is <span class=\"value\">undefined</span> or <span class=\"value\">null</span>.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-object.prototype.isprototypeof\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.3.3\"><a href=\"/sec/sec-object.prototype.isprototypeof.html\" title=\"link to this section\">19.1.3.3</a></span> Object.prototype.isPrototypeOf ( V )</h1>\n\n        <p class=\"normalbefore\">When the <code>isPrototypeOf</code> method is called with argument <var>V</var>, the following\n        steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>V</i>) is not Object, return <b>false</b>.</li>\n          <li>Let <i>O</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<b>this</b> value).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>O</i>).</li>\n          <li>Repeat\n            <ol class=\"block\">\n              <li>Let <i>V</i> be <i>V</i>.[[GetPrototypeOf]]().</li>\n              <li>If <i>V</i> is <b>null</b>, return <b>false</b></li>\n              <li>If <a href=\"/sec/sec-samevalue.html\">SameValue</a>(<i>O</i>, <i>V</i>) is <b>true</b>, return <b>true</b>.</li>\n            </ol>\n          </li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The ordering of steps 1 and 2 preserves the behaviour specified by previous editions of\n          this specification for the case where <var>V</var> is not an object and the <b>this</b> value is <span class=\"value\">undefined</span> or <span class=\"value\">null</span>.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-object.prototype.propertyisenumerable\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.3.4\"><a href=\"/sec/sec-object.prototype.propertyisenumerable.html\" title=\"link to this section\">19.1.3.4</a></span> Object.prototype.propertyIsEnumerable ( V )</h1>\n\n        <p class=\"normalbefore\">When the <code>propertyIsEnumerable</code> method is called with argument <var>V</var>, the\n        following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>P</i> be <a href=\"/sec/sec-topropertykey.html\">ToPropertyKey</a>(<i>V</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>P</i>).</li>\n          <li>Let <i>O</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<b>this</b> value).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>O</i>).</li>\n          <li>Let <i>desc</i> be <i>O</i>.[[GetOwnProperty]](<i>P</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>desc</i>).</li>\n          <li>If <i>desc</i> is <b>undefined</b>, return <b>false</b>.</li>\n          <li>Return the value of <i>desc</i>.[[Enumerable]].</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> This method does not consider objects in the prototype chain.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> The ordering of steps 1 and 3 is chosen to ensure that any exception that would have\n          been thrown by step 1 in previous editions of this specification will continue to be thrown even if the <b>this</b>\n          value is <span class=\"value\">undefined</span> or <span class=\"value\">null</span>.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-object.prototype.tolocalestring\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.3.5\"><a href=\"/sec/sec-object.prototype.tolocalestring.html\" title=\"link to this section\">19.1.3.5</a></span> Object.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ]\n            )</h1>\n\n        <p class=\"normalbefore\">When the <b>toLocaleString</b> method is called, the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>O</i> be the <b>this</b> value.</li>\n          <li>Return <a href=\"/sec/sec-invoke.html\">Invoke</a>(<i>O</i>, <code>&quot;toString&quot;</code>).</li>\n        </ol>\n\n        <p>The optional parameters to this function are not used but are intended to correspond to the parameter pattern used by\n        ECMA-402 <code>toLocalString</code> functions. Implementations that do not include ECMA-402 support must not use those\n        parameter positions for other purposes.</p>\n\n        <p>The <code>length</code> property of the <code>toLocaleString</code> method is <b>0</b>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> This function provides a generic <code>toLocaleString</code> implementation for\n          objects that have no locale-specific <code>toString</code> behaviour. <code>Array</code>, <code>Number</code>,\n          <code>Date</code>, and <code>Typed Arrays</code> provide their own locale-sensitive <code>toLocaleString</code>\n          methods.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> ECMA-402 intentionally does not provide an alternative to this default\n          implementation.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-object.prototype.tostring\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.3.6\"><a href=\"/sec/sec-object.prototype.tostring.html\" title=\"link to this section\">19.1.3.6</a></span> Object.prototype.toString ( )</h1>\n\n        <p class=\"normalbefore\">When the <code>toString</code> method is called, the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If the <b>this</b> value is <b>undefined</b>, return <code>&quot;[object Undefined]&quot;</code>.</li>\n          <li>If the <b>this</b> value is <b>null</b>, return <code>&quot;[object Null]&quot;</code>.</li>\n          <li>Let <i>O</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<b>this</b> value).</li>\n          <li>Let <i>isArray</i> be <a href=\"/sec/sec-isarray.html\">IsArray</a>(<i>O</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>isArray</i>).</li>\n          <li>If <i>isArray</i> is <b>true</b>, let <i>builtinTag</i> be <code>&quot;Array&quot;</code>.</li>\n          <li>Else, if <i>O</i> is an exotic String object, let <i>builtinTag</i> be <code>&quot;String&quot;</code>.</li>\n          <li>Else, if <i>O</i> has an [[ParameterMap]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a>, let <i>builtinTag</i> be <code>&quot;Arguments&quot;</code>.</li>\n          <li>Else, if <i>O</i> has a [[Call]] internal method, let <i>builtinTag</i> be <code>&quot;Function&quot;</code>.</li>\n          <li>Else, if <i>O</i> has an [[ErrorData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>,\n              let <i>builtinTag</i> be <code>&quot;Error&quot;</code>.</li>\n          <li>Else, if <i>O</i> has a [[BooleanData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>,\n              let <i>builtinTag</i> be <code>&quot;Boolean&quot;</code>.</li>\n          <li>Else, if <i>O</i> has a [[NumberData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>,\n              let <i>builtinTag</i> be <code>&quot;Number&quot;</code>.</li>\n          <li>Else, if <i>O</i> has a [[DateValue]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>,\n              let <i>builtinTag</i> be <code>&quot;Date&quot;</code>.</li>\n          <li>Else, if <i>O</i> has a [[RegExpMatcher]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a>, let <i>builtinTag</i> be <code>&quot;RegExp&quot;</code>.</li>\n          <li>Else, let <i>builtinTag</i> be <code>&quot;Object&quot;</code>.</li>\n          <li>Let <i>tag</i> be Get (<i>O</i>, @@toStringTag).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>tag</i>).</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>tag</i>) is not String, let <i>tag</i> be\n              <i>builtinTag</i>.</li>\n          <li>Return the String that is the result of concatenating <code>&quot;[object &quot;</code>, <i>tag</i>, and\n              <code>&quot;]&quot;</code>.</li>\n        </ol>\n\n        <p>This function is the %ObjProto_toString% intrinsic object.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> Historically, this function was occasionally used to access the String value of the\n          [[Class]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> that was used in previous editions\n          of this specification as a nominal type tag for various built-in objects. The above definition of <code>toString</code>\n          preserves compatibility for legacy code that uses <code>toString</code> as a test for those specific kinds of built-in\n          objects. It does not provide a reliable type testing mechanism for other kinds of built-in or program defined objects.\n          In addition, programs can use @@toStringTag in ways that will invalidate the reliability of such legacy type tests.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-object.prototype.valueof\">\n        <h1><span class=\"secnum\" id=\"sec-19.1.3.7\"><a href=\"/sec/sec-object.prototype.valueof.html\" title=\"link to this section\">19.1.3.7</a></span> Object.prototype.valueOf ( )</h1>\n\n        <p class=\"normalbefore\">When the <b>valueOf</b> method is called, the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Return <a href=\"/sec/sec-toobject.html\">ToObject</a>(<b>this</b> value).</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-object-instances\">\n      <h1><span class=\"secnum\" id=\"sec-19.1.4\"><a href=\"/sec/sec-properties-of-object-instances.html\" title=\"link to this section\">19.1.4</a></span> Properties of Object Instances</h1>\n\n      <p>Object instances have no special properties beyond those inherited from the Object prototype object.</p>\n    </section>\n  </section>\n\n  <section id=\"sec-function-objects\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-19.2\"><a href=\"/sec/sec-function-objects.html\" title=\"link to this section\">19.2</a></span> Function\n          Objects</h1>\n    </div>\n\n    <section id=\"sec-function-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.1\"><a href=\"/sec/sec-function-constructor.html\" title=\"link to this section\">19.2.1</a></span> The Function Constructor</h1>\n\n        <p>The Function constructor is the %Function% intrinsic object and the initial value of the <code>Function</code> property\n        of the global object. When <code>Function</code> is called as a function rather than as a constructor, it creates and\n        initializes a new Function object. Thus the function call <code><b>Function(</b>&#x2026;<b>)</b></code> is equivalent to\n        the object creation expression <code><b>new Function(</b>&#x2026;<b>)</b></code> with the same arguments.</p>\n\n        <p>The <code>Function</code> constructor is designed to be subclassable. It may be used as the value of an\n        <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified\n        <code>Function</code> behaviour must include a <code>super</code> call to the <code>Function</code> constructor to create\n        and initialize a subclass instances with the internal slots necessary for built-in function behaviour. All ECMAScript\n        syntactic forms for defining function objects create instances of <code>Function</code>. There is no syntactic means to\n        create instances of <code>Function</code> subclasses except for the built-in Generator Function subclass.</p>\n      </div>\n\n      <section id=\"sec-function-p1-p2-pn-body\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-19.2.1.1\"><a href=\"/sec/sec-function-p1-p2-pn-body.html\" title=\"link to this section\">19.2.1.1</a></span> Function ( p1, p2, &#x2026; , pn, body )</h1>\n\n          <p>The last argument specifies the body (executable code) of a function; any preceding arguments specify formal\n          parameters.</p>\n\n          <p class=\"normalbefore\">When the <code>Function</code> function is called with some arguments <var>p1</var>,\n          <var>p2</var>, &#x2026; , <var>pn</var>, <var>body</var> (where <var>n</var> might be <span style=\"font-family: Times\n          New Roman\">0</span>, that is, there are no &#x201C;<var>p</var>&#x201D; arguments, and where <var>body</var> might also\n          not be provided), the following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>C</i> be the active function object.</li>\n            <li>Let <i>args</i> be the <i>argumentsList</i> that was passed to this function by [[Call]] or [[Construct]].</li>\n            <li>Return <a href=\"/sec/sec-createdynamicfunction.html\">CreateDynamicFunction</a>(<i>C</i>, NewTarget, <code>&quot;normal&quot;</code>,\n                <i>args</i>).</li>\n          </ol>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE</span> It is permissible but not necessary to have one argument for each formal parameter to\n            be specified. For example, all three of the following expressions produce the same result:</p>\n\n            <pre class=\"NoteCode\">new Function(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;return a+b+c&quot;)</pre>\n            <pre class=\"NoteCode\">new Function(&quot;a, b, c&quot;, &quot;return a+b+c&quot;)</pre>\n            <pre class=\"NoteCode\">new Function(&quot;a,b&quot;, &quot;c&quot;, &quot;return a+b+c&quot;)</pre>\n          </div>\n        </div>\n\n        <section id=\"sec-createdynamicfunction\">\n          <h1><span class=\"secnum\" id=\"sec-19.2.1.1.1\"><a href=\"/sec/sec-createdynamicfunction.html\" title=\"link to this section\">19.2.1.1.1</a></span> RuntimeSemantics: CreateDynamicFunction(constructor, newTarget,\n              kind, args)</h1>\n\n          <p>The abstract operation CreateDynamicFunction is called with arguments <var>constructor</var>, <var>newTarget</var>,\n          <var>kind</var>, and <var>args</var>. <var>constructor</var> is the constructor function that is performing this action,\n          <var>newTarget</var> is the constructor that <code>new</code> was initially applied to, <var>kind</var> is either\n          <code>&quot;normal&quot;</code> or <code>&quot;generator&quot;</code>, and <var>args</var> is a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the actual argument values that were passed to\n          <var>constructor</var>. The following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li>If <i>newTarget</i> is <b>undefined</b><i>,</i> let <i>newTarget</i> be <i>constructor</i>.</li>\n            <li>If <i>kind</i> is <code>&quot;normal&quot;</code>, then\n              <ol class=\"block\">\n                <li>Let <i>goal</i> be the grammar symbol <i>FunctionBody.</i></li>\n                <li>Let <i>parameterGoal</i> be the grammar symbol <i>FormalParameters</i>.</li>\n                <li>Let <i>fallbackProto</i> be <code>&quot;%FunctionPrototype%&quot;</code>.</li>\n              </ol>\n            </li>\n            <li>Else,\n              <ol class=\"block\">\n                <li>Let <i>goal</i> be the grammar symbol <i>GeneratorBody</i>.</li>\n                <li>Let <i>parameterGoal</i> be the grammar symbol <i>FormalParameters</i><sub>[Yield]</sub>.</li>\n                <li>Let <i>fallbackProto</i> be <code>&quot;%Generator%&quot;</code>.</li>\n              </ol>\n            </li>\n            <li>Let <i>argCount</i> be the number of elements in <i>args</i>.</li>\n            <li>Let <i>P</i> be the empty String.</li>\n            <li>If <i>argCount</i> = 0, let <i>bodyText</i> be the empty String.</li>\n            <li>Else if <i>argCount</i> = 1, let <i>bodyText</i> be <i>args</i>[0].</li>\n            <li>Else <i>argCount</i> &gt; 1,\n              <ol class=\"block\">\n                <li>Let <i>firstArg</i> be <i>args</i>[0].</li>\n                <li>Let <i>P</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>firstArg</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>P</i>).</li>\n                <li>Let <i>k</i> be 1.</li>\n                <li>Repeat, while <i>k</i> &lt; <i>argCount</i>-1\n                  <ol class=\"block\">\n                    <li>Let <i>nextArg</i> be <i>args</i>[<i>k</i>].</li>\n                    <li>Let <i>nextArgString</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>nextArg</i>).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextArgString</i>).</li>\n                    <li>Let <i>P</i> be the result of concatenating the previous value of <i>P</i>, the String <code>&quot;,&quot;</code> (a\n                        comma), and <i>nextArgString</i>.</li>\n                    <li>Increase <i>k</i> by 1.</li>\n                  </ol>\n                </li>\n                <li>Let <i>bodyText</i> be <i>args</i>[<i>k</i>].</li>\n              </ol>\n            </li>\n            <li>Let <i>bodyText</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>bodyText</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>bodyText</i>).</li>\n            <li>Let <i>body</i> be the result of parsing <i>bodyText</i>, interpreted as UTF-16 encoded Unicode text as described\n                in <a href=\"/sec/sec-ecmascript-language-types-string-type.html\">6.1.4</a><i>,</i> using <i>goal</i> as the goal symbol.\n                Throw a <b>SyntaxError</b> exception if the parse fails or if any static semantics errors are detected.</li>\n            <li>If <i>bodyText</i> is <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a> (<a href=\"/sec/sec-strict-mode-code.html\">see\n                10.2.1</a>) then let <i>strict</i> be <b>true</b>, else let <i>strict</i> be <b>false</b>.</li>\n            <li>Let <i>parameters</i> be the result of parsing <i>P</i>, interpreted as UTF-16 encoded Unicode text as described\n                in <a href=\"/sec/sec-ecmascript-language-types-string-type.html\">6.1.4</a><i>,</i> using <i>parameterGoal</i> as the goal\n                symbol. Throw a <b>SyntaxError</b> exception if the parse fails or if any static semantics errors are detected. If\n                <i>strict</i> is <b>true</b>, the Early Error rules for <span class=\"prod\"><span class=\"nt\">StrictFormalParameters</span> <span class=\"geq\">:</span> <span class=\"nt\">FormalParameters</span></span> are applied.</li>\n            <li>If any element of the BoundNames of <i>parameters</i> also occurs in the LexicallyDeclaredNames of <i>body</i>,\n                throw a <b>SyntaxError</b> exception.</li>\n            <li>If <i>body</i> Contains <i>SuperCall</i> is <i><b>true</b>,</i> throw a <b>SyntaxError</b> exception.</li>\n            <li>If <i>parameters</i> Contains <i>SuperCall</i> is <i><b>true</b>,</i> throw a <b>SyntaxError</b> exception.</li>\n            <li>If <i>body</i> Contains <i>SuperProperty</i> is <i><b>true</b>,</i> throw a <b>SyntaxError</b> exception.</li>\n            <li>If <i>parameters</i> Contains <i>SuperProperty</i> is <i><b>true</b>,</i> throw a <b>SyntaxError</b>\n                exception.</li>\n            <li>If <i>kind</i> is <code>&quot;generator&quot;</code>, then\n              <ol class=\"block\">\n                <li>If <i>parameters</i> Contains <i>YieldExpression</i> is <i><b>true</b>,</i> throw a <b>SyntaxError</b>\n                    exception.</li>\n              </ol>\n            </li>\n            <li>If <i>strict</i> is <b>true</b>, then\n              <ol class=\"block\">\n                <li>If BoundNames of <i>parameters</i> contains any duplicate elements<i>,</i> throw a <b>SyntaxError</b>\n                    exception.</li>\n              </ol>\n            </li>\n            <li>Let <i>proto</i> be <a href=\"/sec/sec-getprototypefromconstructor.html\">GetPrototypeFromConstructor</a>(<i>newTarget</i>,\n                <i>fallbackProto</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>proto</i>).</li>\n            <li>Let <i>F</i> be <a href=\"/sec/sec-functionallocate.html\">FunctionAllocate</a>(<i>proto</i>, <i>strict</i>,\n                <i>kind</i>).</li>\n            <li>Let <i>realmF</i> be the value of <i>F&#x2019;s</i> [[Realm]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>Let <i>scope</i> be <i>realmF</i>.[[globalEnv]].</li>\n            <li>Perform <a href=\"/sec/sec-functioninitialize.html\">FunctionInitialize</a>(<i>F</i>, <span style=\"font-family:\n                sans-serif\">Normal</span>, <i>parameters</i>, <i>body, scope</i>).</li>\n            <li>If <i>kind</i> is <code>&quot;generator&quot;</code>, then\n              <ol class=\"block\">\n                <li>Let <i>prototype</i> be <a href=\"/sec/sec-objectcreate.html\">ObjectCreate</a>(<span style=\"font-family:\n                    sans-serif\">%GeneratorPrototype%</span>).</li>\n                <li>Perform <a href=\"/sec/sec-makeconstructor.html\">MakeConstructor</a>(<i>F</i>, <b>true</b>, <i>prototype</i>).</li>\n              </ol>\n            </li>\n            <li>Else, perform <a href=\"/sec/sec-makeconstructor.html\">MakeConstructor</a>(<i>F</i>).</li>\n            <li>Perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>F</i>, <code>&quot;<b>anonymous</b>&quot;</code>).</li>\n            <li>Return <i>F</i>.</li>\n          </ol>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE</span> A <code>prototype</code> property is automatically created for every function created\n            using CreateDynamicFunction , to provide for the possibility that the function will be used as a constructor.</p>\n          </div>\n        </section>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-function-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.2\"><a href=\"/sec/sec-properties-of-the-function-constructor.html\" title=\"link to this section\">19.2.2</a></span> Properties of the Function Constructor</h1>\n\n        <p>The <code>Function</code> constructor is itself a built-in function object. The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the <code>Function</code> constructor is\n        %FunctionPrototype%, the intrinsic Function prototype object (<a href=\"/sec/sec-properties-of-the-function-prototype-object.html\">19.2.3</a>).</p>\n\n        <p>The value of the [[Extensible]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        Function constructor is <b>true</b>.</p>\n\n        <p class=\"normalbefore\">The Function constructor has the following properties:</p>\n      </div>\n\n      <section id=\"sec-function.length\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.2.1\"><a href=\"/sec/sec-function.length.html\" title=\"link to this section\">19.2.2.1</a></span>\n            Function.length</h1>\n\n        <p>This is a data property with a value of 1. This property has the attributes { [[Writable]]: <span class=\"value\">false</span>, [[Enumerable]]: <span class=\"value\">false</span>, [[Configurable]]: <span class=\"value\">true</span> }.</p>\n      </section>\n\n      <section id=\"sec-function.prototype\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.2.2\"><a href=\"/sec/sec-function.prototype.html\" title=\"link to this section\">19.2.2.2</a></span> Function.prototype</h1>\n\n        <p>The value of <code>Function.prototype</code> is %FunctionPrototype%, the intrinsic Function prototype object (<a href=\"/sec/sec-properties-of-the-function-prototype-object.html\">19.2.3</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <span class=\"value\">false</span>, [[Enumerable]]: <span class=\"value\">false</span>, [[Configurable]]: <span class=\"value\">false</span> }.</p>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-function-prototype-object\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.3\"><a href=\"/sec/sec-properties-of-the-function-prototype-object.html\" title=\"link to this section\">19.2.3</a></span> Properties of the Function Prototype Object</h1>\n\n        <p>The Function prototype object is the intrinsic object %FunctionPrototype%. The Function prototype object is itself a\n        built-in function object. When invoked, it accepts any arguments and returns <span class=\"value\">undefined</span>. It does\n        not have a [[Construct]] internal method so it is not a constructor.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The Function prototype object is specified to be a function object to ensure\n          compatibility with ECMAScript code that was created prior to the ECMAScript 2015 specification.</p>\n        </div>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        Function prototype object is the intrinsic object %ObjectPrototype% (<a href=\"/sec/sec-properties-of-the-object-prototype-object.html\">19.1.3</a>). The initial value of the [[Extensible]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the Function prototype object is <span class=\"value\">true</span>.</p>\n\n        <p>The Function prototype object does not have a <code>prototype</code> property.</p>\n\n        <p>The value of the <code>length</code> property of the Function prototype object is <b>0</b>.</p>\n\n        <p>The value of the <code>name</code> property of the Function prototype object is the empty String.</p>\n      </div>\n\n      <section id=\"sec-function.prototype.apply\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.3.1\"><a href=\"/sec/sec-function.prototype.apply.html\" title=\"link to this section\">19.2.3.1</a></span> Function.prototype.apply ( thisArg, argArray )</h1>\n\n        <p class=\"normalbefore\">When the <code>apply</code> method is called on an object <var>func</var> with arguments\n        <var>thisArg</var> and <var>argArray</var>, the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>func</i>) is <b>false</b>, throw a <b>TypeError</b> exception.</li>\n          <li>If <i>argArray</i> is <b>null</b> or <b>undefined</b>, then\n            <ol class=\"block\">\n              <li>Return <a href=\"/sec/sec-call.html\">Call</a>(<i>func</i>, <i>thisArg</i>).</li>\n            </ol>\n          </li>\n          <li>Let <i>argList</i> be <a href=\"/sec/sec-createlistfromarraylike.html\">CreateListFromArrayLike</a>(<i>argArray</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>argList</i> ).</li>\n          <li>Perform <a href=\"/sec/sec-preparefortailcall.html\">PrepareForTailCall</a>().</li>\n          <li>Return <a href=\"/sec/sec-call.html\">Call</a>(<i>func</i>, <i>thisArg</i>, <i>argList</i>).</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>apply</code> method is <b>2</b>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> The thisArg value is passed without modification as the <b>this</b> value. This is a\n          change from Edition 3, where an <b>undefined</b> or <b>null</b> thisArg is replaced with the global object and <a href=\"/sec/sec-toobject.html\">ToObject</a> is applied to all other values and that result is passed as the <b>this</b> value.\n          Even though the thisArg is passed without modification, non-strict functions still perform these transformations upon\n          entry to the function.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> If <var>func</var> is an arrow function or a <a href=\"/sec/sec-bound-function-exotic-objects.html\">bound function</a> then the <var>thisArg</var> will be ignored by the function\n          [[Call]] in step 6.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-function.prototype.bind\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.3.2\"><a href=\"/sec/sec-function.prototype.bind.html\" title=\"link to this section\">19.2.3.2</a></span> Function.prototype.bind ( thisArg , ...args)</h1>\n\n        <p class=\"normalbefore\">When the <code>bind</code> method is called with argument <var>thisArg</var> and zero or more\n        <var>args</var>, it performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>Target</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>Target</i>) is <b>false</b>, throw a <b>TypeError</b> exception.</li>\n          <li>Let <i>args</i> be a new (possibly empty) <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> consisting of\n              all of the argument values provided after <i>thisArg</i>  in order.</li>\n          <li>Let <i>F</i> be <a href=\"/sec/sec-boundfunctioncreate.html\">BoundFunctionCreate</a>(<i>Target</i>, <i>thisArg</i>,\n              <i>args</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>F</i>).</li>\n          <li>Let <i>targetHasLength</i> be <a href=\"/sec/sec-hasownproperty.html\">HasOwnProperty</a>(<i>Target</i>,\n              <code>&quot;length&quot;</code>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>targetHasLength</i>).</li>\n          <li>If <i>targetHasLength</i> is <b>true</b>, then\n            <ol class=\"block\">\n              <li>Let <i>targetLen</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>Target</i>, <code>&quot;length&quot;</code>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>targetLen</i>).</li>\n              <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>targetLen</i>) is not Number, let <i>L</i> be\n                  0.</li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>Let <i>targetLen</i> be <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>targetLen</i>).</li>\n                  <li>Let <i>L</i> be the larger of 0 and the result of <i>targetLen</i> minus the number of elements of\n                      <i>args</i>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Else let <i>L</i> be 0.</li>\n          <li>Let <i>status</i> be <a href=\"/sec/sec-definepropertyorthrow.html\">DefinePropertyOrThrow</a>(<i>F</i>, <code>&quot;length&quot;</code>,\n              PropertyDescriptor {[[Value]]: <i>L</i>, [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n              <b>true</b>}).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n          <li>Let <i>targetName</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>Target</i>, <code>&quot;name&quot;</code>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>targetName</i>).</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>targetName</i>) is not String, let <i>targetName</i>\n              be the empty string.</li>\n          <li>Perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>F</i>, <i>targetName</i>, <code>&quot;bound&quot;</code>).</li>\n          <li>Return <i>F</i>.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>bind</code> method is <b>1</b>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> Function objects created using <code>Function.prototype.bind</code> are exotic\n          objects. They also do not have a <code>prototype</code> property.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> If <span class=\"nt\">Target</span> is an arrow function or a <a href=\"/sec/sec-bound-function-exotic-objects.html\">bound function</a> then the <var>thisArg</var> passed to this method will not\n          be used by subsequent calls to <var>F</var>.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-function.prototype.call\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.3.3\"><a href=\"/sec/sec-function.prototype.call.html\" title=\"link to this section\">19.2.3.3</a></span> Function.prototype.call (thisArg , ...args)</h1>\n\n        <p class=\"normalbefore\">When the <code>call</code> method is called on an object <var>func</var> with argument,\n        <var>thisArg</var> and zero or more <var>args</var>, the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>func</i>) is <b>false</b>, throw a <b>TypeError</b> exception.</li>\n          <li>Let <i>argList</i> be an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>If this method was called with more than one argument then in left to right order, starting with the second\n              argument, append each argument as the last element of <i>argList</i>.</li>\n          <li>Perform <a href=\"/sec/sec-preparefortailcall.html\">PrepareForTailCall</a>().</li>\n          <li>Return <a href=\"/sec/sec-call.html\">Call</a>(<i>func</i>, <i>thisArg</i>, <i>argList</i>).</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>call</code> method is <b>1</b>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> The thisArg value is passed without modification as the <b>this</b> value. This is a\n          change from Edition 3, where an <b>undefined</b> or <b>null</b> thisArg is replaced with the global object and <a href=\"/sec/sec-toobject.html\">ToObject</a> is applied to all other values and that result is passed as the <b>this</b> value.\n          Even though the thisArg is passed without modification, non-strict functions still perform these transformations upon\n          entry to the function.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> If <var>func</var> is an arrow function or a <a href=\"/sec/sec-bound-function-exotic-objects.html\">bound function</a> then the <var>thisArg</var> will be ignored by the function\n          [[Call]] in step 5.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-function.prototype.constructor\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.3.4\"><a href=\"/sec/sec-function.prototype.constructor.html\" title=\"link to this section\">19.2.3.4</a></span> Function.prototype.constructor</h1>\n\n        <p>The initial value of <code>Function.prototype.constructor</code> is the intrinsic object %Function%.</p>\n      </section>\n\n      <section id=\"sec-function.prototype.tostring\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.3.5\"><a href=\"/sec/sec-function.prototype.tostring.html\" title=\"link to this section\">19.2.3.5</a></span> Function.prototype.toString ( )</h1>\n\n        <p class=\"normalbefore\">When the <code>toString</code> method is called on an object <var>func</var> the following steps\n        are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If <i>func</i> is a <a href=\"/sec/sec-bound-function-exotic-objects.html\">Bound Function</a> exotic object, then\n            <ol class=\"block\">\n              <li>Return an implementation-dependent String source code representation of <i>func</i>. The representation must\n                  conform to the rules below. It is implementation dependent whether the representation includes <a href=\"/sec/sec-bound-function-exotic-objects.html\">bound function</a> information or information about the target\n                  function.</li>\n            </ol>\n          </li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>func</i>) is Object and is either a built-in function\n              object or  has an [[ECMAScriptCode]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>,\n              then\n            <ol class=\"block\">\n              <li>Return an implementation-dependent String source code representation of <i>func</i>. The representation must\n                  conform to the rules below.</li>\n            </ol>\n          </li>\n          <li>Throw a <b>TypeError</b> exception.</li>\n        </ol>\n\n        <p class=\"normalbefore\"><code>toString</code> Representation Requirements:</p>\n\n        <ul>\n          <li>\n            <p>The string representation must have the syntax of a <i>FunctionDeclaration</i>, <i>FunctionExpression</i>,\n            <i>GeneratorDeclaration, GeneratorExpression, ClassDeclaration</i>, <i>ClassExpression</i>, <i>ArrowFunction</i>,\n            <i>MethodDefinition</i>, or <i>GeneratorMethod</i> depending upon the actual characteristics of the object.</p>\n          </li>\n\n          <li>\n            <p>T<span style=\"font-family: Times New Roman\">he use and placement of white space, line terminators, and semicolons\n            within the representation String is implementation-dependent.</span></p>\n          </li>\n\n          <li>\n            <p>If the object was defined using ECMAScript code and the returned string representation is not in the form of a\n            <i>MethodDefinition</i> or <i>GeneratorMethod</i> then the representation must be such that if the string is\n            evaluated, using <code>eval</code> in a lexical context that is equivalent to the lexical context used to create the\n            original object, it will result in a new functionally equivalent object. In that case the returned source code must\n            not mention freely any variables that were not mentioned freely by the original function&#x2019;s source code, even if\n            these &#x201C;extra&#x201D; names were originally in scope.</p>\n          </li>\n\n          <li>\n            <p>If the implementation cannot produce a source code string that meets these criteria then it must return a string\n            for which <code>eval</code> will throw a <span style=\"font-family: sans-serif\"><b>SyntaxError</b></span>\n            exception.</p>\n          </li>\n        </ul>\n      </section>\n\n      <section id=\"sec-function.prototype-@@hasinstance\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.3.6\"><a href=\"/sec/sec-function.prototype-@@hasinstance.html\" title=\"link to this section\">19.2.3.6</a></span> Function.prototype[@@hasInstance] ( V )</h1>\n\n        <p class=\"normalbefore\">When the @@hasInstance method of an object <var>F</var> is called with value <var>V</var>, the\n        following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>F</i> be the <b>this</b> value.</li>\n          <li>Return <a href=\"/sec/sec-ordinaryhasinstance.html\">OrdinaryHasInstance</a>(<i>F</i>, <i>V</i>).</li>\n        </ol>\n\n        <p>The value of the <code>name</code> property of this function is <code>&quot;[Symbol.hasInstance]&quot;</code>.</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <span class=\"value\">false</span>,\n        [[Configurable]]: <span class=\"value\">false</span> }.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> This is the default implementation of <code>@@hasInstance</code> that most functions\n          inherit. <code>@@hasInstance</code> is called by the <code>instanceof</code> operator to determine whether a value is an\n          instance of a specific constructor. An expression such as</p>\n\n          <p>&#xA0;&#xA0;&#xA0;<code>v instanceof F</code></p>\n\n          <p>evaluates as</p>\n\n          <p>&#xA0;&#xA0;&#xA0;<code>F[@@hasInstance](v)</code></p>\n\n          <p>A constructor function can control which objects are recognized as its instances by <code>instanceof</code> by\n          exposing a different <code>@@hasInstance</code> method on the function.</p>\n        </div>\n\n        <p>This property is non-writable and non-configurable to prevent tampering that could be used to globally expose the\n        target function of a <a href=\"/sec/sec-bound-function-exotic-objects.html\">bound function</a>.</p>\n      </section>\n    </section>\n\n    <section id=\"sec-function-instances\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.4\"><a href=\"/sec/sec-function-instances.html\" title=\"link to this section\">19.2.4</a></span>\n            Function Instances</h1>\n\n        <p>Every function instance is an <a href=\"/sec/sec-ecmascript-function-objects.html\">ECMAScript function object</a> and has the\n        internal slots listed in <a href=\"/sec/table-27.html\">Table 27</a>. Function instances created using the <code><a href=\"/sec/sec-function.prototype.bind.html\">Function.prototype.bind</a></code> method (<a href=\"/sec/sec-function.prototype.bind.html\">19.2.3.2</a>) have the internal slots listed in <a href=\"/sec/table-28.html\">Table 28</a>.</p>\n\n        <p>The Function instances have the following properties:</p>\n      </div>\n\n      <section id=\"sec-function-instances-length\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.4.1\"><a href=\"/sec/sec-function-instances-length.html\" title=\"link to this section\">19.2.4.1</a></span> length</h1>\n\n        <p>The value of the <code>length</code> property is an integer that indicates the typical number of arguments expected by\n        the function. However, the language permits the function to be invoked with some other number of arguments. The behaviour\n        of a function when invoked on a number of arguments other than the number specified by its <code>length</code> property\n        depends on the function. This property has the attributes {&#xA0;[[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>,\n        [[Configurable]]: <b>true</b>&#xA0;}.</p>\n      </section>\n\n      <section id=\"sec-function-instances-name\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.4.2\"><a href=\"/sec/sec-function-instances-name.html\" title=\"link to this section\">19.2.4.2</a></span> name</h1>\n\n        <p>The value of the <code>name</code> property is an String that is descriptive of the function. The name has no semantic\n        significance but is typically a variable or property name that is used to refer to the function at its point of definition\n        in ECMAScript code. This property has the attributes {&#xA0;[[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>,\n        [[Configurable]]: <b>true</b>&#xA0;}.</p>\n\n        <p>Anonymous functions objects that do not have a contextual name associated with them by this specification do not have a\n        <code>name</code> own property but inherit the <code>name</code> property of %FunctionPrototype%.</p>\n      </section>\n\n      <section id=\"sec-function-instances-prototype\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.4.3\"><a href=\"/sec/sec-function-instances-prototype.html\" title=\"link to this section\">19.2.4.3</a></span> prototype</h1>\n\n        <p>Function instances that can be used as a constructor have a <code>prototype</code> property. Whenever such a function\n        instance is created another ordinary object is also created and is the initial value of the function&#x2019;s\n        <code>prototype</code> property. Unless otherwise specified, the value of the <code>prototype</code> property is used to\n        initialize the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the object\n        created when that function is invoked as a constructor.</p>\n\n        <p>This property has the attributes {&#xA0;[[Writable]]: <b>true</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> Function objects created using <code><a href=\"/sec/sec-function.prototype.bind.html\">Function.prototype.bind</a></code>, or by evaluating a <span class=\"nt\">MethodDefinition</span> (that are not a <span class=\"nt\">GeneratorMethod</span>) or an <span class=\"nt\">ArrowFunction</span> grammar production do not have a <code>prototype</code> property.</p>\n        </div>\n      </section>\n    </section>\n  </section>\n\n  <section id=\"sec-boolean-objects\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-19.3\"><a href=\"/sec/sec-boolean-objects.html\" title=\"link to this section\">19.3</a></span> Boolean\n          Objects</h1>\n    </div>\n\n    <section id=\"sec-boolean-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-19.3.1\"><a href=\"/sec/sec-boolean-constructor.html\" title=\"link to this section\">19.3.1</a></span>\n            The Boolean Constructor</h1>\n\n        <p>The Boolean constructor is the %Boolean% intrinsic object and the initial value of the <code>Boolean</code> property of\n        the global object. When called as a constructor it creates and initializes a new Boolean object. When <code>Boolean</code>\n        is called as a function rather than as a constructor, it performs a type conversion.</p>\n\n        <p>The <code>Boolean</code> constructor is designed to be subclassable. It may be used as the value of an\n        <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified\n        <code>Boolean</code> behaviour must include a <code>super</code> call to the <code>Boolean</code> constructor to create\n        and initialize the subclass instance with a [[BooleanData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</p>\n      </div>\n\n      <section id=\"sec-boolean-constructor-boolean-value\">\n        <h1><span class=\"secnum\" id=\"sec-19.3.1.1\"><a href=\"/sec/sec-boolean-constructor-boolean-value.html\" title=\"link to this section\">19.3.1.1</a></span> Boolean ( value )</h1>\n\n        <p class=\"normalbefore\">When <code>Boolean</code> is called with argument <var>value</var>, the following steps are\n        taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>b</i> be <a href=\"/sec/sec-toboolean.html\">ToBoolean</a>(<i>value</i>).</li>\n          <li>If NewTarget is <b>undefined</b><i>,</i> return <i>b</i>.</li>\n          <li>Let <i>O</i> be <a href=\"/sec/sec-ordinarycreatefromconstructor.html\">OrdinaryCreateFromConstructor</a>(NewTarget,\n              <code>&quot;%BooleanPrototype%&quot;</code>, &#xAB;[[BooleanData]]&#xBB; ).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>O</i>).</li>\n          <li>Set the value of <i>O&#x2019;s</i> [[BooleanData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a> to <i>b</i>.</li>\n          <li>Return <i>O</i>.</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-boolean-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-19.3.2\"><a href=\"/sec/sec-properties-of-the-boolean-constructor.html\" title=\"link to this section\">19.3.2</a></span> Properties of the Boolean Constructor</h1>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        Boolean constructor is the intrinsic object %FunctionPrototype% (<a href=\"/sec/sec-properties-of-the-function-prototype-object.html\">19.2.3</a>).</p>\n\n        <p>Besides the <code>length</code> property (whose value is <b>1</b>), the Boolean constructor has the following\n        properties:</p>\n      </div>\n\n      <section id=\"sec-boolean.prototype\">\n        <h1><span class=\"secnum\" id=\"sec-19.3.2.1\"><a href=\"/sec/sec-boolean.prototype.html\" title=\"link to this section\">19.3.2.1</a></span> Boolean.prototype</h1>\n\n        <p>The initial value of <code>Boolean.prototype</code> is the intrinsic object %BooleanPrototype% (<a href=\"/sec/sec-properties-of-the-boolean-prototype-object.html\">19.3.3</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-boolean-prototype-object\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-19.3.3\"><a href=\"/sec/sec-properties-of-the-boolean-prototype-object.html\" title=\"link to this section\">19.3.3</a></span> Properties of the Boolean Prototype Object</h1>\n\n        <p>The Boolean prototype object is the intrinsic object %BooleanPrototype%. The Boolean prototype object is an ordinary\n        object. It is not a Boolean instance and does not have a [[BooleanData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</p>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        Boolean prototype object is the intrinsic object %ObjectPrototype% (<a href=\"/sec/sec-properties-of-the-object-prototype-object.html\">19.1.3</a>).</p>\n\n        <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New\n        Roman\">thisBooleanValue(<i>value</i>)</span> performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>value</i>) is Boolean, return <i>value</i>.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>value</i>) is Object and <i>value</i> has a\n              [[BooleanData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>, then\n            <ol class=\"block\">\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>value</i>&#x2019;s [[BooleanData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is a Boolean value.</li>\n              <li>Return the value of <i>value&#x2019;s</i> [[BooleanData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            </ol>\n          </li>\n          <li>Throw a <b>TypeError</b> exception.</li>\n        </ol>\n      </div>\n\n      <section id=\"sec-boolean.prototype.constructor\">\n        <h1><span class=\"secnum\" id=\"sec-19.3.3.1\"><a href=\"/sec/sec-boolean.prototype.constructor.html\" title=\"link to this section\">19.3.3.1</a></span> Boolean.prototype.constructor</h1>\n\n        <p>The initial value of <code>Boolean.prototype.constructor</code> is the intrinsic object %Boolean%.</p>\n      </section>\n\n      <section id=\"sec-boolean.prototype.tostring\">\n        <h1><span class=\"secnum\" id=\"sec-19.3.3.2\"><a href=\"/sec/sec-boolean.prototype.tostring.html\" title=\"link to this section\">19.3.3.2</a></span> Boolean.prototype.toString ( )</h1>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>b</i> be thisBooleanValue(<b>this</b> value).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>b</i>).</li>\n          <li>If <i>b</i> is <b>true</b>, return <code>&quot;true&quot;</code>; else return <code>&quot;false&quot;</code>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-boolean.prototype.valueof\">\n        <h1><span class=\"secnum\" id=\"sec-19.3.3.3\"><a href=\"/sec/sec-boolean.prototype.valueof.html\" title=\"link to this section\">19.3.3.3</a></span> Boolean.prototype.valueOf ( )</h1>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Return thisBooleanValue(<b>this</b> value).</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-boolean-instances\">\n      <h1><span class=\"secnum\" id=\"sec-19.3.4\"><a href=\"/sec/sec-properties-of-boolean-instances.html\" title=\"link to this section\">19.3.4</a></span> Properties of Boolean Instances</h1>\n\n      <p>Boolean instances are ordinary objects that inherit properties from the Boolean prototype object. Boolean instances have\n      a [[BooleanData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>. The [[BooleanData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is the Boolean value represented by this Boolean\n      object.</p>\n    </section>\n  </section>\n\n  <section id=\"sec-symbol-objects\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-19.4\"><a href=\"/sec/sec-symbol-objects.html\" title=\"link to this section\">19.4</a></span> Symbol\n          Objects</h1>\n    </div>\n\n    <section id=\"sec-symbol-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.1\"><a href=\"/sec/sec-symbol-constructor.html\" title=\"link to this section\">19.4.1</a></span>\n            The Symbol Constructor</h1>\n\n        <p>The Symbol constructor is the %Symbol% intrinsic object and the initial value of the <code>Symbol</code> property of\n        the global object. When <code>Symbol</code> is called as a function, it returns a new Symbol value.</p>\n\n        <p>The <code>Symbol</code> constructor is not intended to be used with the <code>new</code> operator or to be subclassed.\n        It may be used as the value of an <code>extends</code> clause of a class definition but a <code>super</code> call to the\n        <code>Symbol</code> constructor will cause an exception.</p>\n      </div>\n\n      <section id=\"sec-symbol-description\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.1.1\"><a href=\"/sec/sec-symbol-description.html\" title=\"link to this section\">19.4.1.1</a></span> Symbol ( [ description ] )</h1>\n\n        <p class=\"normalbefore\">When <code>Symbol</code> is called with optional argument <var>description</var>, the following\n        steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If NewTarget is not <b>undefined</b><i>,</i> throw a <b>TypeError</b> exception.</li>\n          <li>If <i>description</i> is <b>undefined</b>, let <i>descString</i> be <b>undefined</b>.</li>\n          <li>Else, let <i>descString</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>description</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>descString</i>).</li>\n          <li>Return a new unique Symbol value whose [[Description]] value is <i>descString</i>.</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-symbol-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.2\"><a href=\"/sec/sec-properties-of-the-symbol-constructor.html\" title=\"link to this section\">19.4.2</a></span> Properties of the Symbol Constructor</h1>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        Symbol constructor is the intrinsic object %FunctionPrototype% (<a href=\"/sec/sec-properties-of-the-function-prototype-object.html\">19.2.3</a>).</p>\n\n        <p class=\"normalbefore\">Besides the <code>length</code> property (whose value is <b>0</b>), the Symbol constructor has the\n        following properties:</p>\n      </div>\n\n      <section id=\"sec-symbol.for\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.2.1\"><a href=\"/sec/sec-symbol.for.html\" title=\"link to this section\">19.4.2.1</a></span>\n            Symbol.for ( key )</h1>\n\n        <p class=\"normalbefore\">When <code>Symbol.for</code> is called with argument <var>key</var> it performs the following\n        steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>stringKey</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>key</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>stringKey</i>).</li>\n          <li>For each element <i>e</i> of the GlobalSymbolRegistry <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>,\n            <ol class=\"block\">\n              <li>If <a href=\"/sec/sec-samevalue.html\">SameValue</a>(<i>e</i>.[[key]], <i>stringKey</i>) is <b>true</b>, return\n                  <i>e</i>.[[symbol]].</li>\n            </ol>\n          </li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: GlobalSymbolRegistry does not currently contain an entry for\n              <i>stringKey</i>.</li>\n          <li>Let <i>newSymbol</i> be a new unique Symbol value whose [[Description]] value is <i>stringKey</i>.</li>\n          <li>Append the record { [[key]]: <i>stringKey</i>, [[symbol]]: <i>newSymbol</i> } to the GlobalSymbolRegistry <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>Return <i>newSymbol</i>.</li>\n        </ol>\n\n        <p>The GlobalSymbolRegistry is a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> that is globally available. It\n        is shared by all Code Realms. Prior to the evaluation of any ECMAScript code it is initialized as an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>. Elements of the GlobalSymbolRegistry are Records with the\n        structure defined in <a href=\"/sec/table-44.html\">Table 44</a>.</p>\n\n        <figure>\n          <figcaption><span id=\"table-44\">Table 44</span> &#x2014; GlobalSymbolRegistry Record Fields</figcaption>\n          <table class=\"real-table\">\n            <tr>\n              <th>Field Name</th>\n              <th>Value</th>\n              <th>Usage</th>\n            </tr>\n            <tr>\n              <td>[[key]]</td>\n              <td>A String</td>\n              <td>A string key used to globally identify a Symbol.</td>\n            </tr>\n            <tr>\n              <td>[[symbol]]</td>\n              <td>A Symbol</td>\n              <td>A symbol that can be retrieved from any <a href=\"/sec/sec-code-realms.html\">Realm</a>.</td>\n            </tr>\n          </table>\n        </figure>\n      </section>\n\n      <section id=\"sec-symbol.hasinstance\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.2.2\"><a href=\"/sec/sec-symbol.hasinstance.html\" title=\"link to this section\">19.4.2.2</a></span> Symbol.hasInstance</h1>\n\n        <p>The initial value of <code>Symbol.hasInstance</code> is the well known symbol @@hasInstance (<a href=\"/sec/table-1.html\">Table\n        1</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-symbol.isconcatspreadable\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.2.3\"><a href=\"/sec/sec-symbol.isconcatspreadable.html\" title=\"link to this section\">19.4.2.3</a></span> Symbol.isConcatSpreadable</h1>\n\n        <p>The initial value of <code>Symbol.isConcatSpreadable</code> is the well known symbol @@isConcatSpreadable (<a href=\"/sec/table-1.html\">Table 1</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-symbol.iterator\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.2.4\"><a href=\"/sec/sec-symbol.iterator.html\" title=\"link to this section\">19.4.2.4</a></span>\n            Symbol.iterator</h1>\n\n        <p>The initial value of <code>Symbol.iterator</code> is the well known symbol @@iterator (<a href=\"/sec/table-1.html\">Table\n        1</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-symbol.keyfor\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.2.5\"><a href=\"/sec/sec-symbol.keyfor.html\" title=\"link to this section\">19.4.2.5</a></span>\n            Symbol.keyFor ( sym )</h1>\n\n        <p class=\"normalbefore\">When <code>Symbol.keyFor</code> is called with argument <var>sym</var> it performs the following\n        steps:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>sym</i>) is not Symbol, throw a <b>TypeError</b>\n              exception.</li>\n          <li>For each element <i>e</i> of the GlobalSymbolRegistry <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> (<a href=\"/sec/sec-symbol.for.html\">see 19.4.2.1</a>),\n            <ol class=\"block\">\n              <li>If <a href=\"/sec/sec-samevalue.html\">SameValue</a>(<i>e</i>.[[symbol]], <i>sym</i>) is <b>true</b>, return\n                  <i>e</i>.[[key]].</li>\n            </ol>\n          </li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: GlobalSymbolRegistry does not currently contain an entry for\n              <i>sym</i>.</li>\n          <li>Return <b>undefined</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-symbol.match\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.2.6\"><a href=\"/sec/sec-symbol.match.html\" title=\"link to this section\">19.4.2.6</a></span>\n            Symbol.match</h1>\n\n        <p>The initial value of <code>Symbol.match</code> is the well known symbol @@match (<a href=\"/sec/table-1.html\">Table 1</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-symbol.prototype\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.2.7\"><a href=\"/sec/sec-symbol.prototype.html\" title=\"link to this section\">19.4.2.7</a></span> Symbol.prototype</h1>\n\n        <p>The initial value of <code>Symbol.prototype</code> is the intrinsic object %SymbolPrototype% (<a href=\"/sec/sec-properties-of-the-symbol-prototype-object.html\">19.4.3</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-symbol.replace\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.2.8\"><a href=\"/sec/sec-symbol.replace.html\" title=\"link to this section\">19.4.2.8</a></span>\n            Symbol.replace</h1>\n\n        <p>The initial value of <code>Symbol.replace</code> is the well known symbol @@replace (<a href=\"/sec/table-1.html\">Table\n        1</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-symbol.search\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.2.9\"><a href=\"/sec/sec-symbol.search.html\" title=\"link to this section\">19.4.2.9</a></span>\n            Symbol.search</h1>\n\n        <p>The initial value of <code>Symbol.search</code> is the well known symbol @@search (<a href=\"/sec/table-1.html\">Table 1</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-symbol.species\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.2.10\"><a href=\"/sec/sec-symbol.species.html\" title=\"link to this section\">19.4.2.10</a></span> Symbol.species</h1>\n\n        <p>The initial value of <code>Symbol.species</code> is the well known symbol @@species (<a href=\"/sec/table-1.html\">Table\n        1</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-symbol.split\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.2.11\"><a href=\"/sec/sec-symbol.split.html\" title=\"link to this section\">19.4.2.11</a></span>\n            Symbol.split</h1>\n\n        <p>The initial value of <code>Symbol.split</code> is the well known symbol @@split (<a href=\"/sec/table-1.html\">Table 1</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-symbol.toprimitive\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.2.12\"><a href=\"/sec/sec-symbol.toprimitive.html\" title=\"link to this section\">19.4.2.12</a></span> Symbol.toPrimitive</h1>\n\n        <p>The initial value of <code>Symbol.toPrimitive</code> is the well known symbol @@toPrimitive (<a href=\"/sec/table-1.html\">Table\n        1</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-symbol.tostringtag\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.2.13\"><a href=\"/sec/sec-symbol.tostringtag.html\" title=\"link to this section\">19.4.2.13</a></span> Symbol.toStringTag</h1>\n\n        <p>The initial value of <code>Symbol.toStringTag</code> is the well known symbol @@toStringTag (<a href=\"/sec/table-1.html\">Table\n        1</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-symbol.unscopables\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.2.14\"><a href=\"/sec/sec-symbol.unscopables.html\" title=\"link to this section\">19.4.2.14</a></span> Symbol.unscopables</h1>\n\n        <p>The initial value of <code>Symbol.unscopables</code> is the well known symbol @@unscopables (<a href=\"/sec/table-1.html\">Table\n        1</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-symbol-prototype-object\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.3\"><a href=\"/sec/sec-properties-of-the-symbol-prototype-object.html\" title=\"link to this section\">19.4.3</a></span> Properties of the Symbol Prototype Object</h1>\n\n        <p>The Symbol prototype object is the intrinsic object %SymbolPrototype%. The Symbol prototype object is an ordinary\n        object. It is not a Symbol instance and does not have a [[SymbolData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</p>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        Symbol prototype object is the intrinsic object %ObjectPrototype% (<a href=\"/sec/sec-properties-of-the-object-prototype-object.html\">19.1.3</a>).</p>\n      </div>\n\n      <section id=\"sec-symbol.prototype.constructor\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.3.1\"><a href=\"/sec/sec-symbol.prototype.constructor.html\" title=\"link to this section\">19.4.3.1</a></span> Symbol.prototype.constructor</h1>\n\n        <p>The initial value of <code>Symbol.prototype.constructor</code> is the intrinsic object %Symbol%.</p>\n      </section>\n\n      <section id=\"sec-symbol.prototype.tostring\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-19.4.3.2\"><a href=\"/sec/sec-symbol.prototype.tostring.html\" title=\"link to this section\">19.4.3.2</a></span> Symbol.prototype.toString ( )</h1>\n\n          <p class=\"normalbefore\">The following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>s</i> be the <b>this</b> value.</li>\n            <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>s</i>) is Symbol, let <i>sym</i> be <i>s</i>.</li>\n            <li>Else,\n              <ol class=\"block\">\n                <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>s</i>) is not Object, throw a <b>TypeError</b>\n                    exception.</li>\n                <li>If <i>s</i> does not have a [[SymbolData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n                    slot</a>, throw a <b>TypeError</b> exception.</li>\n                <li>Let <i>sym</i> be the value of <i>s&#x2019;s</i> [[SymbolData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n              </ol>\n            </li>\n            <li>Return <a href=\"/sec/sec-symboldescriptivestring.html\">SymbolDescriptiveString</a>(<i>sym</i>).</li>\n          </ol>\n        </div>\n\n        <section id=\"sec-symboldescriptivestring\">\n          <h1><span class=\"secnum\" id=\"sec-19.4.3.2.1\"><a href=\"/sec/sec-symboldescriptivestring.html\" title=\"link to this section\">19.4.3.2.1</a></span> Runtime Semantics:  SymbolDescriptiveString ( sym )</h1>\n\n          <p class=\"normalbefore\">When the abstract operation SymbolDescriptiveString is called with argument <var>sym</var>, the\n          following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>sym</i>) is Symbol.</li>\n            <li>Let <i>desc</i> be <i>sym&#x2019;s</i> [[Description]] value.</li>\n            <li>If <i>desc</i> is <b>undefined</b>, let <i>desc</i> be the empty string.</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>desc</i>) is String.</li>\n            <li>Return the result of concatenating the strings <code>&quot;Symbol(&quot;</code>, <i>desc</i>, and <code>&quot;)&quot;</code>.</li>\n          </ol>\n        </section>\n      </section>\n\n      <section id=\"sec-symbol.prototype.valueof\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.3.3\"><a href=\"/sec/sec-symbol.prototype.valueof.html\" title=\"link to this section\">19.4.3.3</a></span> Symbol.prototype.valueOf ( )</h1>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>s</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>s</i>) is Symbol, return <i>s</i>.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>s</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>s</i> does not have a [[SymbolData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a>, throw a <b>TypeError</b> exception.</li>\n          <li>Return the value of <i>s&#x2019;s</i> [[SymbolData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-symbol.prototype-@@toprimitive\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.3.4\"><a href=\"/sec/sec-symbol.prototype-@@toprimitive.html\" title=\"link to this section\">19.4.3.4</a></span> Symbol.prototype [ @@toPrimitive ] ( hint )</h1>\n\n        <p>This function is called by ECMAScript language operators to convert a Symbol object to a primitive value. The allowed\n        values for <var>hint</var> are <code>&quot;default&quot;</code>,  <code>&quot;number&quot;</code>, and <code>&quot;string&quot;</code>.</p>\n\n        <p class=\"normalbefore\">When the <code>@@toPrimitive</code> method is called with argument <var>hint</var>, the following\n        steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>s</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>s</i>) is Symbol, return <i>s</i>.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>s</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>s</i> does not have a [[SymbolData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a>, throw a <b>TypeError</b> exception.</li>\n          <li>Return the value of <i>s&#x2019;s</i> [[SymbolData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n        </ol>\n\n        <p>The value of the <code>name</code> property of this function is <code>&quot;[Symbol.toPrimitive]&quot;</code>.</p>\n\n        <p>This property has the attributes { [[Writable]]: <span class=\"value\">false</span>, [[Enumerable]]: <span class=\"value\">false</span>, [[Configurable]]: <span class=\"value\">true</span> }.</p>\n      </section>\n\n      <section id=\"sec-symbol.prototype-@@tostringtag\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.3.5\"><a href=\"/sec/sec-symbol.prototype-@@tostringtag.html\" title=\"link to this section\">19.4.3.5</a></span> Symbol.prototype [ @@toStringTag ]</h1>\n\n        <p>The initial value of the @@toStringTag property is the String value <code>&quot;Symbol&quot;</code>.</p>\n\n        <p>This property has the attributes { [[Writable]]: <span class=\"value\">false</span>, [[Enumerable]]: <span class=\"value\">false</span>, [[Configurable]]: <span class=\"value\">true</span> }.</p>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-symbol-instances\">\n      <h1><span class=\"secnum\" id=\"sec-19.4.4\"><a href=\"/sec/sec-properties-of-symbol-instances.html\" title=\"link to this section\">19.4.4</a></span> Properties of Symbol Instances</h1>\n\n      <p>Symbol instances are ordinary objects that inherit properties from the Symbol prototype object. Symbol instances have a\n      [[SymbolData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>. The [[SymbolData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is the Symbol value represented by this Symbol\n      object.</p>\n    </section>\n  </section>\n\n  <section id=\"sec-error-objects\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-19.5\"><a href=\"/sec/sec-error-objects.html\" title=\"link to this section\">19.5</a></span> Error\n          Objects</h1>\n\n      <p>Instances of Error objects are thrown as exceptions when runtime errors occur. The Error objects may also serve as base\n      objects for user-defined exception classes.</p>\n    </div>\n\n    <section id=\"sec-error-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-19.5.1\"><a href=\"/sec/sec-error-constructor.html\" title=\"link to this section\">19.5.1</a></span>\n            The Error Constructor</h1>\n\n        <p>The Error constructor is the %Error% intrinsic object and the initial value of the <code>Error</code> property of the\n        global object. When <code>Error</code> is called as a function rather than as a constructor, it creates and initializes a\n        new Error object. Thus the function call <code><b>Error(</b>&#x2026;<b>)</b></code> is equivalent to the object creation\n        expression <code><b>new Error(</b>&#x2026;<b>)</b></code> with the same arguments.</p>\n\n        <p>The <code>Error</code> constructor is designed to be subclassable. It may be used as the value of an\n        <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified\n        <code>Error</code> behaviour must include a <code>super</code> call to the <code>Error</code> constructor to create and\n        initialize subclass instances with a [[ErrorData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n        slot</a>.</p>\n      </div>\n\n      <section id=\"sec-error-message\">\n        <h1><span class=\"secnum\" id=\"sec-19.5.1.1\"><a href=\"/sec/sec-error-message.html\" title=\"link to this section\">19.5.1.1</a></span>\n            Error ( message )</h1>\n\n        <p class=\"normalbefore\">When the <code>Error</code> function is called with argument <i>message</i> the following steps\n        are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If NewTarget is <b>undefined</b><i>,</i> let <i>newTarget</i> be the active function object, else let\n              <i>newTarget</i> be NewTarget.</li>\n          <li>Let <i>O</i> be <a href=\"/sec/sec-ordinarycreatefromconstructor.html\">OrdinaryCreateFromConstructor</a>(<i>newTarget</i>,\n              <code>&quot;%ErrorPrototype%&quot;</code>, &#xAB;[[ErrorData]]&#xBB;).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>O</i>).</li>\n          <li>If <i>message</i> is not <b>undefined</b>, then\n            <ol class=\"block\">\n              <li>Let <i>msg</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>message</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>msg</i>).</li>\n              <li>Let <i>msgDesc</i> be the PropertyDescriptor{[[Value]]: <i>msg</i>, [[Writable]]: <b>true</b>, [[Enumerable]]:\n                  <b>false</b>, [[Configurable]]: <b>true</b>}.</li>\n              <li>Let <i>status</i> be <a href=\"/sec/sec-definepropertyorthrow.html\">DefinePropertyOrThrow</a>(<i>O</i>,\n                  &quot;<code>message</code>&quot;, <i>msgDesc</i>).</li>\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n            </ol>\n          </li>\n          <li>Return <i>O</i>.</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-error-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-19.5.2\"><a href=\"/sec/sec-properties-of-the-error-constructor.html\" title=\"link to this section\">19.5.2</a></span> Properties of the Error Constructor</h1>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the Error\n        constructor is the intrinsic object %FunctionPrototype% (<a href=\"/sec/sec-properties-of-the-function-prototype-object.html\">19.2.3</a>).</p>\n\n        <p class=\"normalbefore\">Besides the <code>length</code> property (whose value is <b>1</b>), the Error constructor has the\n        following properties:</p>\n      </div>\n\n      <section id=\"sec-error.prototype\">\n        <h1><span class=\"secnum\" id=\"sec-19.5.2.1\"><a href=\"/sec/sec-error.prototype.html\" title=\"link to this section\">19.5.2.1</a></span>\n            Error.prototype</h1>\n\n        <p>The initial value of <code>Error.prototype</code> is the intrinsic object %ErrorPrototype% (<a href=\"/sec/sec-properties-of-the-error-prototype-object.html\">19.5.3</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-error-prototype-object\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-19.5.3\"><a href=\"/sec/sec-properties-of-the-error-prototype-object.html\" title=\"link to this section\">19.5.3</a></span> Properties of the Error Prototype Object</h1>\n\n        <p>The Error prototype object is the intrinsic object %ErrorPrototype%. The Error prototype object is an ordinary object.\n        It is not an Error instance and does not have an [[ErrorData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</p>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the Error\n        prototype object is the intrinsic object %ObjectPrototype% (<a href=\"/sec/sec-properties-of-the-object-prototype-object.html\">19.1.3</a>).</p>\n      </div>\n\n      <section id=\"sec-error.prototype.constructor\">\n        <h1><span class=\"secnum\" id=\"sec-19.5.3.1\"><a href=\"/sec/sec-error.prototype.constructor.html\" title=\"link to this section\">19.5.3.1</a></span> Error.prototype.constructor</h1>\n\n        <p>The initial value of <code>Error.prototype.constructor</code> is the intrinsic object %Error%.</p>\n      </section>\n\n      <section id=\"sec-error.prototype.message\">\n        <h1><span class=\"secnum\" id=\"sec-19.5.3.2\"><a href=\"/sec/sec-error.prototype.message.html\" title=\"link to this section\">19.5.3.2</a></span> Error.prototype.message</h1>\n\n        <p>The initial value of <code>Error.prototype.message</code> is the empty String.</p>\n      </section>\n\n      <section id=\"sec-error.prototype.name\">\n        <h1><span class=\"secnum\" id=\"sec-19.5.3.3\"><a href=\"/sec/sec-error.prototype.name.html\" title=\"link to this section\">19.5.3.3</a></span> Error.prototype.name</h1>\n\n        <p>The initial value of <code>Error.prototype.name</code> is <code>&quot;<b>Error</b>&quot;</code>.</p>\n      </section>\n\n      <section id=\"sec-error.prototype.tostring\">\n        <h1><span class=\"secnum\" id=\"sec-19.5.3.4\"><a href=\"/sec/sec-error.prototype.tostring.html\" title=\"link to this section\">19.5.3.4</a></span> Error.prototype.toString ( )</h1>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>O</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>Let <i>name</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>O</i>, <code>&quot;name&quot;</code>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>name</i>).</li>\n          <li>If <i>name</i> is <b>undefined</b>, let <i>name</i> be <code>&quot;<b>Error</b>&quot;</code>; otherwise let <i>name</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>name</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>name</i>).</li>\n          <li>Let <i>msg</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>O</i>, <code>&quot;message&quot;</code>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>msg</i>).</li>\n          <li>If <i>msg</i> is <b>undefined</b>, let <i>msg</i> be the empty String; otherwise let <i>msg</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>msg</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>msg</i>).</li>\n          <li>If <i>name</i> is the empty String, return <i>msg</i>.</li>\n          <li>If <i>msg</i> is the empty String, return <i>name</i>.</li>\n          <li>Return the result of concatenating <i>name</i>, the code unit 0x003A (COLON), the code unit 0x0020 (SPACE), and\n              <i>msg</i>.</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-error-instances\">\n      <h1><span class=\"secnum\" id=\"sec-19.5.4\"><a href=\"/sec/sec-properties-of-error-instances.html\" title=\"link to this section\">19.5.4</a></span> Properties of Error Instances</h1>\n\n      <p>Error instances are ordinary objects that inherit properties from the Error prototype object and have an [[ErrorData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> whose value is <span class=\"value\">undefined</span>. The only specified uses of [[ErrorData]] is to identify Error and <i>NativeError</i>\n      instances as Error objects within <code><a href=\"/sec/sec-object.prototype.tostring.html\">Object.prototype.toString</a></code>.</p>\n    </section>\n\n    <section id=\"sec-native-error-types-used-in-this-standard\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-19.5.5\"><a href=\"/sec/sec-native-error-types-used-in-this-standard.html\" title=\"link to this section\">19.5.5</a></span> Native Error Types Used in This Standard</h1>\n\n        <p>A new instance of one of the <i>NativeError</i> objects below is thrown when a runtime error is detected. All of these\n        objects share the same structure, as described in <a href=\"/sec/sec-nativeerror-object-structure.html\">19.5.6</a>.</p>\n      </div>\n\n      <section id=\"sec-native-error-types-used-in-this-standard-evalerror\">\n        <h1><span class=\"secnum\" id=\"sec-19.5.5.1\"><a href=\"/sec/sec-native-error-types-used-in-this-standard-evalerror.html\" title=\"link to this section\">19.5.5.1</a></span> EvalError</h1>\n\n        <p>This exception is not currently used within this specification. This object remains for compatibility with previous\n        editions of this specification.</p>\n      </section>\n\n      <section id=\"sec-native-error-types-used-in-this-standard-rangeerror\">\n        <h1><span class=\"secnum\" id=\"sec-19.5.5.2\"><a href=\"/sec/sec-native-error-types-used-in-this-standard-rangeerror.html\" title=\"link to this section\">19.5.5.2</a></span> RangeError</h1>\n\n        <p>Indicates a value that is not in the set or range of allowable values.</p>\n      </section>\n\n      <section id=\"sec-native-error-types-used-in-this-standard-referenceerror\">\n        <h1><span class=\"secnum\" id=\"sec-19.5.5.3\"><a href=\"/sec/sec-native-error-types-used-in-this-standard-referenceerror.html\" title=\"link to this section\">19.5.5.3</a></span> ReferenceError</h1>\n\n        <p>Indicate that an invalid reference value has been detected.</p>\n      </section>\n\n      <section id=\"sec-native-error-types-used-in-this-standard-syntaxerror\">\n        <h1><span class=\"secnum\" id=\"sec-19.5.5.4\"><a href=\"/sec/sec-native-error-types-used-in-this-standard-syntaxerror.html\" title=\"link to this section\">19.5.5.4</a></span> SyntaxError</h1>\n\n        <p>Indicates that a parsing error has occurred.</p>\n      </section>\n\n      <section id=\"sec-native-error-types-used-in-this-standard-typeerror\">\n        <h1><span class=\"secnum\" id=\"sec-19.5.5.5\"><a href=\"/sec/sec-native-error-types-used-in-this-standard-typeerror.html\" title=\"link to this section\">19.5.5.5</a></span> TypeError</h1>\n\n        <p>Indicates the actual type of an operand is different than the expected type.</p>\n      </section>\n\n      <section id=\"sec-native-error-types-used-in-this-standard-urierror\">\n        <h1><span class=\"secnum\" id=\"sec-19.5.5.6\"><a href=\"/sec/sec-native-error-types-used-in-this-standard-urierror.html\" title=\"link to this section\">19.5.5.6</a></span> URIError</h1>\n\n        <p>Indicates that one of the global URI handling functions was used in a way that is incompatible with its definition.</p>\n      </section>\n    </section>\n\n    <section id=\"sec-nativeerror-object-structure\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-19.5.6\"><a href=\"/sec/sec-nativeerror-object-structure.html\" title=\"link to this section\">19.5.6</a></span> <i>NativeError</i> Object Structure</h1>\n\n        <p>When an ECMAScript implementation detects a runtime error, it throws a new instance of one of the <i>NativeError</i>\n        objects defined in <a href=\"/sec/sec-native-error-types-used-in-this-standard.html\">19.5.5</a>. Each of these objects has the\n        structure described below, differing only in the name used as the constructor name instead of <i>NativeError</i>, in the\n        <b>name</b> property of the prototype object, and in the implementation-defined <code>message</code> property of the\n        prototype object.</p>\n\n        <p>For each error object, references to <i>NativeError</i> in the definition should be replaced with the appropriate error\n        object name from <a href=\"/sec/sec-native-error-types-used-in-this-standard.html\">19.5.5</a>.</p>\n      </div>\n\n      <section id=\"sec-nativeerror-constructors\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-19.5.6.1\"><a href=\"/sec/sec-nativeerror-constructors.html\" title=\"link to this section\">19.5.6.1</a></span> <i>NativeError</i> Constructors</h1>\n\n          <p>When a <i>NativeError</i> constructor is called as a function rather than as a constructor, it creates and\n          initializes a new <i>NativeError</i> object. A call of the object as a function is equivalent to calling it as a\n          constructor with the same arguments. Thus the function call <i>NativeError</i><code><b>(</b>&#x2026;<b>)</b></code> is\n          equivalent to the object creation expression <code>new</code> <i>NativeError</i><code><b>(</b>&#x2026;<b>)</b></code>\n          with the same arguments.</p>\n\n          <p>Each <i>NativeError</i> constructor is designed to be subclassable. It may be used as the value of an\n          <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified\n          <i>NativeError</i> behaviour must include a <code>super</code> call to the <i>NativeError</i> constructor to create and\n          initialize subclass instances with a [[ErrorData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n          slot</a>.</p>\n        </div>\n\n        <section id=\"sec-nativeerror\">\n          <h1><span class=\"secnum\" id=\"sec-19.5.6.1.1\"><a href=\"/sec/sec-nativeerror.html\" title=\"link to this section\">19.5.6.1.1</a></span> NativeError ( message )</h1>\n\n          <p class=\"normalbefore\">When a <i>NativeError</i> function is called with argument <i>message</i> the following steps\n          are taken:</p>\n\n          <ol class=\"proc\">\n            <li>If NewTarget is <b>undefined</b><i>,</i> let <i>newTarget</i> be the active function object, else let\n                <i>newTarget</i> be NewTarget.</li>\n            <li>Let <i>O</i> be <a href=\"/sec/sec-ordinarycreatefromconstructor.html\">OrdinaryCreateFromConstructor</a>(<i>newTarget</i>,\n                <code>&quot;%<i>NativeError</i>Prototype%&quot;</code>, &#xAB;[[ErrorData]]&#xBB; ).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>O</i>).</li>\n            <li>If <i>message</i> is not <b>undefined</b>, then\n              <ol class=\"block\">\n                <li>Let <i>msg</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>message</i>).</li>\n                <li>Let <i>msgDesc</i> be the PropertyDescriptor{[[Value]]: <i>msg</i>, [[Writable]]: <b>true</b>, [[Enumerable]]:\n                    <b>false</b>, [[Configurable]]: <b>true</b>}.</li>\n                <li>Let <i>status</i> be <a href=\"/sec/sec-definepropertyorthrow.html\">DefinePropertyOrThrow</a>(<i>O</i>,\n                    &quot;<code>message</code>&quot;, <i>msgDesc</i>).</li>\n                <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n              </ol>\n            </li>\n            <li>Return <i>O</i>.</li>\n          </ol>\n\n          <p>The actual value of the string passed in step 2 is either <code>&quot;%EvalErrorPrototype%&quot;</code>,\n          <code>&quot;%RangeErrorPrototype%&quot;</code>, <code>&quot;%ReferenceErrorPrototype%&quot;</code>, <code>&quot;%SyntaxErrorPrototype%&quot;</code>,\n          <code>&quot;%TypeErrorPrototype%&quot;</code>, or <code>&quot;%URIErrorPrototype%&quot;</code> corresponding to which <i>NativeError</i>\n          constructor is being defined.</p>\n        </section>\n      </section>\n\n      <section id=\"sec-properties-of-the-nativeerror-constructors\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-19.5.6.2\"><a href=\"/sec/sec-properties-of-the-nativeerror-constructors.html\" title=\"link to this section\">19.5.6.2</a></span> Properties of the <i>NativeError</i> Constructors</h1>\n\n          <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of a\n          <i>NativeError</i> constructor is the intrinsic object %Error% (<a href=\"/sec/sec-error-constructor.html\">19.5.1</a>).</p>\n\n          <p>Besides the <code>length</code> property (whose value is <b>1</b>), each <i>NativeError</i> constructor has the\n          following properties:</p>\n        </div>\n\n        <section id=\"sec-nativeerror.prototype\">\n          <h1><span class=\"secnum\" id=\"sec-19.5.6.2.1\"><a href=\"/sec/sec-nativeerror.prototype.html\" title=\"link to this section\">19.5.6.2.1</a></span> NativeError.prototype</h1>\n\n          <p>The initial value of <b><i>NativeError</i><code>.prototype</code></b> is a <i>NativeError</i> prototype object (<a href=\"/sec/sec-properties-of-the-nativeerror-prototype-objects.html\">19.5.6.3</a>). Each <i>NativeError</i> constructor has a\n          distinct prototype object.</p>\n\n          <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n          <b>false</b> }.</p>\n        </section>\n      </section>\n\n      <section id=\"sec-properties-of-the-nativeerror-prototype-objects\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-19.5.6.3\"><a href=\"/sec/sec-properties-of-the-nativeerror-prototype-objects.html\" title=\"link to this section\">19.5.6.3</a></span> Properties of the <i>NativeError</i> Prototype Objects</h1>\n\n          <p>Each <i>NativeError</i> prototype object is an ordinary object. It is not an Error instance and does not have an\n          [[ErrorData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</p>\n\n          <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of each\n          <i>NativeError</i> prototype object is the intrinsic object %ErrorPrototype% (<a href=\"/sec/sec-properties-of-the-error-prototype-object.html\">19.5.3</a>).</p>\n        </div>\n\n        <section id=\"sec-nativeerror.prototype.constructor\">\n          <h1><span class=\"secnum\" id=\"sec-19.5.6.3.1\"><a href=\"/sec/sec-nativeerror.prototype.constructor.html\" title=\"link to this section\">19.5.6.3.1</a></span> <i>NativeError</i>.prototype.constructor</h1>\n\n          <p>The initial value of the <code>constructor</code> property of the prototype for a given <i>NativeError</i>\n          constructor is the corresponding intrinsic object %<i>NativeError</i>% (<a href=\"/sec/sec-nativeerror-constructors.html\">19.5.6.1</a>).</p>\n        </section>\n\n        <section id=\"sec-nativeerror.prototype.message\">\n          <h1><span class=\"secnum\" id=\"sec-19.5.6.3.2\"><a href=\"/sec/sec-nativeerror.prototype.message.html\" title=\"link to this section\">19.5.6.3.2</a></span> <i>NativeError</i>.prototype.message</h1>\n\n          <p>The initial value of the <code>message</code> property of the prototype for a given <i>NativeError</i> constructor is\n          the empty String.</p>\n        </section>\n\n        <section id=\"sec-nativeerror.prototype.name\">\n          <h1><span class=\"secnum\" id=\"sec-19.5.6.3.3\"><a href=\"/sec/sec-nativeerror.prototype.name.html\" title=\"link to this section\">19.5.6.3.3</a></span> <i>NativeError</i>.prototype.name</h1>\n\n          <p>The initial value of the <code>name</code> property of the prototype for a given <i>NativeError</i> constructor is a\n          string consisting of the name of the constructor (the name used instead of <i>NativeError</i>).</p>\n        </section>\n      </section>\n\n      <section id=\"sec-properties-of-nativeerror-instances\">\n        <h1><span class=\"secnum\" id=\"sec-19.5.6.4\"><a href=\"/sec/sec-properties-of-nativeerror-instances.html\" title=\"link to this section\">19.5.6.4</a></span> Properties of <i>NativeError</i> Instances</h1>\n\n        <p><i>NativeError</i> instances are ordinary objects that inherit properties from their <i>NativeError</i> prototype\n        object and have an [[ErrorData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> whose value\n        is <span class=\"value\">undefined</span>. The only specified use of [[ErrorData]] is by <code><a href=\"/sec/sec-object.prototype.tostring.html\">Object.prototype.toString</a></code> (<a href=\"/sec/sec-object.prototype.tostring.html\">19.1.3.6</a>) to identify Error or <i>NativeError</i> instances.</p>\n      </section>\n    </section>\n  </section>\n"}