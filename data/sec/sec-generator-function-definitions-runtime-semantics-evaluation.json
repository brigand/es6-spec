{"id":"sec-generator-function-definitions-runtime-semantics-evaluation","html":"\n      <h1><span class=\"secnum\" id=\"sec-14.4.14\"><a href=\"/sec/sec-generator-function-definitions-runtime-semantics-evaluation.html\" title=\"link to this section\">14.4.14</a></span> Runtime Semantics: Evaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorExpression</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the function code for this <i>GeneratorExpression</i> is <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a>, let\n            <i>strict</i> be <b>true</b>. Otherwise let <i>strict</i> be <b>false</b>.</li>\n        <li>Let <i>scope</i> be the <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> of <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n        <li>Let <i>closure</i> be <a href=\"/sec/sec-generatorfunctioncreate.html\">GeneratorFunctionCreate</a>(<span style=\"font-family:\n            sans-serif\">Normal</span>, <i>FormalParameters</i>, <i>GeneratorBody, scope</i>, <i>strict</i>).</li>\n        <li>Let <i>prototype</i> be <a href=\"/sec/sec-objectcreate.html\">ObjectCreate</a>(<span style=\"font-family:\n            sans-serif\">%GeneratorPrototype%</span>).</li>\n        <li>Perform <a href=\"/sec/sec-makeconstructor.html\">MakeConstructor</a>(<i>closure</i>, <b>true</b>, <i>prototype</i>).</li>\n        <li>Return <i>closure</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">GeneratorExpression</span> <span class=\"geq\">:</span> <code class=\"t\">function</code> <code class=\"t\">*</code> <span class=\"nt\">BindingIdentifier</span> <code class=\"t\">(</code> <span class=\"nt\">FormalParameters</span> <code class=\"t\">)</code> <code class=\"t\">{</code> <span class=\"nt\">GeneratorBody</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the function code for this <i>GeneratorExpression</i> is <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a>, let\n            <i>strict</i> be <b>true</b>. Otherwise let <i>strict</i> be <b>false</b>.</li>\n        <li>Let <i>runningContext</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-lexical-environments.html\">Lexical Environment</a>.</li>\n        <li>Let <i>funcEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>runningContext</i>).</li>\n        <li>Let <i>envRec</i> be <i>funcEnv&#x2019;s</i> <a href=\"/sec/sec-lexical-environments.html\">EnvironmentRecord</a>.</li>\n        <li>Let <i>name</i> be StringValue of <i>BindingIdentifier</i>.</li>\n        <li>Perform <i>envRec.</i>CreateImmutableBinding(<i>name</i>).</li>\n        <li>Let <i>closure</i> be <a href=\"/sec/sec-generatorfunctioncreate.html\">GeneratorFunctionCreate</a>(<span style=\"font-family:\n            sans-serif\">Normal</span>, <i>FormalParameters</i>, <i>GeneratorBody, funcEnv</i>, <i>strict</i>).</li>\n        <li>Let <i>prototype</i> be <a href=\"/sec/sec-objectcreate.html\">ObjectCreate</a>(<span style=\"font-family:\n            sans-serif\">%GeneratorPrototype%</span>).</li>\n        <li>Perform <a href=\"/sec/sec-makeconstructor.html\">MakeConstructor</a> (<i>closure</i>, <b>true</b>, <i>prototype</i>).</li>\n        <li>Perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>closure</i>, <i>name</i>).</li>\n        <li>Perform <i>envRec.</i>InitializeBinding(<i>name,</i> <i>closure</i>).</li>\n        <li>Return <i>closure</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> The <span class=\"nt\">BindingIdentifier</span> in a <span class=\"nt\">GeneratorExpression</span> can be referenced from inside the <var>GeneratorExpression&apos;s</var> <span class=\"nt\">FunctionBody</span> to allow the generator code to call itself recursively. However, unlike in a <span class=\"nt\">GeneratorDeclaration</span>, the <span class=\"nt\">BindingIdentifier</span> in a <span class=\"nt\">GeneratorExpression</span> cannot be referenced from and does not affect the scope enclosing the <span class=\"nt\">GeneratorExpression</span>.</p>\n      </div>\n\n      <div class=\"gp prod\"><span class=\"nt\">YieldExpression</span> <span class=\"geq\">:</span> <code class=\"t\">yield</code></div>\n      <ol class=\"proc\">\n        <li>Return <a href=\"/sec/sec-generatoryield.html\">GeneratorYield</a>(<a href=\"/sec/sec-createiterresultobject.html\">CreateIterResultObject</a>(<b>undefined</b>, <b>false</b>)).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">YieldExpression</span> <span class=\"geq\">:</span> <code class=\"t\">yield</code> <span class=\"nt\">AssignmentExpression</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>exprRef</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n        <li>Let <i>value</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>value</i>).</li>\n        <li>Return <a href=\"/sec/sec-generatoryield.html\">GeneratorYield</a>(<a href=\"/sec/sec-createiterresultobject.html\">CreateIterResultObject</a>(<i>value</i>, <b>false</b>)).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">YieldExpression</span> <span class=\"geq\">:</span> <code class=\"t\">yield</code> <code class=\"t\">*</code> <span class=\"nt\">AssignmentExpression</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>exprRef</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n        <li>Let <i>value</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n        <li>Let <i>iterator</i> be <a href=\"/sec/sec-getiterator.html\">GetIterator</a>(<i>value</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>iterator</i>)<i>.</i></li>\n        <li>Let <i>received</i> be <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<b>undefined</b>).</li>\n        <li>Repeat\n          <ol class=\"block\">\n            <li>If <i>received</i>.[[type]] is <span style=\"font-family: sans-serif\">normal</span>, then\n              <ol class=\"block\">\n                <li>Let <i>innerResult</i> be <a href=\"/sec/sec-iteratornext.html\">IteratorNext</a>(<i>iterator</i>,\n                    <i>received</i>.[[value]]).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>innerResult</i>).</li>\n                <li>Let <i>done</i> be <a href=\"/sec/sec-iteratorcomplete.html\">IteratorComplete</a>(<i>innerResult</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>done</i>).</li>\n                <li>If <i>done</i> is <b>true</b>, then\n                  <ol class=\"block\">\n                    <li>Return <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a> (<i>innerResult</i>).</li>\n                  </ol>\n                </li>\n                <li>Let <i>received</i>  be <a href=\"/sec/sec-generatoryield.html\">GeneratorYield</a>(<i>innerResult</i>).</li>\n              </ol>\n            </li>\n            <li>Else if <i>received</i>.[[type]] is <span style=\"font-family: sans-serif\">throw</span>, then\n              <ol class=\"block\">\n                <li>Let <i>throw</i> be <a href=\"/sec/sec-getmethod.html\">GetMethod</a>(<i>iterator</i>, <code>&quot;throw&quot;</code>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>throw</i>)<span style=\"font-family:\n                    sans-serif\">.</span></li>\n                <li>If <i>throw</i> is not <b>undefined</b>, then\n                  <ol class=\"block\">\n                    <li>Let <i>innerResult</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>throw</i>, <i>iterator</i>,\n                        &#xAB;&#x200D;<i>received</i>.[[value]]&#xBB;).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>innerResult</i>)<span style=\"font-family:\n                        sans-serif\">.</span></li>\n                    <li>NOTE:  Exceptions from the inner iterator <code>throw</code> method are propagated. Normal completions\n                        from an inner <code>throw</code> method are processed similarly to an inner <code>next</code>.</li>\n                    <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>innerResult</i>) is not Object, throw a\n                        <b>TypeError</b> exception.</li>\n                    <li>Let <i>done</i> be <a href=\"/sec/sec-iteratorcomplete.html\">IteratorComplete</a>(<i>innerResult</i>).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>done</i>).</li>\n                    <li>If <i>done</i> is <b>true</b>, then\n                      <ol class=\"block\">\n                        <li>Let <i>value</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>innerResult</i>).</li>\n                        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>value</i>).</li>\n                        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family: sans-serif\">return</span> , [[value]]:<i>value</i>, [[target]]:<span style=\"font-family: sans-serif\">empty</span>}.</li>\n                      </ol>\n                    </li>\n                    <li>Let <i>received</i>  be <a href=\"/sec/sec-generatoryield.html\">GeneratorYield</a>(<i>innerResult</i>).</li>\n                  </ol>\n                </li>\n                <li>Else,\n                  <ol class=\"block\">\n                    <li>NOTE:  If <var>iterator</var> does not have a <code>throw</code> method, this throw is going to terminate\n                        the <code>yield*</code> loop. But first we need to give <var>iterator</var> a chance to clean up.</li>\n                    <li>Let <i>closeResult</i> be <a href=\"/sec/sec-iteratorclose.html\">IteratorClose</a>(<i>iterator</i>, <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family:\n                        sans-serif\">normal</span> , [[value]]: <span style=\"font-family: sans-serif\">empty</span>,\n                        [[target]]:<span style=\"font-family: sans-serif\">empty</span>}).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>closeResult</i>).</li>\n                    <li>NOTE: The next step throws a <span class=\"value\">TypeError</span> to indicate that there was a\n                        <code>yield*</code> protocol violation: <var>iterator</var> does not have a <code>throw</code>\n                        method.</li>\n                    <li>Throw a <b>TypeError</b> exception.</li>\n                  </ol>\n                </li>\n              </ol>\n            </li>\n            <li>Else,\n              <ol class=\"block\">\n                <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>received</i>.[[type]] is <span style=\"font-family:\n                    sans-serif\">return</span>.</li>\n                <li>Let <i>return</i> be <a href=\"/sec/sec-getmethod.html\">GetMethod</a>(<i>iterator</i>, <code>&quot;return&quot;</code>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>return</i>)<span style=\"font-family:\n                    sans-serif\">.</span></li>\n                <li>If <i>return</i> is <b>undefined</b>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>received</i>).</li>\n                <li>Let <i>innerReturnResult</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>return</i>, <i>iterator</i>,\n                    &#xAB;&#x200D;<i>received</i>.[[value]]&#xBB;).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>innerReturnResult</i>)<span style=\"font-family:\n                    sans-serif\">.</span></li>\n                <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>innerReturnResult</i>) is not Object, throw a\n                    <b>TypeError</b> exception.</li>\n                <li>Let <i>done</i> be <a href=\"/sec/sec-iteratorcomplete.html\">IteratorComplete</a>(<i>innerReturnResult</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>done</i>).</li>\n                <li>If <i>done</i> is <b>true</b>, then\n                  <ol class=\"block\">\n                    <li>Let <i>value</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>innerReturnResult</i>).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>value</i>).</li>\n                    <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family: sans-serif\">return</span> , [[value]]: <i>value</i>, [[target]]:<span style=\"font-family: sans-serif\">empty</span>}.</li>\n                  </ol>\n                </li>\n                <li>Let <i>received</i>  be <a href=\"/sec/sec-generatoryield.html\">GeneratorYield</a>(<i>innerReturnResult</i>).</li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n      </ol>\n    "}