{"id":"sec-generatorfunction-constructor","html":"\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-25.2.1\"><a href=\"/sec/sec-generatorfunction-constructor.html\" title=\"link to this section\">25.2.1</a></span> The GeneratorFunction Constructor</h1>\n\n        <p>The <code>GeneratorFunction</code> constructor is the %GeneratorFunction% intrinsic. When\n        <code>GeneratorFunction</code> is called as a function rather than as a constructor, it creates and initializes a new\n        GeneratorFunction object. Thus the function call <code>GeneratorFunction</code> <code><b>(</b>&#x2026;<b>)</b></code> is\n        equivalent to the object creation expression <code>new GeneratorFunction</code> <code><b>(</b>&#x2026;<b>)</b></code> with\n        the same arguments.</p>\n\n        <p><code>GeneratorFunction</code> is designed to be subclassable. It may be used as the value of an <code>extends</code>\n        clause of a class definition. Subclass constructors that intend to inherit the specified <code>GeneratorFunction</code>\n        behaviour must include a <code>super</code> call to the <code>GeneratorFunction</code> constructor to create and\n        initialize subclass instances with the internal slots necessary for built-in GeneratorFunction behaviour. All ECMAScript\n        syntactic forms for defining generator function objects create direct instances of <code>GeneratorFunction</code>. There\n        is no syntactic means to create instances of <code>GeneratorFunction</code> subclasses.</p>\n      </div>\n\n      <section id=\"sec-generatorfunction\">\n        <h1><span class=\"secnum\" id=\"sec-25.2.1.1\"><a href=\"/sec/sec-generatorfunction.html\" title=\"link to this section\">25.2.1.1</a></span> GeneratorFunction (p1, p2, &#x2026; , pn, body)</h1>\n\n        <p>The last argument specifies the body (executable code) of a generator function; any preceding arguments specify formal\n        parameters.</p>\n\n        <p class=\"normalbefore\">When the <code>GeneratorFunction</code> function is called with some arguments <var>p1</var>,\n        <var>p2</var>, &#x2026; , <var>pn</var>, <var>body</var> (where <var>n</var> might be <span style=\"font-family: Times New\n        Roman\">0</span>, that is, there are no &#x201C;<var>p</var>&#x201D; arguments, and where <var>body</var> might also not be\n        provided), the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>C</i> be the active function object.</li>\n          <li>Let <i>args</i> be the <i>argumentsList</i> that was passed to this function by [[Call]] or [[Construct]].</li>\n          <li>Return <a href=\"/sec/sec-createdynamicfunction.html\">CreateDynamicFunction</a>(<i>C</i>, NewTarget, <code>&quot;generator&quot;</code>,\n              <i>args</i>).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> See NOTE for <a href=\"/sec/sec-function-p1-p2-pn-body.html\">19.2.1.1</a>.</p>\n        </div>\n      </section>\n    "}