{"id":"sec-generatorresumeabrupt","html":"\n        <h1><span class=\"secnum\" id=\"sec-25.3.3.4\"><a href=\"/sec/sec-generatorresumeabrupt.html\" title=\"link to this section\">25.3.3.4</a></span> GeneratorResumeAbrupt(generator, abruptCompletion)</h1>\n\n        <p class=\"normalbefore\">The abstract operation GeneratorResumeAbrupt with arguments <span style=\"font-family: Times New\n        Roman\"><i>generator</i> and <i>abruptCompletion</i></span> performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>state</i> be <a href=\"/sec/sec-generatorvalidate.html\">GeneratorValidate</a>(<i>generator</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>state</i>).</li>\n          <li>If <i>state</i> is <code>&quot;suspendedStart&quot;</code>, then\n            <ol class=\"block\">\n              <li>Set <i>generator&#x2019;s</i> [[GeneratorState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <code>&quot;completed&quot;</code>.</li>\n              <li>Once a generator enters the <code>&quot;completed&quot;</code> state it never leaves it and its associated <a href=\"/sec/sec-execution-contexts.html\">execution context</a> is never resumed. Any execution state associated with\n                  <i>generator</i> can be discarded at this point.</li>\n              <li>Let <i>state</i> be <code>&quot;completed&quot;</code>.</li>\n            </ol>\n          </li>\n          <li>If <i>state</i> is <code>&quot;completed&quot;</code>, then\n            <ol class=\"block\">\n              <li>If <i>abruptCompletion</i>.[[type]] is <span style=\"font-family: sans-serif\">return</span>, then\n                <ol class=\"block\">\n                  <li>Return <a href=\"/sec/sec-createiterresultobject.html\">CreateIterResultObject</a>(<i>abruptCompletion</i>.[[value]],\n                      <b>true</b>).</li>\n                </ol>\n              </li>\n              <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>abruptCompletion</i>).</li>\n            </ol>\n          </li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>state</i> is <code>&quot;suspendedYield&quot;</code>.</li>\n          <li>Let <i>genContext</i> be the value of <i>generator&#x2019;s</i> [[GeneratorContext]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Let <i>methodContext</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n          <li><a href=\"/sec/sec-execution-contexts.html\">Suspend</a> <i>methodContext</i>.</li>\n          <li>Set <i>generator&#x2019;s</i> [[GeneratorState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a> to <code>&quot;executing&quot;</code>.</li>\n          <li>Push <i>genContext</i> onto <a href=\"/sec/sec-execution-contexts.html\">the execution context stack</a>; <i>genContext</i> is\n              now <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n          <li>Resume the <a href=\"/sec/sec-execution-contexts.html\">suspended</a> evaluation of <i>genContext</i> using\n              <i>abruptCompletion</i> as the result of the operation that <a href=\"/sec/sec-execution-contexts.html\">suspended</a> it. Let\n              <i>result</i> be the completion record returned by the resumed computation.</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: When we return here, <i>genContext</i> has already been removed\n              from <a href=\"/sec/sec-execution-contexts.html\">the execution context stack</a> and <i>methodContext</i> is <a href=\"/sec/sec-execution-contexts.html\">the currently running execution context</a>.</li>\n          <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>result</i>).</li>\n        </ol>\n      "}