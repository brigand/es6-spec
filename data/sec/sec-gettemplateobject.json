{"id":"sec-gettemplateobject","html":"\n        <h1><span class=\"secnum\" id=\"sec-12.2.9.3\"><a href=\"/sec/sec-gettemplateobject.html\" title=\"link to this section\">12.2.9.3</a></span> Runtime Semantics: GetTemplateObject ( templateLiteral )</h1>\n\n        <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">GetTemplateObject</span> is\n        called with a grammar production, <var>templateLiteral</var>, as an argument. It performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>rawStrings</i> be TemplateStrings of <i>templateLiteral</i> with argument <b>true</b>.</li>\n          <li>Let <i>ctx</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n          <li>Let <i>realm</i> be the <i>ctx</i>&#x2019;s <a href=\"/sec/sec-code-realms.html\">Realm</a>.</li>\n          <li>Let <i>templateRegistry</i> be <i>realm</i>.[[templateMap]].</li>\n          <li>For each element  <i>e</i> of <i>templateRegistry</i>, do\n            <ol class=\"block\">\n              <li>If <i>e</i>.[[strings]] and <i>rawStrings</i> contain the same values in the same order, then\n                <ol class=\"block\">\n                  <li>Return <i>e.</i>[[array]].</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Let <i>cookedStrings</i> be TemplateStrings of <i>templateLiteral</i> with argument <b>false</b>.</li>\n          <li>Let <i>count</i> be the number of elements in the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>\n              <i>cookedStrings</i>.</li>\n          <li>Let <i>template</i> be <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>(<i>count</i>).</li>\n          <li>Let <i>rawObj</i> be <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>(<i>count</i>).</li>\n          <li>Let <i>index</i> be 0.</li>\n          <li>Repeat while <i>index</i> &lt; <i>count</i>\n            <ol class=\"block\">\n              <li>Let <i>prop</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>index</i>).</li>\n              <li>Let <i>cookedValue</i> be the String value <i>cookedStrings</i>[<i>index</i>].</li>\n              <li><a href=\"/sec/sec-call.html\">Call</a> <i>template</i>.[[DefineOwnProperty]](<i>prop</i>, PropertyDescriptor{[[Value]]:\n                  <i>cookedValue</i>, [[Enumerable]]: <b>true</b>, [[Writable]]: <b>false</b>, [[Configurable]]:\n                  <b>false</b>})<i>.</i></li>\n              <li>Let <i>rawValue</i> be the String value <i>rawStrings</i>[<i>index</i>].</li>\n              <li><a href=\"/sec/sec-call.html\">Call</a> <i>rawObj</i>.[[DefineOwnProperty]](<i>prop</i>, PropertyDescriptor{[[Value]]:\n                  <i>rawValue</i>, [[Enumerable]]: <b>true</b>, [[Writable]]: <b>false</b>, [[Configurable]]:\n                  <b>false</b>})<i>.</i></li>\n              <li>Let <i>index</i> be <i>index</i>+1.</li>\n            </ol>\n          </li>\n          <li>Perform <a href=\"/sec/sec-setintegritylevel.html\">SetIntegrityLevel</a>(<i>rawObj</i>, <code>&quot;frozen&quot;</code>).</li>\n          <li><a href=\"/sec/sec-call.html\">Call</a> <i>template</i>.[[DefineOwnProperty]](<code>&quot;raw&quot;</code>, PropertyDescriptor{[[Value]]:\n              <i>rawObj</i>, [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n              <b>false</b>})<i>.</i></li>\n          <li>Perform <a href=\"/sec/sec-setintegritylevel.html\">SetIntegrityLevel</a>(<i>template</i>, <code>&quot;frozen&quot;</code>).</li>\n          <li>Append the Record{[[strings]]: <i>rawStrings</i>, [[array]]: <i>template</i>} to <i>templateRegistry</i>.</li>\n          <li>Return <i>template</i>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> The creation of a template object cannot result in an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> Each <span class=\"nt\">TemplateLiteral</span> in the program code of a <a href=\"/sec/sec-code-realms.html\">Realm</a> is associated with a unique template object that is used in the evaluation of tagged\n          Templates (<a href=\"/sec/sec-template-literals-runtime-semantics-evaluation.html\">12.2.9.5</a>). The template objects are frozen\n          and the same template object is used each time a specific tagged Template is evaluated. Whether template objects are\n          created lazily upon first evaluation of the <span class=\"nt\">TemplateLiteral</span> or eagerly prior to first evaluation\n          is an implementation choice that is not observable to ECMAScript code.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 3</span> Future editions of this specification may define additional non-enumerable properties\n          of template objects.</p>\n        </div>\n      "}