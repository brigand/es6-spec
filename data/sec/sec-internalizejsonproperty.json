{"id":"sec-internalizejsonproperty","html":"\n        <h1><span class=\"secnum\" id=\"sec-24.3.1.1\"><a href=\"/sec/sec-internalizejsonproperty.html\" title=\"link to this section\">24.3.1.1</a></span> Runtime Semantics: InternalizeJSONProperty( holder, name)</h1>\n\n        <p class=\"normalbefore\">The abstract operation InternalizeJSONProperty is a recursive abstract operation that takes two\n        parameters: a <var>holder</var> object and the String <var>name</var> of a property in that object.\n        InternalizeJSONProperty uses the value of <var>reviver</var> that was originally passed to the above parse function.</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>val</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>holder</i>, <i>name</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>val</i>).</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>val</i>) is Object, then\n            <ol class=\"block\">\n              <li>Let <i>isArray</i> be <a href=\"/sec/sec-isarray.html\">IsArray</a>(<i>val</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>isArray</i>).</li>\n              <li>If <i>isArray</i> is <b>true</b>,  then\n                <ol class=\"block\">\n                  <li>Set <i>I</i> to 0.</li>\n                  <li>Let <i>len</i> be <a href=\"/sec/sec-tolength.html\">ToLength</a>(<a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>val</i>,\n                      <code>&quot;length&quot;</code>)).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>len</i>).</li>\n                  <li>Repeat while <i>I</i> &lt; <i>len</i>,\n                    <ol class=\"block\">\n                      <li>Let <i>newElement</i> be InternalizeJSONProperty(<i>val</i>, <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>I</i>)).</li>\n                      <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>newElement</i>).</li>\n                      <li>If <i>newElement</i> is <b>undefined</b>, then\n                        <ol class=\"block\">\n                          <li>Let <i>status</i> be <i>val</i>.[[Delete]](<a href=\"/sec/sec-tostring.html\">ToString</a>(<i>I</i>)).</li>\n                        </ol>\n                      </li>\n                      <li>Else\n                        <ol class=\"block\">\n                          <li>Let <i>status</i> be <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>val</i>, <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>I</i>), <i>newElement</i>).</li>\n                          <li>NOTE This algorithm intentionally does not throw an exception if status is <b>false</b>.</li>\n                        </ol>\n                      </li>\n                      <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n                      <li>Add 1 to <i>I</i>.</li>\n                    </ol>\n                  </li>\n                </ol>\n              </li>\n              <li>Else\n                <ol class=\"block\">\n                  <li>Let <i>keys</i> be <a href=\"/sec/sec-enumerableownnames.html\">EnumerableOwnNames</a>(<i>val</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>keys</i>).</li>\n                  <li>For each String <i>P</i> in <i>keys</i> do,\n                    <ol class=\"block\">\n                      <li>Let <i>newElement</i> be InternalizeJSONProperty(<i>val</i>, <i>P</i>).</li>\n                      <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>newElement</i>).</li>\n                      <li>If <i>newElement</i> is <b>undefined</b>, then\n                        <ol class=\"block\">\n                          <li>Let <i>status</i> be <i>val</i>.[[Delete]](<i>P</i>).</li>\n                        </ol>\n                      </li>\n                      <li>Else\n                        <ol class=\"block\">\n                          <li>Let <i>status</i> be <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>val</i>, <i>P</i>,\n                              <i>newElement</i>).</li>\n                          <li>NOTE This algorithm intentionally does not throw an exception if status is <b>false</b>.</li>\n                        </ol>\n                      </li>\n                      <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n                    </ol>\n                  </li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Return <a href=\"/sec/sec-call.html\">Call</a>(<i>reviver</i>, <i>holder</i>, &#xAB;<i>name</i>, <i>val</i>&#xBB;).</li>\n        </ol>\n\n        <p>It is not permitted for a conforming implementation of <code><a href=\"/sec/sec-json.parse.html\">JSON.parse</a></code> to extend\n        the JSON grammars. If an implementation wishes to support a modified or extended JSON interchange format it must do so by\n        defining a different parse function.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> In the case where there are duplicate name Strings within an object, lexically preceding\n          values for the same key shall be overwritten.</p>\n        </div>\n      "}