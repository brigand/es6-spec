{"id":"sec-iteration-statements","html":"\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-13.7\"><a href=\"/sec/sec-iteration-statements.html\" title=\"link to this section\">13.7</a></span>\n          Iteration Statements</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">IterationStatement</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">do</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <code class=\"t\">;</code></div>\n        <div class=\"rhs\"><code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"grhsannot\">[lookahead &#x2209; {<code class=\"t\">let [</code>}]</span> <span class=\"nt\">Expression</span><sub class=\"g-params\">[?Yield]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"grhsannot\">[lookahead &#x2209; {<code class=\"t\">let [</code>}]</span> <span class=\"nt\">LeftHandSideExpression</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">in</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">in</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">in</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"grhsannot\">[lookahead &#x2260; let ]</span> <span class=\"nt\">LeftHandSideExpression</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ForDeclaration</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">LetOrConst</span> <span class=\"nt\">ForBinding</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ForBinding</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">BindingIdentifier</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">BindingPattern</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n    </div>\n\n    <section id=\"sec-iteration-statements-semantics\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.1\"><a href=\"/sec/sec-iteration-statements-semantics.html\" title=\"link to this section\">13.7.1</a></span> Semantics</h1>\n      </div>\n\n      <section id=\"sec-semantics-static-semantics-early-errors\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.1.1\"><a href=\"/sec/sec-semantics-static-semantics-early-errors.html\" title=\"link to this section\">13.7.1.1</a></span> Static Semantics:  Early Errors</h1>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">do</code> <span class=\"nt\">Statement</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <code class=\"t\">;</code></div>\n          <div class=\"rhs\"><code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ul>\n          <li>It is a Syntax Error if <a href=\"/sec/sec-islabelledfunction.html\">IsLabelledFunction</a>(<span class=\"nt\">Statement</span>)\n              is <span class=\"value\">true</span>.</li>\n        </ul>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> It is only necessary to apply this rule if the extension specified in  <a href=\"/sec/sec-labelled-function-declarations.html\">B.3.2</a> is implemented.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-loopcontinues\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.1.2\"><a href=\"/sec/sec-loopcontinues.html\" title=\"link to this section\">13.7.1.2</a></span>\n            Runtime Semantics: LoopContinues(completion, labelSet)</h1>\n\n        <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">LoopContinues</span> with\n        arguments <var>completion</var> and <var>labelSet</var> is defined by the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>If <i>completion</i>.[[type]] is <span style=\"font-family: sans-serif\">normal</span>, return <b>true</b>.</li>\n          <li>If <i>completion</i>.[[type]] is not <span style=\"font-family: sans-serif\">continue</span>, return\n              <b>false</b>.</li>\n          <li>If <i>completion</i>.[[target]] is <span style=\"font-family: sans-serif\">empty</span>, return <b>true</b>.</li>\n          <li>If <i>completion</i>.[[target]] is an element of <i>labelSet</i>, return <b>true</b>.</li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> Within the <span class=\"nt\">Statement</span> part of an <span class=\"nt\">IterationStatement</span> a <span class=\"nt\">ContinueStatement</span> may be used to begin a new\n          iteration.</p>\n        </div>\n      </section>\n    </section>\n\n    <section id=\"sec-do-while-statement\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.2\"><a href=\"/sec/sec-do-while-statement.html\" title=\"link to this section\">13.7.2</a></span>\n            The <code>do</code>-<code>while</code> Statement</h1>\n      </div>\n\n      <section id=\"sec-do-while-statement-static-semantics-containsduplicatelabels\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.2.1\"><a href=\"/sec/sec-do-while-statement-static-semantics-containsduplicatelabels.html\" title=\"link to this section\">13.7.2.1</a></span> Static Semantics: ContainsDuplicateLabels</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsduplicatelabels.html\">13.1.1</a>, <a href=\"/sec/sec-block-static-semantics-containsduplicatelabels.html\">13.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsduplicatelabels.html\">13.6.2</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsduplicatelabels.html\">13.7.3.1</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsduplicatelabels.html\">13.7.4.2</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels.html\">13.7.5.3</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsduplicatelabels.html\">13.11.2</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsduplicatelabels.html\">13.12.2</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsduplicatelabels.html\">13.13.2</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsduplicatelabels.html\">13.15.2</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsduplicatelabels.html\">15.2.1.2</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">do</code> <span class=\"nt\">Statement</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Return ContainsDuplicateLabels of <i>Statement</i> with argument <i>labelSet.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-do-while-statement-static-semantics-containsundefinedbreaktarget\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.2.2\"><a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedbreaktarget.html\" title=\"link to this section\">13.7.2.2</a></span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedbreaktarget.html\">13.1.2</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedbreaktarget.html\">13.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedbreaktarget.html\">13.6.3</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.3.2</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.4.3</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget.html\">13.7.5.4</a>, <a href=\"/sec/sec-break-statement-static-semantics-containsundefinedbreaktarget.html\">13.9.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedbreaktarget.html\">13.11.3</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedbreaktarget.html\">13.12.3</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedbreaktarget.html\">13.13.3</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsundefinedbreaktarget.html\">13.15.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedbreaktarget.html\">15.2.1.3</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">do</code> <span class=\"nt\">Statement</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Return ContainsUndefinedBreakTarget of <i>Statement</i> with argument <i>labelSet.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-do-while-statement-static-semantics-containsundefinedcontinuetarget\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.2.3\"><a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedcontinuetarget.html\" title=\"link to this section\">13.7.2.3</a></span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n\n        <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedcontinuetarget.html\">13.1.3</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedcontinuetarget.html\">13.2.4</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedcontinuetarget.html\">13.6.4</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.3.3</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.4.4</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget.html\">13.7.5.5</a>, <a href=\"/sec/sec-continue-statement-static-semantics-containsundefinedcontinuetarget.html\">13.8.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedcontinuetarget.html\">13.11.4</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedcontinuetarget.html\">13.12.4</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedcontinuetarget.html\">13.13.4</a>,<a href=\"/sec/sec-try-statement-static-semantics-containsundefinedcontinuetarget.html\">13.15.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedcontinuetarget.html\">15.2.1.4</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">do</code> <span class=\"nt\">Statement</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Return ContainsUndefinedContinueTarget of <i>Statement</i> with arguments <i>iterationSet</i> and\n              &#xAB;&#xA0;&#xBB;<i>.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-do-while-statement-static-semantics-vardeclarednames\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.2.4\"><a href=\"/sec/sec-do-while-statement-static-semantics-vardeclarednames.html\" title=\"link to this section\">13.7.2.4</a></span> Static Semantics:  VarDeclaredNames</h1>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-vardeclarednames.html\">13.1.5</a>, <a href=\"/sec/sec-block-static-semantics-vardeclarednames.html\">13.2.11</a>, <a href=\"/sec/sec-variable-statement-static-semantics-vardeclarednames.html\">13.3.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-vardeclarednames.html\">13.6.5</a>, <a href=\"/sec/sec-while-statement-static-semantics-vardeclarednames.html\">13.7.3.4</a>, <a href=\"/sec/sec-for-statement-static-semantics-vardeclarednames.html\">13.7.4.5</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-vardeclarednames.html\">13.7.5.7</a>, <a href=\"/sec/sec-with-statement-static-semantics-vardeclarednames.html\">13.11.5</a>, <a href=\"/sec/sec-switch-statement-static-semantics-vardeclarednames.html\">13.12.7</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-vardeclarednames.html\">13.13.12</a>, <a href=\"/sec/sec-try-statement-static-semantics-vardeclarednames.html\">13.15.5</a>, <a href=\"/sec/sec-function-definitions-static-semantics-vardeclarednames.html\">14.1.15</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-vardeclarednames.html\">14.2.12</a>, <a href=\"/sec/sec-scripts-static-semantics-vardeclarednames.html\">15.1.5</a>, <a href=\"/sec/sec-module-semantics-static-semantics-vardeclarednames.html\">15.2.1.13</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">do</code> <span class=\"nt\">Statement</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Return the VarDeclaredNames of <i>Statement</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-do-while-statement-static-semantics-varscopeddeclarations\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.2.5\"><a href=\"/sec/sec-do-while-statement-static-semantics-varscopeddeclarations.html\" title=\"link to this section\">13.7.2.5</a></span> Static Semantics:  VarScopedDeclarations</h1>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-varscopeddeclarations.html\">13.1.6</a>, <a href=\"/sec/sec-block-static-semantics-varscopeddeclarations.html\">13.2.12</a>, <a href=\"/sec/sec-variable-statement-static-semantics-varscopeddeclarations.html\">13.3.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-varscopeddeclarations.html\">13.6.6</a>, <a href=\"/sec/sec-while-statement-static-semantics-varscopeddeclarations.html\">13.7.3.5</a>, <a href=\"/sec/sec-for-statement-static-semantics-varscopeddeclarations.html\">13.7.4.6</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations.html\">13.7.5.8</a>, <a href=\"/sec/sec-with-statement-static-semantics-varscopeddeclarations.html\">13.11.6</a>, <a href=\"/sec/sec-switch-statement-static-semantics-varscopeddeclarations.html\">13.12.8</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-varscopeddeclarations.html\">13.13.13</a>, <a href=\"/sec/sec-try-statement-static-semantics-varscopeddeclarations.html\">13.15.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-varscopeddeclarations.html\">14.1.16</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-varscopeddeclarations.html\">14.2.13</a>, <a href=\"/sec/sec-scripts-static-semantics-varscopeddeclarations.html\">15.1.6</a>, <a href=\"/sec/sec-module-semantics-static-semantics-varscopeddeclarations.html\">15.2.1.14</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">do</code> <span class=\"nt\">Statement</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Return the VarScopedDeclarations of <i>Statement</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-do-while-statement-runtime-semantics-labelledevaluation\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.2.6\"><a href=\"/sec/sec-do-while-statement-runtime-semantics-labelledevaluation.html\" title=\"link to this section\">13.7.2.6</a></span> Runtime Semantics: LabelledEvaluation</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-runtime-semantics-labelledevaluation.html\">13.1.7</a>, <a href=\"/sec/sec-while-statement-runtime-semantics-labelledevaluation.html\">13.7.3.6</a>, <a href=\"/sec/sec-for-statement-runtime-semantics-labelledevaluation.html\">13.7.4.7</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation.html\">13.7.5.11</a>, <a href=\"/sec/sec-labelled-statements-runtime-semantics-labelledevaluation.html\">13.13.14</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">do</code> <span class=\"nt\">Statement</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>V</i> = <b>undefined</b>.</li>\n          <li>Repeat\n            <ol class=\"block\">\n              <li>Let <i>stmt</i> be the result of evaluating <i>Statement</i>.</li>\n              <li>If <a href=\"/sec/sec-loopcontinues.html\">LoopContinues</a>(<i>stmt</i>, <i>labelSet</i>) is <b>false</b>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>stmt</i>, <i>V</i>)).</li>\n              <li>If <i>stmt</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, let <i>V</i> =\n                  <i>stmt</i>.[[value]]<i>.</i></li>\n              <li>Let <i>exprRef</i> be the result of evaluating <i>Expression</i>.</li>\n              <li>Let <i>exprValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>exprValue</i>).</li>\n              <li>If <a href=\"/sec/sec-toboolean.html\">ToBoolean</a>(<i>exprValue</i>) is <b>false</b>, return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>V</i>).</li>\n            </ol>\n          </li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-while-statement\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.3\"><a href=\"/sec/sec-while-statement.html\" title=\"link to this section\">13.7.3</a></span> The\n            <code>while</code> Statement</h1>\n      </div>\n\n      <section id=\"sec-while-statement-static-semantics-containsduplicatelabels\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.3.1\"><a href=\"/sec/sec-while-statement-static-semantics-containsduplicatelabels.html\" title=\"link to this section\">13.7.3.1</a></span> Static Semantics: ContainsDuplicateLabels</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsduplicatelabels.html\">13.1.1</a>, <a href=\"/sec/sec-block-static-semantics-containsduplicatelabels.html\">13.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsduplicatelabels.html\">13.6.2</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsduplicatelabels.html\">13.7.2.1</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsduplicatelabels.html\">13.7.4.2</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels.html\">13.7.5.3</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsduplicatelabels.html\">13.11.2</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsduplicatelabels.html\">13.12.2</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsduplicatelabels.html\">13.13.2</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsduplicatelabels.html\">13.15.2</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsduplicatelabels.html\">15.2.1.2</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return ContainsDuplicateLabels of <i>Statement</i> with argument <i>labelSet.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-while-statement-static-semantics-containsundefinedbreaktarget\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.3.2\"><a href=\"/sec/sec-while-statement-static-semantics-containsundefinedbreaktarget.html\" title=\"link to this section\">13.7.3.2</a></span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedbreaktarget.html\">13.1.2</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedbreaktarget.html\">13.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedbreaktarget.html\">13.6.3</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.2.2</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.4.3</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget.html\">13.7.5.4</a>, <a href=\"/sec/sec-break-statement-static-semantics-containsundefinedbreaktarget.html\">13.9.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedbreaktarget.html\">13.11.3</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedbreaktarget.html\">13.12.3</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedbreaktarget.html\">13.13.3</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsundefinedbreaktarget.html\">13.15.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedbreaktarget.html\">15.2.1.3</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return ContainsUndefinedBreakTarget of <i>Statement</i> with argument <i>labelSet.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-while-statement-static-semantics-containsundefinedcontinuetarget\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.3.3\"><a href=\"/sec/sec-while-statement-static-semantics-containsundefinedcontinuetarget.html\" title=\"link to this section\">13.7.3.3</a></span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n\n        <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedcontinuetarget.html\">13.1.3</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedcontinuetarget.html\">13.2.4</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedcontinuetarget.html\">13.6.4</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.2.3</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.4.4</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget.html\">13.7.5.5</a>, <a href=\"/sec/sec-continue-statement-static-semantics-containsundefinedcontinuetarget.html\">13.8.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedcontinuetarget.html\">13.11.4</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedcontinuetarget.html\">13.12.4</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedcontinuetarget.html\">13.13.4</a>,<a href=\"/sec/sec-try-statement-static-semantics-containsundefinedcontinuetarget.html\">13.15.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedcontinuetarget.html\">15.2.1.4</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return ContainsUndefinedContinueTarget of <i>Statement</i> with arguments <i>iterationSet</i> and\n              &#xAB;&#xA0;&#xBB;<i>.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-while-statement-static-semantics-vardeclarednames\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.3.4\"><a href=\"/sec/sec-while-statement-static-semantics-vardeclarednames.html\" title=\"link to this section\">13.7.3.4</a></span> Static Semantics:  VarDeclaredNames</h1>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-vardeclarednames.html\">13.1.5</a>, <a href=\"/sec/sec-block-static-semantics-vardeclarednames.html\">13.2.11</a>, <a href=\"/sec/sec-variable-statement-static-semantics-vardeclarednames.html\">13.3.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-vardeclarednames.html\">13.6.5</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-vardeclarednames.html\">13.7.2.4</a>, <a href=\"/sec/sec-for-statement-static-semantics-vardeclarednames.html\">13.7.4.5</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-vardeclarednames.html\">13.7.5.7</a>, <a href=\"/sec/sec-with-statement-static-semantics-vardeclarednames.html\">13.11.5</a>, <a href=\"/sec/sec-switch-statement-static-semantics-vardeclarednames.html\">13.12.7</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-vardeclarednames.html\">13.13.12</a>, <a href=\"/sec/sec-try-statement-static-semantics-vardeclarednames.html\">13.15.5</a>, <a href=\"/sec/sec-function-definitions-static-semantics-vardeclarednames.html\">14.1.15</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-vardeclarednames.html\">14.2.12</a>, <a href=\"/sec/sec-scripts-static-semantics-vardeclarednames.html\">15.1.5</a>, <a href=\"/sec/sec-module-semantics-static-semantics-vardeclarednames.html\">15.2.1.13</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarDeclaredNames of <i>Statement</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-while-statement-static-semantics-varscopeddeclarations\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.3.5\"><a href=\"/sec/sec-while-statement-static-semantics-varscopeddeclarations.html\" title=\"link to this section\">13.7.3.5</a></span> Static Semantics:  VarScopedDeclarations</h1>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-varscopeddeclarations.html\">13.1.6</a>, <a href=\"/sec/sec-block-static-semantics-varscopeddeclarations.html\">13.2.12</a>, <a href=\"/sec/sec-variable-statement-static-semantics-varscopeddeclarations.html\">13.3.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-varscopeddeclarations.html\">13.6.6</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-varscopeddeclarations.html\">13.7.2.5</a>, <a href=\"/sec/sec-for-statement-static-semantics-varscopeddeclarations.html\">13.7.4.6</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations.html\">13.7.5.8</a>, <a href=\"/sec/sec-with-statement-static-semantics-varscopeddeclarations.html\">13.11.6</a>, <a href=\"/sec/sec-switch-statement-static-semantics-varscopeddeclarations.html\">13.12.8</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-varscopeddeclarations.html\">13.13.13</a>, <a href=\"/sec/sec-try-statement-static-semantics-varscopeddeclarations.html\">13.15.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-varscopeddeclarations.html\">14.1.16</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-varscopeddeclarations.html\">14.2.13</a>, <a href=\"/sec/sec-scripts-static-semantics-varscopeddeclarations.html\">15.1.6</a>, <a href=\"/sec/sec-module-semantics-static-semantics-varscopeddeclarations.html\">15.2.1.14</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarScopedDeclarations of <i>Statement</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-while-statement-runtime-semantics-labelledevaluation\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.3.6\"><a href=\"/sec/sec-while-statement-runtime-semantics-labelledevaluation.html\" title=\"link to this section\">13.7.3.6</a></span> Runtime Semantics: LabelledEvaluation</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-runtime-semantics-labelledevaluation.html\">13.1.7</a>, <a href=\"/sec/sec-do-while-statement-runtime-semantics-labelledevaluation.html\">13.7.2.6</a>, <a href=\"/sec/sec-for-statement-runtime-semantics-labelledevaluation.html\">13.7.4.7</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation.html\">13.7.5.11</a>, <a href=\"/sec/sec-labelled-statements-runtime-semantics-labelledevaluation.html\">13.13.14</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>V</i> = <b>undefined</b>.</li>\n          <li>Repeat\n            <ol class=\"block\">\n              <li>Let <i>exprRef</i> be the result of evaluating <i>Expression</i>.</li>\n              <li>Let <i>exprValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>exprValue</i>).</li>\n              <li>If <a href=\"/sec/sec-toboolean.html\">ToBoolean</a>(<i>exprValue</i>) is <b>false</b>, return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>V</i>).</li>\n              <li>Let <i>stmt</i> be the result of evaluating <i>Statement</i>.</li>\n              <li>If <a href=\"/sec/sec-loopcontinues.html\">LoopContinues</a> (<i>stmt</i>, <i>labelSet</i>) is <b>false</b>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>stmt</i>, <i>V</i>)).</li>\n              <li>If <i>stmt</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, let <i>V</i> =\n                  <i>stmt</i>.[[value]].</li>\n            </ol>\n          </li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-for-statement\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4\"><a href=\"/sec/sec-for-statement.html\" title=\"link to this section\">13.7.4</a></span> The\n            <code>for</code> Statement</h1>\n      </div>\n\n      <section id=\"sec-for-statement-static-semantics-early-errors\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.1\"><a href=\"/sec/sec-for-statement-static-semantics-early-errors.html\" title=\"link to this section\">13.7.4.1</a></span> Static Semantics:  Early Errors</h1>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ul>\n          <li>\n            <p>It is a Syntax Error if any element of the BoundNames of <span class=\"nt\">LexicalDeclaration</span> also occurs in\n            the VarDeclaredNames of <span class=\"nt\">Statement</span>.</p>\n          </li>\n        </ul>\n      </section>\n\n      <section id=\"sec-for-statement-static-semantics-containsduplicatelabels\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.2\"><a href=\"/sec/sec-for-statement-static-semantics-containsduplicatelabels.html\" title=\"link to this section\">13.7.4.2</a></span> Static Semantics: ContainsDuplicateLabels</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsduplicatelabels.html\">13.1.1</a>, <a href=\"/sec/sec-block-static-semantics-containsduplicatelabels.html\">13.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsduplicatelabels.html\">13.6.2</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsduplicatelabels.html\">13.7.2.1</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsduplicatelabels.html\">13.7.3.1</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels.html\">13.7.5.3</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsduplicatelabels.html\">13.11.2</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsduplicatelabels.html\">13.12.2</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsduplicatelabels.html\">13.13.2</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsduplicatelabels.html\">13.15.2</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsduplicatelabels.html\">15.2.1.2</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return ContainsDuplicateLabels of <i>Statement</i> with argument <i>labelSet.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-statement-static-semantics-containsundefinedbreaktarget\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.3\"><a href=\"/sec/sec-for-statement-static-semantics-containsundefinedbreaktarget.html\" title=\"link to this section\">13.7.4.3</a></span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedbreaktarget.html\">13.1.2</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedbreaktarget.html\">13.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedbreaktarget.html\">13.6.3</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.2.2</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.3.2</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget.html\">13.7.5.4</a>, <a href=\"/sec/sec-break-statement-static-semantics-containsundefinedbreaktarget.html\">13.9.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedbreaktarget.html\">13.11.3</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedbreaktarget.html\">13.12.3</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedbreaktarget.html\">13.13.3</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsundefinedbreaktarget.html\">13.15.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedbreaktarget.html\">15.2.1.3</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return ContainsUndefinedBreakTarget of <i>Statement</i> with argument <i>labelSet.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-statement-static-semantics-containsundefinedcontinuetarget\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.4\"><a href=\"/sec/sec-for-statement-static-semantics-containsundefinedcontinuetarget.html\" title=\"link to this section\">13.7.4.4</a></span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n\n        <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedcontinuetarget.html\">13.1.3</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedcontinuetarget.html\">13.2.4</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedcontinuetarget.html\">13.6.4</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.2.3</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.3.3</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget.html\">13.7.5.5</a>, <a href=\"/sec/sec-continue-statement-static-semantics-containsundefinedcontinuetarget.html\">13.8.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedcontinuetarget.html\">13.11.4</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedcontinuetarget.html\">13.12.4</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedcontinuetarget.html\">13.13.4</a>,<a href=\"/sec/sec-try-statement-static-semantics-containsundefinedcontinuetarget.html\">13.15.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedcontinuetarget.html\">15.2.1.4</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return ContainsUndefinedContinueTarget of <i>Statement</i> with arguments <i>iterationSet</i> and\n              &#xAB;&#xA0;&#xBB;<i>.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-statement-static-semantics-vardeclarednames\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.5\"><a href=\"/sec/sec-for-statement-static-semantics-vardeclarednames.html\" title=\"link to this section\">13.7.4.5</a></span> Static Semantics:  VarDeclaredNames</h1>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-vardeclarednames.html\">13.1.5</a>, <a href=\"/sec/sec-block-static-semantics-vardeclarednames.html\">13.2.11</a>, <a href=\"/sec/sec-variable-statement-static-semantics-vardeclarednames.html\">13.3.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-vardeclarednames.html\">13.6.5</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-vardeclarednames.html\">13.7.2.4</a>, <a href=\"/sec/sec-while-statement-static-semantics-vardeclarednames.html\">13.7.3.4</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-vardeclarednames.html\">13.7.5.7</a>, <a href=\"/sec/sec-with-statement-static-semantics-vardeclarednames.html\">13.11.5</a>, <a href=\"/sec/sec-switch-statement-static-semantics-vardeclarednames.html\">13.12.7</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-vardeclarednames.html\">13.13.12</a>, <a href=\"/sec/sec-try-statement-static-semantics-vardeclarednames.html\">13.15.5</a>, <a href=\"/sec/sec-function-definitions-static-semantics-vardeclarednames.html\">14.1.15</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-vardeclarednames.html\">14.2.12</a>, <a href=\"/sec/sec-scripts-static-semantics-vardeclarednames.html\">15.1.5</a>, <a href=\"/sec/sec-module-semantics-static-semantics-vardeclarednames.html\">15.2.1.13</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarDeclaredNames of <i>Statement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>names</i> be BoundNames of <i>VariableDeclarationList</i>.</li>\n          <li>Append to <i>names</i> the elements of the VarDeclaredNames of <i>Statement.</i></li>\n          <li>Return <i>names</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarDeclaredNames of <i>Statement</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-statement-static-semantics-varscopeddeclarations\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.6\"><a href=\"/sec/sec-for-statement-static-semantics-varscopeddeclarations.html\" title=\"link to this section\">13.7.4.6</a></span> Static Semantics:  VarScopedDeclarations</h1>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-varscopeddeclarations.html\">13.1.6</a>, <a href=\"/sec/sec-block-static-semantics-varscopeddeclarations.html\">13.2.12</a>, <a href=\"/sec/sec-variable-statement-static-semantics-varscopeddeclarations.html\">13.3.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-varscopeddeclarations.html\">13.6.6</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-varscopeddeclarations.html\">13.7.2.5</a>, <a href=\"/sec/sec-while-statement-static-semantics-varscopeddeclarations.html\">13.7.3.5</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations.html\">13.7.5.8</a>, <a href=\"/sec/sec-with-statement-static-semantics-varscopeddeclarations.html\">13.11.6</a>, <a href=\"/sec/sec-switch-statement-static-semantics-varscopeddeclarations.html\">13.12.8</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-varscopeddeclarations.html\">13.13.13</a>, <a href=\"/sec/sec-try-statement-static-semantics-varscopeddeclarations.html\">13.15.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-varscopeddeclarations.html\">14.1.16</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-varscopeddeclarations.html\">14.2.13</a>, <a href=\"/sec/sec-scripts-static-semantics-varscopeddeclarations.html\">15.1.6</a>, <a href=\"/sec/sec-module-semantics-static-semantics-varscopeddeclarations.html\">15.2.1.14</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarScopedDeclarations of <i>Statement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>declarations</i> be VarScopedDeclarations of <i>VariableDeclarationList</i>.</li>\n          <li>Append to <i>declarations</i> the elements of the VarScopedDeclarations of <i>Statement.</i></li>\n          <li>Return <i>declarations</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarScopedDeclarations of <i>Statement</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-statement-runtime-semantics-labelledevaluation\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.7\"><a href=\"/sec/sec-for-statement-runtime-semantics-labelledevaluation.html\" title=\"link to this section\">13.7.4.7</a></span> Runtime Semantics: LabelledEvaluation</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-runtime-semantics-labelledevaluation.html\">13.1.7</a>, <a href=\"/sec/sec-do-while-statement-runtime-semantics-labelledevaluation.html\">13.7.2.6</a>, <a href=\"/sec/sec-while-statement-runtime-semantics-labelledevaluation.html\">13.7.3.6</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation.html\">13.7.5.11</a>, <a href=\"/sec/sec-labelled-statements-runtime-semantics-labelledevaluation.html\">13.13.14</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>If the first <i>Expression</i> is present, then\n            <ol class=\"block\">\n              <li>Let <i>exprRef</i> be the result of evaluating the first <i>Expression</i>.</li>\n              <li>Let <i>exprValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>exprValue</i>).</li>\n            </ol>\n          </li>\n          <li>Return <a href=\"/sec/sec-forbodyevaluation.html\">ForBodyEvaluation</a>(the second <i>Expression</i>, the third\n              <i>Expression</i>, <i>Statement</i>, &#xAB; &#xBB;, <i>labelSet</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>varDcl</i> be the result of evaluating <i>VariableDeclarationList</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>varDcl</i>).</li>\n          <li>Return <a href=\"/sec/sec-forbodyevaluation.html\">ForBodyEvaluation</a>(the first <i>Expression</i>, the second\n              <i>Expression</i>, <i>Statement</i>, &#xAB;&#xA0;&#xBB;, <i>labelSet</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>oldEnv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n          <li>Let <i>loopEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>oldEnv</i>).</li>\n          <li>Let <i>isConst</i> be the result of performing IsConstantDeclaration of <i>LexicalDeclaration</i>.</li>\n          <li>Let <i>boundNames</i> be the BoundNames of <i>LexicalDeclaration</i>.</li>\n          <li>For each element <i>dn</i> of <i>boundNames</i> do\n            <ol class=\"block\">\n              <li>If <i>isConst</i> is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Perform <i>loopEnv</i>.CreateImmutableBinding(<i>dn</i>, <b>true</b>).</li>\n                </ol>\n              </li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>Perform <i>loopEnv</i>.CreateMutableBinding(<i>dn,</i> <b>false</b>).</li>\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: The above call to CreateMutableBinding will never return an\n                      <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>loopEnv</i>.</li>\n          <li>Let <i>forDcl</i> be the result of evaluating <i>LexicalDeclaration</i>.</li>\n          <li>If <i>forDcl</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n            <ol class=\"block\">\n              <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n              <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>forDcl</i>).</li>\n            </ol>\n          </li>\n          <li>If <i>isConst</i> is <b>false</b>, let <i>perIterationLets</i> be <i>boundNames</i> otherwise let\n              <i>perIterationLets</i> be &#xAB; &#xBB;.</li>\n          <li>Let <i>bodyResult</i> be <a href=\"/sec/sec-forbodyevaluation.html\">ForBodyEvaluation</a>(the first <i>Expression</i>, the\n              second <i>Expression</i>, <i>Statement</i>, <i>perIterationLets</i>, <i>labelSet</i>).</li>\n          <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n          <li>Return  <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>bodyResult</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-forbodyevaluation\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.8\"><a href=\"/sec/sec-forbodyevaluation.html\" title=\"link to this section\">13.7.4.8</a></span> Runtime Semantics: ForBodyEvaluation( test, increment, stmt,\n            perIterationBindings, labelSet )</h1>\n\n        <p class=\"normalbefore\">The abstract operation ForBodyEvaluation with arguments <var>test</var>, <var>increment</var>,\n        <var>stmt</var>, <var>perIterationBindings</var>, and <var>labelSet</var> is performed as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>V</i> = <b>undefined</b>.</li>\n          <li>Let <i>status</i> be <a href=\"/sec/sec-createperiterationenvironment.html\">CreatePerIterationEnvironment</a>(<i>perIterationBindings</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n          <li>Repeat\n            <ol class=\"block\">\n              <li>If <i>test</i> is not <span style=\"font-family: sans-serif\">[empty]</span>, then\n                <ol class=\"block\">\n                  <li>Let <i>testRef</i> be the result of evaluating <i>test</i>.</li>\n                  <li>Let <i>testValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>testRef</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>testValue</i>).</li>\n                  <li>If <a href=\"/sec/sec-toboolean.html\">ToBoolean</a>(<i>testValue</i>) is <b>false</b>, return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>V</i>).</li>\n                </ol>\n              </li>\n              <li>Let <i>result</i> be the result of evaluating <i>stmt</i>.</li>\n              <li>If <a href=\"/sec/sec-loopcontinues.html\">LoopContinues</a>(<i>result</i>, <i>labelSet</i>) is <b>false</b>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>result</i>, <i>V</i>)).</li>\n              <li>If <i>result</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, let <i>V</i> =\n                  <i>result</i>.[[value]].</li>\n              <li>Let <i>status</i> be <a href=\"/sec/sec-createperiterationenvironment.html\">CreatePerIterationEnvironment</a>(<i>perIterationBindings</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n              <li>If <i>increment</i> is not <span style=\"font-family: sans-serif\">[empty]</span>, then\n                <ol class=\"block\">\n                  <li>Let <i>incRef</i> be the result of evaluating <i>increment</i>.</li>\n                  <li>Let <i>incValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>incRef</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>incValue</i>).</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n        </ol>\n      </section>\n\n      <section id=\"sec-createperiterationenvironment\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.4.9\"><a href=\"/sec/sec-createperiterationenvironment.html\" title=\"link to this section\">13.7.4.9</a></span> Runtime Semantics: CreatePerIterationEnvironment(\n            perIterationBindings )</h1>\n\n        <p class=\"normalbefore\">The abstract operation CreatePerIterationEnvironment with argument <var>perIterationBindings</var>\n        is performed as follows:</p>\n\n        <ol class=\"proc\">\n          <li>If <i>perIterationBindings</i> has any elements, then\n            <ol class=\"block\">\n              <li>Let <i>lastIterationEnv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n              <li>Let <i>outer</i> be <i>lastIterationEnv</i>&#x2019;s <a href=\"/sec/sec-lexical-environments.html\">outer environment\n                  reference</a>.</li>\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>outer</i> is not <b>null</b>.</li>\n              <li>Let <i>thisIterationEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>outer</i>).</li>\n              <li>For each element <i>bn</i> of <i>perIterationBindings</i> do,\n                <ol class=\"block\">\n                  <li>Let <i>status</i> be <i>thisIterationEnv</i>.CreateMutableBinding(<i>bn</i>, <b>false</b>).</li>\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is never an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                  <li>Let <i>lastValue</i> be <i>lastIterationEnv</i>.GetBindingValue(<i>bn</i>, <b>true</b>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>lastValue</i>).</li>\n                  <li>Perform <i>thisIterationEnv</i>.InitializeBinding(<i>bn</i>, <i>lastValue</i>).</li>\n                </ol>\n              </li>\n              <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>thisIterationEnv.</i></li>\n            </ol>\n          </li>\n          <li>Return <b>undefined</b></li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-for-in-and-for-of-statements\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5\"><a href=\"/sec/sec-for-in-and-for-of-statements.html\" title=\"link to this section\">13.7.5</a></span> The <code>for</code>-<code>in</code> and\n            <code>for</code>-<code>of</code> Statements</h1>\n      </div>\n\n      <section id=\"sec-for-in-and-for-of-statements-static-semantics-early-errors\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.1\"><a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-early-errors.html\" title=\"link to this section\">13.7.5.1</a></span> Static Semantics:  Early Errors</h1>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ul>\n          <li>\n            <p>It is a Syntax Error if <span class=\"nt\">LeftHandSideExpression</span> is either an <span class=\"nt\">ObjectLiteral</span> or an <span class=\"nt\">ArrayLiteral</span> and if the lexical token sequence matched\n            by <span class=\"nt\">LeftHandSideExpression</span> cannot be parsed with no tokens left over using <span class=\"nt\">AssignmentPattern</span> as the goal symbol.</p>\n          </li>\n        </ul>\n\n        <p>If <span class=\"nt\">LeftHandSideExpression</span> is either an <span class=\"nt\">ObjectLiteral</span> or an <span class=\"nt\">ArrayLiteral</span> and if the lexical token sequence matched by <span class=\"nt\">LeftHandSideExpression</span>\n        can be parsed with no tokens left over using <span class=\"nt\">AssignmentPattern</span> as the goal symbol then the\n        following rules are not applied. Instead, the Early Error rules for <span class=\"nt\">AssignmentPattern</span> are\n        used.</p>\n\n        <ul>\n          <li>\n            <p>It is a Syntax Error if <span style=\"font-family: Times New Roman\">IsValidSimpleAssignmentTarget</span> of <span class=\"nt\">LeftHandSideExpression</span> is <span class=\"value\">false</span>.</p>\n          </li>\n\n          <li>\n            <p>It is a Syntax Error if the <span class=\"nt\">LeftHandSideExpression</span> is                    <span class=\"prod\"><span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span> <span class=\"geq\">:</span>\n            <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code></span> and <span class=\"nt\">Expression</span> derives a production that would produce a Syntax Error according to these rules if that\n            production is substituted for <span class=\"nt\">LeftHandSideExpression</span>. This rule is recursively applied.</p>\n          </li>\n        </ul>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The last rule means that the other rules are applied even if parentheses surround <span class=\"nt\">Expression</span>.</p>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ul>\n          <li>\n            <p>It is a Syntax Error if the BoundNames of <span class=\"nt\">ForDeclaration</span> contains <code>&quot;let&quot;</code>.</p>\n          </li>\n\n          <li>\n            <p>It is a Syntax Error if any element of the BoundNames of <span class=\"nt\">ForDeclaration</span> also occurs in the\n            VarDeclaredNames of <span class=\"nt\">Statement</span>.</p>\n          </li>\n\n          <li>\n            <p>It is a Syntax Error if the BoundNames of <span class=\"nt\">ForDeclaration</span> contains any duplicate\n            entries.</p>\n          </li>\n        </ul>\n      </section>\n\n      <section id=\"sec-for-in-and-for-of-statements-static-semantics-boundnames\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.2\"><a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-boundnames.html\" title=\"link to this section\">13.7.5.2</a></span> Static Semantics:  BoundNames</h1>\n\n        <p>See also: <a href=\"/sec/sec-identifiers-static-semantics-boundnames.html\">12.1.2</a>, <a href=\"/sec/sec-let-and-const-declarations-static-semantics-boundnames.html\">13.3.1.2</a>, <a href=\"/sec/sec-variable-statement-static-semantics-boundnames.html\">13.3.2.1</a>, <a href=\"/sec/sec-destructuring-binding-patterns-static-semantics-boundnames.html\">13.3.3.1</a>, <a href=\"/sec/sec-function-definitions-static-semantics-boundnames.html\">14.1.3</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-boundnames.html\">14.2.2</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-boundnames.html\">14.4.2</a>, <a href=\"/sec/sec-class-definitions-static-semantics-boundnames.html\">14.5.2</a>, <a href=\"/sec/sec-imports-static-semantics-boundnames.html\">15.2.2.2</a>, <a href=\"/sec/sec-exports-static-semantics-boundnames.html\">15.2.3.2</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">ForDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">LetOrConst</span> <span class=\"nt\">ForBinding</span></div>\n        <ol class=\"proc\">\n          <li>Return the BoundNames of <i>ForBinding</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.3\"><a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels.html\" title=\"link to this section\">13.7.5.3</a></span> Static Semantics: ContainsDuplicateLabels</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsduplicatelabels.html\">13.1.1</a>, <a href=\"/sec/sec-block-static-semantics-containsduplicatelabels.html\">13.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsduplicatelabels.html\">13.6.2</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsduplicatelabels.html\">13.7.2.1</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsduplicatelabels.html\">13.7.3.1</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsduplicatelabels.html\">13.7.4.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsduplicatelabels.html\">13.11.2</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsduplicatelabels.html\">13.12.2</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsduplicatelabels.html\">13.13.2</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsduplicatelabels.html\">13.15.2</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsduplicatelabels.html\">15.2.1.2</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return ContainsDuplicateLabels of <i>Statement</i> with argument <i>labelSet.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.4\"><a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget.html\" title=\"link to this section\">13.7.5.4</a></span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedbreaktarget.html\">13.1.2</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedbreaktarget.html\">13.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedbreaktarget.html\">13.6.3</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.2.2</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.3.2</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.4.3</a>, <a href=\"/sec/sec-break-statement-static-semantics-containsundefinedbreaktarget.html\">13.9.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedbreaktarget.html\">13.11.3</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedbreaktarget.html\">13.12.3</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedbreaktarget.html\">13.13.3</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsundefinedbreaktarget.html\">13.15.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedbreaktarget.html\">15.2.1.3</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return ContainsUndefinedBreakTarget of <i>Statement</i> with argument <i>labelSet.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.5\"><a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget.html\" title=\"link to this section\">13.7.5.5</a></span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n\n        <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedcontinuetarget.html\">13.1.3</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedcontinuetarget.html\">13.2.4</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedcontinuetarget.html\">13.6.4</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.2.3</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.3.3</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.4.4</a>, <a href=\"/sec/sec-continue-statement-static-semantics-containsundefinedcontinuetarget.html\">13.8.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedcontinuetarget.html\">13.11.4</a>, <a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedcontinuetarget.html\">13.12.4</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedcontinuetarget.html\">13.13.4</a>,<a href=\"/sec/sec-try-statement-static-semantics-containsundefinedcontinuetarget.html\">13.15.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedcontinuetarget.html\">15.2.1.4</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return ContainsUndefinedContinueTarget of <i>Statement</i> with arguments <i>iterationSet</i> and\n              &#xAB;&#xA0;&#xBB;<i>.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-in-and-for-of-statements-static-semantics-isdestructuring\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.6\"><a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-isdestructuring.html\" title=\"link to this section\">13.7.5.6</a></span> Static Semantics:  IsDestructuring</h1>\n\n        <p>See also: <a href=\"/sec/sec-static-semantics-static-semantics-isdestructuring.html\">12.3.1.3</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">ForDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">LetOrConst</span> <span class=\"nt\">ForBinding</span></div>\n        <ol class=\"proc\">\n          <li>Return IsDestructuring of <i>ForBinding</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ForBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ForBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingPattern</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>true</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.7\"><a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-vardeclarednames.html\" title=\"link to this section\">13.7.5.7</a></span> Static Semantics:  VarDeclaredNames</h1>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-vardeclarednames.html\">13.1.5</a>, <a href=\"/sec/sec-block-static-semantics-vardeclarednames.html\">13.2.11</a>, <a href=\"/sec/sec-variable-statement-static-semantics-vardeclarednames.html\">13.3.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-vardeclarednames.html\">13.6.5</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-vardeclarednames.html\">13.7.2.4</a>, <a href=\"/sec/sec-while-statement-static-semantics-vardeclarednames.html\">13.7.3.4</a>, <a href=\"/sec/sec-for-statement-static-semantics-vardeclarednames.html\">13.7.4.5</a>, <a href=\"/sec/sec-with-statement-static-semantics-vardeclarednames.html\">13.11.5</a>, <a href=\"/sec/sec-switch-statement-static-semantics-vardeclarednames.html\">13.12.7</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-vardeclarednames.html\">13.13.12</a>, <a href=\"/sec/sec-try-statement-static-semantics-vardeclarednames.html\">13.15.5</a>, <a href=\"/sec/sec-function-definitions-static-semantics-vardeclarednames.html\">14.1.15</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-vardeclarednames.html\">14.2.12</a>, <a href=\"/sec/sec-scripts-static-semantics-vardeclarednames.html\">15.1.5</a>, <a href=\"/sec/sec-module-semantics-static-semantics-vardeclarednames.html\">15.2.1.13</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarDeclaredNames of <i>Statement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>names</i> be the BoundNames of <i>ForBinding</i>.</li>\n          <li>Append to <i>names</i> the elements of the VarDeclaredNames of <i>Statement.</i></li>\n          <li>Return <i>names.</i></li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarDeclaredNames of <i>Statement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarDeclaredNames of <i>Statement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>names</i> be the BoundNames of <i>ForBinding</i>.</li>\n          <li>Append to <i>names</i> the elements of the VarDeclaredNames of <i>Statement.</i></li>\n          <li>Return <i>names.</i></li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarDeclaredNames of <i>Statement</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.8\"><a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations.html\" title=\"link to this section\">13.7.5.8</a></span> Static Semantics:  VarScopedDeclarations</h1>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-varscopeddeclarations.html\">13.1.6</a>, <a href=\"/sec/sec-block-static-semantics-varscopeddeclarations.html\">13.2.12</a>, <a href=\"/sec/sec-variable-statement-static-semantics-varscopeddeclarations.html\">13.3.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-varscopeddeclarations.html\">13.6.6</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-varscopeddeclarations.html\">13.7.2.5</a>, <a href=\"/sec/sec-while-statement-static-semantics-varscopeddeclarations.html\">13.7.3.5</a>, <a href=\"/sec/sec-for-statement-static-semantics-varscopeddeclarations.html\">13.7.4.6</a>, <a href=\"/sec/sec-with-statement-static-semantics-varscopeddeclarations.html\">13.11.6</a>, <a href=\"/sec/sec-switch-statement-static-semantics-varscopeddeclarations.html\">13.12.8</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-varscopeddeclarations.html\">13.13.13</a>, <a href=\"/sec/sec-try-statement-static-semantics-varscopeddeclarations.html\">13.15.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-varscopeddeclarations.html\">14.1.16</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-varscopeddeclarations.html\">14.2.13</a>, <a href=\"/sec/sec-scripts-static-semantics-varscopeddeclarations.html\">15.1.6</a>, <a href=\"/sec/sec-module-semantics-static-semantics-varscopeddeclarations.html\">15.2.1.14</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarScopedDeclarations of <i>Statement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>declarations</i> be a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing\n              <i>ForBinding</i>.</li>\n          <li>Append to <i>declarations</i> the elements of the VarScopedDeclarations of <i>Statement.</i></li>\n          <li>Return <i>declarations.</i></li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarScopedDeclarations of <i>Statement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarScopedDeclarations of <i>Statement</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>declarations</i> be a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing\n              <i>ForBinding</i>.</li>\n          <li>Append to <i>declarations</i> the elements of the VarScopedDeclarations of <i>Statement.</i></li>\n          <li>Return <i>declarations.</i></li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Return the VarScopedDeclarations of <i>Statement</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.9\"><a href=\"/sec/sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization.html\" title=\"link to this section\">13.7.5.9</a></span> Runtime Semantics: BindingInitialization</h1>\n\n        <p>With arguments <var>value</var> and <var>environment</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-identifiers-runtime-semantics-bindinginitialization.html\">12.1.5</a>, <a href=\"/sec/sec-destructuring-binding-patterns-runtime-semantics-bindinginitialization.html\">13.3.3.5</a>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> <b>undefined</b> is passed for <var>environment</var> to indicate that a <a href=\"/sec/sec-putvalue.html\">PutValue</a> operation should be used to assign the initialization value. This is the case for\n          <code>var</code> statements and the formal parameter lists of some non-strict functions (<a href=\"/sec/sec-functiondeclarationinstantiation.html\">see 9.2.12</a>). In those cases a lexical binding is hoisted and\n          preinitialized prior to evaluation of its initializer.</p>\n        </div>\n\n        <div class=\"gp prod\"><span class=\"nt\">ForDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">LetOrConst</span> <span class=\"nt\">ForBinding</span></div>\n        <ol class=\"proc\">\n          <li>Return the result of performing BindingInitialization for <i>ForBinding</i> passing <i>value</i> and\n              <i>environment</i> as the arguments.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-runtime-semantics-bindinginstantiation\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.10\"><a href=\"/sec/sec-runtime-semantics-bindinginstantiation.html\" title=\"link to this section\">13.7.5.10</a></span> Runtime Semantics: BindingInstantiation</h1>\n\n        <p>With argument <var>environment</var>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">ForDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">LetOrConst</span> <span class=\"nt\">ForBinding</span></div>\n        <ol class=\"proc\">\n          <li>For each element <i>name</i> of the BoundNames of <i>ForBinding</i> do\n            <ol class=\"block\">\n              <li>If IsConstantDeclaration of <i>LetOrConst</i> is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Perform <i>environment</i>.CreateImmutableBinding(<i>name</i>, <b>true</b>).</li>\n                </ol>\n              </li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>Perform <i>environment</i>.CreateMutableBinding(<i>name</i>).</li>\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: The above call to CreateMutableBinding will never return an\n                      <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.11\"><a href=\"/sec/sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation.html\" title=\"link to this section\">13.7.5.11</a></span> Runtime Semantics: LabelledEvaluation</h1>\n\n        <p>With argument <var>labelSet</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-statement-semantics-runtime-semantics-labelledevaluation.html\">13.1.7</a>, <a href=\"/sec/sec-do-while-statement-runtime-semantics-labelledevaluation.html\">13.7.2.6</a>, <a href=\"/sec/sec-while-statement-runtime-semantics-labelledevaluation.html\">13.7.3.6</a>, <a href=\"/sec/sec-for-statement-runtime-semantics-labelledevaluation.html\">13.7.4.7</a>, <a href=\"/sec/sec-labelled-statements-runtime-semantics-labelledevaluation.html\">13.13.14</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>keyResult</i> be ForIn/OfHeadEvaluation( &#xAB; &#xBB;, <i>Expression</i>, <span style=\"font-family:\n              sans-serif\">enumerate</span>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>keyResult</i>).</li>\n          <li>Return ForIn/OfBodyEvaluation(<i>LeftHandSideExpression</i>, <i>Statement</i>, <i>keyResult</i>,  <span style=\"font-family: sans-serif\">assignment</span>, <i>labelSet</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>keyResult</i> be ForIn/OfHeadEvaluation( &#xAB; &#xBB;, <i>Expression</i>, <span style=\"font-family:\n              sans-serif\">enumerate</span>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>keyResult</i>).</li>\n          <li>Return ForIn/OfBodyEvaluation(<i>ForBinding</i>, <i>Statement</i>, <i>keyResult</i>,  <span style=\"font-family:\n              sans-serif\">varBinding</span>, <i>labelSet</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>keyResult</i> be the result of performing ForIn/OfHeadEvaluation(BoundNames of <i>ForDeclaration,</i>\n              <i>Expression</i>, <span style=\"font-family: sans-serif\">enumerate</span>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>keyResult</i>).</li>\n          <li>Return ForIn/OfBodyEvaluation(<i>ForDeclaration</i>, <i>Statement</i>, <i>keyResult</i>, <span style=\"font-family:\n              sans-serif\">lexicalBinding</span>, <i>labelSet</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>keyResult</i> be the result of performing ForIn/OfHeadEvaluation( &#xAB; &#xBB;,\n              <i>AssignmentExpression</i>, <span style=\"font-family: sans-serif\">iterate</span>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>keyResult</i>).</li>\n          <li>Return ForIn/OfBodyEvaluation(<i>LeftHandSideExpression</i>, <i>Statement</i>, <i>keyResult</i>, <span style=\"font-family: sans-serif\">assignment</span>, <i>labelSet</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>keyResult</i> be the result of performing ForIn/OfHeadEvaluation( &#xAB; &#xBB;,\n              <i>AssignmentExpression</i>, <span style=\"font-family: sans-serif\">iterate</span>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>keyResult</i>).</li>\n          <li>Return ForIn/OfBodyEvaluation(<i>ForBinding</i>, <i>Statement</i>, <i>keyResult</i>,  <span style=\"font-family:\n              sans-serif\">varBinding</span>, <i>labelSet</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span> <code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>keyResult</i> be the result of performing ForIn/OfHeadEvaluation( BoundNames of <i>ForDeclaration</i>,\n              <i>AssignmentExpression</i>, <span style=\"font-family: sans-serif\">iterate</span>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>keyResult</i>).</li>\n          <li>Return ForIn/OfBodyEvaluation(<i>ForDeclaration</i>, <i>Statement</i>, <i>keyResult</i>,  <span style=\"font-family:\n              sans-serif\">lexicalBinding</span>, <i>labelSet</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.12\"><a href=\"/sec/sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind.html\" title=\"link to this section\">13.7.5.12</a></span> Runtime Semantics: ForIn/OfHeadEvaluation ( TDZnames, expr,\n            iterationKind)</h1>\n\n        <p class=\"normalbefore\">The abstract operation ForIn/OfHeadEvaluation is called with arguments <span class=\"nt\">TDZnames</span>, <var>expr</var>, and <span style=\"font-family: Times New Roman\"><i>iterationKind</i>.</span>\n        The value of <var>iterationKind</var> is either <b>enumerate</b> or <b>iterate</b>.</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>oldEnv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n          <li>If <i>TDZnames</i> is not an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>, then\n            <ol class=\"block\">\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>TDZnames</i> has no duplicate entries.</li>\n              <li>Let <i>TDZ</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>oldEnv</i>).</li>\n              <li>For each string <i>name</i> in <i>TDZnames</i>, do\n                <ol class=\"block\">\n                  <li>Let <i>status</i> be <i>TDZ</i>.CreateMutableBinding(<i>name</i>, <b>false</b>).</li>\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is never an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                </ol>\n              </li>\n              <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>TDZ</i>.</li>\n            </ol>\n          </li>\n          <li>Let <i>exprRef</i> be the result of evaluating the production that is <i>expr</i>.</li>\n          <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n          <li>Let <i>exprValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>exprValue</i>).</li>\n          <li>If <i>iterationKind</i> is <span style=\"font-family: sans-serif\">enumerate</span>, then\n            <ol class=\"block\">\n              <li>If <i>exprValue</i>.[[value]] is <b>null</b> or <b>undefined</b>, then\n                <ol class=\"block\">\n                  <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family: sans-serif\">break</span>, [[value]]: <span style=\"font-family: sans-serif\">empty,</span>\n                      [[target]]: <span style=\"font-family: sans-serif\">empty</span>}.</li>\n                </ol>\n              </li>\n              <li>Let <i>obj</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<i>exprValue</i>).</li>\n              <li>Return <i>obj</i>.[[Enumerate]]().</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>iterationKind</i> is <span style=\"font-family:\n                  sans-serif\">iterate</span>.</li>\n              <li>Return <a href=\"/sec/sec-getiterator.html\">GetIterator</a>(<i>exprValue</i>).</li>\n            </ol>\n          </li>\n        </ol>\n      </section>\n\n      <section id=\"sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.13\"><a href=\"/sec/sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset.html\" title=\"link to this section\">13.7.5.13</a></span> Runtime Semantics: ForIn/OfBodyEvaluation ( lhs, stmt, iterator,\n            lhsKind, labelSet )</h1>\n\n        <p class=\"normalbefore\">The abstract operation ForIn/OfBodyEvaluation is called with arguments <var>lhs</var>, <var>stmt,\n        iterator,</var> <var>lhsKind</var>, and <var>labelSet.</var> The value of <var>lhsKind</var> is either <b>assignment</b>,\n        <b>varBinding</b> or <b>lexicalBinding</b>.</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>oldEnv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n          <li>Let <i>V</i> = <b>undefined</b> .</li>\n          <li>Let <i>destructuring</i> be IsDestructuring of <i>lhs</i>.</li>\n          <li>If <i>destructuring</i> is <b>true</b> and if <i>lhsKind</i> is <span style=\"font-family:\n              sans-serif\">assignment</span>, then\n            <ol class=\"block\">\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>lhs</i> is a <i>LeftHandSideExpression</i>.</li>\n              <li>Let <i>assignmentPattern</i> be the parse of the source text corresponding to <i>lhs</i> using\n                  <i>AssignmentPattern</i> as the goal symbol.</li>\n            </ol>\n          </li>\n          <li>Repeat\n            <ol class=\"block\">\n              <li>Let <i>nextResult</i> be <a href=\"/sec/sec-iteratorstep.html\">IteratorStep</a>(<i>iterator</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextResult</i>).</li>\n              <li>If <i>nextResult</i> is <b>false</b>, return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>V</i>).</li>\n              <li>Let <i>nextValue</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>nextResult</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextValue</i>).</li>\n              <li>If <i>lhsKind</i> is either <span style=\"font-family: sans-serif\">assignment</span> or <span style=\"font-family:\n                  sans-serif\">varBinding</span>, then\n                <ol class=\"block\">\n                  <li>If <i>destructuring</i> is <b>false</b>, then\n                    <ol class=\"block\">\n                      <li>Let <i>lhsRef</i> be the result of evaluating <i>lhs</i> ( it may be evaluated repeatedly).</li>\n                    </ol>\n                  </li>\n                </ol>\n              </li>\n              <li>Else\n                <ol class=\"block\">\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>lhsKind</i> is <span style=\"font-family:\n                      sans-serif\">lexicalBinding</span>.</li>\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>lhs</i> is a <i>ForDeclaration</i>.</li>\n                  <li>Let <i>iterationEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>oldEnv</i>).</li>\n                  <li>Perform BindingInstantiation for <i>lhs</i> passing <i>iterationEnv</i> as the argument.</li>\n                  <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>iterationEnv</i>.</li>\n                  <li>If <i>destructuring</i> is <b>false</b>, then\n                    <ol class=\"block\">\n                      <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>lhs</i> binds a single name.</li>\n                      <li>Let <i>lhsName</i> be the sole element of BoundNames of <i>lhs.</i></li>\n                      <li>Let <i>lhsRef</i> be <a href=\"/sec/sec-resolvebinding.html\">ResolveBinding</a>(<i>lhsName</i>).</li>\n                      <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>lhsRef</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                    </ol>\n                  </li>\n                </ol>\n              </li>\n              <li>If <i>destructuring</i> is <b>false</b>, then\n                <ol class=\"block\">\n                  <li>If <i>lhsRef</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n                    <ol class=\"block\">\n                      <li>Let <i>status</i> be <i>lhsRef</i>.</li>\n                    </ol>\n                  </li>\n                  <li>Else if <i>lhsKind</i> is <span style=\"font-family: sans-serif\">lexicalBinding</span>, then\n                    <ol class=\"block\">\n                      <li>Let <i>status</i> be <a href=\"/sec/sec-initializereferencedbinding.html\">InitializeReferencedBinding</a>(<i>lhsRef</i>,\n                          <i>nextValue</i>).</li>\n                    </ol>\n                  </li>\n                  <li>Else,\n                    <ol class=\"block\">\n                      <li>Let <i>status</i> be <a href=\"/sec/sec-putvalue.html\">PutValue</a>(<i>lhsRef</i>,  <i>nextValue</i>).</li>\n                    </ol>\n                  </li>\n                </ol>\n              </li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>If <i>lhsKind</i> is <span style=\"font-family: sans-serif\">assignment</span>, then\n                    <ol class=\"block\">\n                      <li>Let <i>status</i> be the result of performing DestructuringAssignmentEvaluation of\n                          <i>assignmentPattern</i> using <i>nextValue</i> as the argument.</li>\n                    </ol>\n                  </li>\n                  <li>Else if <i>lhsKind</i> is <span style=\"font-family: sans-serif\">varBinding</span>, then\n                    <ol class=\"block\">\n                      <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>lhs</i> is a <i>ForBinding</i>.</li>\n                      <li>Let <i>status</i> be the result of performing BindingInitialization for <i>lhs</i> passing\n                          <i>nextValue</i> and <b>undefined</b> as the arguments.</li>\n                    </ol>\n                  </li>\n                  <li>Else,\n                    <ol class=\"block\">\n                      <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>lhsKind</i> is <span style=\"font-family:\n                          sans-serif\">lexicalBinding</span>.</li>\n                      <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>lhs</i> is a <i>ForDeclaration</i>.</li>\n                      <li>Let <i>status</i> be the result of performing BindingInitialization for <i>lhs</i> passing\n                          <i>nextValue</i> and <i>iterationEnv</i> as arguments.</li>\n                    </ol>\n                  </li>\n                </ol>\n              </li>\n              <li>If <i>status</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n                <ol class=\"block\">\n                  <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n                  <li>Return <a href=\"/sec/sec-iteratorclose.html\">IteratorClose</a>(<i>iterator</i>, <i>status</i>).</li>\n                </ol>\n              </li>\n              <li>Let <i>result</i> be the result  of evaluating <i>stmt</i>.</li>\n              <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n              <li>If <a href=\"/sec/sec-loopcontinues.html\">LoopContinues</a>(<i>result</i>, <i>labelSet</i>) is <b>false</b>, return <a href=\"/sec/sec-iteratorclose.html\">IteratorClose</a>(<i>iterator</i>, <a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>result</i>, <i>V</i>)).</li>\n              <li>If <i>result</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, let <i>V</i> be\n                  <i>result</i>.[[value]].</li>\n            </ol>\n          </li>\n        </ol>\n      </section>\n\n      <section id=\"sec-for-in-and-for-of-statements-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.14\"><a href=\"/sec/sec-for-in-and-for-of-statements-runtime-semantics-evaluation.html\" title=\"link to this section\">13.7.5.14</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">ForBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>bindingId</i> be StringValue of <i>BindingIdentifier.</i></li>\n          <li>Return <a href=\"/sec/sec-resolvebinding.html\">ResolveBinding</a>(<i>bindingId</i>)</li>\n        </ol>\n      </section>\n    </section>\n  "}