{"id":"sec-iterator-interface","html":"\n        <h1><span class=\"secnum\" id=\"sec-25.1.1.2\"><a href=\"/sec/sec-iterator-interface.html\" title=\"link to this section\">25.1.1.2</a></span> The <i>Iterator</i> Interface</h1>\n\n        <p>An object that implements the <i>Iterator</i> interface must include the property in <a href=\"/sec/table-53.html\">Table 53</a>.\n        Such objects may also implement the properties in <a href=\"/sec/table-54.html\">Table 54</a>.</p>\n\n        <figure>\n          <figcaption><span id=\"table-53\">Table 53</span> &#x2014; <i>Iterator</i> Interface Required Properties</figcaption>\n          <table class=\"real-table\">\n            <tr>\n              <th style=\"background-color: #A6A6A6\">Property</th>\n              <th style=\"background-color: #A6A6A6\">Value</th>\n              <th style=\"background-color: #A6A6A6\">Requirements</th>\n            </tr>\n            <tr>\n              <td><code>next</code></td>\n              <td>A function that returns an <i>IteratorResult</i> object.</td>\n              <td>The returned object must conform to the <i>IteratorResult</i> interface. If a previous call to the <code>next</code> method of an <i>Iterator</i> has returned an <i>IteratorResult</i> object whose <code>done</code> property is <b>true</b>, then all subsequent calls to the <code>next</code> method of that object should also return an <i>IteratorResult</i> object whose <code>done</code> property is <b>true</b>. However, this requirement is not enforced.</td>\n            </tr>\n          </table>\n        </figure>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> Arguments may be passed to the next function but their interpretation and validity is\n          dependent upon the target <i>Iterator</i>. The for-of statement and other common users of <i>Iterators</i> do not pass\n          any arguments, so <i>Iterator</i> objects that expect to be used in such a manner must be prepared to deal with being\n          called with no arguments.</p>\n        </div>\n\n        <figure>\n          <figcaption><span id=\"table-54\">Table 54</span> &#x2014; <i>Iterator</i> Interface Optional Properties</figcaption>\n          <table class=\"real-table\">\n            <tr>\n              <th style=\"background-color: #A6A6A6\">Property</th>\n              <th style=\"background-color: #A6A6A6\">Value</th>\n              <th style=\"background-color: #A6A6A6\">Requirements</th>\n            </tr>\n            <tr>\n              <td><code>return</code></td>\n              <td>A function that returns an <i>IteratorResult</i> object.</td>\n              <td>The returned object must conform to the <i>IteratorResult</i> interface. Invoking this method notifies the <i>Iterator</i> object that the caller does not intend to make any more <code>next</code> method calls to the <i>Iterator</i>. The returned <i>IteratorResult</i> object will typically have a <code>done</code> property whose value is <b>true</b>, and a <code>value</code> property with the value passed as the argument of the <code>return</code> method. However, this requirement is not enforced.</td>\n            </tr>\n            <tr>\n              <td><code>throw</code></td>\n              <td>A function that returns an <i>IteratorResult</i> object.</td>\n              <td>The returned object must conform to the <i>IteratorResult</i> interface. Invoking this method notifies the <i>Iterator</i> object that the caller has detected an error condition. The argument may be used to identify the error condition and typically will be an exception object. A typical response is to <code>throw</code> the value passed as the argument. If the method does not <code>throw</code>, the returned <i>IteratorResult</i> object will typically have a <code>done</code> property whose value is <b>true</b>.</td>\n            </tr>\n          </table>\n        </figure>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> Typically callers of these methods should check for their existence before invoking\n          them. Certain ECMAScript language features including <code>for</code>-<code>of</code>, <code>yield*</code>, and array\n          destructuring call these methods after performing an existence check. Most ECMAScript library functions that accept\n          <i>Iterable</i> objects as arguments also conditionally call them.</p>\n        </div>\n      "}