{"id":"sec-json.parse","html":"\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-24.3.1\"><a href=\"/sec/sec-json.parse.html\" title=\"link to this section\">24.3.1</a></span>\n            JSON.parse ( text [ , reviver ] )</h1>\n\n        <p>The <code>parse</code> function parses a JSON text (a JSON-formatted String) and produces an ECMAScript value. The JSON\n        format is a subset of the syntax for ECMAScript literals, Array Initializers and Object Initializers. After parsing, JSON\n        objects are realized as ECMAScript objects. JSON arrays are realized as ECMAScript Array instances. JSON strings, numbers,\n        booleans, and null are realized as ECMAScript Strings, Numbers, Booleans, and <b>null</b>.</p>\n\n        <p class=\"normalbefore\">The optional <i>reviver</i> parameter is a function that takes two parameters, <i>key</i> and\n        <i>value</i>. It can filter and transform the results. It is called with each of the <i>key</i>/<i>value</i> pairs\n        produced by the parse, and its return value is used instead of the original value. If it returns what it received, the\n        structure is not modified. If it returns <b>undefined</b> then the property is deleted from the result.</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>JText</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>text</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>JText</i>).</li>\n          <li>Parse <i>JText</i> interpreted as UTF-16 encoded Unicode points (<a href=\"/sec/sec-ecmascript-language-types-string-type.html\">6.1.4</a>) as a JSON text as specified in <br>ECMA-404. Throw a\n              <b>SyntaxError</b> exception if <i>JText</i> is not a valid JSON text as defined in that specification.</li>\n          <li>Let <i>scriptText</i> be the result of concatenating <code>&quot;(&quot;</code>, <i>JText</i>, and <code>&quot;);&quot;</code>.</li>\n          <li>Let <i>completion</i> be the result of parsing and evaluating <i>scriptText</i> as if it was the source text of an\n              ECMAScript <i>Script</i>. but using the alternative definition of <i>DoubleStringCharacter</i> provided below. The\n              extended PropertyDefinitionEvaluation semantics defined in <a href=\"/sec/sec-__proto__-property-names-in-object-initializers.html\">B.3.1</a> must not be used during the evaluation.</li>\n          <li>Let <i>unfiltered</i> be <i>completion</i>.[[value]].</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>unfiltered</i> will be either a primitive value or an object\n              that is defined by either an <i>ArrayLiteral</i> or an <i>ObjectLiteral</i>.</li>\n          <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>reviver</i>) is <b>true</b>, then\n            <ol class=\"block\">\n              <li>Let <i>root</i> be <a href=\"/sec/sec-objectcreate.html\">ObjectCreate</a>(%ObjectPrototype%).</li>\n              <li>Let <i>rootName</i> be the empty String.</li>\n              <li>Let <i>status</i> be <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>root</i>, <i>rootName</i>,\n                  <i>unfiltered</i>).</li>\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is <b>true</b>.</li>\n              <li>Return <a href=\"/sec/sec-internalizejsonproperty.html\">InternalizeJSONProperty</a>(<i>root</i>, <i>rootName</i>).</li>\n            </ol>\n          </li>\n          <li>Else\n            <ol class=\"block\">\n              <li>Return <i>unfiltered</i>.</li>\n            </ol>\n          </li>\n        </ol>\n\n        <p>JSON allows Unicode code units 0x2028 (LINE SEPARATOR) and 0x2029 (PARAGRAPH SEPARATOR) to directly appear in <span class=\"nt\">String</span> literals without using an escape sequence. This is enabled by using the following alternative\n        definition of <span class=\"nt\">DoubleStringCharacter</span> when parsing <var>scriptText</var> in step 5:</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">DoubleStringCharacter</span> <span class=\"geq\">::</span></div>\n          <div class=\"rhs\"><span class=\"nt\">SourceCharacter</span> <span class=\"grhsmod\">but not one of</span> <code class=\"t\">&quot;</code> <span class=\"grhsmod\">or</span> <code class=\"t\">\\</code> <span class=\"grhsmod\">or</span> <span class=\"gprose\">U+0000 through U+001F</span></div>\n          <div class=\"rhs\"><code class=\"t\">\\</code> <span class=\"nt\">EscapeSequence</span></div>\n        </div>\n\n        <ul>\n          <li>\n            <p>The SV of <span class=\"prod\"><span class=\"nt\">DoubleStringCharacter</span> <span class=\"geq\">::</span> <span class=\"nt\">SourceCharacter</span> <span class=\"grhsmod\">but not one of</span> <code class=\"t\">&quot;</code> <span class=\"grhsmod\">or</span> <code class=\"t\">\\</code> <span class=\"grhsmod\">or</span></span> U+0000 <b>through</b> U+001F\n            is the <a href=\"/sec/sec-utf16encoding.html\">UTF16Encoding</a> (<a href=\"/sec/sec-utf16encoding.html\">10.1.1</a>) of the code point\n            value of <i>SourceCharacter</i>.</p>\n          </li>\n        </ul>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The syntax of a valid JSON text is a subset of the ECMAScript <span class=\"nt\">PrimaryExpression</span> syntax. Hence a valid JSON text is also a valid <span class=\"nt\">PrimaryExpression</span>. Step 3 above verifies that <span class=\"nt\">JText</span> conforms to that subset.\n          When <var>scriptText</var> is parsed and evaluated as a <span class=\"nt\">Script</span> the result will be either a\n          String, Number, Boolean, or Null primitive value or an Object defined as if by an <span class=\"nt\">ArrayLiteral</span>\n          or <span class=\"nt\">ObjectLiteral</span>.</p>\n        </div>\n      </div>\n\n      <section id=\"sec-internalizejsonproperty\">\n        <h1><span class=\"secnum\" id=\"sec-24.3.1.1\"><a href=\"/sec/sec-internalizejsonproperty.html\" title=\"link to this section\">24.3.1.1</a></span> Runtime Semantics: InternalizeJSONProperty( holder, name)</h1>\n\n        <p class=\"normalbefore\">The abstract operation InternalizeJSONProperty is a recursive abstract operation that takes two\n        parameters: a <var>holder</var> object and the String <var>name</var> of a property in that object.\n        InternalizeJSONProperty uses the value of <var>reviver</var> that was originally passed to the above parse function.</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>val</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>holder</i>, <i>name</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>val</i>).</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>val</i>) is Object, then\n            <ol class=\"block\">\n              <li>Let <i>isArray</i> be <a href=\"/sec/sec-isarray.html\">IsArray</a>(<i>val</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>isArray</i>).</li>\n              <li>If <i>isArray</i> is <b>true</b>,  then\n                <ol class=\"block\">\n                  <li>Set <i>I</i> to 0.</li>\n                  <li>Let <i>len</i> be <a href=\"/sec/sec-tolength.html\">ToLength</a>(<a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>val</i>,\n                      <code>&quot;length&quot;</code>)).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>len</i>).</li>\n                  <li>Repeat while <i>I</i> &lt; <i>len</i>,\n                    <ol class=\"block\">\n                      <li>Let <i>newElement</i> be InternalizeJSONProperty(<i>val</i>, <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>I</i>)).</li>\n                      <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>newElement</i>).</li>\n                      <li>If <i>newElement</i> is <b>undefined</b>, then\n                        <ol class=\"block\">\n                          <li>Let <i>status</i> be <i>val</i>.[[Delete]](<a href=\"/sec/sec-tostring.html\">ToString</a>(<i>I</i>)).</li>\n                        </ol>\n                      </li>\n                      <li>Else\n                        <ol class=\"block\">\n                          <li>Let <i>status</i> be <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>val</i>, <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>I</i>), <i>newElement</i>).</li>\n                          <li>NOTE This algorithm intentionally does not throw an exception if status is <b>false</b>.</li>\n                        </ol>\n                      </li>\n                      <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n                      <li>Add 1 to <i>I</i>.</li>\n                    </ol>\n                  </li>\n                </ol>\n              </li>\n              <li>Else\n                <ol class=\"block\">\n                  <li>Let <i>keys</i> be <a href=\"/sec/sec-enumerableownnames.html\">EnumerableOwnNames</a>(<i>val</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>keys</i>).</li>\n                  <li>For each String <i>P</i> in <i>keys</i> do,\n                    <ol class=\"block\">\n                      <li>Let <i>newElement</i> be InternalizeJSONProperty(<i>val</i>, <i>P</i>).</li>\n                      <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>newElement</i>).</li>\n                      <li>If <i>newElement</i> is <b>undefined</b>, then\n                        <ol class=\"block\">\n                          <li>Let <i>status</i> be <i>val</i>.[[Delete]](<i>P</i>).</li>\n                        </ol>\n                      </li>\n                      <li>Else\n                        <ol class=\"block\">\n                          <li>Let <i>status</i> be <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>val</i>, <i>P</i>,\n                              <i>newElement</i>).</li>\n                          <li>NOTE This algorithm intentionally does not throw an exception if status is <b>false</b>.</li>\n                        </ol>\n                      </li>\n                      <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n                    </ol>\n                  </li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Return <a href=\"/sec/sec-call.html\">Call</a>(<i>reviver</i>, <i>holder</i>, &#xAB;<i>name</i>, <i>val</i>&#xBB;).</li>\n        </ol>\n\n        <p>It is not permitted for a conforming implementation of <code><a href=\"/sec/sec-json.parse.html\">JSON.parse</a></code> to extend\n        the JSON grammars. If an implementation wishes to support a modified or extended JSON interchange format it must do so by\n        defining a different parse function.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> In the case where there are duplicate name Strings within an object, lexically preceding\n          values for the same key shall be overwritten.</p>\n        </div>\n      </section>\n    "}