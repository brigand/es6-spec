{"id":"sec-json.stringify","html":"\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-24.3.2\"><a href=\"/sec/sec-json.stringify.html\" title=\"link to this section\">24.3.2</a></span>\n            JSON.stringify ( value [ , replacer [ , space ] ] )</h1>\n\n        <p>The <code>stringify</code> function returns a String in UTF-16 encoded JSON format representing an ECMAScript value. It\n        can take three parameters. The <var>value</var> parameter is an ECMAScript value, which is usually an object or array,\n        although it can also be a String, Boolean, Number or <b>null</b>. The optional <var>replacer</var> parameter is either a\n        function that alters the way objects and arrays are stringified, or an array of Strings and Numbers that acts as a white\n        list for selecting the object properties that will be stringified. The optional <var>space</var> parameter is a String or\n        Number that allows the result to have white space injected into it to improve human readability.</p>\n\n        <p class=\"normalbefore\">These are the steps in stringifying an object:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>stack</i> be an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>Let <i>indent</i> be the empty String.</li>\n          <li>Let <i>PropertyList</i> and <i>ReplacerFunction</i> be <b>undefined</b>.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>replacer</i>) is Object, then\n            <ol class=\"block\">\n              <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>replacer</i>) is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Let <i>ReplacerFunction</i> be <i>replacer</i>.</li>\n                </ol>\n              </li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>Let <i>isArray</i> be <a href=\"/sec/sec-isarray.html\">IsArray</a>(<i>replacer</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>isArray</i>).</li>\n                  <li>If <i>isArray</i> is <b>true</b>, then\n                    <ol class=\"block\">\n                      <li>Let <i>PropertyList</i> be an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a></li>\n                      <li>Let <i>len</i> be <a href=\"/sec/sec-tolength.html\">ToLength</a>(<a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>replacer</i>,\n                          <code>&quot;length&quot;</code>)).</li>\n                      <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>len</i>).</li>\n                      <li>Let <i>k</i> be 0.</li>\n                      <li>Repeat while <i>k</i>&lt;<i>len</i>.\n                        <ol class=\"block\">\n                          <li>Let <i>v</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>replacer</i>, <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>k</i>)).</li>\n                          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>v</i>).</li>\n                          <li>Let <i>item</i> be <b>undefined</b>.</li>\n                          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>v</i>) is String, let <i>item</i> be\n                              <i>v.</i></li>\n                          <li>Else if <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>v</i>) is Number, let\n                              <i>item</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>v</i>).</li>\n                          <li>Else if <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>v</i>) is Object, then\n                            <ol class=\"block\">\n                              <li>If <i>v</i> has a [[StringData]] or [[NumberData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>, let <i>item</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>v</i>).</li>\n                              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>item</i>).</li>\n                            </ol>\n                          </li>\n                          <li>If <i>item</i> is not <b>undefined</b> and <i>item</i> is not currently an element of\n                              <i>PropertyList</i>, then\n                            <ol class=\"block\">\n                              <li>Append <i>item</i> to the end of <i>PropertyList</i>.</li>\n                            </ol>\n                          </li>\n                          <li>Let <i>k</i> be <i>k</i>+1.</li>\n                        </ol>\n                      </li>\n                    </ol>\n                  </li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>space</i>) is Object, then\n            <ol class=\"block\">\n              <li>If <i>space</i> has a [[NumberData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n                  slot</a>, then\n                <ol class=\"block\">\n                  <li>Let <i>space</i> be <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<i>space</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>space</i>).</li>\n                </ol>\n              </li>\n              <li>Else if <i>space</i> has a [[StringData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n                  slot</a>, then\n                <ol class=\"block\">\n                  <li>Let <i>space</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>space</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>space</i>).</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>space</i>) is Number, then\n            <ol class=\"block\">\n              <li>Let <i>space</i> be min(10, <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>space</i>)).</li>\n              <li>Set <i>gap</i> to a String containing <i>space</i> occurrences of code unit 0x0020 (SPACE). This will be the\n                  empty String if <i>space</i> is less than 1.</li>\n            </ol>\n          </li>\n          <li>Else if <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>space</i>) is String, then\n            <ol class=\"block\">\n              <li>If the number of elements in <i>space</i> is 10 or less, set <i>gap</i> to <i>space</i> otherwise set <i>gap</i>\n                  to a String consisting of the first 10 elements of <i>space</i>.</li>\n            </ol>\n          </li>\n          <li>Else\n            <ol class=\"block\">\n              <li>Set <i>gap</i> to the empty String.</li>\n            </ol>\n          </li>\n          <li>Let <i>wrapper</i> be <a href=\"/sec/sec-objectcreate.html\">ObjectCreate</a>(%ObjectPrototype%).</li>\n          <li>Let <i>status</i> be <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>wrapper</i>, the empty String,\n              <i>value</i>).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is <b>true</b>.</li>\n          <li>Return <a href=\"/sec/sec-serializejsonproperty.html\">SerializeJSONProperty</a>(the empty String, <i>wrapper</i>).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> JSON structures are allowed to be nested to any depth, but they must be acyclic. If\n          <var>value</var> is or contains a cyclic structure, then the stringify function must throw a <b>TypeError</b> exception.\n          This is an example of a value that cannot be stringified:</p>\n\n          <pre class=\"NoteCode\">a = [];</pre>\n          <pre class=\"NoteCode\">a[0] = a;</pre>\n          <pre class=\"NoteCode\">my_text = JSON.stringify(a); // This must throw a TypeError.</pre>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> Symbolic primitive values are rendered as follows:</p>\n\n          <ul>\n            <li>The <span class=\"value\">null</span> value is rendered in JSON text as the String <code>null</code>.</li>\n            <li>The <span class=\"value\">undefined</span> value is not rendered.</li>\n            <li>The <span class=\"value\">true</span> value is rendered in JSON text as the String <code>true</code>.</li>\n            <li>The <span class=\"value\">false</span> value is rendered in JSON text as the String <code>false</code>.</li>\n          </ul>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 3</span> String values are wrapped in QUOTATION MARK (<code>&quot;</code>) code units. The code\n          units <code>&quot;</code> and <code>\\</code> are escaped with <code>\\</code> prefixes. Control characters code units are\n          replaced with escape sequences <code>\\u</code>HHHH, or with the shorter forms, <code>\\b</code> (BACKSPACE),\n          <code>\\f</code> (FORM FEED), <code>\\n</code> (LINE FEED), <code>\\r</code> (CARRIAGE RETURN), <code>\\t</code> (CHARACTER\n          TABULATION).</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 4</span> Finite numbers are stringified as if by calling <span style=\"font-family: Times New\n          Roman\"><a href=\"/sec/sec-tostring.html\">ToString</a>(<i>number</i>)</span>. <b>NaN</b> and Infinity regardless of sign are\n          represented as the String <code>null</code>.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 5</span> Values that do not have a JSON representation (such as <b>undefined</b> and functions)\n          do not produce a String. Instead they produce the <span class=\"value\">undefined</span> value. In arrays these values are\n          represented as the String <code>null</code>. In objects an unrepresentable value causes the property to be excluded from\n          stringification.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 6</span> An object is rendered as U+007B (LEFT CURLY BRACKET) followed by zero or more\n          properties, separated with a U+002C (COMMA), closed with a U+007D (RIGHT CURLY BRACKET). A property is a quoted String\n          representing the key or property name, a U+003A (COLON), and then the stringified property value. An array is rendered\n          as an opening U+005B (LEFT SQUARE BRACKET followed by zero or more values, separated with a U+002C (COMMA), closed with\n          a U+005D (RIGHT SQUARE BRACKET).</p>\n        </div>\n      </div>\n\n      <section id=\"sec-serializejsonproperty\">\n        <h1><span class=\"secnum\" id=\"sec-24.3.2.1\"><a href=\"/sec/sec-serializejsonproperty.html\" title=\"link to this section\">24.3.2.1</a></span> Runtime Semantics: SerializeJSONProperty ( key, holder )</h1>\n\n        <p class=\"normalbefore\">The abstract operation SerializeJSONProperty with arguments <var>key</var>, <span style=\"font-family: Times New Roman\">and</span> <var>holder</var> has access to <span class=\"nt\">ReplacerFunction</span>\n        from the invocation of the <code>stringify</code> method. Its algorithm is as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>value</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>holder</i>, <i>key</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>value</i>).</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>value</i>) is Object, then\n            <ol class=\"block\">\n              <li>Let <i>toJSON</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>value</i>, <code>&quot;toJSON&quot;</code>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>toJSON</i>).</li>\n              <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>toJSON</i>) is <b>true</b>\n                <ol class=\"block\">\n                  <li>Let <i>value</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>toJSON</i>, <i>value</i>,\n                      &#xAB;<i>key</i>&#xBB;).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>value</i>).</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>If <i>ReplacerFunction</i> is not <b>undefined</b>, then\n            <ol class=\"block\">\n              <li>Let <i>value</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>ReplacerFunction</i>, <i>holder</i>, &#xAB;<i>key</i>,\n                  <i>value</i>&#xBB;).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>value</i>).</li>\n            </ol>\n          </li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>value</i>) is Object, then\n            <ol class=\"block\">\n              <li>If <i>value</i> has a [[NumberData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n                  slot</a>, then\n                <ol class=\"block\">\n                  <li>Let <i>value</i> be <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<i>value</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>value</i>).</li>\n                </ol>\n              </li>\n              <li>Else if <i>value</i> has a [[StringData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n                  slot</a>, then\n                <ol class=\"block\">\n                  <li>Let <i>value</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>value</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>value</i>).</li>\n                </ol>\n              </li>\n              <li>Else if <i>value</i> has a [[BooleanData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n                  slot</a>, then\n                <ol class=\"block\">\n                  <li>Let <i>value</i> be the value of the [[BooleanData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of <i>value</i>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>If <i>value</i> is <b>null</b>, return <code>&quot;null&quot;</code>.</li>\n          <li>If <i>value</i> is <b>true</b>, return <code>&quot;true&quot;</code>.</li>\n          <li>If <i>value</i> is <b>false</b>, return <code>&quot;false&quot;</code>.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>value</i>) is String, return <a href=\"/sec/sec-quotejsonstring.html\">QuoteJSONString</a>(<i>value</i>).</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>value</i>) is Number, then\n            <ol class=\"block\">\n              <li>If <i>value</i> is finite, return <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>value</i>).</li>\n              <li>Else, return <code>&quot;null&quot;</code>.</li>\n            </ol>\n          </li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>value</i>) is Object, and <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>value</i>) is <b>false</b>, then\n            <ol class=\"block\">\n              <li>Let <i>isArray</i> be <a href=\"/sec/sec-isarray.html\">IsArray</a>(<i>value</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>isArray</i>).</li>\n              <li>If <i>isArray</i> is <b>true</b>, return <a href=\"/sec/sec-serializejsonarray.html\">SerializeJSONArray</a>(<i>value</i>).</li>\n              <li>Else, return <a href=\"/sec/sec-serializejsonobject.html\">SerializeJSONObject</a>(<i>value</i>).</li>\n            </ol>\n          </li>\n          <li>Return <b>undefined</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-quotejsonstring\">\n        <h1><span class=\"secnum\" id=\"sec-24.3.2.2\"><a href=\"/sec/sec-quotejsonstring.html\" title=\"link to this section\">24.3.2.2</a></span>\n            Runtime Semantics: QuoteJSONString ( value )</h1>\n\n        <p class=\"normalbefore\">The abstract operation QuoteJSONString with argument <var>value</var> wraps a String value in\n        QUOTATION MARK code units and escapes certain other code units within it.</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>product</i> be code unit 0x0022 (QUOTATION MARK).</li>\n          <li>For each code unit <i>C</i> in <i>value</i>\n            <ol class=\"block\">\n              <li>If <i>C</i> is 0x0022 (QUOTATION MARK) or 0x005C (REVERSE SOLIDUS), then\n                <ol class=\"block\">\n                  <li>Let <i>product</i> be the concatenation of <i>product</i> and code unit 0x005C (REVERSE SOLIDUS).</li>\n                  <li>Let <i>product</i> be the concatenation of <i>product</i> and <i>C</i>.</li>\n                </ol>\n              </li>\n              <li>Else if <i>C</i> is 0x0008 (BACKSPACE), 0x000C (FORM FEED), 0x000A (LINE FEED), 0x000D (CARRIAGE RETURN), or\n                  0x000B (LINE TABULATION), then\n                <ol class=\"block\">\n                  <li>Let <i>product</i> be the concatenation of <i>product</i> and code unit 0x005C (REVERSE SOLIDUS).</li>\n                  <li>Let <i>abbrev</i> be the String value corresponding to the value of <i>C</i> as follows:\n                    <table class=\"lightweight\">\n                      <tr>\n                        <td>BACKSPACE</td>\n                        <td><span class=\"string value\">&quot;b&quot;</span></td>\n                      </tr>\n                      <tr>\n                        <td>FORM FEED (FF)</td>\n                        <td><span class=\"string value\">&quot;f&quot;</span></td>\n                      </tr>\n                      <tr>\n                        <td>LINE FEED (LF)</td>\n                        <td><span class=\"string value\">&quot;n&quot;</span></td>\n                      </tr>\n                      <tr>\n                        <td>CARRIAGE RETURN (CR)</td>\n                        <td><span class=\"string value\">&quot;r&quot;</span></td>\n                      </tr>\n                      <tr>\n                        <td>LINE TABULATION</td>\n                        <td><span class=\"string value\">&quot;t&quot;</span></td>\n                      </tr>\n                    </table>\n                  </li>\n                  <li>Let <i>product</i> be the concatenation of <i>product</i> and <i>abbrev</i>.</li>\n                </ol>\n              </li>\n              <li>Else if <i>C</i> has a code unit value less than 0x0020 (SPACE), then\n                <ol class=\"block\">\n                  <li>Let <i>product</i> be the concatenation of <i>product</i> and code unit 0x005C (REVERSE SOLIDUS).</li>\n                  <li>Let <i>product</i> be the concatenation of <i>product</i> and <code>&quot;u&quot;</code>.</li>\n                  <li>Let <i>hex</i> be the string result of converting the numeric code unit value of <i>C</i> to a String of\n                      four hexadecimal digits. Alphabetic hexadecimal digits are presented as lowercase Latin letters.</li>\n                  <li>Let <i>product</i> be the concatenation of <i>product</i> and <i>hex</i>.</li>\n                </ol>\n              </li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>Let <i>product</i> be the concatenation of <i>product</i> and <i>C</i>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Let <i>product</i> be the concatenation of <i>product</i> and code unit 0x0022 (QUOTATION MARK).</li>\n          <li>Return <i>product</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-serializejsonobject\">\n        <h1><span class=\"secnum\" id=\"sec-24.3.2.3\"><a href=\"/sec/sec-serializejsonobject.html\" title=\"link to this section\">24.3.2.3</a></span> Runtime Semantics: SerializeJSONObject ( value )</h1>\n\n        <p class=\"normalbefore\">The abstract operation SerializeJSONObject with argument <var>value</var> serializes an object. It\n        has access to the <var>stack</var>, <var>indent</var>, <var>gap</var>, and <span class=\"nt\">PropertyList</span> values of\n        the current invocation of the <code>stringify</code> method.</p>\n\n        <ol class=\"proc\">\n          <li>If <i>stack</i> contains <i>value</i>, throw a <b>TypeError</b> exception because the structure is cyclical.</li>\n          <li>Append <i>value</i> to <i>stack</i>.</li>\n          <li>Let <i>stepback</i> be <i>indent</i>.</li>\n          <li>Let <i>indent</i> be the concatenation of <i>indent</i> and <i>gap</i>.</li>\n          <li>If <i>PropertyList</i> is not <b>undefined</b>, then\n            <ol class=\"block\">\n              <li>Let <i>K</i> be <i>PropertyList</i>.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>K</i> be <a href=\"/sec/sec-enumerableownnames.html\">EnumerableOwnNames</a>(<i>value</i>).</li>\n            </ol>\n          </li>\n          <li>Let <i>partial</i> be an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>For each element <i>P</i> of <i>K</i>,\n            <ol class=\"block\">\n              <li>Let <i>strP</i> be <a href=\"/sec/sec-serializejsonproperty.html\">SerializeJSONProperty</a>(<i>P</i>, <i>value</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>strP</i>).</li>\n              <li>If <i>strP</i> is not <b>undefined</b>, then\n                <ol class=\"block\">\n                  <li>Let <i>member</i> be <a href=\"/sec/sec-quotejsonstring.html\">QuoteJSONString</a>(<i>P</i>).</li>\n                  <li>Let <i>member</i> be the concatenation of <i>member</i> and the string <code>&quot;:&quot;</code>.</li>\n                  <li>If <i>gap</i> is not the empty String, then\n                    <ol class=\"block\">\n                      <li>Let <i>member</i> be the concatenation of <i>member</i> and code unit 0x0020 (SPACE).</li>\n                    </ol>\n                  </li>\n                  <li>Let <i>member</i> be the concatenation of <i>member</i> and <i>strP</i>.</li>\n                  <li>Append <i>member</i> to <i>partial</i>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>If <i>partial</i> is empty, then\n            <ol class=\"block\">\n              <li>Let <i>final</i> be <code>&quot;{}&quot;</code>.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>If <i>gap</i> is the empty String, then\n                <ol class=\"block\">\n                  <li>Let <i>properties</i> be a String formed by concatenating all the element Strings of <i>partial</i> with\n                      each adjacent pair of Strings separated with code unit 0x002C (COMMA). A comma is not inserted either before\n                      the first String or after the last String.</li>\n                  <li>Let <i>final</i> be the result of concatenating <b><code>&quot;{&quot;</code>,</b> <i>properties</i>, and\n                      <code>&quot;}&quot;</code>.</li>\n                </ol>\n              </li>\n              <li>Else <i>gap</i> is not the empty String\n                <ol class=\"block\">\n                  <li>Let <i>separator</i> be the result of concatenating code unit 0x002C (COMMA), code unit 0x000A (LINE FEED),\n                      and <i>indent</i>.</li>\n                  <li>Let <i>properties</i> be a String formed by concatenating all the element Strings of <i>partial</i> with\n                      each adjacent pair of Strings separated with <i>separator</i>. The <i>separator</i> String is not inserted\n                      either before the first String or after the last String.</li>\n                  <li>Let <i>final</i> be the result of concatenating <code>&quot;{&quot;</code>, code unit 0x000A (LINE FEED),\n                      <i>indent</i>, <i>properties</i>, code unit 0x000A, <i>stepback</i>, and <code>&quot;}&quot;</code>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Remove the last element of <i>stack</i>.</li>\n          <li>Let <i>indent</i> be <i>stepback</i>.</li>\n          <li>Return <i>final</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-serializejsonarray\">\n        <h1><span class=\"secnum\" id=\"sec-24.3.2.4\"><a href=\"/sec/sec-serializejsonarray.html\" title=\"link to this section\">24.3.2.4</a></span> Runtime Semantics: SerializeJSONArray ( value )</h1>\n\n        <p class=\"normalbefore\">The abstract operation SerializeJSONArray with argument <var>value</var> serializes an array. It\n        has access to the <var>stack</var>, <var>indent</var>, and <var>gap</var> values of the current invocation of the\n        <code>stringify</code> method.</p>\n\n        <ol class=\"proc\">\n          <li>If <i>stack</i> contains <i>value</i>, throw a <b>TypeError</b> exception because the structure is cyclical.</li>\n          <li>Append <i>value</i> to <i>stack</i>.</li>\n          <li>Let <i>stepback</i> be <i>indent</i>.</li>\n          <li>Let <i>indent</i> be the concatenation of <i>indent</i> and <i>gap</i>.</li>\n          <li>Let <i>partial</i> be an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>Let <i>len</i> be <a href=\"/sec/sec-tolength.html\">ToLength</a>(<a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>value</i>,\n              <code>&quot;length&quot;</code>)).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>len</i>).</li>\n          <li>Let <i>index</i> be 0.</li>\n          <li>Repeat while <i>index</i> &lt; <i>len</i>\n            <ol class=\"block\">\n              <li>Let <i>strP</i> be <a href=\"/sec/sec-serializejsonproperty.html\">SerializeJSONProperty</a>(<a href=\"/sec/sec-tostring.html\">ToString</a>(<i>index</i>), <i>value</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>strP</i>).</li>\n              <li>If <i>strP</i> is <b>undefined</b>, then\n                <ol class=\"block\">\n                  <li>Append <code>&quot;null&quot;</code> to <i>partial</i>.</li>\n                </ol>\n              </li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>Append <i>strP</i> to <i>partial</i>.</li>\n                </ol>\n              </li>\n              <li>Increment <i>index</i> by 1.</li>\n            </ol>\n          </li>\n          <li>If <i>partial</i> is empty, then\n            <ol class=\"block\">\n              <li>Let <i>final</i> be <code>&quot;[]&quot;</code>.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>If <i>gap</i> is the empty String, then\n                <ol class=\"block\">\n                  <li>Let <i>properties</i> be a String formed by concatenating all the element Strings of <i>partial</i> with\n                      each adjacent pair of Strings separated with code unit 0x002C (COMMA). A comma is not inserted either before\n                      the first String or after the last String.</li>\n                  <li>Let <i>final</i> be the result of concatenating <b><code>&quot;[&quot;</code>,</b> <i>properties</i>, and\n                      <code>&quot;]&quot;</code>.</li>\n                </ol>\n              </li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>Let <i>separator</i> be the result of concatenating code unit 0x002C (COMMA), code unit 0x000A (LINE FEED),\n                      and <i>indent</i>.</li>\n                  <li>Let <i>properties</i> be a String formed by concatenating all the element Strings of <i>partial</i> with\n                      each adjacent pair of Strings separated with <i>separator</i>. The <i>separator</i> String is not inserted\n                      either before the first String or after the last String.</li>\n                  <li>Let <i>final</i> be the result of concatenating <code>&quot;[&quot;</code>, code unit 0x000A (LINE FEED),\n                      <i>indent</i>, <i>properties</i>, code unit 0x000A, <i>stepback</i>, and <code>&quot;]&quot;</code>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Remove the last element of <i>stack</i>.</li>\n          <li>Let <i>indent</i> be <i>stepback</i>.</li>\n          <li>Return <i>final</i>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The representation of arrays includes only the elements between zero and\n          <code>array.length</code> <span style=\"font-family: Times New Roman\">&#x2013; 1</span> inclusive. Properties whose keys\n          are not array indexes are excluded from the stringification. An array is stringified as an opening LEFT SQUARE BRACKET,\n          elements separated by COMMA, and a closing RIGHT SQUARE BRACKET.</p>\n        </div>\n      </section>\n    "}