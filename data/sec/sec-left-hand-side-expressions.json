{"id":"sec-left-hand-side-expressions","html":"\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-12.3\"><a href=\"/sec/sec-left-hand-side-expressions.html\" title=\"link to this section\">12.3</a></span> Left-Hand-Side Expressions</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">MemberExpression</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">PrimaryExpression</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">MemberExpression</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">[</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">]</code></div>\n        <div class=\"rhs\"><span class=\"nt\">MemberExpression</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n        <div class=\"rhs\"><span class=\"nt\">MemberExpression</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">TemplateLiteral</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">SuperProperty</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">MetaProperty</span></div>\n        <div class=\"rhs\"><code class=\"t\">new</code> <span class=\"nt\">MemberExpression</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">Arguments</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">SuperProperty</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">super</code> <code class=\"t\">[</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">]</code></div>\n        <div class=\"rhs\"><code class=\"t\">super</code> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">MetaProperty</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">NewTarget</span></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">NewTarget</span> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">new</code> <code class=\"t\">.</code> <code class=\"t\">target</code></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">NewExpression</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">MemberExpression</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">new</code> <span class=\"nt\">NewExpression</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">CallExpression</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">MemberExpression</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">Arguments</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">SuperCall</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">CallExpression</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">Arguments</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">CallExpression</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">[</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">]</code></div>\n        <div class=\"rhs\"><span class=\"nt\">CallExpression</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n        <div class=\"rhs\"><span class=\"nt\">CallExpression</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">TemplateLiteral</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">SuperCall</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">super</code> <span class=\"nt\">Arguments</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">Arguments</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">(</code> <code class=\"t\">)</code></div>\n        <div class=\"rhs\"><code class=\"t\">(</code> <span class=\"nt\">ArgumentList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">)</code></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ArgumentList</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[In, ?Yield]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">...</code> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[In, ?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">ArgumentList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">,</code> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[In, ?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">ArgumentList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">,</code> <code class=\"t\">...</code> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[In, ?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">LeftHandSideExpression</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">NewExpression</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">CallExpression</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n    </div>\n\n    <section id=\"sec-static-semantics\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.1\"><a href=\"/sec/sec-static-semantics.html\" title=\"link to this section\">12.3.1</a></span>\n            Static Semantics</h1>\n      </div>\n\n      <section id=\"sec-static-semantics-static-semantics-contains\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.1.1\"><a href=\"/sec/sec-static-semantics-static-semantics-contains.html\" title=\"link to this section\">12.3.1.1</a></span> Static Semantics:  Contains</h1>\n\n        <p>With parameter <var>symbol</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-static-semantic-rules.html\">5.3</a>, <a href=\"/sec/sec-object-initializer-static-semantics-contains.html\">12.2.6.3</a>, <a href=\"/sec/sec-function-definitions-static-semantics-contains.html\">14.1.4</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-contains.html\">14.2.3</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-contains.html\">14.4.4</a>, <a href=\"/sec/sec-class-definitions-static-semantics-contains.html\">14.5.4</a></p>\n\n        <div class=\"gp prod\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">MemberExpression</span> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n        <ol class=\"proc\">\n          <li>If  <i>MemberExpression</i> Contains <i>symbol</i> is <b>true</b>, return <b>true</b>.</li>\n          <li>If <i>symbol</i> is a <i>ReservedWord</i>, return <b>false</b>.</li>\n          <li>If <i>symbol</i> is an <i>Identifier</i> and StringValue of <i>symbol</i> is the same value as the StringValue of\n              <i>IdentifierName</i>, return <b>true</b>;</li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">SuperProperty</span> <span class=\"geq\">:</span> <code class=\"t\">super</code> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n        <ol class=\"proc\">\n          <li>If  <i>symbol</i> is the <i>ReservedWord</i> <code>super</code>, return <b>true</b>.</li>\n          <li>If <i>symbol</i> is a <i>ReservedWord</i>, return <b>false</b>.</li>\n          <li>If <i>symbol</i> is an <i>Identifier</i> and StringValue of <i>symbol</i> is the same value as the StringValue of\n              <i>IdentifierName</i>, return <b>true</b>;</li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">CallExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">CallExpression</span> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n        <ol class=\"proc\">\n          <li>If  <i>CallExpression</i> Contains <i>symbol</i> is <b>true</b>, return <b>true</b>.</li>\n          <li>If <i>symbol</i> is a <i>ReservedWord</i>, return <b>false</b>.</li>\n          <li>If <i>symbol</i> is an <i>Identifier</i> and StringValue of <i>symbol</i> is the same value as the StringValue of\n              <i>IdentifierName</i>, return <b>true</b>;</li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-static-semantics-static-semantics-isfunctiondefinition\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.1.2\"><a href=\"/sec/sec-static-semantics-static-semantics-isfunctiondefinition.html\" title=\"link to this section\">12.3.1.2</a></span> Static Semantics:  IsFunctionDefinition</h1>\n\n        <p>See also: <a href=\"/sec/sec-semantics-static-semantics-isfunctiondefinition.html\">12.2.1.3</a>, <a href=\"/sec/sec-grouping-operator-static-semantics-isfunctiondefinition.html\">12.2.10.2</a>, <a href=\"/sec/sec-postfix-expressions-static-semantics-isfunctiondefinition.html\">12.4.2</a>, <a href=\"/sec/sec-unary-operators-static-semantics-isfunctiondefinition.html\">12.5.2</a>, <a href=\"/sec/sec-multiplicative-operators-static-semantics-isfunctiondefinition.html\">12.6.1</a>, <a href=\"/sec/sec-additive-operators-static-semantics-isfunctiondefinition.html\">12.7.1</a>, <a href=\"/sec/sec-bitwise-shift-operators-static-semantics-isfunctiondefinition.html\">12.8.1</a>, <a href=\"/sec/sec-relational-operators-static-semantics-isfunctiondefinition.html\">12.9.1</a>, <a href=\"/sec/sec-equality-operators-static-semantics-isfunctiondefinition.html\">12.10.1</a>, <a href=\"/sec/sec-binary-bitwise-operators-static-semantics-isfunctiondefinition.html\">12.11.1</a>, <a href=\"/sec/sec-binary-logical-operators-static-semantics-isfunctiondefinition.html\">12.12.1</a>, <a href=\"/sec/sec-conditional-operator-static-semantics-isfunctiondefinition.html\">12.13.1</a>, <a href=\"/sec/sec-assignment-operators-static-semantics-isfunctiondefinition.html\">12.14.2</a>, <a href=\"/sec/sec-comma-operator-static-semantics-isfunctiondefinition.html\">12.15.1</a>, <a href=\"/sec/sec-function-definitions-static-semantics-isfunctiondefinition.html\">14.1.11</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-isfunctiondefinition.html\">14.4.9</a>, <a href=\"/sec/sec-class-definitions-static-semantics-isfunctiondefinition.html\">14.5.8</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <code class=\"t\">[</code> <span class=\"nt\">Expression</span> <code class=\"t\">]</code></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <span class=\"nt\">TemplateLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">SuperProperty</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MetaProperty</span></div>\n          <div class=\"rhs\"><code class=\"t\">new</code> <span class=\"nt\">MemberExpression</span> <span class=\"nt\">Arguments</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">NewExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">new</code> <span class=\"nt\">NewExpression</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">CallExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <span class=\"nt\">Arguments</span></div>\n          <div class=\"rhs\"><span class=\"nt\">SuperCall</span></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <span class=\"nt\">Arguments</span></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <code class=\"t\">[</code> <span class=\"nt\">Expression</span> <code class=\"t\">]</code></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <span class=\"nt\">TemplateLiteral</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-static-semantics-static-semantics-isdestructuring\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.1.3\"><a href=\"/sec/sec-static-semantics-static-semantics-isdestructuring.html\" title=\"link to this section\">12.3.1.3</a></span> Static Semantics:  IsDestructuring</h1>\n\n        <p>See also: <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-isdestructuring.html\">13.7.5.6</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">PrimaryExpression</span></div>\n        <ol class=\"proc\">\n          <li>If <i>PrimaryExpression</i> is either an <i>ObjectLiteral</i> or an <i>ArrayLiteral</i>, return <b>true.</b></li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <code class=\"t\">[</code> <span class=\"nt\">Expression</span> <code class=\"t\">]</code></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <span class=\"nt\">TemplateLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">SuperProperty</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MetaProperty</span></div>\n          <div class=\"rhs\"><code class=\"t\">new</code> <span class=\"nt\">MemberExpression</span> <span class=\"nt\">Arguments</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">NewExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">new</code> <span class=\"nt\">NewExpression</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">CallExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <span class=\"nt\">Arguments</span></div>\n          <div class=\"rhs\"><span class=\"nt\">SuperCall</span></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <span class=\"nt\">Arguments</span></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <code class=\"t\">[</code> <span class=\"nt\">Expression</span> <code class=\"t\">]</code></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <span class=\"nt\">TemplateLiteral</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-static-semantics-static-semantics-isidentifierref\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.1.4\"><a href=\"/sec/sec-static-semantics-static-semantics-isidentifierref.html\" title=\"link to this section\">12.3.1.4</a></span> Static Semantics:  IsIdentifierRef</h1>\n\n        <p>See also: <a href=\"/sec/sec-semantics-static-semantics-isidentifierref.html\">12.2.1.4</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">LeftHandSideExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <code class=\"t\">[</code> <span class=\"nt\">Expression</span> <code class=\"t\">]</code></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <span class=\"nt\">TemplateLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">SuperProperty</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MetaProperty</span></div>\n          <div class=\"rhs\"><code class=\"t\">new</code> <span class=\"nt\">MemberExpression</span> <span class=\"nt\">Arguments</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">NewExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">new</code> <span class=\"nt\">NewExpression</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.1.5\"><a href=\"/sec/sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget.html\" title=\"link to this section\">12.3.1.5</a></span> Static Semantics:  IsValidSimpleAssignmentTarget</h1>\n\n        <p>See also: <a href=\"/sec/sec-identifiers-static-semantics-isvalidsimpleassignmenttarget.html\">12.1.3</a>, <a href=\"/sec/sec-semantics-static-semantics-isvalidsimpleassignmenttarget.html\">12.2.1.5</a>, <a href=\"/sec/sec-grouping-operator-static-semantics-isvalidsimpleassignmenttarget.html\">12.2.10.3</a>, <a href=\"/sec/sec-postfix-expressions-static-semantics-isvalidsimpleassignmenttarget.html\">12.4.3</a>, <a href=\"/sec/sec-unary-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.5.3</a>, <a href=\"/sec/sec-multiplicative-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.6.2</a>, <a href=\"/sec/sec-additive-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.7.2</a>, <a href=\"/sec/sec-bitwise-shift-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.8.2</a>, <a href=\"/sec/sec-relational-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.9.2</a>, <a href=\"/sec/sec-equality-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.10.2</a>, <a href=\"/sec/sec-binary-bitwise-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.11.2</a>, <a href=\"/sec/sec-binary-logical-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.12.2</a>, <a href=\"/sec/sec-conditional-operator-static-semantics-isvalidsimpleassignmenttarget.html\">12.13.2</a>, <a href=\"/sec/sec-assignment-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.14.3</a>, <a href=\"/sec/sec-comma-operator-static-semantics-isvalidsimpleassignmenttarget.html\">12.15.2</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">CallExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <code class=\"t\">[</code> <span class=\"nt\">Expression</span> <code class=\"t\">]</code></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <code class=\"t\">[</code> <span class=\"nt\">Expression</span> <code class=\"t\">]</code></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n          <div class=\"rhs\"><span class=\"nt\">SuperProperty</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return <b>true</b>.</li>\n        </ol>\n\n        <div class=\"gp\">\n          <div class=\"lhs\">&#xE7;<span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <span class=\"nt\">Arguments</span></div>\n          <div class=\"rhs\"><span class=\"nt\">SuperCall</span></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <span class=\"nt\">Arguments</span></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <span class=\"nt\">TemplateLiteral</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">NewExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">new</code> <span class=\"nt\">NewExpression</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <span class=\"nt\">TemplateLiteral</span></div>\n          <div class=\"rhs\"><code class=\"t\">new</code> <span class=\"nt\">MemberExpression</span> <span class=\"nt\">Arguments</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">NewTarget</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">new</code> <code class=\"t\">.</code> <code class=\"t\">target</code></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-property-accessors\">\n      <h1><span class=\"secnum\" id=\"sec-12.3.2\"><a href=\"/sec/sec-property-accessors.html\" title=\"link to this section\">12.3.2</a></span>\n          Property Accessors</h1>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> Properties are accessed by name, using either the dot notation:</p>\n\n        <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <code>.</code> <span class=\"nt\">IdentifierName</span><br> <span class=\"nt\">CallExpression</span> <code>.</code> <span class=\"nt\">IdentifierName</span></div>\n\n        <p>or the bracket notation:</p>\n\n        <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <code>[</code> <span class=\"nt\">Expression</span> <code>]</code><br><span class=\"nt\">CallExpression</span> <code>[</code> <span class=\"nt\">Expression</span> <code>]</code></div>\n\n        <p>The dot notation is explained by the following syntactic conversion:</p>\n\n        <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <code>.</code> <span class=\"nt\">IdentifierName</span></div>\n\n        <p>is identical in its behaviour to</p>\n\n        <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <code>[</code> &lt;<i>identifier-name-string</i>&gt; <code>]</code></div>\n\n        <p>and similarly</p>\n\n        <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <code>.</code> <span class=\"nt\">IdentifierName</span></div>\n\n        <p>is identical in its behaviour to</p>\n\n        <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <code>[</code> &lt;<i>identifier-name-string</i>&gt; <code>]</code></div>\n\n        <p>where <var>&lt;<i>identifier-name-string</i>&gt;</var> is the result of evaluating StringValue of <span class=\"nt\">IdentifierName</span>.</p>\n\n        <section id=\"sec-property-accessors-runtime-semantics-evaluation\">\n          <h1><span class=\"secnum\" id=\"sec-12.3.2.1\"><a href=\"/sec/sec-property-accessors-runtime-semantics-evaluation.html\" title=\"link to this section\">12.3.2.1</a></span> Runtime Semantics: Evaluation</h1>\n          <div class=\"gp prod\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">MemberExpression</span> <code class=\"t\">[</code> <span class=\"nt\">Expression</span> <code class=\"t\">]</code></div>\n          <ol class=\"proc\">\n            <li>Let <i>baseReference</i> be the result of evaluating <i>MemberExpression</i>.</li>\n            <li>Let <i>baseValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>baseReference</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>baseValue</i>).</li>\n            <li>Let <i>propertyNameReference</i> be the result of evaluating <i>Expression</i>.</li>\n            <li>Let <i>propertyNameValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>propertyNameReference</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>propertyNameValue</i>).</li>\n            <li>Let <i>bv</i> be <a href=\"/sec/sec-requireobjectcoercible.html\">RequireObjectCoercible</a>(<i>baseValue</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>bv</i>).</li>\n            <li>Let <i>propertyKey</i> be <a href=\"/sec/sec-topropertykey.html\">ToPropertyKey</a>(<i>propertyNameValue</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>propertyKey</i>).</li>\n            <li>If the code matched by the syntactic production that is being evaluated is <a href=\"/sec/sec-strict-mode-code.html\">strict\n                mode code</a>, let <i>strict</i> be <b>true</b>, else let <i>strict</i> be <b>false</b>.</li>\n            <li>Return a value of type <a href=\"/sec/sec-reference-specification-type.html\">Reference</a> whose base value is <i>bv</i> and\n                whose referenced name is <i>propertyKey</i>, and whose strict reference flag is <i>strict</i>.</li>\n          </ol>\n          <div class=\"gp prod\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">MemberExpression</span> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n          <ol class=\"proc\">\n            <li>Let <i>baseReference</i> be the result of evaluating <i>MemberExpression</i>.</li>\n            <li>Let <i>baseValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>baseReference</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>baseValue</i>).</li>\n            <li>Let <i>bv</i> be <a href=\"/sec/sec-requireobjectcoercible.html\">RequireObjectCoercible</a>(<i>baseValue</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>bv</i>).</li>\n            <li>Let <i>propertyNameString</i> be StringValue of <i>IdentifierName</i></li>\n            <li>If the code matched by the syntactic production that is being evaluated is <a href=\"/sec/sec-strict-mode-code.html\">strict\n                mode code</a>, let <i>strict</i> be <b>true</b>, else let <i>strict</i> be <b>false</b>.</li>\n            <li>Return a value of type <a href=\"/sec/sec-reference-specification-type.html\">Reference</a> whose base value is <i>bv</i> and\n                whose referenced name is <i>propertyNameString</i>, and whose strict reference flag is <i>strict</i>.</li>\n          </ol>\n          <div class=\"gp prod\"><span class=\"nt\">CallExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">CallExpression</span> <code class=\"t\">[</code> <span class=\"nt\">Expression</span> <code class=\"t\">]</code></div>\n\n          <p>Is evaluated in exactly the same manner as <span class=\"prod\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">MemberExpression</span> <code class=\"t\">[</code> <span class=\"nt\">Expression</span> <code class=\"t\">]</code></span> except that the contained <span class=\"nt\">CallExpression</span> is evaluated in step 1.</p>\n\n          <div class=\"gp prod\"><span class=\"nt\">CallExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">CallExpression</span> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n\n          <p>Is evaluated in exactly the same manner as <span class=\"prod\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">MemberExpression</span> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></span>  except that the contained <span class=\"nt\">CallExpression</span> is evaluated\n          in step 1.</p>\n        </section>\n      </div>\n    </section>\n\n    <section id=\"sec-new-operator\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.3\"><a href=\"/sec/sec-new-operator.html\" title=\"link to this section\">12.3.3</a></span> The\n            <code>new</code> Operator</h1>\n      </div>\n\n      <section id=\"sec-new-operator-runtime-semantics-evaluation\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-12.3.3.1\"><a href=\"/sec/sec-new-operator-runtime-semantics-evaluation.html\" title=\"link to this section\">12.3.3.1</a></span> Runtime Semantics: Evaluation</h1>\n          <div class=\"gp prod\"><span class=\"nt\">NewExpression</span> <span class=\"geq\">:</span> <code class=\"t\">new</code> <span class=\"nt\">NewExpression</span></div>\n          <ol class=\"proc\">\n            <li>Return <a href=\"/sec/sec-evaluatenew.html\">EvaluateNew</a>(<i>NewExpression</i>, <span style=\"font-family:\n                sans-serif\">empty</span>).</li>\n          </ol>\n          <div class=\"gp prod\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span> <code class=\"t\">new</code> <span class=\"nt\">MemberExpression</span> <span class=\"nt\">Arguments</span></div>\n          <ol class=\"proc\">\n            <li>Return <a href=\"/sec/sec-evaluatenew.html\">EvaluateNew</a>(<i>MemberExpression</i>, <i>Arguments</i>).</li>\n          </ol>\n        </div>\n\n        <section id=\"sec-evaluatenew\">\n          <h1><span class=\"secnum\" id=\"sec-12.3.3.1.1\"><a href=\"/sec/sec-evaluatenew.html\" title=\"link to this section\">12.3.3.1.1</a></span> Runtime Semantics: EvaluateNew(constructProduction,\n              arguments)</h1>\n\n          <p class=\"normalbefore\">The abstract operation EvaluateNew with arguments <span style=\"font-family: Times New\n          Roman\"><i>constructProduction</i>,</span> and <var>arguments</var> performs the following steps:</p>\n\n          <ol class=\"proc\">\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>constructProduction</i> is either a <i>NewExpression</i> or a\n                <i>MemberExpression</i>.</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>arguments</i> is either <span style=\"font-family:\n                sans-serif\">empty</span> or an <i>Arguments</i> production.</li>\n            <li>Let <i>ref</i> be the result of evaluating  <i>constructProduction</i>.</li>\n            <li>Let <i>constructor</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>ref</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>constructor</i>).</li>\n            <li>If <i>arguments</i> is <span style=\"font-family: sans-serif\">empty</span>, let <i>argList</i> be an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n            <li>Else,\n              <ol class=\"block\">\n                <li>Let <i>argList</i> be ArgumentListEvaluation of <i>arguments</i>.</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>argList</i>).</li>\n              </ol>\n            </li>\n            <li>If <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a> (<i>constructor</i>) is <b>false</b>, throw a <b>TypeError</b>\n                exception.</li>\n            <li>Return <a href=\"/sec/sec-construct.html\">Construct</a>(<i>constructor</i>, <i>argList</i>).</li>\n          </ol>\n        </section>\n      </section>\n    </section>\n\n    <section id=\"sec-function-calls\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.4\"><a href=\"/sec/sec-function-calls.html\" title=\"link to this section\">12.3.4</a></span>\n            Function Calls</h1>\n      </div>\n\n      <section id=\"sec-function-calls-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.4.1\"><a href=\"/sec/sec-function-calls-runtime-semantics-evaluation.html\" title=\"link to this section\">12.3.4.1</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">CallExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">MemberExpression</span> <span class=\"nt\">Arguments</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>ref</i> be the result of evaluating <i>MemberExpression</i>.</li>\n          <li>Let <i>func</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>ref</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>func</i>).</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>ref</i>) is <a href=\"/sec/sec-reference-specification-type.html\">Reference</a> and <a href=\"/sec/sec-reference-specification-type.html\">IsPropertyReference</a>(<i>ref</i>) is <b>false</b> and <a href=\"/sec/sec-reference-specification-type.html\">GetReferencedName</a>(<i>ref</i>) <i>is</i> <code>&quot;eval&quot;</code>, then\n            <ol class=\"block\">\n              <li>If <a href=\"/sec/sec-samevalue.html\">SameValue</a>(<i>func</i>, %eval%) is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Let <i>argList</i> be ArgumentListEvaluation(<i>Arguments</i>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>argList</i>).</li>\n                  <li>If <i>argList</i> has no elements, return <b>undefined.</b></li>\n                  <li>Let <i>evalText</i> be the first element of <i>argList</i>.</li>\n                  <li>If the source code matching this <i>CallExpression</i> is <a href=\"/sec/sec-strict-mode-code.html\">strict code</a>,\n                      let <i>strictCaller</i> be <b>true.</b> Otherwise let <i>strictCaller</i> be <b>false.</b></li>\n                  <li>Let <i>evalRealm</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-code-realms.html\">Realm</a>.</li>\n                  <li>Return <a href=\"/sec/sec-performeval.html\">PerformEval</a>(<i>evalText</i>, <i>evalRealm</i>, <i>strictCaller</i>,\n                      <b>true</b>). .</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>ref</i>) is <a href=\"/sec/sec-reference-specification-type.html\">Reference</a>, then\n            <ol class=\"block\">\n              <li>If <a href=\"/sec/sec-reference-specification-type.html\">IsPropertyReference</a>(<i>ref</i>) is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Let <i>thisValue</i> be <a href=\"/sec/sec-getthisvalue.html\">GetThisValue</a>(<i>ref</i>).</li>\n                </ol>\n              </li>\n              <li>Else, the base of <i>ref</i> is an <a href=\"/sec/sec-environment-records.html\">Environment Record</a>\n                <ol class=\"block\">\n                  <li>Let <i>refEnv</i> be <a href=\"/sec/sec-reference-specification-type.html\">GetBase</a>(<i>ref</i>).</li>\n                  <li>Let <i>thisValue</i> be <i>refEnv</i>.WithBaseObject().</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Else <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>ref</i>) is not <a href=\"/sec/sec-reference-specification-type.html\">Reference</a>,\n            <ol class=\"block\">\n              <li>Let <i>thisValue</i> be <b>undefined</b>.</li>\n            </ol>\n          </li>\n          <li>Let <i>thisCall</i> be this <i>CallExpression</i>.</li>\n          <li>Let <i>tailCall</i> be <a href=\"/sec/sec-isintailposition.html\">IsInTailPosition</a>(<i>thisCall</i>). (See <a href=\"/sec/sec-isintailposition.html\">14.6.1</a>)</li>\n          <li>Return <a href=\"/sec/sec-evaluatedirectcall.html\">EvaluateDirectCall</a>(<i>func</i>, <i>thisValue</i>, <i>Arguments</i>,\n              <i>tailCall</i>).</li>\n        </ol>\n\n        <p>A <span class=\"nt\">CallExpression</span> evaluation that executes step 4.a.vii is a <i>direct eval</i>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">CallExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">CallExpression</span> <span class=\"nt\">Arguments</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>ref</i> be the result of evaluating <i>CallExpression</i>.</li>\n          <li>Let <i>thisCall</i> be this <i>CallExpression</i></li>\n          <li>Let <i>tailCall</i> be <a href=\"/sec/sec-isintailposition.html\">IsInTailPosition</a>(<i>thisCall</i>). (See <a href=\"/sec/sec-isintailposition.html\">14.6.1</a>)</li>\n          <li>Return <a href=\"/sec/sec-evaluatecall.html\">EvaluateCall</a>(<i>ref</i>, <i>Arguments</i>, <i>tailCall</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-evaluatecall\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.4.2\"><a href=\"/sec/sec-evaluatecall.html\" title=\"link to this section\">12.3.4.2</a></span>\n            Runtime Semantics: EvaluateCall( ref, arguments, tailPosition )</h1>\n\n        <p class=\"normalbefore\">The abstract operation EvaluateCall takes as arguments a value <var>ref</var>, a syntactic grammar\n        production <var>arguments</var>,  and a Boolean argument <var>tailPosition</var>. It performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>func</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>ref</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>func</i>).</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>ref</i>) is <a href=\"/sec/sec-reference-specification-type.html\">Reference</a>, then\n            <ol class=\"block\">\n              <li>If <a href=\"/sec/sec-reference-specification-type.html\">IsPropertyReference</a>(<i>ref</i>) is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Let <i>thisValue</i> be <a href=\"/sec/sec-getthisvalue.html\">GetThisValue</a>(<i>ref</i>).</li>\n                </ol>\n              </li>\n              <li>Else, the base of <i>ref</i> is an <a href=\"/sec/sec-environment-records.html\">Environment Record</a>\n                <ol class=\"block\">\n                  <li>Let <i>refEnv</i> be <a href=\"/sec/sec-reference-specification-type.html\">GetBase</a>(<i>ref</i>).</li>\n                  <li>Let <i>thisValue</i> be <i>refEnv</i>.WithBaseObject().</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Else <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>ref</i>) is not <a href=\"/sec/sec-reference-specification-type.html\">Reference</a>,\n            <ol class=\"block\">\n              <li>Let <i>thisValue</i> be <b>undefined</b>.</li>\n            </ol>\n          </li>\n          <li>Return <a href=\"/sec/sec-evaluatedirectcall.html\">EvaluateDirectCall</a>(<i>func</i>, <i>thisValue</i>, <i>arguments</i>,\n              <i>tailPosition</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-evaluatedirectcall\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.4.3\"><a href=\"/sec/sec-evaluatedirectcall.html\" title=\"link to this section\">12.3.4.3</a></span> Runtime Semantics: EvaluateDirectCall( func, thisValue, arguments,\n            tailPosition )</h1>\n\n        <p class=\"normalbefore\">The abstract operation EvaluateDirectCall takes as arguments a value <var>func</var>, a value\n        <var>thisValue</var>, a syntactic grammar production <var>arguments</var>, and a Boolean argument <var>tailPosition</var>.\n        It performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>argList</i> be ArgumentListEvaluation(<i>arguments</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>argList</i>).</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>func</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>func</i>) is <b>false</b>, throw a <b>TypeError</b> exception.</li>\n          <li>If <i>tailPosition</i> is <b>true</b>, perform <a href=\"/sec/sec-preparefortailcall.html\">PrepareForTailCall</a>().</li>\n          <li>Let <i>result</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>func</i>, <i>thisValue</i>, <i>argList</i>).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: If <i>tailPosition</i> is <b>true</b>, the above call will not\n              return here, but instead evaluation will continue as if the following return has already occurred.</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: If <i>result</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a> then <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>result</i>) is an <a href=\"/sec/sec-ecmascript-language-types.html\">ECMAScript language type</a>.</li>\n          <li>Return <i>result</i>.</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-super-keyword\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.5\"><a href=\"/sec/sec-super-keyword.html\" title=\"link to this section\">12.3.5</a></span> The\n            <code>super</code> Keyword</h1>\n      </div>\n\n      <section id=\"sec-super-keyword-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.5.1\"><a href=\"/sec/sec-super-keyword-runtime-semantics-evaluation.html\" title=\"link to this section\">12.3.5.1</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">SuperProperty</span> <span class=\"geq\">:</span> <code class=\"t\">super</code> <code class=\"t\">[</code> <span class=\"nt\">Expression</span> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>propertyNameReference</i> be the result of evaluating <i>Expression</i>.</li>\n          <li>Let <i>propertyNameValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>propertyNameReference</i>).</li>\n          <li>Let <i>propertyKey</i> be <a href=\"/sec/sec-topropertykey.html\">ToPropertyKey</a>(<i>propertyNameValue</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>propertyKey</i>).</li>\n          <li>If the code matched by the syntactic production that is being evaluated is <a href=\"/sec/sec-strict-mode-code.html\">strict\n              mode code</a>, let <i>strict</i> be <b>true</b>, else let <i>strict</i> be <b>false</b>.</li>\n          <li>Return <a href=\"/sec/sec-makesuperpropertyreference.html\">MakeSuperPropertyReference</a>(<i>propertyKey</i>,\n              <i>strict</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">SuperProperty</span> <span class=\"geq\">:</span> <code class=\"t\">super</code> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>propertyKey</i> be StringValue of <i>IdentifierName</i>.</li>\n          <li>If the code matched by the syntactic production that is being evaluated is <a href=\"/sec/sec-strict-mode-code.html\">strict\n              mode code</a>, let <i>strict</i> be <b>true</b>, else let <i>strict</i> be <b>false</b>.</li>\n          <li>Return <a href=\"/sec/sec-makesuperpropertyreference.html\">MakeSuperPropertyReference</a>(<i>propertyKey</i>,\n              <i>strict</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">SuperCall</span> <span class=\"geq\">:</span> <code class=\"t\">super</code> <span class=\"nt\">Arguments</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>newTarget</i> be <a href=\"/sec/sec-getnewtarget.html\">GetNewTarget</a>().</li>\n          <li>If <i>newTarget</i> is <b>undefined</b>, throw a <b>ReferenceError</b> exception.</li>\n          <li>Let <i>func</i> be <a href=\"/sec/sec-getsuperconstructor.html\">GetSuperConstructor</a>().</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>func</i>).</li>\n          <li>Let <i>argList</i> be ArgumentListEvaluation of <i>Arguments</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>argList</i>).</li>\n          <li>Let <i>result</i> be <a href=\"/sec/sec-construct.html\">Construct</a>(<i>func</i>, <i>argList</i>, <i>newTarget</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>result</i>).</li>\n          <li>Let <i>thisER</i> be <a href=\"/sec/sec-getthisenvironment.html\">GetThisEnvironment</a>( ).</li>\n          <li>Return <i>thisER</i>.<a href=\"/sec/sec-bindthisvalue.html\">BindThisValue</a>(<i>result</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-getsuperconstructor\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.5.2\"><a href=\"/sec/sec-getsuperconstructor.html\" title=\"link to this section\">12.3.5.2</a></span> Runtime Semantics: GetSuperConstructor ( )</h1>\n\n        <p class=\"normalbefore\">The abstract operation GetSuperConstructor performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>envRec</i> be <a href=\"/sec/sec-getthisenvironment.html\">GetThisEnvironment</a>( ).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>envRec</i> is a function <a href=\"/sec/sec-environment-records.html\">Environment Record</a>.</li>\n          <li>Let <i>activeFunction</i> be <i>envRec</i>.[[FunctionObject]].</li>\n          <li>Let <i>superConstructor</i> be <i>activeFunction</i>.[[GetPrototypeOf]]().</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>superConstructor</i>).</li>\n          <li>If <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a>(<i>superConstructor</i>) is <b>false</b>, throw a <b>TypeError</b>\n              exception.</li>\n          <li>Return <i>superConstructor</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-makesuperpropertyreference\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.5.3\"><a href=\"/sec/sec-makesuperpropertyreference.html\" title=\"link to this section\">12.3.5.3</a></span> Runtime Semantics: MakeSuperPropertyReference(propertyKey,\n            strict)</h1>\n\n        <p class=\"normalbefore\">The abstract operation MakeSuperPropertyReference with arguments <var>propertyKey</var> and\n        <var>strict</var> performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>env</i> be <a href=\"/sec/sec-getthisenvironment.html\">GetThisEnvironment</a>( ).</li>\n          <li>If <i>env</i>.HasSuperBinding() is <b>false</b>, throw a <b>ReferenceError</b> exception.</li>\n          <li>Let <i>actualThis</i> be <i>env</i>.GetThisBinding().</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>actualThis</i>).</li>\n          <li>Let <i>baseValue</i> be <i>env</i>.<a href=\"/sec/sec-getsuperbase.html\">GetSuperBase</a>().</li>\n          <li>Let <i>bv</i> be <a href=\"/sec/sec-requireobjectcoercible.html\">RequireObjectCoercible</a>(<i>baseValue</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>bv</i>).</li>\n          <li>Return a value of type <a href=\"/sec/sec-reference-specification-type.html\">Reference</a> that is a Super <a href=\"/sec/sec-reference-specification-type.html\">Reference</a> whose base value is <i>bv</i>, whose referenced name is\n              <i>propertyKey</i>, whose thisValue is <i>actualThis</i>, and whose strict reference flag is <i>strict</i>.</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-argument-lists\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.6\"><a href=\"/sec/sec-argument-lists.html\" title=\"link to this section\">12.3.6</a></span>\n            Argument Lists</h1>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The evaluation of an argument list produces a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> of values (<a href=\"/sec/sec-list-and-record-specification-type.html\">see\n          6.2.1</a>).</p>\n        </div>\n      </div>\n\n      <section id=\"sec-argument-lists-runtime-semantics-argumentlistevaluation\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.6.1\"><a href=\"/sec/sec-argument-lists-runtime-semantics-argumentlistevaluation.html\" title=\"link to this section\">12.3.6.1</a></span> Runtime Semantics: ArgumentListEvaluation</h1>\n\n        <p>See also: <a href=\"/sec/sec-template-literals-runtime-semantics-argumentlistevaluation.html\">12.2.9.2</a></p>\n\n        <div class=\"gp prod\"><span class=\"nt\">Arguments</span> <span class=\"geq\">:</span> <code class=\"t\">(</code> <code class=\"t\">)</code></div>\n        <ol class=\"proc\">\n          <li>Return an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArgumentList</span> <span class=\"geq\">:</span> <span class=\"nt\">AssignmentExpression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>ref</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n          <li>Let <i>arg</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>ref</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>arg</i>).</li>\n          <li>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> whose sole item is <i>arg</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArgumentList</span> <span class=\"geq\">:</span> <code class=\"t\">...</code> <span class=\"nt\">AssignmentExpression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>list</i> be an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>Let <i>spreadRef</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n          <li>Let <i>spreadObj</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>spreadRef</i>).</li>\n          <li>Let <i>iterator</i> be <a href=\"/sec/sec-getiterator.html\">GetIterator</a>(<i>spreadObj</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>iterator</i>).</li>\n          <li>Repeat\n            <ol class=\"block\">\n              <li>Let <i>next</i> be <a href=\"/sec/sec-iteratorstep.html\">IteratorStep</a>(<i>iterator</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n              <li>If <i>next</i> is <b>false</b>, return <i>list</i>.</li>\n              <li>Let <i>nextArg</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>next</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextArg</i>).</li>\n              <li>Append <i>nextArg</i> as the last element of <i>list</i>.</li>\n            </ol>\n          </li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArgumentList</span> <span class=\"geq\">:</span> <span class=\"nt\">ArgumentList</span> <code class=\"t\">,</code> <span class=\"nt\">AssignmentExpression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>precedingArgs</i> be the result of evaluating <i>ArgumentList</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>precedingArgs</i>).</li>\n          <li>Let <i>ref</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n          <li>Let <i>arg</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>ref</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>arg</i>).</li>\n          <li>Append <i>arg</i> to the end of <i>precedingArgs</i>.</li>\n          <li>Return <i>precedingArgs</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArgumentList</span> <span class=\"geq\">:</span> <span class=\"nt\">ArgumentList</span> <code class=\"t\">,</code> <code class=\"t\">...</code> <span class=\"nt\">AssignmentExpression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>precedingArgs</i> be the result of evaluating <i>ArgumentList</i>.</li>\n          <li>Let <i>spreadRef</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n          <li>Let <i>iterator</i> be <a href=\"/sec/sec-getiterator.html\">GetIterator</a>(<a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>spreadRef</i>) ).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>iterator</i>).</li>\n          <li>Repeat\n            <ol class=\"block\">\n              <li>Let <i>next</i> be <a href=\"/sec/sec-iteratorstep.html\">IteratorStep</a>(<i>iterator</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n              <li>If <i>next</i> is <b>false</b>, return <i>precedingArgs</i>.</li>\n              <li>Let <i>nextArg</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>next</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextArg</i>).</li>\n              <li>Append <i>nextArg</i> as the last element of <i>precedingArgs</i>.</li>\n            </ol>\n          </li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-tagged-templates\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.7\"><a href=\"/sec/sec-tagged-templates.html\" title=\"link to this section\">12.3.7</a></span>\n            Tagged Templates</h1>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> A tagged template is a function call where the arguments of the call are derived from a\n          <span class=\"nt\">TemplateLiteral</span> (<a href=\"/sec/sec-template-literals.html\">12.2.9</a>). The actual arguments include a\n          template object (<a href=\"/sec/sec-gettemplateobject.html\">12.2.9.3</a>) and the values produced by evaluating the expressions\n          embedded within the <span class=\"nt\">TemplateLiteral</span>.</p>\n        </div>\n      </div>\n\n      <section id=\"sec-tagged-templates-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.7.1\"><a href=\"/sec/sec-tagged-templates-runtime-semantics-evaluation.html\" title=\"link to this section\">12.3.7.1</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">MemberExpression</span> <span class=\"nt\">TemplateLiteral</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>tagRef</i> be the result of evaluating <i>MemberExpression</i>.</li>\n          <li>Let <i>thisCall</i> be this <i>MemberExpression</i>.</li>\n          <li>Let <i>tailCall</i> be <a href=\"/sec/sec-isintailposition.html\">IsInTailPosition</a>(<i>thisCall</i>). (See <a href=\"/sec/sec-isintailposition.html\">14.6.1</a>)</li>\n          <li>Return <a href=\"/sec/sec-evaluatecall.html\">EvaluateCall</a>(<i>tagRef</i>, <i>TemplateLiteral</i>, <i>tailCall</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">CallExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">CallExpression</span> <span class=\"nt\">TemplateLiteral</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>tagRef</i> be the result of evaluating <i>CallExpression</i>.</li>\n          <li>Let <i>thisCall</i> be this <i>CallExpression</i>.</li>\n          <li>Let <i>tailCall</i> be <a href=\"/sec/sec-isintailposition.html\">IsInTailPosition</a>(<i>thisCall</i>). (See <a href=\"/sec/sec-isintailposition.html\">14.6.1</a>)</li>\n          <li>Return <a href=\"/sec/sec-evaluatecall.html\">EvaluateCall</a>(<i>tagRef</i>, <i>TemplateLiteral</i>, <i>tailCall</i>).</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-meta-properties\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.8\"><a href=\"/sec/sec-meta-properties.html\" title=\"link to this section\">12.3.8</a></span>\n            Meta Properties</h1>\n      </div>\n\n      <section id=\"sec-meta-properties-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum\" id=\"sec-12.3.8.1\"><a href=\"/sec/sec-meta-properties-runtime-semantics-evaluation.html\" title=\"link to this section\">12.3.8.1</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">NewTarget</span> <span class=\"geq\">:</span> <code class=\"t\">new</code> <code class=\"t\">.</code> <code class=\"t\">target</code></div>\n        <ol class=\"proc\">\n          <li>Return <a href=\"/sec/sec-getnewtarget.html\">GetNewTarget</a>().</li>\n        </ol>\n      </section>\n    </section>\n  "}