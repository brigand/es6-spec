{"id":"sec-let-and-const-declarations","html":"\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.1\"><a href=\"/sec/sec-let-and-const-declarations.html\" title=\"link to this section\">13.3.1</a></span> Let and Const Declarations</h1>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> <code>let</code> and <code>const</code> declarations define variables that are scoped to\n          <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>. The variables are created when their containing <a href=\"/sec/sec-lexical-environments.html\">Lexical Environment</a> is instantiated but may not be accessed in any way until the\n          variable&#x2019;s <span class=\"nt\">LexicalBinding</span> is evaluated. A variable defined by a <span class=\"nt\">LexicalBinding</span> with an <span class=\"nt\">Initializer</span> is assigned the value of its <span style=\"font-family: Times New Roman\"><i>Initializer</i>&#x2019;s</span> <span class=\"nt\">AssignmentExpression</span> when\n          the <span class=\"nt\">LexicalBinding</span> is evaluated, not when the variable is created. If a <span class=\"nt\">LexicalBinding</span> in a <code>let</code> declaration does not have an <span class=\"nt\">Initializer</span>\n          the variable is assigned the value <b>undefined</b> when the <span class=\"nt\">LexicalBinding</span> is evaluated.</p>\n        </div>\n\n        <h2>Syntax</h2>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">LexicalDeclaration</span><sub class=\"g-params\">[In, Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">LetOrConst</span> <span class=\"nt\">BindingList</span><sub class=\"g-params\">[?In, ?Yield]</sub> <code class=\"t\">;</code></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">LetOrConst</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">let</code></div>\n          <div class=\"rhs\"><code class=\"t\">const</code></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">BindingList</span><sub class=\"g-params\">[In, Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">LexicalBinding</span><sub class=\"g-params\">[?In, ?Yield]</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">BindingList</span><sub class=\"g-params\">[?In, ?Yield]</sub> <code class=\"t\">,</code> <span class=\"nt\">LexicalBinding</span><sub class=\"g-params\">[?In, ?Yield]</sub></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">LexicalBinding</span><sub class=\"g-params\">[In, Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">BindingIdentifier</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">Initializer</span><sub class=\"g-params\">[?In, ?Yield]</sub><sub class=\"g-opt\">opt</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">BindingPattern</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">Initializer</span><sub class=\"g-params\">[?In, ?Yield]</sub></div>\n        </div>\n      </div>\n\n      <section id=\"sec-let-and-const-declarations-static-semantics-early-errors\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.1.1\"><a href=\"/sec/sec-let-and-const-declarations-static-semantics-early-errors.html\" title=\"link to this section\">13.3.1.1</a></span> Static Semantics:  Early Errors</h1>\n        <div class=\"gp prod\"><span class=\"nt\">LexicalDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">LetOrConst</span> <span class=\"nt\">BindingList</span> <code class=\"t\">;</code></div>\n        <ul>\n          <li>It is a Syntax Error if the BoundNames of <span class=\"nt\">BindingList</span> contains <code>&quot;let&quot;</code>.</li>\n          <li>It is a Syntax Error if the BoundNames of <span class=\"nt\">BindingList</span> contains any duplicate entries.</li>\n        </ul>\n        <div class=\"gp prod\"><span class=\"nt\">LexicalBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span> <span class=\"nt\">Initializer</span><sub class=\"g-opt\">opt</sub></div>\n        <ul>\n          <li>\n            <p>It is a Syntax Error if <span class=\"nt\">Initializer</span> is not present and IsConstantDeclaration of the <span class=\"nt\">LexicalDeclaration</span> containing this production is <span class=\"value\">true</span>.</p>\n          </li>\n        </ul>\n      </section>\n\n      <section id=\"sec-let-and-const-declarations-static-semantics-boundnames\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.1.2\"><a href=\"/sec/sec-let-and-const-declarations-static-semantics-boundnames.html\" title=\"link to this section\">13.3.1.2</a></span> Static Semantics:  BoundNames</h1>\n\n        <p>See also: <a href=\"/sec/sec-identifiers-static-semantics-boundnames.html\">12.1.2</a>, <a href=\"/sec/sec-variable-statement-static-semantics-boundnames.html\">13.3.2.1</a>, <a href=\"/sec/sec-destructuring-binding-patterns-static-semantics-boundnames.html\">13.3.3.1</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-boundnames.html\">13.7.5.2</a>, <a href=\"/sec/sec-function-definitions-static-semantics-boundnames.html\">14.1.3</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-boundnames.html\">14.2.2</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-boundnames.html\">14.4.2</a>, <a href=\"/sec/sec-class-definitions-static-semantics-boundnames.html\">14.5.2</a>, <a href=\"/sec/sec-imports-static-semantics-boundnames.html\">15.2.2.2</a>, <a href=\"/sec/sec-exports-static-semantics-boundnames.html\">15.2.3.2</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">LexicalDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">LetOrConst</span> <span class=\"nt\">BindingList</span> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Return the BoundNames of <i>BindingList</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingList</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingList</span> <code class=\"t\">,</code> <span class=\"nt\">LexicalBinding</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>names</i> be the BoundNames of <i>BindingList</i>.</li>\n          <li>Append to <i>names</i> the elements of the BoundNames of <i>LexicalBinding.</i></li>\n          <li>Return <i>names</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LexicalBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span> <span class=\"nt\">Initializer</span><sub class=\"g-opt\">opt</sub></div>\n        <ol class=\"proc\">\n          <li>Return the BoundNames of <i>BindingIdentifier</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LexicalBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingPattern</span> <span class=\"nt\">Initializer</span></div>\n        <ol class=\"proc\">\n          <li>Return the BoundNames of <i>BindingPattern</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-let-and-const-declarations-static-semantics-isconstantdeclaration\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.1.3\"><a href=\"/sec/sec-let-and-const-declarations-static-semantics-isconstantdeclaration.html\" title=\"link to this section\">13.3.1.3</a></span> Static Semantics:  IsConstantDeclaration</h1>\n\n        <p>See also: <a href=\"/sec/sec-function-definitions-static-semantics-isconstantdeclaration.html\">14.1.10</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-isconstantdeclaration.html\">14.4.8</a>, <a href=\"/sec/sec-class-definitions-static-semantics-isconstantdeclaration.html\">14.5.7</a>, <a href=\"/sec/sec-exports-static-semantics-isconstantdeclaration.html\">15.2.3.7</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">LexicalDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">LetOrConst</span> <span class=\"nt\">BindingList</span> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Return IsConstantDeclaration of <i>LetOrConst</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LetOrConst</span> <span class=\"geq\">:</span> <code class=\"t\">let</code></div>\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LetOrConst</span> <span class=\"geq\">:</span> <code class=\"t\">const</code></div>\n        <ol class=\"proc\">\n          <li>Return <b>true</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-let-and-const-declarations-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum\" id=\"sec-13.3.1.4\"><a href=\"/sec/sec-let-and-const-declarations-runtime-semantics-evaluation.html\" title=\"link to this section\">13.3.1.4</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">LexicalDeclaration</span> <span class=\"geq\">:</span> <span class=\"nt\">LetOrConst</span> <span class=\"nt\">BindingList</span> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>next</i> be the result of evaluating <i>BindingList</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n          <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family:\n              sans-serif\">empty</span>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">BindingList</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingList</span> <code class=\"t\">,</code> <span class=\"nt\">LexicalBinding</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>next</i> be the result of evaluating <i>BindingList</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n          <li>Return the result of evaluating <i>LexicalBinding</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LexicalBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>lhs</i> be <a href=\"/sec/sec-resolvebinding.html\">ResolveBinding</a>(StringValue of <i>BindingIdentifier</i>).</li>\n          <li>Return <a href=\"/sec/sec-initializereferencedbinding.html\">InitializeReferencedBinding</a>(<i>lhs</i>,\n              <b>undefined</b>).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> A static semantics rule ensures that this form of <span class=\"nt\">LexicalBinding</span>\n          never occurs in a <code>const</code> declaration.</p>\n        </div>\n\n        <div class=\"gp prod\"><span class=\"nt\">LexicalBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingIdentifier</span> <span class=\"nt\">Initializer</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>bindingId</i> be StringValue of <i>BindingIdentifier.</i></li>\n          <li>Let <i>lhs</i> be <a href=\"/sec/sec-resolvebinding.html\">ResolveBinding</a>(<i>bindingId</i>).</li>\n          <li>Let <i>rhs</i> be the result of evaluating <i>Initializer</i>.</li>\n          <li>Let <i>value</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>rhs</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>value</i>).</li>\n          <li>If <a href=\"/sec/sec-isanonymousfunctiondefinition.html\">IsAnonymousFunctionDefinition</a>(<i>Initializer)</i> is\n              <b>true</b>, then\n            <ol class=\"block\">\n              <li>Let <i>hasNameProperty</i> be <a href=\"/sec/sec-hasownproperty.html\">HasOwnProperty</a>(<i>value</i>,\n                  <code>&quot;name&quot;</code>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>hasNameProperty</i>).</li>\n              <li>If <i>hasNameProperty</i> is <b>false</b>, perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>value</i>, <i>bindingId</i>).</li>\n            </ol>\n          </li>\n          <li>Return <a href=\"/sec/sec-initializereferencedbinding.html\">InitializeReferencedBinding</a>(<i>lhs</i>, <i>value</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LexicalBinding</span> <span class=\"geq\">:</span> <span class=\"nt\">BindingPattern</span> <span class=\"nt\">Initializer</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>rhs</i> be the result of evaluating <i>Initializer</i>.</li>\n          <li>Let <i>value</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>rhs</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>value</i>).</li>\n          <li>Let <i>env</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n          <li>Return the result of performing BindingInitialization for <i>BindingPattern</i> using <i>value</i> and <i>env</i> as\n              the <i>arguments</i>.</li>\n        </ol>\n      </section>\n    "}