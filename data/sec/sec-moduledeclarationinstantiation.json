{"id":"sec-moduledeclarationinstantiation","html":"\n          <h1><span class=\"secnum\" id=\"sec-15.2.1.16.4\"><a href=\"/sec/sec-moduledeclarationinstantiation.html\" title=\"link to this section\">15.2.1.16.4</a></span> ModuleDeclarationInstantiation( ) Concrete Method</h1>\n\n          <p class=\"normalbefore\">The ModuleDeclarationInstantiation concrete method of a <a href=\"/sec/sec-source-text-module-records.html\">Source Text Module Record</a> performs the following steps:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>module</i> be this <a href=\"/sec/sec-source-text-module-records.html\">Source Text Module Record</a>.</li>\n            <li>Let <i>realm</i> be <i>module</i>.[[Realm]].</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>realm</i> is not <b>undefined</b>.</li>\n            <li>Let <i>code</i> be <i>module</i>.[[ECMAScriptCode]].</li>\n            <li>If <i>module</i>.[[Environment]] is not <b>undefined</b>, return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family: sans-serif\">empty</span>).</li>\n            <li>Let <i>env</i> be <a href=\"/sec/sec-newmoduleenvironment.html\">NewModuleEnvironment</a>(<i>realm</i>.[[globalEnv]]).</li>\n            <li>Set <i>module</i>.[[Environment]] to <i>env</i>.</li>\n            <li>For each String <i>required</i> that is an element of <i>module</i>.[[RequestedModules]] do,\n              <ol class=\"block\">\n                <li>NOTE:  Before instantiating a module, all of the modules it requested must be available. An implementation may\n                    perform this test at any time prior to this point,</li>\n                <li>Let <i>requiredModule</i> be <a href=\"/sec/sec-hostresolveimportedmodule.html\">HostResolveImportedModule</a>(<i>module</i>, <i>required</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>requiredModule</i>).</li>\n                <li>Let <i>status</i> be <i>requiredModule</i>.ModuleDeclarationInstantiation().</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n              </ol>\n            </li>\n            <li>For each ExportEntry Record <i>e</i> in <i>module</i>.[[IndirectExportEntries]], do\n              <ol class=\"block\">\n                <li>Let <i>resolution</i> be <i>module</i>.<a href=\"/sec/sec-resolveexport.html\">ResolveExport</a>(<i>e</i>.[[ExportName]],\n                    &#xAB;&#x200D; &#xBB;, &#xAB;&#x200D; &#xBB;).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>resolution</i>).</li>\n                <li>If <i>resolution</i> is <b>null</b> or <i>resolution</i> is <code>&quot;ambiguous&quot;</code>, throw a\n                    <b>SyntaxError</b> exception.</li>\n              </ol>\n            </li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: all named exports from <i>module</i> are resolvable.</li>\n            <li>Let <i>envRec</i> be <i>env</i>&#x2019;s <a href=\"/sec/sec-lexical-environments.html\">EnvironmentRecord</a>.</li>\n            <li>For each ImportEntry Record <i>in</i> in <i>module</i>.[[ImportEntries]], do\n              <ol class=\"block\">\n                <li>Let <i>importedModule</i> be <a href=\"/sec/sec-hostresolveimportedmodule.html\">HostResolveImportedModule</a>(<i>module</i>,\n                    <i>in</i>.[[ModuleRequest]]).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>importedModule</i>).</li>\n                <li>If <i>in</i>.[[ImportName]] is <code>&quot;*&quot;</code>, then\n                  <ol class=\"block\">\n                    <li>Let <i>namespace</i> be <a href=\"/sec/sec-getmodulenamespace.html\">GetModuleNamespace</a>(<i>importedModule</i>).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>module</i>).</li>\n                    <li>Let <i>status</i> be <i>envRec</i>.CreateImmutableBinding(<i>in</i>.[[LocalName]], <b>true</b>).</li>\n                    <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <i>status</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                    <li><a href=\"/sec/sec-call.html\">Call</a> <i>envRec</i>.InitializeBinding(<i>in</i>.[[LocalName]],\n                        <i>namespace</i>).</li>\n                  </ol>\n                </li>\n                <li>else,\n                  <ol class=\"block\">\n                    <li>Let <i>resolution</i> be <i>importedModule</i>.<a href=\"/sec/sec-resolveexport.html\">ResolveExport</a>(<i>in</i>.[[ImportName]], &#xAB;&#xA0;&#xBB;, &#xAB;&#x200D;\n                        &#xBB;).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>resolution</i>).</li>\n                    <li>If <i>resolution</i> is <b>null</b> or <i>resolution</i> is <code>&quot;ambiguous&quot;</code>, throw a\n                        <b>SyntaxError</b> exception.</li>\n                    <li><a href=\"/sec/sec-call.html\">Call</a> <i>envRec</i>.<a href=\"/sec/sec-createimportbinding.html\">CreateImportBinding</a>(<i>in</i>.[[LocalName]],\n                        <i>resolution</i>.[[module]], <i>resolution</i>.[[bindingName]]).</li>\n                  </ol>\n                </li>\n              </ol>\n            </li>\n            <li>Let <i>varDeclarations</i> be the VarScopedDeclarations of <i>code</i>.</li>\n            <li>For each element <i>d</i> in <i>varDeclarations</i> do\n              <ol class=\"block\">\n                <li>For each element <i>dn</i> of the BoundNames of <i>d</i> do\n                  <ol class=\"block\">\n                    <li>Let <i>status</i> be <i>envRec</i>.CreateMutableBinding(<i>dn</i>, <b>false</b>).</li>\n                    <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                    <li><a href=\"/sec/sec-call.html\">Call</a> <i>envRec</i>.InitializeBinding(<i>dn</i>, <b>undefined</b>).</li>\n                  </ol>\n                </li>\n              </ol>\n            </li>\n            <li>Let <i>lexDeclarations</i> be the LexicallyScopedDeclarations of <i>code</i>.</li>\n            <li>For each element <i>d</i> in <i>lexDeclarations</i> do\n              <ol class=\"block\">\n                <li>For each element <i>dn</i> of the BoundNames of <i>d</i> do\n                  <ol class=\"block\">\n                    <li>If  IsConstantDeclaration of <i>d</i> is <b>true</b>, then\n                      <ol class=\"block\">\n                        <li>Let <i>status</i> be <i>envRec</i>.CreateImmutableBinding(<i>dn</i>, <b>true</b>).</li>\n                      </ol>\n                    </li>\n                    <li>Else,\n                      <ol class=\"block\">\n                        <li>Let <i>status</i> be <i>envRec</i>.CreateMutableBinding(<i>dn</i>, <b>false</b>).</li>\n                      </ol>\n                    </li>\n                    <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                    <li>If <i>d</i> is a <i>GeneratorDeclaration</i> production or a <i>FunctionDeclaration</i> production, then\n                      <ol class=\"block\">\n                        <li>Let <i>fo</i> be the result of performing  InstantiateFunctionObject  for <i>d</i> with argument\n                            <i>env</i>.</li>\n                        <li><a href=\"/sec/sec-call.html\">Call</a> <i>envRec</i>.InitializeBinding(<i>dn</i>, <i>fo</i>).</li>\n                      </ol>\n                    </li>\n                  </ol>\n                </li>\n              </ol>\n            </li>\n            <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family:\n                sans-serif\">empty</span>).</li>\n          </ol>\n        "}