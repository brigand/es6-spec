{"id":"sec-moduleevaluation","html":"\n          <h1><span class=\"secnum\" id=\"sec-15.2.1.16.5\"><a href=\"/sec/sec-moduleevaluation.html\" title=\"link to this section\">15.2.1.16.5</a></span> ModuleEvaluation() Concrete Method</h1>\n\n          <p class=\"normalbefore\">The ModuleEvaluation concrete method of a <a href=\"/sec/sec-source-text-module-records.html\">Source Text\n          Module Record</a> performs the following steps:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>module</i> be this <a href=\"/sec/sec-source-text-module-records.html\">Source Text Module Record</a>.</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-moduledeclarationinstantiation.html\">ModuleDeclarationInstantiation</a> has already been invoked on\n                <i>module</i> and successfully completed.</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>module</i>.[[Realm]] is not <b>undefined</b>.</li>\n            <li>If <i>module.</i>[[Evaluated]] is <b>true</b>, return <b>undefined</b>.</li>\n            <li>Set <i>module.</i>[[Evaluated]] to <b>true</b>.</li>\n            <li>For each String <i>required</i> that is an element of <i>module</i>.[[RequestedModules]] do,\n              <ol class=\"block\">\n                <li>Let <i>requiredModule</i> be <a href=\"/sec/sec-hostresolveimportedmodule.html\">HostResolveImportedModule</a>(<i>module</i>, <i>required</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>requiredModule</i>).</li>\n                <li>Let <i>status</i> be <i>requiredModule.</i>ModuleEvaluation().</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n              </ol>\n            </li>\n            <li>Let <i>moduleCxt</i> be a new <a href=\"/sec/sec-execution-contexts.html\">ECMAScript code execution context</a>.</li>\n            <li>Set the Function of <i>moduleCxt</i> to <b>null</b>.</li>\n            <li>Set the <a href=\"/sec/sec-code-realms.html\">Realm</a> of <i>moduleCxt</i> to <i>module</i>.[[Realm]].</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>module</i> has been linked and declarations in its module\n                environment have been instantiated.</li>\n            <li>Set the <a href=\"/sec/sec-execution-contexts.html\">VariableEnvironment</a> of <i>moduleCxt</i> to\n                <i>module</i>.[[Environment]].</li>\n            <li>Set the <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> of <i>moduleCxt</i> to\n                <i>module</i>.[[Environment]].</li>\n            <li><a href=\"/sec/sec-execution-contexts.html\">Suspend</a> <a href=\"/sec/sec-execution-contexts.html\">the currently running execution\n                context</a>.</li>\n            <li>Push <i>moduleCxt</i> on to <a href=\"/sec/sec-execution-contexts.html\">the execution context stack</a>; <i>moduleCxt</i> is\n                now <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n            <li>Let <i>result</i> be the result of evaluating <i>module</i>.[[ECMAScriptCode]].</li>\n            <li><a href=\"/sec/sec-execution-contexts.html\">Suspend</a> <i>moduleCxt</i> and remove it from <a href=\"/sec/sec-execution-contexts.html\">the execution context stack</a>.</li>\n            <li>Resume the context that is now on the top of <a href=\"/sec/sec-execution-contexts.html\">the execution context stack</a> as\n                <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n            <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>result</i>).</li>\n          </ol>\n        "}