{"id":"sec-number-objects","html":"\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-20.1\"><a href=\"/sec/sec-number-objects.html\" title=\"link to this section\">20.1</a></span> Number\n          Objects</h1>\n    </div>\n\n    <section id=\"sec-number-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.1\"><a href=\"/sec/sec-number-constructor.html\" title=\"link to this section\">20.1.1</a></span>\n            The Number Constructor</h1>\n\n        <p>The Number constructor is the %Number% intrinsic object and the initial value of the <code>Number</code> property of\n        the global object. When called as a constructor, it creates and initializes a new Number object. When <code>Number</code>\n        is called as a function rather than as a constructor, it performs a type conversion.</p>\n\n        <p>The <code>Number</code> constructor is designed to be subclassable. It may be used as the value of an\n        <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified\n        <code>Number</code> behaviour must include a <code>super</code> call to the <code>Number</code> constructor to create and\n        initialize the subclass instance with a [[NumberData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n        slot</a>.</p>\n      </div>\n\n      <section id=\"sec-number-constructor-number-value\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.1.1\"><a href=\"/sec/sec-number-constructor-number-value.html\" title=\"link to this section\">20.1.1.1</a></span> Number ( [ value ] )</h1>\n\n        <p class=\"normalbefore\">When <code>Number</code> is called with argument <var>number</var>, the following steps are\n        taken:</p>\n\n        <ol class=\"proc\">\n          <li>If no arguments were passed to this function invocation, let <i>n</i> be +0.</li>\n          <li>Else, let <i>n</i> be <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<i>value</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>n</i>).</li>\n          <li>If NewTarget is <b>undefined</b><i>,</i> return <i>n</i>.</li>\n          <li>Let <i>O</i> be <a href=\"/sec/sec-ordinarycreatefromconstructor.html\">OrdinaryCreateFromConstructor</a>(NewTarget,\n              <code>&quot;%NumberPrototype%&quot;</code>, &#xAB;[[NumberData]]&#xBB; ).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>O</i>).</li>\n          <li>Set the value of <i>O&#x2019;s</i> [[NumberData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a> to <i>n</i>.</li>\n          <li>Return <i>O</i>.</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-number-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.2\"><a href=\"/sec/sec-properties-of-the-number-constructor.html\" title=\"link to this section\">20.1.2</a></span> Properties of the Number Constructor</h1>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        Number constructor is the intrinsic object %FunctionPrototype% (<a href=\"/sec/sec-properties-of-the-function-prototype-object.html\">19.2.3</a>).</p>\n\n        <p>Besides the <code>length</code> property (whose value is <b>1</b>), the Number constructor has the following\n        properties:</p>\n      </div>\n\n      <section id=\"sec-number.epsilon\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.2.1\"><a href=\"/sec/sec-number.epsilon.html\" title=\"link to this section\">20.1.2.1</a></span>\n            Number.EPSILON</h1>\n\n        <p>The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1 that is representable as\n        a Number value, which is approximately 2.2204460492503130808472633361816 x 10&#x200D;<sup>&#x2212;&#x200D;16</sup>.</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-number.isfinite\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.2.2\"><a href=\"/sec/sec-number.isfinite.html\" title=\"link to this section\">20.1.2.2</a></span>\n            Number.isFinite ( number )</h1>\n\n        <p class=\"normalbefore\">When the <code>Number.isFinite</code> is called with one argument <var>number</var>, the following\n        steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>number</i>) is not Number, return <b>false</b>.</li>\n          <li>If <i>number</i> is <b>NaN</b>, <b>+&#x221E;</b>, or <b>&#x2212;&#x221E;</b>, return <b>false</b>.</li>\n          <li>Otherwise, return <b>true</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-number.isinteger\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.2.3\"><a href=\"/sec/sec-number.isinteger.html\" title=\"link to this section\">20.1.2.3</a></span> Number.isInteger ( number )</h1>\n\n        <p class=\"normalbefore\">When the <code>Number.isInteger</code> is called with one argument <var>number</var>, the\n        following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>number</i>) is not Number, return <b>false</b>.</li>\n          <li>If <i>number</i> is <b>NaN</b>, <b>+&#x221E;</b>, or <b>&#x2212;&#x221E;</b>, return <b>false</b>.</li>\n          <li>Let <i>integer</i> be <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>number</i>).</li>\n          <li>If <i>integer</i> is not equal to <i>number</i>, return <b>false</b>.</li>\n          <li>Otherwise, return <b>true</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-number.isnan\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.2.4\"><a href=\"/sec/sec-number.isnan.html\" title=\"link to this section\">20.1.2.4</a></span>\n            Number.isNaN ( number )</h1>\n\n        <p class=\"normalbefore\">When the <code>Number.isNaN</code> is called with one argument <var>number</var>, the following\n        steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>number</i>) is not Number, return <b>false</b>.</li>\n          <li>If <i>number</i> is <b>NaN</b>, return <b>true</b>.</li>\n          <li>Otherwise, return <b>false</b>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> This function differs from the global isNaN function (<a href=\"/sec/sec-isnan-number.html\">18.2.3</a>) is that it does not convert its argument to a Number before determining whether it\n          is NaN.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-number.issafeinteger\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.2.5\"><a href=\"/sec/sec-number.issafeinteger.html\" title=\"link to this section\">20.1.2.5</a></span> Number.isSafeInteger ( number )</h1>\n\n        <p class=\"normalbefore\">When the <code>Number.isSafeInteger</code> is called with one argument <var>number</var>, the\n        following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>number</i>) is not Number, return <b>false</b>.</li>\n          <li>If <i>number</i> is <b>NaN</b>, <b>+&#x221E;</b>, or <b>&#x2212;&#x221E;</b>, return <b>false</b>.</li>\n          <li>Let <i>integer</i> be <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>number</i>).</li>\n          <li>If <i>integer</i> is not equal to <i>number</i>, return <b>false</b>.</li>\n          <li>If <a href=\"/sec/sec-algorithm-conventions.html\">abs</a>(<i>integer</i>) &#x2264; 2<sup>53</sup>&#x2212;1, return\n              <b>true</b>.</li>\n          <li>Otherwise, return <b>false</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-number.max_safe_integer\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.2.6\"><a href=\"/sec/sec-number.max_safe_integer.html\" title=\"link to this section\">20.1.2.6</a></span> Number.MAX_SAFE_INTEGER</h1>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span>   The value of <code>Number.MAX_SAFE_INTEGER</code> is the largest integer n such that n\n          and n + 1 are both exactly representable as a Number value.</p>\n        </div>\n\n        <p>The value of Number.MAX_SAFE_INTEGER is 9007199254740991 (2<sup>53</sup>&#x2212;1).</p>\n\n        <p><br>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-number.max_value\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.2.7\"><a href=\"/sec/sec-number.max_value.html\" title=\"link to this section\">20.1.2.7</a></span> Number.MAX_VALUE</h1>\n\n        <p>The value of <code>Number.MAX_VALUE</code> is the largest positive finite value of the Number type, which is\n        approximately <span style=\"font-family: Times New Roman\">1.7976931348623157&#xA0;&#xD7;&#xA0;10<sup>308</sup></span>.</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-number.min_safe_integer\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.2.8\"><a href=\"/sec/sec-number.min_safe_integer.html\" title=\"link to this section\">20.1.2.8</a></span> Number.MIN_SAFE_INTEGER</h1>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span>   The value of <code>Number.MIN_SAFE_INTEGER</code> is the smallest integer n such that\n          n and n &#x2212; 1 are both exactly representable as a Number value.</p>\n        </div>\n\n        <p>The value of Number.MIN_SAFE_INTEGER is &#x2212;9007199254740991 (&#x2212;(2<sup>53</sup>&#x2212;1)).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-number.min_value\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.2.9\"><a href=\"/sec/sec-number.min_value.html\" title=\"link to this section\">20.1.2.9</a></span> Number.MIN_VALUE</h1>\n\n        <p>The value of <code>Number.MIN_VALUE</code> is the smallest positive value of the Number type, which is approximately\n        <span style=\"font-family: Times New Roman\">5&#xA0;&#xD7;&#xA0;10<sup>&#x2212;324</sup></span>.</p>\n\n        <p>In the IEEE 754-2008 double precision binary representation, the smallest possible value is a denormalized number. If\n        an implementation does not support denormalized values, the value of <code>Number.MIN_VALUE</code> must be the smallest\n        non-zero positive value that can actually be represented by the implementation.</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-number.nan\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.2.10\"><a href=\"/sec/sec-number.nan.html\" title=\"link to this section\">20.1.2.10</a></span>\n            Number.NaN</h1>\n\n        <p>The value of <code>Number.NaN</code> is <b>NaN</b>.</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-number.negative_infinity\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.2.11\"><a href=\"/sec/sec-number.negative_infinity.html\" title=\"link to this section\">20.1.2.11</a></span> Number.NEGATIVE_INFINITY</h1>\n\n        <p>The value of Number.NEGATIVE_INFINITY is &#x2212;&#x221E;.</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-number.parsefloat\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.2.12\"><a href=\"/sec/sec-number.parsefloat.html\" title=\"link to this section\">20.1.2.12</a></span> Number.parseFloat ( string )</h1>\n\n        <p>The value of the <code>Number.parseFloat</code> data property is the same built-in function object that is the value of\n        the <code>parseFloat</code> property of the global object defined in <a href=\"/sec/sec-parsefloat-string.html\">18.2.4</a>.</p>\n      </section>\n\n      <section id=\"sec-number.parseint\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.2.13\"><a href=\"/sec/sec-number.parseint.html\" title=\"link to this section\">20.1.2.13</a></span> Number.parseInt ( string, radix )</h1>\n\n        <p>The value of the <code>Number.parseInt</code> data property is the same built-in function object that is the value of\n        the <code>parseInt</code> property of the global object defined in <a href=\"/sec/sec-parseint-string-radix.html\">18.2.5</a>.</p>\n      </section>\n\n      <section id=\"sec-number.positive_infinity\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.2.14\"><a href=\"/sec/sec-number.positive_infinity.html\" title=\"link to this section\">20.1.2.14</a></span> Number.POSITIVE_INFINITY</h1>\n\n        <p>The value of Number.POSITIVE_INFINITY is +&#x221E;.</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-number.prototype\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.2.15\"><a href=\"/sec/sec-number.prototype.html\" title=\"link to this section\">20.1.2.15</a></span> Number.prototype</h1>\n\n        <p>The initial value of <code>Number.prototype</code> is the intrinsic object %NumberPrototype% (<a href=\"/sec/sec-properties-of-the-number-prototype-object.html\">20.1.3</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-number-prototype-object\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.3\"><a href=\"/sec/sec-properties-of-the-number-prototype-object.html\" title=\"link to this section\">20.1.3</a></span> Properties of the Number Prototype Object</h1>\n\n        <p>The Number prototype object is the intrinsic object %NumberPrototype%. The Number prototype object is an ordinary\n        object. It is not a Number instance and does not have a [[NumberData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</p>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        Number prototype object is the intrinsic object %ObjectPrototype% (<a href=\"/sec/sec-properties-of-the-object-prototype-object.html\">19.1.3</a>).</p>\n\n        <p>Unless explicitly stated otherwise, the methods of the Number prototype object defined below are not generic and the\n        <b>this</b> value passed to them must be either a Number value or an object that has a [[NumberData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> that has been initialized to a Number value.</p>\n\n        <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New\n        Roman\">thisNumberValue(<i>value</i>)</span> performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>value</i>) is Number, return <i>value</i>.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>value</i>) is Object and <i>value</i> has a\n              [[NumberData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>, then\n            <ol class=\"block\">\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>value</i>&#x2019;s [[NumberData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is a Number value.</li>\n              <li>Return the value of <i>value&#x2019;s</i> [[NumberData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            </ol>\n          </li>\n          <li>Throw a <b>TypeError</b> exception.</li>\n        </ol>\n\n        <p>The phrase &#x201C;this Number value&#x201D; within the specification of a method refers to the result returned  by\n        calling the abstract operation <span style=\"font-family: Times New Roman\">thisNumberValue</span> with the <b>this</b>\n        value of the method invocation passed as the argument.</p>\n      </div>\n\n      <section id=\"sec-number.prototype.constructor\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.3.1\"><a href=\"/sec/sec-number.prototype.constructor.html\" title=\"link to this section\">20.1.3.1</a></span> Number.prototype.constructor</h1>\n\n        <p>The initial value of <code>Number.prototype.constructor</code> is the intrinsic object %Number%.</p>\n      </section>\n\n      <section id=\"sec-number.prototype.toexponential\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.3.2\"><a href=\"/sec/sec-number.prototype.toexponential.html\" title=\"link to this section\">20.1.3.2</a></span> Number.prototype.toExponential ( fractionDigits )</h1>\n\n        <p class=\"normalbefore\">Return a String containing this Number value represented in decimal exponential notation with one\n        digit before the significand&apos;s decimal point and <var>fractionDigits</var> digits after the significand&apos;s decimal point.\n        If <var>fractionDigits</var> is <b>undefined</b>, include as many significand digits as necessary to uniquely specify the\n        Number (just like in <a href=\"/sec/sec-tostring.html\">ToString</a> except that in this case the Number is always output in\n        exponential notation). Specifically, perform the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>x</i> be thisNumberValue(<b>this</b> value).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>x</i>).</li>\n          <li>Let <i>f</i> be <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>fractionDigits</i>).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>f</i> is 0, when <i>fractionDigits</i> is <b>undefined</b>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>f</i>).</li>\n          <li>If <i>x</i> is <b>NaN</b>, return the String <code>&quot;NaN&quot;</code>.</li>\n          <li>Let <i>s</i> be the empty String.</li>\n          <li>If <i>x</i> <i>&lt;</i> 0, then\n            <ol class=\"block\">\n              <li>Let <i>s</i> be <code>&quot;-&quot;</code>.</li>\n              <li>Let <i>x</i> = &#x2013;<i>x</i>.</li>\n            </ol>\n          </li>\n          <li>If <i>x</i> = +&#x221E;, then\n            <ol class=\"block\">\n              <li>Return the concatenation of the Strings <i>s</i> and <code>&quot;Infinity&quot;</code>.</li>\n            </ol>\n          </li>\n          <li>If <i>f</i> &lt; 0 or <i>f</i> &gt; 20, throw a <b>RangeError</b> exception. However, an implementation is permitted\n              to extend the behaviour of <code>toExponential</code> for values of <i>f</i> less than 0 or greater than 20. In this\n              case <code>toExponential</code> would not necessarily throw <b>RangeError</b> for such values.</li>\n          <li>If <i>x</i> = 0, then\n            <ol class=\"block\">\n              <li>Let <i>m</i> be the String consisting of <i>f</i>+1 occurrences of the code unit 0x0030.</li>\n              <li>Let <i>e</i> = 0.</li>\n            </ol>\n          </li>\n          <li>Else <i>x</i> &#x2260; 0,\n            <ol class=\"block\">\n              <li>If <i>fractionDigits</i> is not <b>undefined</b>, then\n                <ol class=\"block\">\n                  <li>Let <i>e</i> and <i>n</i> be integers such that 10<sup><i>f</i></sup> &#x2264; <i>n</i> &lt;\n                      10<sup><i>f</i>+1</sup> and for which the exact mathematical value of <i>n</i> &#xD7;\n                      10<sup><i>e</i>&#x2013;<i>f</i></sup> &#x2013; <i>x</i> is as close to zero as possible. If there are two such\n                      sets of <i>e</i> and <i>n</i>, pick the <i>e</i> and <i>n</i> for which <i>n</i> &#xD7;\n                      10<sup><i>e</i>&#x2013;<i>f</i></sup> is larger.</li>\n                </ol>\n              </li>\n              <li>Else <i>fractionDigits</i> is <b>undefined</b>,\n                <ol class=\"block\">\n                  <li>Let <i>e</i>, <i>n</i>, and <i>f</i> be integers such that <i>f</i> &#x2265; 0, 10<sup><i>f</i></sup> &#x2264;\n                      <i>n</i> &lt; 10<sup><i>f</i>+1</sup>, the Number value for n &#xD7; 10<sup><i>e</i>&#x2013;<i>f</i></sup>\n                      is <i>x</i>, and <i>f</i> is as small as possible. Note that the decimal representation of <i>n</i> has\n                      <i>f</i>+1 digits, <i>n</i> is not divisible by 10, and the least significant digit of <i>n</i> is not\n                      necessarily uniquely determined by these criteria.</li>\n                </ol>\n              </li>\n              <li>Let <i>m</i> be the String consisting of the digits of the decimal representation of <i>n</i> (in order, with no\n                  leading zeroes).</li>\n            </ol>\n          </li>\n          <li>If <i>f</i> &#x2260; 0, then\n            <ol class=\"block\">\n              <li>Let <i>a</i> be the first element of <i>m</i>, and let <i>b</i> be the remaining <i>f</i> elements of\n                  <i>m</i>.</li>\n              <li>Let <i>m</i> be the concatenation of the three Strings <i>a</i>, <code>&quot;.&quot;</code>, and <i>b</i>.</li>\n            </ol>\n          </li>\n          <li>If <i>e</i> = 0, then\n            <ol class=\"block\">\n              <li>Let <i>c</i> = <code>&quot;+&quot;.</code></li>\n              <li>Let <i>d</i> = <code>&quot;0&quot;.</code></li>\n            </ol>\n          </li>\n          <li>Else\n            <ol class=\"block\">\n              <li>If <i>e</i> &gt; 0, let <i>c</i> = <code>&quot;+&quot;.</code></li>\n              <li>Else <i>e</i> &#x2264; 0,\n                <ol class=\"block\">\n                  <li>Let <i>c</i> = <code>&quot;-&quot;</code>.</li>\n                  <li>Let <i>e</i> = &#x2013;<i>e</i>.</li>\n                </ol>\n              </li>\n              <li>Let <i>d</i> be the String consisting of the digits of the decimal representation of <i>e</i> (in order, with no\n                  leading zeroes).</li>\n            </ol>\n          </li>\n          <li>Let <i>m</i> be the concatenation of the four Strings <i>m</i>, <code>&quot;e&quot;</code>, <i>c</i>, and <i>d</i>.</li>\n          <li>Return the concatenation of the Strings <i>s</i> and <i>m</i>.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>toExponential</code> method is <b>1</b>.</p>\n\n        <p>If the <code>toExponential</code> method is called with more than one argument, then the behaviour is undefined (see <a href=\"/sec/sec-ecmascript-standard-built-in-objects.html\">clause 17</a>).</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> For implementations that provide more accurate conversions than required by the rules\n          above, it is recommended that the following alternative version of step 12.b.i be used as a guideline:</p>\n\n          <p class=\"special3\">i.\tLet <i>e</i>, <i>n</i>, and <i>f</i> be integers such that <i>f</i> &#x2265; 0,\n          10<sup><i>f</i></sup> &#x2264; n &lt; 10<sup><i>f</i>+1</sup>, the Number value for n &#xD7;\n          10<sup><i>e</i>&#x2013;<i>f</i></sup> is x, and <i>f</i> is as small as possible. If there are multiple possibilities for\n          <i>n</i>, choose the value of <i>n</i> for which <i>n</i> &#xD7; 10<sup><i>e</i>&#x2013;<i>f</i></sup> is closest in\n          value to <i>x</i>. If there are two such possible values of <i>n</i>, choose the one that is even.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-number.prototype.tofixed\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.3.3\"><a href=\"/sec/sec-number.prototype.tofixed.html\" title=\"link to this section\">20.1.3.3</a></span> Number.prototype.toFixed ( fractionDigits )</h1>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> <code>toFixed</code> returns a String containing this Number value represented in\n          decimal fixed-point notation with <var>fractionDigits</var> digits after the decimal point. If <var>fractionDigits</var>\n          is <b>undefined</b>, 0 is assumed.</p>\n        </div>\n\n        <p class=\"normalbefore\">The following steps are performed:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>x</i> be thisNumberValue(<b>this</b> value).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>x</i>).</li>\n          <li>Let <i>f</i> be <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>fractionDigits</i>). (If <i>fractionDigits</i> is\n              <b>undefined</b>, this step produces the value <code>0</code>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>f</i>).</li>\n          <li>If <i>f</i> &lt; 0 or <i>f</i> &gt; 20, throw a <b>RangeError</b> exception. However, an implementation is permitted\n              to extend the behaviour of <code>toFixed</code> for values of <i>f</i> less than 0 or greater than 20. In this case\n              <code>toFixed</code> would not necessarily throw <b>RangeError</b> for such values.</li>\n          <li>If <i>x</i> is <b>NaN</b>, return the String <code>&quot;NaN&quot;</code>.</li>\n          <li>Let <i>s</i> be the empty String.</li>\n          <li>If <i>x</i> &lt; 0, then\n            <ol class=\"block\">\n              <li>Let <i>s</i> be &quot;<code>-</code>&quot;.</li>\n              <li>Let <i>x</i> = &#x2013;<i>x</i>.</li>\n            </ol>\n          </li>\n          <li>If <i>x</i> &#x2265; 10<sup>21</sup>, then\n            <ol class=\"block\">\n              <li>Let <i>m</i> = <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>x</i>).</li>\n            </ol>\n          </li>\n          <li>Else <i>x</i> &lt; 10<sup>21</sup>,\n            <ol class=\"block\">\n              <li>Let <i>n</i> be an integer for which the exact mathematical value of <i>n</i> &#xF7; 10<sup>f</sup> &#x2013;\n                  <i>x</i> is as close to zero as possible. If there are two such <i>n</i>, pick the larger <i>n</i>.</li>\n              <li>If <i>n</i> = 0, let <i>m</i> be the String <code>&quot;0&quot;</code>. Otherwise, let <i>m</i> be the String consisting\n                  of the digits of the decimal representation of <i>n</i> (in order, with no leading zeroes).</li>\n              <li>If <i>f</i> &#x2260; 0, then\n                <ol class=\"block\">\n                  <li>Let <i>k</i> be the number of elements in <i>m</i>.</li>\n                  <li>If <i>k</i> &#x2264; <i>f</i>, then\n                    <ol class=\"block\">\n                      <li>Let <i>z</i> be the String consisting of <i>f</i>+1&#x2013;<i>k</i> occurrences of the code unit\n                          0x0030.</li>\n                      <li>Let <i>m</i> be the concatenation of Strings <i>z</i> and <i>m</i>.</li>\n                      <li>Let <i>k</i> = <i>f</i> + 1.</li>\n                    </ol>\n                  </li>\n                  <li>Let <i>a</i> be the first <i>k</i>&#x2013;<i>f</i> elements of <i>m</i>, and let <i>b</i> be the remaining\n                      <i>f</i> elements of <i>m</i>.</li>\n                  <li>Let <i>m</i> be the concatenation of the three Strings <i>a</i>, <code>&quot;.&quot;</code>, and <i>b</i>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Return the concatenation of the Strings <i>s</i> and <i>m</i>.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>toFixed</code> method is <b>1</b>.</p>\n\n        <p>If the <code>toFixed</code> method is called with more than one argument, then the behaviour is undefined (see <a href=\"/sec/sec-ecmascript-standard-built-in-objects.html\">clause&#xA0;17</a>).</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> The output of <code>toFixed</code> may be more precise than <code>toString</code> for\n          some values because toString only prints enough significant digits to distinguish the number from adjacent number\n          values. For example,</p>\n\n          <p><code>(1000000000000000128).toString()</code> returns <code>&quot;1000000000000000100&quot;</code>,\n          while<br><code>(1000000000000000128).toFixed(0)</code> returns <code>&quot;1000000000000000128&quot;</code>.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-number.prototype.tolocalestring\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.3.4\"><a href=\"/sec/sec-number.prototype.tolocalestring.html\" title=\"link to this section\">20.1.3.4</a></span> Number.prototype.toLocaleString( [ reserved1 [ , reserved2 ] ])</h1>\n\n        <p>An ECMAScript implementation that includes the ECMA-402 Internationalization API must implement the\n        <code>Number.prototype.toLocaleString</code> method as specified in the ECMA-402 specification. If an ECMAScript\n        implementation does not include the ECMA-402 API the following specification of the <code>toLocaleString</code> method is\n        used.</p>\n\n        <p>Produces a String value that represents this Number value formatted according to the conventions of the host\n        environment&#x2019;s current locale. This function is implementation-dependent, and it is permissible, but not encouraged,\n        for it to return the same thing as <code>toString</code>.</p>\n\n        <p>The meanings of the optional parameters to this method are defined in the ECMA-402 specification; implementations that\n        do not include ECMA-402 support must not use those parameter positions for anything else.</p>\n\n        <p>The <code>length</code> property of the <code>toLocaleString</code> method is <b>0</b>.</p>\n      </section>\n\n      <section id=\"sec-number.prototype.toprecision\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.3.5\"><a href=\"/sec/sec-number.prototype.toprecision.html\" title=\"link to this section\">20.1.3.5</a></span> Number.prototype.toPrecision ( precision )</h1>\n\n        <p class=\"normalbefore\">Return a String containing this Number value represented either in decimal exponential notation\n        with one digit before the significand&apos;s decimal point and <span style=\"font-family: Times New\n        Roman\"><i>precision</i>&#x2013;1</span> digits after the significand&apos;s decimal point or in decimal fixed notation with\n        <var>precision</var> significant digits. If <var>precision</var> is <b>undefined</b>, call <a href=\"/sec/sec-tostring.html\">ToString</a> (<a href=\"/sec/sec-tostring.html\">7.1.12</a>) instead. Specifically, perform the following\n        steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>x</i> be thisNumberValue(<b>this</b> value).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>x</i>).</li>\n          <li>If <i>precision</i> is <b>undefined</b>, return <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>x</i>).</li>\n          <li>Let <i>p</i> be <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>precision</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>p</i>).</li>\n          <li>If <i>x</i> is <b>NaN</b>, return the String <code>&quot;NaN&quot;</code>.</li>\n          <li>Let <i>s</i> be the empty String.</li>\n          <li>If <i>x</i> &lt; 0, then\n            <ol class=\"block\">\n              <li>Let <i>s</i> be code unit 0x002D (HYPHEN-MINUS).</li>\n              <li>Let <i>x</i> = &#x2013;<i>x</i>.</li>\n            </ol>\n          </li>\n          <li>If <i>x</i> = +&#x221E;, then\n            <ol class=\"block\">\n              <li>Return the String that is the concatenation of <i>s</i> and <code>&quot;Infinity&quot;</code>.</li>\n            </ol>\n          </li>\n          <li>If <i>p</i> &lt; 1 or <i>p</i> &gt; 21, throw a <b>RangeError</b> exception. However, an implementation is permitted\n              to extend the behaviour of <code>toPrecision</code> for values of <i>p</i> less than 1 or greater than 21. In this\n              case <code>toPrecision</code> would not necessarily throw <b>RangeError</b> for such values.</li>\n          <li>If <i>x</i> = 0, then\n            <ol class=\"block\">\n              <li>Let <i>m</i> be the String consisting of <i>p</i> occurrences of the code unit 0x0030 (DIGIT ZERO).</li>\n              <li>Let <i>e</i> = 0.</li>\n            </ol>\n          </li>\n          <li>Else <i>x</i> &#x2260; 0,\n            <ol class=\"block\">\n              <li>Let <i>e</i> and <i>n</i> be integers such that 10<sup><i>p</i>&#x2013;1</sup> &#x2264; <i>n</i> &lt;\n                  10<sup><i>p</i></sup> and for which the exact mathematical value of <i>n</i> &#xD7;\n                  10<sup><i>e</i>&#x2013;<i>p</i>+1</sup> &#x2013; <i>x</i> is as close to zero as possible. If there are two such\n                  sets of <i>e</i> and <i>n</i>, pick the <i>e</i> and <i>n</i> for which <i>n</i> &#xD7;\n                  10<sup><i>e</i>&#x2013;<i>p</i>+1</sup> is larger.</li>\n              <li>Let <i>m</i> be the String consisting of the digits of the decimal representation of <i>n</i> (in order, with no\n                  leading zeroes).</li>\n              <li>If <i>e</i> &lt; &#x2013;6 or <i>e</i> &#x2265; <i>p</i>, then\n                <ol class=\"block\">\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>e</i> &#x2260; 0</li>\n                  <li>Let <i>a</i> be the first element of <i>m</i>, and let <i>b</i> be the remaining <i>p</i>&#x2013;1 elements\n                      of <i>m</i>.</li>\n                  <li>Let <i>m</i> be the concatenation of <i>a</i>, code unit 0x002E (FULL STOP), and <i>b</i>.</li>\n                  <li>If <i>e</i> &gt; 0,  then\n                    <ol class=\"block\">\n                      <li>Let <i>c</i> be code unit 0x002B (PLUS SIGN).</li>\n                    </ol>\n                  </li>\n                  <li>Else <i>e</i> &lt; 0,\n                    <ol class=\"block\">\n                      <li>Let <i>c</i> be code unit 0x002D (HYPHEN-MINUS).</li>\n                      <li>Let <i>e</i> = &#x2013;<i>e</i>.</li>\n                    </ol>\n                  </li>\n                  <li>Let <i>d</i> be the String consisting of the digits of the decimal representation of <i>e</i> (in order,\n                      with no leading zeroes).</li>\n                  <li>Return the concatenation of <i>s</i>, <i>m</i>, code unit 0x0065 (LATIN SMALL LETTER E), <i>c</i>, and\n                      <i>d</i>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>If <i>e</i> = <i>p</i>&#x2013;1, return the concatenation of the Strings <i>s</i> and <i>m</i>.</li>\n          <li>If <i>e</i> &#x2265; 0, then\n            <ol class=\"block\">\n              <li>Let <i>m</i> be the concatenation of the first <i>e</i>+1 elements of <i>m</i>, the code unit 0x002E (FULL\n                  STOP), and the remaining <i>p</i>&#x2013; (<i>e</i>+1) elements of <i>m</i>.</li>\n            </ol>\n          </li>\n          <li>Else <i>e</i> &lt; 0,\n            <ol class=\"block\">\n              <li>Let <i>m</i> be the String formed by the concatenation of code unit 0x0030 (DIGIT ZERO)<b>,</b> code unit 0x002E\n                  (FULL STOP), &#x2013;(<i>e</i>+1) occurrences of code unit 0x0030 (DIGIT ZERO), and the String <i>m</i>.</li>\n            </ol>\n          </li>\n          <li>Return the String that is the concatenation of <i>s</i> and <i>m</i>.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>toPrecision</code> method is <b>1</b>.</p>\n\n        <p>If the <code>toPrecision</code> method is called with more than one argument, then the behaviour is undefined (see <a href=\"/sec/sec-ecmascript-standard-built-in-objects.html\">clause&#xA0;17</a>).</p>\n      </section>\n\n      <section id=\"sec-number.prototype.tostring\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.3.6\"><a href=\"/sec/sec-number.prototype.tostring.html\" title=\"link to this section\">20.1.3.6</a></span> Number.prototype.toString ( [ radix ] )</h1>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The optional <var>radix</var> should be an integer value in the inclusive range <span style=\"font-family: Times New Roman\">2</span> to <span style=\"font-family: Times New Roman\">36</span>. If\n          <var>radix</var> not present or is <b>undefined</b> the Number <span style=\"font-family: Times New Roman\">10</span> is\n          used as the value of <var>radix</var>.</p>\n        </div>\n\n        <p class=\"normalbefore\">The following steps are performed:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>x</i> be thisNumberValue(<b>this</b> value).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>x</i>).</li>\n          <li>If <i>radix</i> is not present, let <i>radixNumber</i> be 10.</li>\n          <li>Else if <i>radix</i> is <b>undefined</b>, let <i>radixNumber</i> be 10.</li>\n          <li>Else let <i>radixNumber</i> be <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>radix</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>radixNumber</i>).</li>\n          <li>If <i>radixNumber</i> &lt; 2 or <i>radixNumber</i> &gt; 36, throw a <b>RangeError</b> exception.</li>\n          <li>If <i>radixNumber</i> = 10, return <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>x</i>).</li>\n          <li>Return the String representation of this Number value using the radix specified by <i>radixNumber</i>. Letters\n              <code>a</code>-<code>z</code> are used for digits with values 10 through 35. The precise algorithm is\n              implementation-dependent, however the algorithm should be a generalization of that specified in <a href=\"/sec/sec-tostring-applied-to-the-number-type.html\">7.1.12.1</a>.</li>\n        </ol>\n\n        <p>The <code>toString</code> function is not generic; it throws a <b>TypeError</b> exception if its <b>this</b> value is\n        not a Number or a Number object. Therefore, it cannot be transferred to other kinds of objects for use as a method.</p>\n      </section>\n\n      <section id=\"sec-number.prototype.valueof\">\n        <h1><span class=\"secnum\" id=\"sec-20.1.3.7\"><a href=\"/sec/sec-number.prototype.valueof.html\" title=\"link to this section\">20.1.3.7</a></span> Number.prototype.valueOf ( )</h1>\n        <ol class=\"proc\">\n          <li>Let <i>x</i> be thisNumberValue(<b>this</b> value).</li>\n          <li>Return  <i>x</i>.</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-number-instances\">\n      <h1><span class=\"secnum\" id=\"sec-20.1.4\"><a href=\"/sec/sec-properties-of-number-instances.html\" title=\"link to this section\">20.1.4</a></span> Properties of Number Instances</h1>\n\n      <p>Number instances are ordinary objects that inherit properties from the Number prototype object. Number instances also\n      have a [[NumberData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>. The [[NumberData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is the Number value represented by this Number\n      object.</p>\n    </section>\n  "}