{"id":"sec-number.prototype.toexponential","html":"\n        <h1><span class=\"secnum\" id=\"sec-20.1.3.2\"><a href=\"/sec/sec-number.prototype.toexponential.html\" title=\"link to this section\">20.1.3.2</a></span> Number.prototype.toExponential ( fractionDigits )</h1>\n\n        <p class=\"normalbefore\">Return a String containing this Number value represented in decimal exponential notation with one\n        digit before the significand&apos;s decimal point and <var>fractionDigits</var> digits after the significand&apos;s decimal point.\n        If <var>fractionDigits</var> is <b>undefined</b>, include as many significand digits as necessary to uniquely specify the\n        Number (just like in <a href=\"/sec/sec-tostring.html\">ToString</a> except that in this case the Number is always output in\n        exponential notation). Specifically, perform the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>x</i> be thisNumberValue(<b>this</b> value).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>x</i>).</li>\n          <li>Let <i>f</i> be <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>fractionDigits</i>).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>f</i> is 0, when <i>fractionDigits</i> is <b>undefined</b>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>f</i>).</li>\n          <li>If <i>x</i> is <b>NaN</b>, return the String <code>&quot;NaN&quot;</code>.</li>\n          <li>Let <i>s</i> be the empty String.</li>\n          <li>If <i>x</i> <i>&lt;</i> 0, then\n            <ol class=\"block\">\n              <li>Let <i>s</i> be <code>&quot;-&quot;</code>.</li>\n              <li>Let <i>x</i> = &#x2013;<i>x</i>.</li>\n            </ol>\n          </li>\n          <li>If <i>x</i> = +&#x221E;, then\n            <ol class=\"block\">\n              <li>Return the concatenation of the Strings <i>s</i> and <code>&quot;Infinity&quot;</code>.</li>\n            </ol>\n          </li>\n          <li>If <i>f</i> &lt; 0 or <i>f</i> &gt; 20, throw a <b>RangeError</b> exception. However, an implementation is permitted\n              to extend the behaviour of <code>toExponential</code> for values of <i>f</i> less than 0 or greater than 20. In this\n              case <code>toExponential</code> would not necessarily throw <b>RangeError</b> for such values.</li>\n          <li>If <i>x</i> = 0, then\n            <ol class=\"block\">\n              <li>Let <i>m</i> be the String consisting of <i>f</i>+1 occurrences of the code unit 0x0030.</li>\n              <li>Let <i>e</i> = 0.</li>\n            </ol>\n          </li>\n          <li>Else <i>x</i> &#x2260; 0,\n            <ol class=\"block\">\n              <li>If <i>fractionDigits</i> is not <b>undefined</b>, then\n                <ol class=\"block\">\n                  <li>Let <i>e</i> and <i>n</i> be integers such that 10<sup><i>f</i></sup> &#x2264; <i>n</i> &lt;\n                      10<sup><i>f</i>+1</sup> and for which the exact mathematical value of <i>n</i> &#xD7;\n                      10<sup><i>e</i>&#x2013;<i>f</i></sup> &#x2013; <i>x</i> is as close to zero as possible. If there are two such\n                      sets of <i>e</i> and <i>n</i>, pick the <i>e</i> and <i>n</i> for which <i>n</i> &#xD7;\n                      10<sup><i>e</i>&#x2013;<i>f</i></sup> is larger.</li>\n                </ol>\n              </li>\n              <li>Else <i>fractionDigits</i> is <b>undefined</b>,\n                <ol class=\"block\">\n                  <li>Let <i>e</i>, <i>n</i>, and <i>f</i> be integers such that <i>f</i> &#x2265; 0, 10<sup><i>f</i></sup> &#x2264;\n                      <i>n</i> &lt; 10<sup><i>f</i>+1</sup>, the Number value for n &#xD7; 10<sup><i>e</i>&#x2013;<i>f</i></sup>\n                      is <i>x</i>, and <i>f</i> is as small as possible. Note that the decimal representation of <i>n</i> has\n                      <i>f</i>+1 digits, <i>n</i> is not divisible by 10, and the least significant digit of <i>n</i> is not\n                      necessarily uniquely determined by these criteria.</li>\n                </ol>\n              </li>\n              <li>Let <i>m</i> be the String consisting of the digits of the decimal representation of <i>n</i> (in order, with no\n                  leading zeroes).</li>\n            </ol>\n          </li>\n          <li>If <i>f</i> &#x2260; 0, then\n            <ol class=\"block\">\n              <li>Let <i>a</i> be the first element of <i>m</i>, and let <i>b</i> be the remaining <i>f</i> elements of\n                  <i>m</i>.</li>\n              <li>Let <i>m</i> be the concatenation of the three Strings <i>a</i>, <code>&quot;.&quot;</code>, and <i>b</i>.</li>\n            </ol>\n          </li>\n          <li>If <i>e</i> = 0, then\n            <ol class=\"block\">\n              <li>Let <i>c</i> = <code>&quot;+&quot;.</code></li>\n              <li>Let <i>d</i> = <code>&quot;0&quot;.</code></li>\n            </ol>\n          </li>\n          <li>Else\n            <ol class=\"block\">\n              <li>If <i>e</i> &gt; 0, let <i>c</i> = <code>&quot;+&quot;.</code></li>\n              <li>Else <i>e</i> &#x2264; 0,\n                <ol class=\"block\">\n                  <li>Let <i>c</i> = <code>&quot;-&quot;</code>.</li>\n                  <li>Let <i>e</i> = &#x2013;<i>e</i>.</li>\n                </ol>\n              </li>\n              <li>Let <i>d</i> be the String consisting of the digits of the decimal representation of <i>e</i> (in order, with no\n                  leading zeroes).</li>\n            </ol>\n          </li>\n          <li>Let <i>m</i> be the concatenation of the four Strings <i>m</i>, <code>&quot;e&quot;</code>, <i>c</i>, and <i>d</i>.</li>\n          <li>Return the concatenation of the Strings <i>s</i> and <i>m</i>.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>toExponential</code> method is <b>1</b>.</p>\n\n        <p>If the <code>toExponential</code> method is called with more than one argument, then the behaviour is undefined (see <a href=\"/sec/sec-ecmascript-standard-built-in-objects.html\">clause 17</a>).</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> For implementations that provide more accurate conversions than required by the rules\n          above, it is recommended that the following alternative version of step 12.b.i be used as a guideline:</p>\n\n          <p class=\"special3\">i.\tLet <i>e</i>, <i>n</i>, and <i>f</i> be integers such that <i>f</i> &#x2265; 0,\n          10<sup><i>f</i></sup> &#x2264; n &lt; 10<sup><i>f</i>+1</sup>, the Number value for n &#xD7;\n          10<sup><i>e</i>&#x2013;<i>f</i></sup> is x, and <i>f</i> is as small as possible. If there are multiple possibilities for\n          <i>n</i>, choose the value of <i>n</i> for which <i>n</i> &#xD7; 10<sup><i>e</i>&#x2013;<i>f</i></sup> is closest in\n          value to <i>x</i>. If there are two such possible values of <i>n</i>, choose the one that is even.</p>\n        </div>\n      "}