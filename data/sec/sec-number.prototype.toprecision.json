{"id":"sec-number.prototype.toprecision","html":"\n        <h1><span class=\"secnum\" id=\"sec-20.1.3.5\"><a href=\"/sec/sec-number.prototype.toprecision.html\" title=\"link to this section\">20.1.3.5</a></span> Number.prototype.toPrecision ( precision )</h1>\n\n        <p class=\"normalbefore\">Return a String containing this Number value represented either in decimal exponential notation\n        with one digit before the significand&apos;s decimal point and <span style=\"font-family: Times New\n        Roman\"><i>precision</i>&#x2013;1</span> digits after the significand&apos;s decimal point or in decimal fixed notation with\n        <var>precision</var> significant digits. If <var>precision</var> is <b>undefined</b>, call <a href=\"/sec/sec-tostring.html\">ToString</a> (<a href=\"/sec/sec-tostring.html\">7.1.12</a>) instead. Specifically, perform the following\n        steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>x</i> be thisNumberValue(<b>this</b> value).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>x</i>).</li>\n          <li>If <i>precision</i> is <b>undefined</b>, return <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>x</i>).</li>\n          <li>Let <i>p</i> be <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>precision</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>p</i>).</li>\n          <li>If <i>x</i> is <b>NaN</b>, return the String <code>&quot;NaN&quot;</code>.</li>\n          <li>Let <i>s</i> be the empty String.</li>\n          <li>If <i>x</i> &lt; 0, then\n            <ol class=\"block\">\n              <li>Let <i>s</i> be code unit 0x002D (HYPHEN-MINUS).</li>\n              <li>Let <i>x</i> = &#x2013;<i>x</i>.</li>\n            </ol>\n          </li>\n          <li>If <i>x</i> = +&#x221E;, then\n            <ol class=\"block\">\n              <li>Return the String that is the concatenation of <i>s</i> and <code>&quot;Infinity&quot;</code>.</li>\n            </ol>\n          </li>\n          <li>If <i>p</i> &lt; 1 or <i>p</i> &gt; 21, throw a <b>RangeError</b> exception. However, an implementation is permitted\n              to extend the behaviour of <code>toPrecision</code> for values of <i>p</i> less than 1 or greater than 21. In this\n              case <code>toPrecision</code> would not necessarily throw <b>RangeError</b> for such values.</li>\n          <li>If <i>x</i> = 0, then\n            <ol class=\"block\">\n              <li>Let <i>m</i> be the String consisting of <i>p</i> occurrences of the code unit 0x0030 (DIGIT ZERO).</li>\n              <li>Let <i>e</i> = 0.</li>\n            </ol>\n          </li>\n          <li>Else <i>x</i> &#x2260; 0,\n            <ol class=\"block\">\n              <li>Let <i>e</i> and <i>n</i> be integers such that 10<sup><i>p</i>&#x2013;1</sup> &#x2264; <i>n</i> &lt;\n                  10<sup><i>p</i></sup> and for which the exact mathematical value of <i>n</i> &#xD7;\n                  10<sup><i>e</i>&#x2013;<i>p</i>+1</sup> &#x2013; <i>x</i> is as close to zero as possible. If there are two such\n                  sets of <i>e</i> and <i>n</i>, pick the <i>e</i> and <i>n</i> for which <i>n</i> &#xD7;\n                  10<sup><i>e</i>&#x2013;<i>p</i>+1</sup> is larger.</li>\n              <li>Let <i>m</i> be the String consisting of the digits of the decimal representation of <i>n</i> (in order, with no\n                  leading zeroes).</li>\n              <li>If <i>e</i> &lt; &#x2013;6 or <i>e</i> &#x2265; <i>p</i>, then\n                <ol class=\"block\">\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>e</i> &#x2260; 0</li>\n                  <li>Let <i>a</i> be the first element of <i>m</i>, and let <i>b</i> be the remaining <i>p</i>&#x2013;1 elements\n                      of <i>m</i>.</li>\n                  <li>Let <i>m</i> be the concatenation of <i>a</i>, code unit 0x002E (FULL STOP), and <i>b</i>.</li>\n                  <li>If <i>e</i> &gt; 0,  then\n                    <ol class=\"block\">\n                      <li>Let <i>c</i> be code unit 0x002B (PLUS SIGN).</li>\n                    </ol>\n                  </li>\n                  <li>Else <i>e</i> &lt; 0,\n                    <ol class=\"block\">\n                      <li>Let <i>c</i> be code unit 0x002D (HYPHEN-MINUS).</li>\n                      <li>Let <i>e</i> = &#x2013;<i>e</i>.</li>\n                    </ol>\n                  </li>\n                  <li>Let <i>d</i> be the String consisting of the digits of the decimal representation of <i>e</i> (in order,\n                      with no leading zeroes).</li>\n                  <li>Return the concatenation of <i>s</i>, <i>m</i>, code unit 0x0065 (LATIN SMALL LETTER E), <i>c</i>, and\n                      <i>d</i>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>If <i>e</i> = <i>p</i>&#x2013;1, return the concatenation of the Strings <i>s</i> and <i>m</i>.</li>\n          <li>If <i>e</i> &#x2265; 0, then\n            <ol class=\"block\">\n              <li>Let <i>m</i> be the concatenation of the first <i>e</i>+1 elements of <i>m</i>, the code unit 0x002E (FULL\n                  STOP), and the remaining <i>p</i>&#x2013; (<i>e</i>+1) elements of <i>m</i>.</li>\n            </ol>\n          </li>\n          <li>Else <i>e</i> &lt; 0,\n            <ol class=\"block\">\n              <li>Let <i>m</i> be the String formed by the concatenation of code unit 0x0030 (DIGIT ZERO)<b>,</b> code unit 0x002E\n                  (FULL STOP), &#x2013;(<i>e</i>+1) occurrences of code unit 0x0030 (DIGIT ZERO), and the String <i>m</i>.</li>\n            </ol>\n          </li>\n          <li>Return the String that is the concatenation of <i>s</i> and <i>m</i>.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>toPrecision</code> method is <b>1</b>.</p>\n\n        <p>If the <code>toPrecision</code> method is called with more than one argument, then the behaviour is undefined (see <a href=\"/sec/sec-ecmascript-standard-built-in-objects.html\">clause&#xA0;17</a>).</p>\n      "}