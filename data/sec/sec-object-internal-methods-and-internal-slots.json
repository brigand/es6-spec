{"id":"sec-object-internal-methods-and-internal-slots","html":"\n        <h1><span class=\"secnum\" id=\"sec-6.1.7.2\"><a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\" title=\"link to this section\">6.1.7.2</a></span> Object Internal Methods and Internal Slots</h1>\n\n        <p>The actual semantics of objects, in ECMAScript, are specified via algorithms called <i>internal methods</i>. Each\n        object in an ECMAScript engine is associated with a set of internal methods that defines its runtime behaviour. These\n        internal methods are not part of the ECMAScript language. They are defined by this specification purely for expository\n        purposes. However, each object within an implementation of ECMAScript must behave as specified by the internal methods\n        associated with it. The exact manner in which this is accomplished is determined by the implementation.</p>\n\n        <p>Internal method names are polymorphic. This means that different object values may perform different algorithms when a\n        common internal method name is invoked upon them. That actual object upon which an internal method is invoked is the\n        &#x201C;target&#x201D; of the invocation. If, at runtime, the implementation of an algorithm attempts to use an internal\n        method of an object that the object does not support, a <b>TypeError</b> exception is thrown.</p>\n\n        <p>Internal slots correspond to internal state that is associated with objects and used by various ECMAScript\n        specification algorithms. Internal slots are not object properties and they are not inherited. Depending upon the specific\n        internal slot specification, such state may consist of values of any <a href=\"/sec/sec-ecmascript-language-types.html\">ECMAScript\n        language type</a> or of specific ECMAScript specification type values. Unless explicitly specified otherwise, internal\n        slots are allocated as part of the process of creating an object and may not be dynamically added to an object. Unless\n        specified otherwise, the initial value of an internal slot is the value <span class=\"value\">undefined</span>. Various\n        algorithms within this specification create objects that have internal slots. However, the ECMAScript language provides no\n        direct way to associate internal slots with an object.</p>\n\n        <p>Internal methods and internal slots are identified within this specification using names enclosed in double square\n        brackets [[ ]].</p>\n\n        <p><a href=\"/sec/table-5.html\">Table 5</a> summarizes the <i>essential internal methods</i> used by this specification that are\n        applicable to all objects created or manipulated by ECMAScript code. Every object must have algorithms for all of the\n        essential internal methods. However, all objects do not necessarily use the same algorithms for those methods.</p>\n\n        <p>The &#x201C;Signature&#x201D; column of <a href=\"/sec/table-5.html\">Table 5</a> and other similar tables describes the invocation\n        pattern for each internal method. The invocation pattern always includes a parenthesized list of descriptive parameter\n        names. If a parameter name is the same as an ECMAScript type name then the name describes the required type of the\n        parameter value. If an internal method  explicitly returns a value, its parameter list is followed by the symbol\n        &#x201C;&#x2192;&#x201D; and the type name of the returned value. The type names used in signatures refer to the types defined\n        in <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">clause 6</a> augmented by the following additional names.\n        &#x201C;<i>any</i>&#x201D; means the value may be any <a href=\"/sec/sec-ecmascript-language-types.html\">ECMAScript language type</a>.\n        An internal method implicitly returns a <a href=\"/sec/sec-completion-record-specification-type.html\">Completion Record</a> as\n        described in <a href=\"/sec/sec-completion-record-specification-type.html\">6.2.2</a>. In addition to its parameters, an internal\n        method always has access to the object that is the target of the method invocation.</p>\n\n        <figure>\n          <figcaption><span id=\"table-5\">Table 5</span> &#x2014; Essential Internal Methods</figcaption>\n          <table class=\"real-table\">\n            <tr>\n              <th>Internal Method</th>\n              <th>Signature</th>\n              <th>Description</th>\n            </tr>\n            <tr>\n              <td>[[GetPrototypeOf]]</td>\n              <td>() <b>&#x2192;</b> Object | Null</td>\n              <td>Determine the object that provides inherited properties for this object. A <b>null</b> value indicates that there are no inherited properties.</td>\n            </tr>\n            <tr>\n              <td>[[SetPrototypeOf]]</td>\n              <td>(<i>Object</i> | Null) <b>&#x2192;</b> Boolean</td>\n              <td>Associate this object with another object that provides inherited properties. Passing <b>null</b> indicates that there are no inherited properties. Returns <b>true</b> indicating that the operation was completed successfully or <b>false</b> indicating that the operation was not successful.</td>\n            </tr>\n            <tr>\n              <td>[[IsExtensible]]</td>\n              <td>( ) <b>&#x2192;</b> Boolean</td>\n              <td>Determine whether it is permitted to add additional properties to this object.</td>\n            </tr>\n            <tr>\n              <td>[[PreventExtensions]]</td>\n              <td>( ) <b>&#x2192;</b> Boolean</td>\n              <td>Control whether new properties may be added to this object. Returns <b>true</b> if the operation was successful or <b>false</b> if the operation was unsuccessful.</td>\n            </tr>\n            <tr>\n              <td>[[GetOwnProperty]]</td>\n              <td>(<i>propertyKey</i>) <b>&#x2192;</b> Undefined | <a href=\"/sec/sec-property-descriptor-specification-type.html\">Property Descriptor</a></td>\n              <td>Return a <a href=\"/sec/sec-property-descriptor-specification-type.html\">Property Descriptor</a> for the own property of this object whose key is <i>propertyKey</i>, or <b>undefined</b> if no such property exists.</td>\n            </tr>\n            <tr>\n              <td>[[HasProperty]]</td>\n              <td>(<i>propertyKey</i>) <b>&#x2192;</b> Boolean</td>\n              <td>Return a Boolean value indicating whether this object already has either an own or inherited property whose key is <i>propertyKey</i>.</td>\n            </tr>\n            <tr>\n              <td>[[Get]]</td>\n              <td>(<i>propertyKey</i>, <i>Receiver</i>)<br><b>&#x2192;</b> <i>any</i></td>\n              <td>Return the value of the property whose key is <i>propertyKey</i> from this object. If any ECMAScript code must be executed to retrieve the property value, <i>Receiver</i> is used as the <b>this</b> value when evaluating the code.</td>\n            </tr>\n            <tr>\n              <td>[[Set]]</td>\n              <td>(<i>propertyKey</i>,<i>value</i>, <i>Receiver</i>) <br><b>&#x2192;</b> <i>Boolean</i></td>\n              <td>Set the value of the property whose key is <i>propertyKey</i> to <i>value</i>. If any ECMAScript code must be executed to set the property value, <i>Receiver</i> is used as the <b>this</b> value when evaluating the code. Returns <b>true</b> if the property value was set or <b>false</b> if it could not be set.</td>\n            </tr>\n            <tr>\n              <td>[[Delete]]</td>\n              <td>(<i>propertyKey</i>) <b>&#x2192;</b> Boolean</td>\n              <td>Remove the own property whose key is <i>propertyKey</i> from this object . Return <b>false</b> if the property was not deleted and is still present. Return <b>true</b> if the property was deleted or is not present.</td>\n            </tr>\n            <tr>\n              <td>[[DefineOwnProperty]]</td>\n              <td>(<i>propertyKey</i>, <i>PropertyDescriptor</i>)<br><b>&#x2192;</b> Boolean</td>\n              <td>Create or alter the own property, whose key is <i>propertyKey</i>, to have the state described by <i>PropertyDescriptor</i>. Return <b>true</b> if that property was successfully created/updated or <b>false</b> if the property could not be created or updated.</td>\n            </tr>\n            <tr>\n              <td>[[Enumerate]]</td>\n              <td>()<b><i>&#x2192;</i></b>Object</td>\n              <td>Return an iterator object that produces the keys of the string-keyed enumerable properties of the object.</td>\n            </tr>\n            <tr>\n              <td>[[OwnPropertyKeys]]</td>\n              <td>()<b>&#x2192;</b><a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> of propertyKey</td>\n              <td>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> whose elements are all of the own property keys for the object.</td>\n            </tr>\n          </table>\n        </figure>\n\n        <p><a href=\"/sec/table-6.html\">Table 6</a> summarizes additional essential internal methods that are supported by objects that may\n        be called as functions. A <i>function object</i> is an object that supports the [[Call]] internal methods. A\n        <i>constructor</i> (also referred to as a <i>constructor function</i>) is a function object that supports the\n        [[Construct]] internal method.</p>\n\n        <figure>\n          <figcaption><span id=\"table-6\">Table 6</span> &#x2014; Additional Essential Internal Methods of Function Objects</figcaption>\n          <table class=\"real-table\">\n            <tr>\n              <th>Internal Method</th>\n              <th>Signature</th>\n              <th>Description</th>\n            </tr>\n            <tr>\n              <td>[[Call]]</td>\n              <td>(<i>any</i>, a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> of <i>any</i>)<br><span class=\"value\">&#x2192;</span> <i>any</i></td>\n              <td>Executes code associated with this object. Invoked via a function call expression. The arguments to the internal method are a <b>this</b> value and a list containing the arguments passed to the function by a call expression. Objects that implement this internal method are <i>callable</i>.</td>\n            </tr>\n            <tr>\n              <td>[[Construct]]</td>\n              <td>(a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> of <i>any</i>, Object)<br><span class=\"value\">&#x2192;</span> Object</td>\n              <td>Creates an object. Invoked via the <code>new</code> or <code>super</code> operators. The first argument to the internal method is a list containing the arguments of the operator. The second argument is the object to which the <code>new</code> operator was initially applied. Objects that implement this internal method are called <i>constructors</i>. A function object is not necessarily a constructor and such non-constructor function objects do not have a [[Construct]] internal method.</td>\n            </tr>\n          </table>\n        </figure>\n\n        <p>The semantics of the essential internal methods for ordinary objects and standard exotic objects are specified in <a href=\"/sec/sec-ordinary-and-exotic-objects-behaviours.html\">clause 9</a>. If any specified use of an internal method of an exotic\n        object is not supported by an implementation, that usage must throw a <b>TypeError</b> exception when attempted.</p>\n      "}