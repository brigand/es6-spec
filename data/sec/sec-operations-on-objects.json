{"id":"sec-operations-on-objects","html":"\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-7.3\"><a href=\"/sec/sec-operations-on-objects.html\" title=\"link to this section\">7.3</a></span>\n          Operations on Objects</h1>\n    </div>\n\n    <section id=\"sec-get-o-p\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.1\"><a href=\"/sec/sec-get-o-p.html\" title=\"link to this section\">7.3.1</a></span> Get (O, P)</h1>\n\n      <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">Get</span> is used to retrieve the\n      value of a specific property of an object. The operation is called with arguments  <var>O</var> and <var>P</var> where\n      <var>O</var> is the object and <var>P</var> is the <a href=\"/sec/sec-object-type.html\">property key</a>. This abstract operation\n      performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is\n            Object.</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <a href=\"/sec/sec-ispropertykey.html\">IsPropertyKey</a>(<i>P</i>) is\n            <b>true</b>.</li>\n        <li>Return <i>O</i>.[[Get]](<i>P</i>, <i>O</i>).</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-getv\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.2\"><a href=\"/sec/sec-getv.html\" title=\"link to this section\">7.3.2</a></span> GetV (V, P)</h1>\n\n      <p class=\"normalbefore\">The abstract operation GetV is used to retrieve the value of a specific property of an <a href=\"/sec/sec-ecmascript-language-types.html\">ECMAScript language value</a>. If the value is not an object, the property lookup is\n      performed using a wrapper object appropriate for the type of the value. The operation is called with arguments <var>V</var>\n      and <var>P</var> where <var>V</var> is the value and <var>P</var> is the <a href=\"/sec/sec-object-type.html\">property key</a>. This\n      abstract operation performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ispropertykey.html\">IsPropertyKey</a>(<i>P</i>) is\n            <b>true</b>.</li>\n        <li>Let <i>O</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<i>V</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>O</i>).</li>\n        <li>Return <i>O</i>.[[Get]](<i>P</i>, <i>V</i>).</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-set-o-p-v-throw\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.3\"><a href=\"/sec/sec-set-o-p-v-throw.html\" title=\"link to this section\">7.3.3</a></span> Set (O,\n          P, V, Throw)</h1>\n\n      <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">Set</span> is used to set the\n      value of a specific property of an object. The operation is called with arguments  <var>O</var>, <var>P</var>, <var>V</var>,\n      and <span class=\"nt\">Throw</span> where <var>O</var> is the object, <var>P</var> is the <a href=\"/sec/sec-object-type.html\">property\n      key</a>, <var>V</var> is the new value for the property and <span class=\"nt\">Throw</span> is a Boolean flag. This abstract\n      operation performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is\n            Object.</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <a href=\"/sec/sec-ispropertykey.html\">IsPropertyKey</a>(<i>P</i>) is\n            <b>true</b>.</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>Throw</i>) is Boolean.</li>\n        <li>Let  <i>success</i> be <i>O</i>.[[Set]](<i>P</i>, <i>V</i>, <i>O</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>success</i>).</li>\n        <li>If <i>success</i> is <b>false</b> and <i>Throw</i> is <b>true</b>, throw a <b>TypeError</b> exception.</li>\n        <li>Return <i>success</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-createdataproperty\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.4\"><a href=\"/sec/sec-createdataproperty.html\" title=\"link to this section\">7.3.4</a></span>\n          CreateDataProperty (O, P, V)</h1>\n\n      <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">CreateDataProperty</span> is used\n      to create a new own property of an object. The operation is called with arguments  <var>O</var>, <var>P</var>, and\n      <var>V</var> where <var>O</var> is the object, <var>P</var> is the <a href=\"/sec/sec-object-type.html\">property key</a>, and\n      <var>V</var> is the value for the property. This abstract operation performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is\n            Object.</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <a href=\"/sec/sec-ispropertykey.html\">IsPropertyKey</a>(<i>P</i>) is\n            <b>true</b>.</li>\n        <li>Let <i>newDesc</i> be the PropertyDescriptor{[[Value]]: <i>V</i>, [[Writable]]: <b>true</b>, [[Enumerable]]:\n            <b>true</b>, [[Configurable]]: <b>true</b>}.</li>\n        <li>Return <i>O</i>.[[DefineOwnProperty]](<i>P</i>, <i>newDesc</i>).</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> This abstract operation creates a property whose attributes are set to the same defaults\n        used for properties created by the ECMAScript language assignment operator. Normally, the property will not already exist.\n        If it does exist and is not configurable or if <var>O</var> is not extensible, [[DefineOwnProperty]] will return <span class=\"value\">false</span>.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-createmethodproperty\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.5\"><a href=\"/sec/sec-createmethodproperty.html\" title=\"link to this section\">7.3.5</a></span>\n          CreateMethodProperty (O, P, V)</h1>\n\n      <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">CreateMethodProperty</span> is\n      used to create a new own property of an object. The operation is called with arguments <var>O</var>, <var>P</var>, and\n      <var>V</var> where <var>O</var> is the object, <var>P</var> is the <a href=\"/sec/sec-object-type.html\">property key</a>, and\n      <var>V</var> is the value for the property. This abstract operation performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is\n            Object.</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <a href=\"/sec/sec-ispropertykey.html\">IsPropertyKey</a>(<i>P</i>) is\n            <b>true</b>.</li>\n        <li>Let <i>newDesc</i> be the PropertyDescriptor{[[Value]]: <i>V</i>, [[Writable]]: <b>true</b>, [[Enumerable]]:\n            <b>false</b>, [[Configurable]]: <b>true</b>}.</li>\n        <li>Return <i>O</i>.[[DefineOwnProperty]](<i>P</i>, <i>newDesc</i>).</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> This abstract operation creates a property whose attributes are set to the same defaults\n        used for built-in methods and methods defined using class declaration syntax. Normally, the property will not already\n        exist. If it does exist and is not configurable or if <var>O</var> is not extensible, [[DefineOwnProperty]] will return\n        <span class=\"value\">false</span>.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-createdatapropertyorthrow\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.6\"><a href=\"/sec/sec-createdatapropertyorthrow.html\" title=\"link to this section\">7.3.6</a></span> CreateDataPropertyOrThrow (O, P, V)</h1>\n\n      <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">CreateDataPropertyOrThrow</span>\n      is used to create a new own property of an object. It throws a <span class=\"value\">TypeError</span> exception if the\n      requested property update cannot be performed. The operation is called with arguments  <var>O</var>, <var>P</var>, and\n      <var>V</var> where <var>O</var> is the object, <var>P</var> is the <a href=\"/sec/sec-object-type.html\">property key</a>, and\n      <var>V</var> is the value for the property. This abstract operation performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is\n            Object.</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <a href=\"/sec/sec-ispropertykey.html\">IsPropertyKey</a>(<i>P</i>) is\n            <b>true</b>.</li>\n        <li>Let  <i>success</i> be <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>O</i>,  <i>P</i>, <i>V</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>success</i>).</li>\n        <li>If <i>success</i> is <b>false</b>, throw a <b>TypeError</b> exception.</li>\n        <li>Return <i>success</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> This abstract operation creates a property whose attributes are set to the same defaults\n        used for properties created by the ECMAScript language assignment operator. Normally, the property will not already exist.\n        If it does exist and is not configurable or if <var>O</var> is not extensible, [[DefineOwnProperty]] will return <span class=\"value\">false</span> causing this operation to throw a <span class=\"value\">TypeError</span> exception.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-definepropertyorthrow\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.7\"><a href=\"/sec/sec-definepropertyorthrow.html\" title=\"link to this section\">7.3.7</a></span>\n          DefinePropertyOrThrow (O, P, desc)</h1>\n\n      <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">DefinePropertyOrThrow</span> is\n      used to call the [[DefineOwnProperty]] internal method of an object in a manner that will throw a <b>TypeError</b> exception\n      if the requested property update cannot be performed. The operation is called with arguments  <var>O</var>, <var>P</var>,\n      and <var>desc</var> where <var>O</var> is the object, <var>P</var> is the <a href=\"/sec/sec-object-type.html\">property key</a>, and\n      <var>desc</var> is the <a href=\"/sec/sec-property-descriptor-specification-type.html\">Property Descriptor</a> for the property. This\n      abstract operation performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is\n            Object.</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <a href=\"/sec/sec-ispropertykey.html\">IsPropertyKey</a>(<i>P</i>) is\n            <b>true</b>.</li>\n        <li>Let  <i>success</i> be <i>O</i>.[[DefineOwnProperty]](<i>P</i>, <i>desc</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>success</i>).</li>\n        <li>If <i>success</i> is <b>false</b>, throw a <b>TypeError</b> exception.</li>\n        <li>Return <i>success</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-deletepropertyorthrow\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.8\"><a href=\"/sec/sec-deletepropertyorthrow.html\" title=\"link to this section\">7.3.8</a></span>\n          DeletePropertyOrThrow (O, P)</h1>\n\n      <p class=\"normalbefore\">The abstract operation DeletePropertyOrThrow is used to remove a specific own property of an object.\n      It throws an exception if the property is not configurable. The operation is called with arguments  <var>O</var> and\n      <var>P</var> where <var>O</var> is the object and <var>P</var> is the <a href=\"/sec/sec-object-type.html\">property key</a>. This\n      abstract operation performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is\n            Object.</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <a href=\"/sec/sec-ispropertykey.html\">IsPropertyKey</a>(<i>P</i>) is\n            <b>true</b>.</li>\n        <li>Let  <i>success</i> be <i>O</i>.[[Delete]](<i>P</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>success</i>).</li>\n        <li>If <i>success</i> is <b>false</b>, throw a <b>TypeError</b> exception.</li>\n        <li>Return <i>success</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-getmethod\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.9\"><a href=\"/sec/sec-getmethod.html\" title=\"link to this section\">7.3.9</a></span> GetMethod (O,\n          P)</h1>\n\n      <p>The abstract operation GetMethod is used to get the value of a specific property of an object when the value of the\n      property is expected to be a function. The operation is called with arguments <var>O</var> and <var>P</var> where\n      <var>O</var> is the object, <var>P</var> is the <a href=\"/sec/sec-object-type.html\">property key</a>. This abstract operation\n      performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <a href=\"/sec/sec-ispropertykey.html\">IsPropertyKey</a>(<i>P</i>) is\n            <b>true</b>.</li>\n        <li>Let  <i>func</i> be <a href=\"/sec/sec-getv.html\">GetV</a>(<i>O</i>, <i>P</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>func</i>).</li>\n        <li>If <i>func</i> is either <b>undefined</b> or <b>null</b>, return <b>undefined</b>.</li>\n        <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>func</i>) is <b>false</b>, throw a <b>TypeError</b> exception.</li>\n        <li>Return <i>func</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-hasproperty\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.10\"><a href=\"/sec/sec-hasproperty.html\" title=\"link to this section\">7.3.10</a></span>\n          HasProperty (O, P)</h1>\n\n      <p class=\"normalbefore\">The abstract operation HasProperty is used to determine whether an object has a property with the\n      specified <a href=\"/sec/sec-object-type.html\">property key</a>. The property may be either an own or inherited. A Boolean value is\n      returned. The operation is called with arguments  <var>O</var> and <var>P</var> where <var>O</var> is the object and\n      <var>P</var> is the <a href=\"/sec/sec-object-type.html\">property key</a>. This abstract operation performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is\n            Object.</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <a href=\"/sec/sec-ispropertykey.html\">IsPropertyKey</a>(<i>P</i>) is\n            <b>true</b>.</li>\n        <li>Return <i>O</i>.[[HasProperty]](<i>P</i>).</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-hasownproperty\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.11\"><a href=\"/sec/sec-hasownproperty.html\" title=\"link to this section\">7.3.11</a></span>\n          HasOwnProperty (O, P)</h1>\n\n      <p class=\"normalbefore\">The abstract operation HasOwnProperty is used to determine whether an object has an own property\n      with the specified <a href=\"/sec/sec-object-type.html\">property key</a>. A Boolean value is returned. The operation is called with\n      arguments  <var>O</var> and <var>P</var> where <var>O</var> is the object and <var>P</var> is the <a href=\"/sec/sec-object-type.html\">property key</a>. This abstract operation performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is\n            Object.</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <a href=\"/sec/sec-ispropertykey.html\">IsPropertyKey</a>(<i>P</i>) is\n            <b>true</b>.</li>\n        <li>Let <i>desc</i> be <i>O</i>.[[GetOwnProperty]](<i>P</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>desc</i>).</li>\n        <li>If <i>desc</i> is <b>undefined</b>, return <b>false</b>.</li>\n        <li>Return <b>true</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-call\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.12\"><a href=\"/sec/sec-call.html\" title=\"link to this section\">7.3.12</a></span> Call(F, V,\n          [argumentsList])</h1>\n\n      <p class=\"normalbefore\">The abstract operation Call is used to call the [[Call]] internal method of a function object. The\n      operation is called with arguments  <var>F</var>, <var>V</var> , and optionally <var>argumentsList</var> where <var>F</var>\n      is the function object, <var>V</var> is an <a href=\"/sec/sec-ecmascript-language-types.html\">ECMAScript language value</a> that is\n      the <b>this</b> value of the [[Call]], and <var>argumentsList</var> is the value passed to the corresponding argument of the\n      internal method. If <var>argumentsList</var> is not present, an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> is used as its value. This abstract operation performs the following\n      steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>F</i>).</li>\n        <li>If <i>argumentsList</i> was not passed, let <i>argumentsList</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>F</i>) is <b>false</b>, throw a <b>TypeError</b> exception.</li>\n        <li>Return <i>F</i>.[[Call]](<i>V</i>, <i>argumentsList</i>).</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-construct\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.13\"><a href=\"/sec/sec-construct.html\" title=\"link to this section\">7.3.13</a></span> Construct\n          (F, [argumentsList], [newTarget])</h1>\n\n      <p class=\"normalbefore\">The abstract operation Construct is used to call the [[Construct]] internal method of a function\n      object. The operation is called with arguments  <var>F</var>, and optionally <span style=\"font-family: Times New\n      Roman\"><i>argumentsList</i>, and <i>newTarget</i></span> where <var>F</var> is the function object. <var>argumentsList</var>\n      and <var>newTarget</var> are the values to be passed as the corresponding arguments of the internal method. If\n      <var>argumentsList</var> is not present, an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> is used as its\n      value. If <var>newTarget</var> is not present, <var>F</var> is used as its value. This abstract operation performs the\n      following steps:</p>\n\n      <ol class=\"proc\">\n        <li>If <i>newTarget</i> was not passed, let <i>newTarget</i> be <i>F</i>.</li>\n        <li>If <i>argumentsList</i> was not passed, let <i>argumentsList</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a> (<i>F</i>) is\n            <b>true</b>.</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a> (<i>newTarget</i>) is\n            <b>true</b>.</li>\n        <li>Return <i>F</i>.[[Construct]](<i>argumentsList</i>, <i>newTarget</i>).</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> If <var>newTarget</var> is not passed, this operation is equivalent to: <code>new\n        F(...argumentsList)</code></p>\n      </div>\n    </section>\n\n    <section id=\"sec-setintegritylevel\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.14\"><a href=\"/sec/sec-setintegritylevel.html\" title=\"link to this section\">7.3.14</a></span>\n          SetIntegrityLevel (O, level)</h1>\n\n      <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">SetIntegrityLevel</span> is used\n      to fix the set of own properties of an object. This abstract operation performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is\n            Object.</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>level</i> is either <code>&quot;sealed&quot;</code> or\n            <code>&quot;frozen&quot;</code>.</li>\n        <li>Let <i>status</i> be <i>O</i>.[[PreventExtensions]]().</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n        <li>If <i>status</i> is <b>false</b>, return <b>false</b>.</li>\n        <li>Let <i>keys</i> be <i>O</i>.[[OwnPropertyKeys]]().</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>keys</i>).</li>\n        <li>If <i>level</i> is <code>&quot;sealed&quot;</code>, then\n          <ol class=\"block\">\n            <li>Repeat for each element <i>k</i> of <i>keys</i>,\n              <ol class=\"block\">\n                <li>Let <i>status</i> be <a href=\"/sec/sec-definepropertyorthrow.html\">DefinePropertyOrThrow</a>(<i>O</i>, <i>k</i>,\n                    PropertyDescriptor{ [[Configurable]]: <b>false</b>}).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>Else <i>level</i> is <code>&quot;frozen&quot;</code>,\n          <ol class=\"block\">\n            <li>Repeat for each element <i>k</i> of <i>keys</i>,\n              <ol class=\"block\">\n                <li>Let <i>currentDesc</i> be <i>O</i>.[[GetOwnProperty]](<i>k</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>currentDesc</i>).</li>\n                <li>If <i>currentDesc</i> is not <b>undefined</b>, then\n                  <ol class=\"block\">\n                    <li>If <a href=\"/sec/sec-isaccessordescriptor.html\">IsAccessorDescriptor</a>(<i>currentDesc</i>) is <b>true</b>, then\n                      <ol class=\"block\">\n                        <li>Let <i>desc</i> be the PropertyDescriptor{[[Configurable]]: <b>false</b>}.</li>\n                      </ol>\n                    </li>\n                    <li>Else,\n                      <ol class=\"block\">\n                        <li>Let <i>desc</i> be the PropertyDescriptor { [[Configurable]]: <b>false</b>, [[Writable]]: <b>false</b>\n                            }.</li>\n                      </ol>\n                    </li>\n                    <li>Let <i>status</i> be <a href=\"/sec/sec-definepropertyorthrow.html\">DefinePropertyOrThrow</a>(<i>O</i>, <i>k</i>,\n                        <i>desc</i>).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n                  </ol>\n                </li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>Return <b>true</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-testintegritylevel\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.15\"><a href=\"/sec/sec-testintegritylevel.html\" title=\"link to this section\">7.3.15</a></span>\n          TestIntegrityLevel (O, level)</h1>\n\n      <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">TestIntegrityLevel</span> is used\n      to determine if the set of own properties of an object are fixed. This abstract operation performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is\n            Object.</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>level</i> is either <code>&quot;sealed&quot;</code> or\n            <code>&quot;frozen&quot;</code>.</li>\n        <li>Let <i>status</i> be <a href=\"/sec/sec-isextensible-o.html\">IsExtensible</a>(<i>O</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n        <li>If <i>status</i> is <b>true</b>, return <b>false</b></li>\n        <li>NOTE  If the object is extensible, none of its properties are examined.</li>\n        <li>Let <i>keys</i> be <i>O</i>.[[OwnPropertyKeys]]().</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>keys</i>).</li>\n        <li>Repeat for each element <i>k</i> of <i>keys</i>,\n          <ol class=\"block\">\n            <li>Let <i>currentDesc</i> be <i>O</i>.[[GetOwnProperty]](<i>k</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>currentDesc</i>).</li>\n            <li>If <i>currentDesc</i> is not <b>undefined</b>, then\n              <ol class=\"block\">\n                <li>If <i>currentDesc</i>.[[Configurable]] is <b>true</b>, return <b>false</b>.</li>\n                <li>If <i>level</i> is <code>&quot;frozen&quot;</code> and  <a href=\"/sec/sec-isdatadescriptor.html\">IsDataDescriptor</a>(<i>currentDesc</i>) is <b>true</b>, then\n                  <ol class=\"block\">\n                    <li>If <i>currentDesc</i>.[[Writable]] is <b>true</b>, return <b>false</b>.</li>\n                  </ol>\n                </li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>Return <b>true</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-createarrayfromlist\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.16\"><a href=\"/sec/sec-createarrayfromlist.html\" title=\"link to this section\">7.3.16</a></span>\n          CreateArrayFromList (elements)</h1>\n\n      <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">CreateArrayFromList</span> is used\n      to create an Array object whose elements are provided by a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>. This\n      abstract operation performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>elements</i> is a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> whose elements are all <a href=\"/sec/sec-ecmascript-language-types.html\">ECMAScript language values</a>.</li>\n        <li>Let <i>array</i> be <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>(0) (<a href=\"/sec/sec-arraycreate.html\">see 9.4.2.2</a>).</li>\n        <li>Let <i>n</i> be 0.</li>\n        <li>For each element <i>e</i> of <i>elements</i>\n          <ol class=\"block\">\n            <li>Let <i>status</i> be <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>array</i>, <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>n</i>), <i>e</i>).</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <i>status</i> is <b>true</b>.</li>\n            <li>Increment <i>n</i> by 1.</li>\n          </ol>\n        </li>\n        <li>Return <i>array</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-createlistfromarraylike\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.17\"><a href=\"/sec/sec-createlistfromarraylike.html\" title=\"link to this section\">7.3.17</a></span> CreateListFromArrayLike (obj [, elementTypes] )</h1>\n\n      <p class=\"normalbefore\">The abstract operation CreateListFromArrayLike is used to create a List value whose elements are\n      provided by the indexed properties of an array-like object, <var>obj</var>. The optional argument <var>elementTypes</var> is\n      a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the names of ECMAScript Language Types that are\n      allowed for element values of the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> that is created. This abstract\n      operation performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>obj</i>).</li>\n        <li>If <i>elementTypes</i> was not passed, let <i>elementTypes</i> be (Undefined, Null, Boolean, String, Symbol, Number,\n            Object).</li>\n        <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>obj</i>) is not Object, throw a <b>TypeError</b>\n            exception.</li>\n        <li>Let <i>len</i> be <a href=\"/sec/sec-tolength.html\">ToLength</a>(<a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>obj</i>,\n            <code>&quot;length&quot;</code>)).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>len</i>).</li>\n        <li>Let <i>list</i>  be an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>Let <i>index</i> be 0.</li>\n        <li>Repeat while <i>index</i> &lt; <i>len</i>\n          <ol class=\"block\">\n            <li>Let <i>indexName</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>index</i>).</li>\n            <li>Let <i>next</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>obj</i>, <i>indexName</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n            <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>next</i>) is not an element of <i>elementTypes</i>,\n                throw a <b>TypeError</b> exception.</li>\n            <li>Append <i>next</i> as the last element of <i>list</i>.</li>\n            <li>Set <i>index</i> to <i>index</i> + 1.</li>\n          </ol>\n        </li>\n        <li>Return <i>list</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-invoke\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.18\"><a href=\"/sec/sec-invoke.html\" title=\"link to this section\">7.3.18</a></span> Invoke(O,P,\n          [argumentsList])</h1>\n\n      <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">Invoke</span> is used to call a\n      method property of an object. The operation is called with arguments  <var>O</var>, <var>P</var> , and optionally\n      <var>argumentsList</var> where <var>O</var> serves as both the lookup point for the property and the <b>this</b> value of\n      the call, <var>P</var> is the <a href=\"/sec/sec-object-type.html\">property key</a>, and <var>argumentsList</var> is the list of\n      arguments values passed to the method. If <var>argumentsList</var> is not present, an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> is used as its value. This abstract operation performs the following\n      steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ispropertykey.html\">IsPropertyKey</a>(<i>P</i>) is\n            <b>true</b>.</li>\n        <li>If <i>argumentsList</i> was not passed, let <i>argumentsList</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>Let  <i>func</i> be <a href=\"/sec/sec-getv.html\">GetV</a>(<i>O</i>, <i>P</i>).</li>\n        <li>Return <a href=\"/sec/sec-call.html\">Call</a>(<i>func</i>, <i>O</i>, <i>argumentsList</i>).</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-ordinaryhasinstance\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.19\"><a href=\"/sec/sec-ordinaryhasinstance.html\" title=\"link to this section\">7.3.19</a></span>\n          OrdinaryHasInstance (C, O)</h1>\n\n      <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">OrdinaryHasInstance</span>\n      implements the default algorithm for determining if an object <var>O</var> inherits from the instance object inheritance\n      path provided by constructor <var>C</var>. This abstract operation performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>C</i>) is <b>false</b>, return <b>false</b>.</li>\n        <li>If <i>C</i> has a <a href=\"/sec/sec-bound-function-exotic-objects.html\">[[BoundTargetFunction]]</a> <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>, then\n          <ol class=\"block\">\n            <li>Let <i>BC</i> be the value of <i>C&#x2019;s</i> <a href=\"/sec/sec-bound-function-exotic-objects.html\">[[BoundTargetFunction]]</a> <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>Return <a href=\"/sec/sec-instanceofoperator.html\">InstanceofOperator</a>(<i>O</i>,<i>BC</i>)  (<a href=\"/sec/sec-instanceofoperator.html\">see 12.9.4</a>).</li>\n          </ol>\n        </li>\n        <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is not Object, return <b>false</b>.</li>\n        <li>Let <i>P</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>C</i>, <code>&quot;prototype&quot;</code>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>P</i>).</li>\n        <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>P</i>) is not Object, throw a <b>TypeError</b>\n            exception.</li>\n        <li>Repeat\n          <ol class=\"block\">\n            <li>Let <i>O</i> be <i>O</i>.[[GetPrototypeOf]]().</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>O</i>).</li>\n            <li>If <i>O</i> is <code>null</code>, return <b>false</b>.</li>\n            <li>If <a href=\"/sec/sec-samevalue.html\">SameValue</a>(<i>P</i>, <i>O</i>) is <b>true</b>, return <b>true</b>.</li>\n          </ol>\n        </li>\n      </ol>\n    </section>\n\n    <section id=\"sec-speciesconstructor\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.20\"><a href=\"/sec/sec-speciesconstructor.html\" title=\"link to this section\">7.3.20</a></span>\n          SpeciesConstructor ( O, defaultConstructor )</h1>\n\n      <p class=\"normalbefore\">The abstract operation SpeciesConstructor is used to retrieve the constructor that should be used to\n      create new objects that are derived from the argument object <var>O</var>. The <var>defaultConstructor</var> argument is the\n      constructor to use if a constructor @@species property cannot be found starting from <var>O</var>. This abstract operation\n      performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is\n            Object.</li>\n        <li>Let <i>C</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>O</i>, <code>&quot;constructor&quot;</code>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>C</i>).</li>\n        <li>If <i>C</i> is <b>undefined</b>, return <i>defaultConstructor</i>.</li>\n        <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>C</i>) is not Object, throw a <b>TypeError</b>\n            exception.</li>\n        <li>Let <i>S</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>C</i>, @@species).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>S</i>).</li>\n        <li>If <i>S</i> is either <b>undefined</b> or <b>null</b>, return <i>defaultConstructor</i>.</li>\n        <li>If <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a>(<i>S</i>) is <b>true</b>, return <i>S.</i></li>\n        <li>Throw a <b>TypeError</b> exception.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-enumerableownnames\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.21\"><a href=\"/sec/sec-enumerableownnames.html\" title=\"link to this section\">7.3.21</a></span>\n          EnumerableOwnNames (O)</h1>\n\n      <p class=\"normalbefore\">When the abstract operation EnumerableOwnNames is called with Object <var>O</var> the following\n      steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>)\n            is Object.</li>\n        <li>Let <i>ownKeys</i> be <i>O</i>.[[OwnPropertyKeys]]().</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>ownKeys</i>).</li>\n        <li>Let <i>names</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>Repeat, for each element <i>key</i> of <i>ownKeys</i> in <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>\n            order\n          <ol class=\"block\">\n            <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>key</i>) is String, then\n              <ol class=\"block\">\n                <li>Let <i>desc</i> be <i>O</i>.[[GetOwnProperty]](<i>key</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>desc</i>).</li>\n                <li>If <i>desc</i> is not <b>undefined</b>, then\n                  <ol class=\"block\">\n                    <li>If <i>desc.</i>[[Enumerable]] is <b>true</b>, append <i>key</i> to <i>names</i>.</li>\n                  </ol>\n                </li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>Order the elements of <i>names</i> so they are in the same relative order as would be produced by the Iterator that\n            would be returned if the [[Enumerate]] internal method was invoked on <i>O</i>.</li>\n        <li>Return <i>names</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> The order of elements in the returned list is the same as the enumeration order that is\n        used by a for-in statement.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-getfunctionrealm\">\n      <h1><span class=\"secnum\" id=\"sec-7.3.22\"><a href=\"/sec/sec-getfunctionrealm.html\" title=\"link to this section\">7.3.22</a></span>\n          GetFunctionRealm ( obj )</h1>\n\n      <p class=\"normalbefore\">The abstract operation GetFunctionRealm with argument <var>obj</var> performs the following\n      steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>obj</i> is a callable object.</li>\n        <li>If <i>obj</i> has a [[Realm]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>, then\n          <ol class=\"block\">\n            <li>Return <i>obj</i>&#x2019;s [[Realm]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n                slot</a>.</li>\n          </ol>\n        </li>\n        <li>If <i>obj</i> is a <a href=\"/sec/sec-bound-function-exotic-objects.html\">Bound Function</a> exotic object, then\n          <ol class=\"block\">\n            <li>Let <i>target</i> be <i>obj</i>&#x2019;s <a href=\"/sec/sec-bound-function-exotic-objects.html\">[[BoundTargetFunction]]</a>\n                <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>Return GetFunctionRealm(<i>target</i>).</li>\n          </ol>\n        </li>\n        <li>If <i>obj</i> is a Proxy exotic object, then\n          <ol class=\"block\">\n            <li>If the value of the [[ProxyHandler]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>\n                of <i>obj</i> is <b>null</b>, throw a <b>TypeError</b> exception.</li>\n            <li>Let <i>proxyTarget</i> be the value of <i>obj</i>&#x2019;s [[ProxyTarget]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>Return GetFunctionRealm(<i>proxyTarget</i>).</li>\n          </ol>\n        </li>\n        <li>Return <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-code-realms.html\">Realm</a>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> Step 5 will only be reached if <var>target</var> is a non-standard exotic function object\n        that does not have a [[Realm]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</p>\n      </div>\n    </section>\n  "}