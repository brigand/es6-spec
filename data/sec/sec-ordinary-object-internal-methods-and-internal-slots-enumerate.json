{"id":"sec-ordinary-object-internal-methods-and-internal-slots-enumerate","html":"\n      <h1><span class=\"secnum\" id=\"sec-9.1.11\"><a href=\"/sec/sec-ordinary-object-internal-methods-and-internal-slots-enumerate.html\" title=\"link to this section\">9.1.11</a></span> [[Enumerate]] ()</h1>\n\n      <p class=\"normalbefore\">When the [[Enumerate]] internal method of <var>O</var> is called the following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>Return an Iterator object (<a href=\"/sec/sec-iterator-interface.html\">25.1.1.2</a>) whose <code>next</code> method iterates\n            over all the String-valued keys of enumerable properties of <i>O</i>. The Iterator object must inherit from\n            %IteratorPrototype% (<a href=\"/sec/sec-%iteratorprototype%-object.html\">25.1.2</a>). The mechanics and order of enumerating the\n            properties is not specified but must conform to the rules specified below.</li>\n      </ol>\n\n      <p>The iterator&#x2019;s <code>next</code> method processes object properties to determine whether the <a href=\"/sec/sec-object-type.html\">property key</a> should be returned as an iterator value. Returned property keys do not include keys\n      that are Symbols. Properties of the target object may be deleted during enumeration. A property that is deleted before it is\n      processed by the iterator&#x2019;s <code>next</code> method is ignored. If new properties are added to the target object\n      during enumeration, the newly added properties are not guaranteed to be processed in the active enumeration. A property name\n      will be returned by the iterator&#x2019;s <code>next</code> method at most once in any enumeration.</p>\n\n      <p>Enumerating the properties of the target object includes enumerating properties of its prototype, and the prototype of\n      the prototype, and so on, recursively; but a property of a prototype is not processed if it has the same name as a property\n      that has already been processed by the iterator&#x2019;s <code>next</code> method. The values of [[Enumerable]] attributes\n      are not considered when determining if a property of a prototype object has already been processed. The enumerable property\n      names of prototype objects must be obtained as if by invoking the prototype object&#x2019;s [[Enumerate]] internal method.\n      [[Enumerate]] must obtain the own property keys of the target object as if by calling its [[OwnPropertyKeys]] internal\n      method. Property attributes of the target object must be obtained as if by calling its [[GetOwnProperty]] internal\n      method.</p>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> The following is an informative definition of an ECMAScript generator function that\n        conforms to these rules:</p>\n\n        <pre class=\"NoteCode\">function* enumerate(obj) {</pre>\n        <pre class=\"NoteCode\">&#xA0;&#xA0;let visited=new Set;</pre>\n        <pre class=\"NoteCode\">&#xA0;&#xA0;for (let key of <a href=\"/sec/sec-reflect.ownkeys.html\">Reflect.ownKeys</a>(obj)) {</pre>\n        <pre class=\"NoteCode\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if (typeof key === &quot;string&quot;) {</pre>\n        <pre class=\"NoteCode\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;let desc = <a href=\"/sec/sec-reflect.getownpropertydescriptor.html\">Reflect.getOwnPropertyDescriptor</a>(obj,key);</pre>\n        <pre class=\"NoteCode\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if (desc) {</pre>\n        <pre class=\"NoteCode\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;visited.add(key);</pre>\n        <pre class=\"NoteCode\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if (desc.enumerable) yield key;</pre>\n        <pre class=\"NoteCode\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}</pre>\n        <pre class=\"NoteCode\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}</pre>\n        <pre class=\"NoteCode\">&#xA0;&#xA0;}</pre>\n        <pre class=\"NoteCode\">&#xA0;&#xA0;let proto = <a href=\"/sec/sec-reflect.getprototypeof.html\">Reflect.getPrototypeOf</a>(obj)</pre>\n        <pre class=\"NoteCode\">&#xA0;&#xA0;if (proto === null) return;</pre>\n        <pre class=\"NoteCode\">&#xA0;&#xA0;for (let protoName of <a href=\"/sec/sec-reflect.enumerate.html\">Reflect.enumerate</a>(proto)) {</pre>\n        <pre class=\"NoteCode\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if (!visited.has(protoName)) yield protoName;</pre>\n        <pre class=\"NoteCode\">&#xA0;&#xA0;}</pre>\n        <pre class=\"NoteCode\">}</pre>\n      </div>\n    "}