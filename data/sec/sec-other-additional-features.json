{"id":"sec-other-additional-features","html":"\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-B.3\"><a href=\"/sec/sec-other-additional-features.html\" title=\"link to this section\">B.3</a></span>\n          Other Additional Features</h1>\n    </div>\n\n    <section id=\"sec-__proto__-property-names-in-object-initializers\">\n      <h1><span class=\"secnum\" id=\"sec-B.3.1\"><a href=\"/sec/sec-__proto__-property-names-in-object-initializers.html\" title=\"link to this section\">B.3.1</a></span> __proto__ Property Names in Object Initializers</h1>\n\n      <p>The following Early Error rule is added to those in <a href=\"/sec/sec-object-initializer-static-semantics-early-errors.html\">12.2.6.1</a>:</p>\n\n      <p><span class=\"prod\"><span class=\"nt\">ObjectLiteral</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">PropertyDefinitionList</span> <code class=\"t\">}ObjectLiteral</code> <code class=\"t\">:</code> <code class=\"t\">{</code> <span class=\"nt\">PropertyDefinitionList</span> <code class=\"t\">,</code> <code class=\"t\">}</code></span></p>\n\n      <ul>\n        <li>\n          <p>It is a Syntax Error if <span style=\"font-family: Times New Roman\">PropertyNameList</span> of <span class=\"nt\">PropertyDefinitionList</span> contains any duplicate entries for <code>&quot;__proto__&quot;</code> and at least two of\n          those entries were obtained from productions of the form  <span class=\"prod\"><span class=\"nt\">PropertyDefinition</span>\n          <span class=\"geq\">:</span> <span class=\"nt\">PropertyName</span> <code class=\"t\">:</code> <span class=\"nt\">AssignmentExpression</span></span> .</p>\n        </li>\n      </ul>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> The <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> returned by\n        PropertyNameList does not include string literal property names defined as using a <i><span style=\"font-family: Times New\n        Roman\">ComputedPropertyName</span>.</i></p>\n      </div>\n\n      <p class=\"normalbefore\">In <a href=\"/sec/sec-object-initializer-runtime-semantics-propertydefinitionevaluation.html\">12.2.6.9</a> the\n      PropertyDefinitionEvaluation algorithm for the production<br><span class=\"prod\"><span class=\"nt\">PropertyDefinition</span>\n      <span class=\"geq\">:</span> <span class=\"nt\">PropertyName</span> <code class=\"t\">:</code> <span class=\"nt\">AssignmentExpression</span></span><br>is replaced with the following definition:</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">PropertyDefinition</span> <span class=\"geq\">:</span> <span class=\"nt\">PropertyName</span> <code class=\"t\">:</code> <span class=\"nt\">AssignmentExpression</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>propKey</i> be the result of evaluating <i>PropertyName</i>.</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>propKey</i>).</li>\n        <li>Let <i>exprValueRef</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n        <li>Let <i>propValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprValueRef</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>propValue</i>).</li>\n        <li>If <i>propKey</i> is the String value <code>&quot;__proto__&quot;</code> and if IsComputedPropertyKey(<i>propKey</i>) is\n            <b>false</b>, then\n          <ol class=\"block\">\n            <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>propValue</i>) is either Object or Null, then\n              <ol class=\"block\">\n                <li>Return <i>object</i>.[[SetPrototypeOf]](<i>propValue</i>).</li>\n              </ol>\n            </li>\n            <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family:\n                sans-serif\">empty</span>).</li>\n          </ol>\n        </li>\n        <li>If <a href=\"/sec/sec-isanonymousfunctiondefinition.html\">IsAnonymousFunctionDefinition</a>(<i>AssignmentExpression)</i> is\n            <b>true</b>, then\n          <ol class=\"block\">\n            <li>Let <i>hasNameProperty</i> be <a href=\"/sec/sec-hasownproperty.html\">HasOwnProperty</a>(<i>propValue</i>,\n                <code>&quot;name&quot;</code>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>hasNameProperty</i>).</li>\n            <li>If <i>hasNameProperty</i> is <b>false</b>, perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>propValue</i>, <i>propKey</i>).</li>\n          </ol>\n        </li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>enumerable</i> is <b>true</b>.</li>\n        <li>Return <a href=\"/sec/sec-createdatapropertyorthrow.html\">CreateDataPropertyOrThrow</a>(<i>object</i>, <i>propKey</i>,\n            <i>propValue</i>).</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-labelled-function-declarations\">\n      <h1><span class=\"secnum\" id=\"sec-B.3.2\"><a href=\"/sec/sec-labelled-function-declarations.html\" title=\"link to this section\">B.3.2</a></span> Labelled Function Declarations</h1>\n\n      <p>Prior to ECMAScript 2015, the specification of <span class=\"nt\">LabelledStatement</span> did not allow for the\n      association of a statement label with a <span class=\"nt\">FunctionDeclaration</span>. However, a labelled <span class=\"nt\">FunctionDeclaration</span> was an allowable extension for non-<a href=\"/sec/sec-strict-mode-code.html\">strict code</a> and\n      most browser-hosted ECMAScript implementations supported that extension. In ECMAScript 2015, the grammar productions for\n      <span class=\"nt\">LabelledStatement</span> permits use of <span class=\"nt\">FunctionDeclaration</span> as a <span class=\"nt\">LabelledItem</span> but <a href=\"/sec/sec-labelled-statements-static-semantics-early-errors.html\">13.13.1</a> includes an\n      Early Error rule that produces a Syntax Error if that occurs. For web browser compatibility, that rule is modified with the\n      addition of the underlined text:</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">LabelledItem</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionDeclaration</span></div>\n      <ul>\n        <li>It is a Syntax Error if any strict mode source code matches this rule.</li>\n      </ul>\n    </section>\n\n    <section id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">\n      <h1><span class=\"secnum\" id=\"sec-B.3.3\"><a href=\"/sec/sec-block-level-function-declarations-web-legacy-compatibility-semantics.html\" title=\"link to this section\">B.3.3</a></span> Block-Level Function Declarations Web Legacy Compatibility Semantics</h1>\n\n      <p>Prior to ECMAScript 2015, the ECMAScript specification did not define the occurrence of a <span class=\"nt\">FunctionDeclaration</span> as an element of a <span class=\"nt\">Block</span> statement&#x2019;s <span class=\"nt\">StatementList</span>. However, support for that form of <span class=\"nt\">FunctionDeclaration</span> was an\n      allowable extension and most browser-hosted ECMAScript implementations permitted them. Unfortunately, the semantics of such\n      declarations differ among those implementations. Because of these semantic differences, existing web ECMAScript code that\n      uses <span class=\"nt\">Block</span> level function declarations is only portable among browser implementation if the usage\n      only depends upon the semantic intersection of all of the browser implementations for such declarations. The following are\n      the use cases that fall within that intersection semantics:</p>\n\n      <ol class=\"proc\">\n        <li>A function is declared and only referenced within a single block\n          <ul>\n            <li>\n              <p>A <span class=\"nt\">FunctionDeclaration</span> whose <span class=\"nt\">BindingIdentifier</span> is the name\n              <var>f</var> occurs exactly once within the function code of an enclosing function <var>g</var> and that declaration\n              is nested within a <span class=\"nt\">Block</span>.</p>\n            </li>\n\n            <li>\n              <p>No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code\n              of <var>g</var></p>\n            </li>\n\n            <li>\n              <p>All occurrences of <var>f</var> as an <span class=\"nt\">IdentifierReference</span> are within the <span class=\"nt\">StatementList</span> of the <span class=\"nt\">Block</span> containing the declaration of <var>f</var>.</p>\n            </li>\n          </ul>\n        </li>\n        <li>A function is declared and possibly used within a single <span class=\"nt\">Block</span> but also referenced by an inner\n            function definition that is not contained within that same <span class=\"nt\">Block</span>.\n          <ul>\n            <li>\n              <p>A <span class=\"nt\">FunctionDeclaration</span> whose <span class=\"nt\">BindingIdentifier</span> is the name\n              <var>f</var> occurs exactly once within the function code of an enclosing function <var>g</var> and that declaration\n              is nested within a <span class=\"nt\">Block</span>.</p>\n            </li>\n\n            <li>\n              <p>No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code\n              of <var>g</var></p>\n            </li>\n\n            <li>\n              <p>There may be occurrences of <var>f</var> as an <span class=\"nt\">IdentifierReference</span> within the <span class=\"nt\">StatementList</span> of the <span class=\"nt\">Block</span> containing the declaration of <var>f</var>.</p>\n            </li>\n\n            <li>\n              <p>There is at least one occurrence of <var>f</var> as an <span class=\"nt\">IdentifierReference</span> within the\n              function code of <var>g</var> that lexically follows the <span class=\"nt\">Block</span> containing the declaration of\n              <var>f</var>.</p>\n            </li>\n          </ul>\n        </li>\n        <li>A function is declared and possibly used within a single block but also referenced within subsequent blocks.\n          <ul>\n            <li>\n              <p>A <span class=\"nt\">FunctionDeclaration</span> whose <span class=\"nt\">BindingIdentifier</span> is the name\n              <var>f</var> occurs exactly once within the function code of an enclosing function <var>g</var> and that declaration\n              is nested within a <span class=\"nt\">Block</span>.</p>\n            </li>\n\n            <li>\n              <p>No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code\n              of <var>g</var></p>\n            </li>\n\n            <li>\n              <p>There may be occurrences of <var>f</var> as an <span class=\"nt\">IdentifierReference</span> within the <span class=\"nt\">StatementList</span> of the <span class=\"nt\">Block</span> containing the declaration of <var>f</var>.</p>\n            </li>\n\n            <li>\n              <p>There is at least one occurrence of <var>f</var> as an <span class=\"nt\">IdentifierReference</span> within another\n              function <var>h</var> that is nested within <var>g</var> and no other declaration of <var>f</var> shadows the\n              references to <var>f</var> from within <var>h</var>.</p>\n            </li>\n\n            <li>\n              <p>All invocations of <i>h</i> occur after the declaration of <i>f</i> has been evaluated.</p>\n            </li>\n          </ul>\n        </li>\n      </ol>\n\n      <p>The first use case is interoperable with the semantics of <span class=\"nt\">Block</span> level function declarations\n      provided by ECMAScript 2015. Any pre-existing ECMAScript code that employees that use case will operate using the Block\n      level function declarations semantics defined by clauses 9, 13, and 14 of this specification.</p>\n\n      <p>ECMAScript 2015 interoperability for the second and third use cases requires the following extensions to the <a href=\"/sec/sec-ordinary-and-exotic-objects-behaviours.html\">clause 9</a> and <a href=\"/sec/sec-ecmascript-language-functions-and-classes.html\">clause 14</a> semantics. During <a href=\"/sec/sec-functiondeclarationinstantiation.html\">FunctionDeclarationInstantiation</a> (<a href=\"/sec/sec-functiondeclarationinstantiation.html\">9.2.12</a>) the following steps are performed in place of step 29:</p>\n\n      <ol class=\"proc\">\n        <li>If <i>strict</i> is <b>false</b>, then\n          <ol class=\"block\">\n            <li>For each <i>FunctionDeclaration</i> <i>f</i> in <i>varDeclarations</i> that is directly contained in the\n                <i>StatementList</i> of a <i>Block</i>, <i>CaseClause</i>, or <i>DefaultClause,</i>\n              <ol class=\"block\">\n                <li>Let <i>F</i> be StringValue of the <i>BindingIdentifier</i> of <i>FunctionDeclaration</i> <i>f</i>.</li>\n                <li>If replacing the <i>FunctionDeclaration</i> <i>f</i> with a <i>VariableStatement</i> that has <i>F</i> as a\n                    <i>BindingIdentifier</i> would not produce any Early Errors for <i>func</i> and <i>F</i> is not an element of\n                    BoundNames of <i>argumentsList</i>, then\n                  <ol class=\"block\">\n                    <li><span style=\"font-family: sans-serif\">NOTE\tA var binding for</span> <i>F</i> <span style=\"font-family:\n                        sans-serif\">is only instantiated here if it is neither a VarDeclaredName, the name of a formal parameter,\n                        or another</span> <i>FunctionDeclarations</i>.</li>\n                    <li>If <i>instantiatedVarNames</i> does not contain <i>F</i>, then\n                      <ol class=\"block\">\n                        <li>Let <i>status</i> be <i>varEnvRec.</i>CreateMutableBinding(<i>F</i>).</li>\n                        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is never an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                        <li>Perform <i>varEnvRec.</i>InitializeBinding(<i>F</i>, <b>undefined</b>).</li>\n                        <li>Append <i>F</i> to <i>instantiatedVarNames</i>.</li>\n                      </ol>\n                    </li>\n                    <li>When the <i>FunctionDeclaration</i> <i>f</i> is evaluated, perform the following steps in place of the\n                        <i>FunctionDeclaration</i> Evaluation algorithm provided in <a href=\"/sec/sec-function-definitions-runtime-semantics-evaluation.html\">14.1.20</a>:\n                      <ol class=\"nested proc\">\n                        <li>Let <i>fenv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">VariableEnvironment</a>.</li>\n                        <li>Let <i>benv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n                        <li>Let <i>fobj</i> be <i>benv</i>.GetBindingValue(<i>F</i>, <b>false</b>).</li>\n                        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>fobj</i>).</li>\n                        <li>Let <i>status</i> be <i>fenv</i>.SetMutableBinding(<i>F</i>, <i>fobj</i>, <b>false</b>).</li>\n                        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is never an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family:\n                            sans-serif\">empty</span>).</li>\n                      </ol>\n                    </li>\n                  </ol>\n                </li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n      </ol>\n\n      <p>If an ECMAScript implementation has a mechanism for reporting diagnostic warning messages, a warning should be produced\n      for each function whose function code contains a <i>FunctionDeclaration</i> for which steps 1.a.ii.1-3 will be\n      performed.</p>\n    </section>\n\n    <section id=\"sec-functiondeclarations-in-ifstatement-statement-clauses\">\n      <h1><span class=\"secnum\" id=\"sec-B.3.4\"><a href=\"/sec/sec-functiondeclarations-in-ifstatement-statement-clauses.html\" title=\"link to this section\">B.3.4</a></span> FunctionDeclarations in IfStatement Statement Clauses</h1>\n\n      <p class=\"normalbefore\">The following rules for <span class=\"nt\">IfStatement</span> augment those in <a href=\"/sec/sec-if-statement.html\">13.6</a>:</p>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">IfStatement</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">FunctionDeclaration</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">else</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span><sub class=\"g-params\">[?Yield, ?Return]</sub> <code class=\"t\">else</code> <span class=\"nt\">FunctionDeclaration</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">FunctionDeclaration</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">else</code> <span class=\"nt\">FunctionDeclaration</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">FunctionDeclaration</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <p>The above rules are only applied when parsing code that is not <a href=\"/sec/sec-strict-mode-code.html\">strict mode code</a>. If\n      any such code is match by one of these rules subsequent processing of that code takes places as if each matching occurrence\n      of <span class=\"nt\">FunctionDeclaration</span><sub>[?Yield]</sub> was the sole <span class=\"nt\">StatementListItem</span> of\n      a <span class=\"nt\">BlockStatement</span> occupying that position in the source code. The semantics of such a synthetic <span class=\"nt\">BlockStatement</span> includes the web legacy compatibility semantics specified in <a href=\"/sec/sec-block-level-function-declarations-web-legacy-compatibility-semantics.html\">B.3.3</a>.</p>\n    </section>\n\n    <section id=\"sec-variablestatements-in-catch-blocks\">\n      <h1><span class=\"secnum\" id=\"sec-B.3.5\"><a href=\"/sec/sec-variablestatements-in-catch-blocks.html\" title=\"link to this section\">B.3.5</a></span> VariableStatements in Catch blocks</h1>\n\n      <p>The content of <a href=\"/sec/sec-try-statement-static-semantics-early-errors.html\">subclause 13.15.1</a> is replaced with the\n      following:</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">Catch</span> <span class=\"geq\">:</span> <code class=\"t\">catch</code> <code class=\"t\">(</code> <span class=\"nt\">CatchParameter</span> <code class=\"t\">)</code> <span class=\"nt\">Block</span></div>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if BoundNames <span style=\"font-family: Times New Roman\">of <i>CatchParameter</i></span>\n          contains any duplicate elements.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if any element of the BoundNames of <span class=\"nt\">CatchParameter</span> also occurs in the\n          LexicallyDeclaredNames of <span class=\"nt\">Block</span>.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if any element of the BoundNames of <span class=\"nt\">CatchParameter</span> also occurs in the\n          VarDeclaredNames of <var>Block, unless that element is only bound by a VariableStatement or the VariableDeclarationList\n          of a for statement, or the ForBinding of a for-in statement</var>.</p>\n        </li>\n      </ul>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> The <span class=\"nt\">Block</span> of a <span class=\"nt\">Catch</span> clause may contain\n        <code>var</code> declarations that bind a name that is also bound by the <span class=\"nt\">CatchParameter</span>. At\n        runtime, such bindings are instantiated in the VariableDeclarationEnvironment. They do not shadow the same-named bindings\n        introduced by the <span class=\"nt\">CatchParameter</span> and hence the <span class=\"nt\">Initializer</span> for such\n        <code>var</code> declarations will assign to the corresponding catch parameter rather than the <code>var</code> binding.\n        The relaxation of the normal static semantic rule does not apply to names only bound by for-of statements.</p>\n      </div>\n\n      <p>This modified behaviour also applies to <code>var</code> and <code>function</code> declarations introduced by direct\n      evals contained within the <span class=\"nt\">Block</span> of a <span class=\"nt\">Catch</span> clause. This change is\n      accomplished by modify the algorithm of <a href=\"/sec/sec-evaldeclarationinstantiation.html\">18.2.1.2</a> as follows:</p>\n\n      <p class=\"normalbefore\">Step 5.d.ii.2.a.i is replaced by:</p>\n\n      <p class=\"special2\">i.\tIf <i>thisEnvRec</i> is not the <a href=\"/sec/sec-environment-records.html\">Environment Record</a> for a\n      <i>Catch</i> clause, throw a <b>SyntaxError</b> exception.</p>\n\n      <p class=\"special2\">ii.\tIf <i>name</i> is <i>bound by any syntactic form other than a FunctionDeclaration, a\n      VariableStatement, the VariableDeclarationList of a for statement, or the ForBinding of a for-in statement</i>, throw a\n      <b>SyntaxError</b> exception.</p>\n    </section>\n  "}