{"id":"sec-parseint-string-radix","html":"\n      <h1><span class=\"secnum\" id=\"sec-18.2.5\"><a href=\"/sec/sec-parseint-string-radix.html\" title=\"link to this section\">18.2.5</a></span>\n          parseInt (string , radix)</h1>\n\n      <p>The <code>parseInt</code> function produces an integer value dictated by interpretation of the contents of the\n      <var>string</var> argument according to the specified <var>radix</var>. Leading white space in <var>string</var> is ignored.\n      If <var>radix</var> is <b>undefined</b> or 0, it is assumed to be <span style=\"font-family: Times New Roman\">10</span>\n      except when the number begins with the code unit pairs <code>0x</code> or <code>0X</code>, in which case a radix of 16 is\n      assumed. If <var>radix</var> is <span style=\"font-family: Times New Roman\">16,</span> the number may also optionally begin\n      with the code unit pairs <code>0x</code> or <code>0X</code>.</p>\n\n      <p class=\"normalbefore\">The <code>parseInt</code> function is the %parseInt% intrinsic object. When the\n      <code>parseInt</code> function is called, the following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>inputString</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>string</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>string</i>).</li>\n        <li>Let <i>S</i> be a newly created substring of <i>inputString</i> consisting of the first code unit that is not a\n            <i>StrWhiteSpaceChar</i> and all code units following that code unit. (In other words, remove leading white space.) If\n            <i>inputString</i> does not contain any such code unit, let <i>S</i> be the empty string.</li>\n        <li>Let <i>sign</i> be 1.</li>\n        <li>If <i>S</i> is not empty and the first code unit of <i>S</i> is 0x002D (HYPHEN-MINUS), let <i>sign</i> be\n            &#x2212;1.</li>\n        <li>If <i>S</i> is not empty and the first code unit of <i>S</i> is 0x002B (PLUS SIGN) or 0x002D (HYPHEN-MINUS), remove\n            the first code unit from <i>S</i>.</li>\n        <li>Let <i>R</i> = <a href=\"/sec/sec-toint32.html\">ToInt32</a>(<i>radix</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>R</i>).</li>\n        <li>Let <i>stripPrefix</i> be <b>true</b>.</li>\n        <li>If <i>R</i> &#x2260; 0, then\n          <ol class=\"block\">\n            <li>If <i>R</i> &lt; 2 or <i>R</i> &gt; 36, return <b>NaN</b>.</li>\n            <li>If <i>R</i> &#x2260; 16, let <i>stripPrefix</i> be <b>false</b>.</li>\n          </ol>\n        </li>\n        <li>Else <i>R</i> = 0,\n          <ol class=\"block\">\n            <li>Let <i>R</i> = 10.</li>\n          </ol>\n        </li>\n        <li>If <i>stripPrefix</i> is <b>true</b>, then\n          <ol class=\"block\">\n            <li>If the length of <i>S</i> is at least 2 and the first two code units of <i>S</i> are either <code>&quot;0x&quot;</code> or\n                <code>&quot;0X&quot;</code>, remove the first two code units from <i>S</i> and let <i>R</i> = 16.</li>\n          </ol>\n        </li>\n        <li>If <i>S</i> contains a code unit that is not a radix-<i>R</i> digit, let <i>Z</i> be the substring of <i>S</i>\n            consisting of all code units before the first such code unit; otherwise, let <i>Z</i> be <i>S</i>.</li>\n        <li>If <i>Z</i> is empty, return <b>NaN</b>.</li>\n        <li>Let <i>mathInt</i> be the mathematical integer value that is represented by <i>Z</i> in radix-<i>R</i> notation, using\n            the letters <b>A</b>-<b>Z</b> and <b>a</b>-<b>z</b> for digits with values 10 through 35. (However, if <i>R</i> is 10\n            and <i>Z</i> contains more than 20 significant digits, every significant digit after the 20th may be replaced by a\n            <b>0</b> digit, at the option of the implementation; and if <i>R</i> is not 2, 4, 8, 10, 16, or 32, then\n            <i>mathInt</i> may be an implementation-dependent approximation to the mathematical integer value that is represented\n            by <i>Z</i> in radix-<i>R</i> notation.)</li>\n        <li>If <i>mathInt</i> = 0, then\n          <ol class=\"block\">\n            <li>If <i>sign</i> = &#x2212;1,  return &#x2212;0.</li>\n            <li>Return +0.</li>\n          </ol>\n        </li>\n        <li>Let <i>number</i> be the Number value for <i>mathInt</i>.</li>\n        <li>Return <i>sign</i> &#xD7; <i>number</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> <code>parseInt</code> may interpret only a leading portion of <var>string</var> as an\n        integer value; it ignores any code units that cannot be interpreted as part of the notation of an integer, and no\n        indication is given that any such code units were ignored.</p>\n      </div>\n    "}