{"id":"sec-parsemodule","html":"\n          <h1><span class=\"secnum\" id=\"sec-15.2.1.16.1\"><a href=\"/sec/sec-parsemodule.html\" title=\"link to this section\">15.2.1.16.1</a></span> Runtime Semantics: ParseModule ( sourceText )</h1>\n\n          <p class=\"normalbefore\">The abstract operation ParseModule with argument <var>sourceText</var> creates a <a href=\"/sec/sec-source-text-module-records.html\">Source Text Module Record</a> based upon the result of parsing\n          <var>sourceText</var> as a <var>Module.</var> ParseModule performs the following steps:</p>\n\n          <ol class=\"proc\">\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>sourceText</i> is an ECMAScript source text (see <a href=\"/sec/sec-ecmascript-language-source-code.html\">clause 10</a>).</li>\n            <li>Parse <i>sourceText</i> using <i>Module</i> as the goal symbol and analyze the parse result for any Early Error\n                conditions. If the parse was successful and no early errors were found, let <i>body</i> be the resulting parse\n                tree. Otherwise, let <i>body</i> be an indication of one or more parsing errors and/or early errors. Parsing and\n                early error detection may be interweaved in an implementation dependent manner. If more than one parse or early\n                error is present, the number and ordering of reported errors is implementation dependent but at least one error\n                must be reported.</li>\n            <li>If <i>body</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a> or error\n                indication, then\n              <ol class=\"block\">\n                <li>Throw a <b>SyntaxError</b> exception.</li>\n              </ol>\n            </li>\n            <li>Let <i>requestedModules</i> be the ModuleRequests of <i>body</i>.</li>\n            <li>Let <i>importEntries</i> be ImportEntries of <i>body</i>.</li>\n            <li>Let <i>importedBoundNames</i> be <a href=\"/sec/sec-importedlocalnames.html\">ImportedLocalNames</a>(<i>importEntries</i>).</li>\n            <li>Let <i>indirectExportEntries</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n            <li>Let <i>localExportEntries</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n            <li>Let <i>starExportEntries</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n            <li>Let <i>exportEntries</i> be ExportEntries of <i>body</i>.</li>\n            <li>For each record <i>ee</i> in <i>exportEntries</i>, do\n              <ol class=\"block\">\n                <li>If <i>ee</i>.[[ModuleRequest]] is <b>null</b>, then\n                  <ol class=\"block\">\n                    <li>If <i>ee</i>.[[LocalName]] is not an element of <i>importedBoundNames</i>, then\n                      <ol class=\"block\">\n                        <li>Append <i>ee</i> to <i>localExportEntries</i>.</li>\n                      </ol>\n                    </li>\n                    <li>Else\n                      <ol class=\"block\">\n                        <li>Let <i>ie</i> be the element of <i>importEntries</i> whose [[LocalName]] is the same as\n                            <i>ee</i>.[[LocalName]].</li>\n                        <li>If <i>ie</i>.[[ImportName]] is <code>&quot;*&quot;</code>, then\n                          <ol class=\"block\">\n                            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: this is a re-export of an imported module\n                                namespace object.</li>\n                            <li>Append <i>ee</i> to <i>localExportEntries</i>.</li>\n                          </ol>\n                        </li>\n                        <li>Else, this is a re-export of a single name\n                          <ol class=\"block\">\n                            <li>Append to <i>indirectExportEntries</i> the Record {[[ModuleRequest]]: <i>ie</i>.[[ModuleRequest]],\n                                [[ImportName]]: <i>ie</i>.[[ImportName]], [[LocalName]]: <b>null</b>, [[ExportName]]:\n                                <i>ee</i>.[[ExportName]] }.</li>\n                          </ol>\n                        </li>\n                      </ol>\n                    </li>\n                  </ol>\n                </li>\n                <li>Else, if <i>ee</i>.[[ImportName]] is <code>&quot;*&quot;</code>, then\n                  <ol class=\"block\">\n                    <li>Append <i>ee</i> to <i>starExportEntries</i>.</li>\n                  </ol>\n                </li>\n                <li>Else,\n                  <ol class=\"block\">\n                    <li>Append <i>ee</i> to <i>indirectExportEntries</i>.</li>\n                  </ol>\n                </li>\n              </ol>\n            </li>\n            <li>Return <a href=\"/sec/sec-source-text-module-records.html\">Source Text Module Record</a> {[[Realm]]: <b>undefined</b>,\n                [[Environment]]: <b>undefined</b>, [[Namespace]]: <b>undefined</b>, [[Evaluated]]: <b>false</b>,\n                [[ECMAScriptCode]]: <i>body</i>, [[RequestedModules]]: <i>requestedModules</i>, [[ImportEntries]]:\n                <i>importEntries</i>, [[LocalExportEntries]]: <i>localExportEntries</i>, [[StarExportEntries]]:\n                <i>starExportEntries</i>, [[IndirectExportEntries]]: <i>indirectExportEntries</i>}.</li>\n          </ol>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE</span> An implementation may parse module source text and analyze it for Early Error\n            conditions prior to the evaluation of ParseModule for that module source text. However, the reporting of any errors\n            must be deferred until the point where this specification actually performs ParseModule upon that source text.</p>\n          </div>\n        "}