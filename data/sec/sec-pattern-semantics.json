{"id":"sec-pattern-semantics","html":"\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-21.2.2\"><a href=\"/sec/sec-pattern-semantics.html\" title=\"link to this section\">21.2.2</a></span>\n            Pattern Semantics</h1>\n\n        <p>A regular expression pattern is converted into an internal procedure using the process described below. An\n        implementation is encouraged to use more efficient algorithms than the ones listed below, as long as the results are the\n        same. The internal procedure is used as the value of a RegExp object&#x2019;s [[RegExpMatcher]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</p>\n\n        <p>A <span class=\"nt\">Pattern</span> is either a BMP pattern or a Unicode pattern depending upon whether or not its\n        associated flags contain a <code>&quot;u&quot;</code>. A BMP pattern matches against a String interpreted as consisting of a\n        sequence of 16-bit values that are Unicode code points in the range of the Basic Multilingual Plane. A Unicode pattern\n        matches against a String interpreted as consisting of Unicode code points encoded using UTF-16. In the context of\n        describing the behaviour of a BMP pattern &#x201C;character&#x201D; means a single 16-bit Unicode BMP code point. In the\n        context of describing the behaviour of a Unicode pattern &#x201C;character&#x201D; means a UTF-16 encoded code point (<a href=\"/sec/sec-ecmascript-language-types-string-type.html\">6.1.4</a>). In either context, &#x201C;character value&#x201D; means the\n        numeric value of the  corresponding non-encoded code point.</p>\n\n        <p>The syntax and semantics of <span class=\"nt\">Pattern</span> is defined as if the source code for the <span class=\"nt\">Pattern</span> was a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> of <span class=\"nt\">SourceCharacter</span> values where each <span class=\"nt\">SourceCharacter</span> corresponds to a Unicode code\n        point. If a BMP pattern contains a non-BMP <span class=\"nt\">SourceCharacter</span> the entire pattern is encoded using\n        UTF-16 and the individual code units of that encoding are used as the elements of the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> For example, consider a pattern expressed in source text as the single non-BMP character\n          U+1D11E (MUSICAL SYMBOL G CLEF). Interpreted as a Unicode pattern, it would be a single element (character) <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> consisting of the single code point 0x1D11E. However,\n          interpreted as a BMP pattern, it is first UTF-16 encoded to produce a two element <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> consisting of the code units 0xD834 and 0xDD1E.</p>\n\n          <p>Patterns are passed to the RegExp constructor as ECMAScript String values in which non-BMP characters are UTF-16\n          encoded. For example, the single character MUSICAL SYMBOL G CLEF pattern, expressed as a String value, is a String of\n          length 2 whose elements were the code units 0xD834 and 0xDD1E. So no further translation of the string would be\n          necessary to process it as a BMP pattern consisting of two pattern characters. However, to process it as a Unicode\n          pattern <a href=\"/sec/sec-utf16decode.html\">UTF16Decode</a> (<a href=\"/sec/sec-utf16decode.html\">see 10.1.2</a>) must be used in producing\n          a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> consisting of a single pattern character, the code point\n          U+1D11E.</p>\n\n          <p>An implementation may not actually perform such translations to or from UTF-16, but the semantics of this\n          specification requires that the result of pattern matching be as if such translations were performed.</p>\n        </div>\n      </div>\n\n      <section id=\"sec-notation\">\n        <h1><span class=\"secnum\" id=\"sec-21.2.2.1\"><a href=\"/sec/sec-notation.html\" title=\"link to this section\">21.2.2.1</a></span>\n            Notation</h1>\n\n        <p>The descriptions below use the following variables:</p>\n\n        <ul>\n          <li>\n            <p><span class=\"nt\">Input</span> is a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> consisting of all of\n            the characters, in order, of the String being matched by the regular expression pattern. Each character is either a\n            code unit or a code point, depending upon the kind of pattern involved. The notation <span style=\"font-family: Times\n            New Roman\"><i>Input</i>[<i>n</i>]</span> means the <span style=\"font-family: Times New\n            Roman\"><i>n<sup>th</sup></i></span> character of <span class=\"nt\">Input</span>, where <var>n</var> can range between 0\n            (inclusive) and <span class=\"nt\">InputLength</span> (exclusive).</p>\n          </li>\n\n          <li>\n            <p><span class=\"nt\">InputLength</span> is the number of characters in <span class=\"nt\">Input</span>.</p>\n          </li>\n\n          <li>\n            <p><span class=\"nt\">NcapturingParens</span> is the total number of left capturing parentheses (i.e. the total number\n            of times the <span class=\"prod\"><span class=\"nt\">Atom</span> <span class=\"geq\">::</span> <code class=\"t\">(</code>\n            <span class=\"nt\">Disjunction</span> <code class=\"t\">)</code></span> production is expanded) in the pattern. A left\n            capturing parenthesis is any <code>(</code> pattern character that is matched by the <code>(</code> terminal of the\n            <span class=\"prod\"><span class=\"nt\">Atom</span> <span class=\"geq\">::</span> <code class=\"t\">(</code> <span class=\"nt\">Disjunction</span> <code class=\"t\">)</code></span> production.</p>\n          </li>\n\n          <li>\n            <p><span class=\"nt\">IgnoreCase</span> is <b>true</b> if the RegExp object&apos;s [[OriginalFlags]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> contains <code>&quot;i&quot;</code> and otherwise is\n            <b>false</b>.</p>\n          </li>\n\n          <li>\n            <p><span class=\"nt\">Multiline</span> is <b>true</b> if the RegExp object&#x2019;s [[OriginalFlags]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> contains <code>&quot;m&quot;</code> and otherwise is\n            <b>false</b>.</p>\n          </li>\n\n          <li>\n            <p><span class=\"nt\">Unicode</span> is <b>true</b> if the RegExp object&#x2019;s [[OriginalFlags]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> contains <code>&quot;u&quot;</code> and otherwise is\n            <b>false</b>.</p>\n          </li>\n        </ul>\n\n        <p class=\"normalbefore\">Furthermore, the descriptions below use the following internal data structures:</p>\n\n        <ul>\n          <li>\n            <p>A <span class=\"nt\">CharSet</span> is a mathematical set of characters, either code units or code points depending\n            up the state of the <span class=\"nt\">Unicode</span> flag. &#x201C;All characters&#x201D; means either all code unit\n            values or all code point values also depending upon the state if <span class=\"nt\">Unicode</span>.</p>\n          </li>\n\n          <li>\n            <p>A <span class=\"nt\">State</span> is an ordered pair <span style=\"font-family: Times New Roman\">(<i>endIndex</i>,\n            <i>captures</i>)</span> where <var>endIndex</var> is an integer and <var>captures</var> is a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> of <span class=\"nt\">NcapturingParens</span> values. <span class=\"nt\">States</span> are used to represent partial match states in the regular expression matching algorithms. The\n            <var>endIndex</var> is one plus the index of the last input character matched so far by the pattern, while\n            <var>captures</var> holds the results of capturing parentheses. The <span style=\"font-family: Times New\n            Roman\"><i>n<sup>th</sup></i></span> element of <var>captures</var> is either a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> that represents the value obtained by the <span style=\"font-family: Times New Roman\"><i>n<sup>th</sup></i></span> set of capturing parentheses or <b>undefined</b> if\n            the <span style=\"font-family: Times New Roman\"><i>n<sup>th</sup></i></span> set of capturing parentheses hasn&#x2019;t\n            been reached yet. Due to backtracking, many <span class=\"nt\">States</span> may be in use at any time during the\n            matching process.</p>\n          </li>\n\n          <li>\n            <p>A <span class=\"nt\">MatchResult</span> is either a <span class=\"nt\">State</span> or the special token <b>failure</b>\n            that indicates that the match failed.</p>\n          </li>\n\n          <li>\n            <p>A <span class=\"nt\">Continuation</span> procedure is an internal closure (i.e. an internal procedure with some\n            arguments already bound to values) that takes one <span class=\"nt\">State</span> argument and returns a <span class=\"nt\">MatchResult</span> result. If an internal closure references variables which are bound in the function that\n            creates the closure, the closure uses the values that these variables had at the time the closure was created. The\n            <span class=\"nt\">Continuation</span> attempts to match the remaining portion (specified by the closure&apos;s already-bound\n            arguments) of the pattern against <span class=\"nt\">Input</span>, starting at the intermediate state given by its <span class=\"nt\">State</span> argument. If the match succeeds, the <span class=\"nt\">Continuation</span> returns the final\n            <span class=\"nt\">State</span> that it reached; if the match fails, the <span class=\"nt\">Continuation</span> returns\n            <b>failure</b>.</p>\n          </li>\n\n          <li>\n            <p>A <span class=\"nt\">Matcher</span> procedure is an internal closure that takes two arguments &#x2014; a <span class=\"nt\">State</span> and a <span class=\"nt\">Continuation</span> &#x2014; and returns a <span class=\"nt\">MatchResult</span> result. A <span class=\"nt\">Matcher</span> attempts to match a middle subpattern\n            (specified by the closure&apos;s already-bound arguments) of the pattern against <span class=\"nt\">Input</span>, starting at\n            the intermediate state given by its <span class=\"nt\">State</span> argument. The <span class=\"nt\">Continuation</span>\n            argument should be a closure that matches the rest of the pattern. After matching the subpattern of a pattern to\n            obtain a new <span class=\"nt\">State</span>, the <span class=\"nt\">Matcher</span> then calls <span class=\"nt\">Continuation</span> on that new <span class=\"nt\">State</span> to test if the rest of the pattern can match\n            as well. If it can, the <i>Matcher</i> returns the <span class=\"nt\">State</span> returned by <span class=\"nt\">Continuation</span>; if not, the <span class=\"nt\">Matcher</span> may try different choices at its choice\n            points, repeatedly calling <span class=\"nt\">Continuation</span> until it either succeeds or all possibilities have\n            been exhausted.</p>\n          </li>\n\n          <li>\n            <p>An <span class=\"nt\">AssertionTester</span> procedure is an internal closure that takes a <span class=\"nt\">State</span> argument and returns a Boolean result. The assertion tester tests a specific condition\n            (specified by the closure&apos;s already-bound arguments) against the current place in <span class=\"nt\">Input</span> and\n            returns <b>true</b> if the condition matched or <b>false</b> if not.</p>\n          </li>\n\n          <li>\n            <p>An <span class=\"nt\">EscapeValue</span> is either a character or an integer. An <span class=\"nt\">EscapeValue</span>\n            is used to denote the interpretation of a <span class=\"nt\">DecimalEscape</span> escape sequence: a character\n            <var>ch</var> means that the escape sequence is interpreted as the character <var>ch</var>, while an integer\n            <var>n</var> means that the escape sequence is interpreted as a backreference to the <span style=\"font-family: Times\n            New Roman\"><i>n</i><sup>th</sup></span> set of capturing parentheses.</p>\n          </li>\n        </ul>\n      </section>\n\n      <section id=\"sec-pattern\">\n        <h1><span class=\"secnum\" id=\"sec-21.2.2.2\"><a href=\"/sec/sec-pattern.html\" title=\"link to this section\">21.2.2.2</a></span>\n            Pattern</h1>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Pattern</span> <span class=\"geq\">::</span>\n        <span class=\"nt\">Disjunction</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Evaluate <i>Disjunction</i> to obtain a Matcher <i>m</i>.</li>\n          <li>Return an internal closure that takes two arguments, a String <i>str</i> and an integer <i>index</i>, and performs\n              the following steps:\n            <ol class=\"nested proc\">\n              <li>If <i>Unicode</i> is <b>true</b>, let <i>Input</i> be a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> consisting of the sequence of code points of  <i>str</i>\n                  interpreted as a UTF-16 encoded (<a href=\"/sec/sec-ecmascript-language-types-string-type.html\">6.1.4</a>) Unicode string.\n                  Otherwise, let <i>Input</i> be a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> consisting of the\n                  sequence of code units that are the elements of <i>str</i>. <i>Input</i> will be used throughout the algorithms\n                  in <a href=\"/sec/sec-pattern-semantics.html\">21.2.2</a>. Each element of <i>Input</i> is considered to be a\n                  character.</li>\n              <li>Let <i>listIndex</i> be the index into <i>Input</i> of the character that was obtained from element <i>index</i>\n                  of <i>str</i>.</li>\n              <li>Let <i>InputLength</i> be the number of characters contained in <i>Input</i>. This variable will be used\n                  throughout the algorithms in <a href=\"/sec/sec-pattern-semantics.html\">21.2.2</a>.</li>\n              <li>Let <i>c</i> be a Continuation that always returns its State argument as a successful MatchResult.</li>\n              <li>Let <i>cap</i> be a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> of <i>NcapturingParens</i>\n                  <b>undefined</b> values, indexed 1 through <i>NcapturingParens</i>.</li>\n              <li>Let <i>x</i> be the State (<i>listIndex</i>, <i>cap</i>).</li>\n              <li><a href=\"/sec/sec-call.html\">Call</a> <i>m</i>(<i>x</i>, <i>c</i>) and return its result.</li>\n            </ol>\n          </li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> A Pattern evaluates (&#x201C;compiles&#x201D;) to an internal procedure value. <code><a href=\"/sec/sec-regexp.prototype.exec.html\">RegExp.prototype.exec</a></code> and other methods can then apply this procedure to a\n          String and an offset within the String to determine whether the pattern would match starting at exactly that offset\n          within the String, and, if it does match, what the values of the capturing parentheses would be. The algorithms in <a href=\"/sec/sec-pattern-semantics.html\">21.2.2</a> are designed so that compiling a pattern may throw a <b>SyntaxError</b>\n          exception; on the other hand, once the pattern is successfully compiled, applying the resulting internal procedure to\n          find a match in a String cannot throw an exception (except for any host-defined exceptions that can occur anywhere such\n          as out-of-memory).</p>\n        </div>\n      </section>\n\n      <section id=\"sec-disjunction\">\n        <h1><span class=\"secnum\" id=\"sec-21.2.2.3\"><a href=\"/sec/sec-disjunction.html\" title=\"link to this section\">21.2.2.3</a></span>\n            Disjunction</h1>\n\n        <p>The production <span class=\"prod\"><span class=\"nt\">Disjunction</span> <span class=\"geq\">::</span> <span class=\"nt\">Alternative</span></span> evaluates by evaluating <span class=\"nt\">Alternative</span> to obtain a <span style=\"font-family: Times New Roman\">Matcher</span> and returning that <span style=\"font-family: Times New\n        Roman\">Matcher</span>.</p>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Disjunction</span> <span class=\"geq\">::</span>\n        <span class=\"nt\">Alternative</span> <code class=\"t\">|</code> <span class=\"nt\">Disjunction</span></span> evaluates as\n        follows:</p>\n\n        <ol class=\"proc\">\n          <li>Evaluate <i>Alternative</i> to obtain a Matcher <i>m1</i>.</li>\n          <li>Evaluate <i>Disjunction</i> to obtain a Matcher <i>m2</i>.</li>\n          <li>Return an internal Matcher closure that takes two arguments, a State <i>x</i> and a Continuation <i>c</i>, and\n              performs the following steps when evaluated:\n            <ol class=\"nested proc\">\n              <li><a href=\"/sec/sec-call.html\">Call</a> <i>m1</i>(<i>x</i>, <i>c</i>) and let <i>r</i> be its result.</li>\n              <li>If <i>r</i> is not <b>failure</b>, return <i>r</i>.</li>\n              <li><a href=\"/sec/sec-call.html\">Call</a> <i>m2</i>(<i>x</i>, <i>c</i>) and return its result.</li>\n            </ol>\n          </li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The <code>|</code> regular expression operator separates two alternatives. The pattern\n          first tries to match the left <span class=\"nt\">Alternative</span> (followed by the sequel of the regular expression); if\n          it fails, it tries to match the right <span class=\"nt\">Disjunction</span> (followed by the sequel of the regular\n          expression). If the left <span class=\"nt\">Alternative</span>, the right <span class=\"nt\">Disjunction</span>, and the\n          sequel all have choice points, all choices in the sequel are tried before moving on to the next choice in the left <span class=\"nt\">Alternative</span>. If choices in the left <span class=\"nt\">Alternative</span> are exhausted, the right <span class=\"nt\">Disjunction</span> is tried instead of the left <span class=\"nt\">Alternative</span>. Any capturing\n          parentheses inside a portion of the pattern skipped by <code>|</code> produce <b>undefined</b> values instead of\n          Strings. Thus, for example,</p>\n\n          <pre>/a|ab/.exec(&quot;abc&quot;)</pre>\n\n          <p>returns the result <code>&quot;a&quot;</code> and not <code>&quot;ab&quot;</code>. Moreover,</p>\n\n          <pre>/((a)|(ab))((c)|(bc))/.exec(&quot;abc&quot;)</pre>\n\n          <p>returns the array</p>\n\n          <pre>[&quot;abc&quot;, &quot;a&quot;, &quot;a&quot;, undefined, &quot;bc&quot;, undefined, &quot;bc&quot;]</pre>\n\n          <p>and not</p>\n\n          <pre>[&quot;abc&quot;, &quot;ab&quot;, undefined, &quot;ab&quot;, &quot;c&quot;, &quot;c&quot;, undefined]</pre>\n\n          <p></p>\n        </div>\n      </section>\n\n      <section id=\"sec-alternative\">\n        <h1><span class=\"secnum\" id=\"sec-21.2.2.4\"><a href=\"/sec/sec-alternative.html\" title=\"link to this section\">21.2.2.4</a></span>\n            Alternative</h1>\n\n        <p>The production <span class=\"prod\"><span class=\"nt\">Alternative</span> <span class=\"geq\">::</span> <span class=\"grhsannot\">[empty]</span></span> evaluates by returning a Matcher that takes two arguments, a State <var>x</var>\n        and a Continuation <var>c</var>, and returns the result of calling <var>c</var>(<var>x</var>).</p>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Alternative</span> <span class=\"geq\">::</span>\n        <span class=\"nt\">Alternative</span> <span class=\"nt\">Term</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Evaluate <i>Alternative</i> to obtain a Matcher <i>m1</i>.</li>\n          <li>Evaluate <i>Term</i> to obtain a Matcher <i>m2</i>.</li>\n          <li>Return an internal Matcher closure that takes two arguments, a State <i>x</i> and a Continuation <i>c</i>, and\n              performs the following steps when evaluated:\n            <ol class=\"nested proc\">\n              <li>Create a Continuation <i>d</i> that takes a State argument <i>y</i> and returns the result of calling\n                  <i>m2</i>(<i>y</i>, <i>c</i>).</li>\n              <li><a href=\"/sec/sec-call.html\">Call</a> <i>m1</i>(<i>x</i>, <i>d</i>) and return its result.</li>\n            </ol>\n          </li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> Consecutive <span class=\"nt\">Terms</span> try to simultaneously match consecutive\n          portions of <span class=\"nt\">Input</span>. If the left <span class=\"nt\">Alternative</span>, the right <span class=\"nt\">Term</span>, and the sequel of the regular expression all have choice points, all choices in the sequel are\n          tried before moving on to the next choice in the right <span class=\"nt\">Term</span>, and all choices in the right <span class=\"nt\">Term</span> are tried before moving on to the next choice in the left <span class=\"nt\">Alternative</span>.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-term\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-21.2.2.5\"><a href=\"/sec/sec-term.html\" title=\"link to this section\">21.2.2.5</a></span>\n              Term</h1>\n\n          <p>The production <span class=\"prod\"><span class=\"nt\">Term</span> <span class=\"geq\">::</span> <span class=\"nt\">Assertion</span></span> evaluates by returning an internal Matcher closure that takes two arguments, a State\n          <var>x</var> and a Continuation <var>c</var>, and performs the following steps when evaluated:</p>\n\n          <ol class=\"proc\">\n            <li>Evaluate <i>Assertion</i> to obtain an AssertionTester <i>t</i>.</li>\n            <li><a href=\"/sec/sec-call.html\">Call</a> <i>t</i>(<i>x</i>) and let <i>r</i> be the resulting Boolean value.</li>\n            <li>If <i>r</i> is <b>false</b>, return <b>failure</b>.</li>\n            <li><a href=\"/sec/sec-call.html\">Call</a> <i>c</i>(<i>x</i>) and return its result.</li>\n          </ol>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Term</span> <span class=\"geq\">::</span> <span class=\"nt\">Atom</span></span> evaluates as follows:</p>\n\n          <ol class=\"proc\">\n            <li>Return the Matcher that is the result of evaluating <i>Atom</i>.</li>\n          </ol>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Term</span> <span class=\"geq\">::</span> <span class=\"nt\">Atom</span> <span class=\"nt\">Quantifier</span></span> evaluates as follows:</p>\n\n          <ol class=\"proc\">\n            <li>Evaluate <i>Atom</i> to obtain a Matcher <i>m</i>.</li>\n            <li>Evaluate <i>Quantifier</i> to obtain the three results: an integer <i>min</i>, an integer (or &#x221E;) <i>max</i>,\n                and Boolean <i>greedy</i>.</li>\n            <li>If <i>max</i> is finite and less than <i>min</i>, throw a <b>SyntaxError</b> exception.</li>\n            <li>Let <i>parenIndex</i> be the number of left capturing parentheses in the entire regular expression that occur to\n                the left of this production expansion&apos;s <i>Term</i>. This is the total number of times the <span class=\"prod\"><span class=\"nt\">Atom</span> <span class=\"geq\">::</span> <code class=\"t\">(</code> <span class=\"nt\">Disjunction</span> <code class=\"t\">)</code></span> production is expanded prior to this production&apos;s\n                <i>Term</i> plus the total number of <span class=\"prod\"><span class=\"nt\">Atom</span> <span class=\"geq\">::</span>\n                <code class=\"t\">(</code> <span class=\"nt\">Disjunction</span> <code class=\"t\">)</code></span> productions enclosing\n                this <i>Term</i>.</li>\n            <li>Let <i>parenCount</i> be the number of left capturing parentheses in the expansion of this production&apos;s\n                <i>Atom</i>. This is the total number of <span class=\"prod\"><span class=\"nt\">Atom</span> <span class=\"geq\">::</span> <code class=\"t\">(</code> <span class=\"nt\">Disjunction</span> <code class=\"t\">)</code></span>\n                productions enclosed by this production&apos;s <i>Atom</i>.</li>\n            <li>Return an internal Matcher closure that takes two arguments, a State <i>x</i> and a Continuation <i>c</i>, and\n                performs the following steps when evaluated:\n              <ol class=\"nested proc\">\n                <li><a href=\"/sec/sec-call.html\">Call</a> RepeatMatcher(<i>m</i>, <i>min</i>, <i>max</i>, <i>greedy</i>, <i>x</i>,\n                    <i>c</i>, <i>parenIndex</i>, <i>parenCount</i>) and return its result.</li>\n              </ol>\n            </li>\n          </ol>\n        </div>\n\n        <section id=\"sec-runtime-semantics-repeatmatcher-abstract-operation\">\n          <h1><span class=\"secnum\" id=\"sec-21.2.2.5.1\"><a href=\"/sec/sec-runtime-semantics-repeatmatcher-abstract-operation.html\" title=\"link to this section\">21.2.2.5.1</a></span> Runtime Semantics: RepeatMatcher Abstract Operation</h1>\n\n          <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">RepeatMatcher</span> takes\n          eight parameters, a Matcher <var>m</var>, an integer <var>min</var>, an integer (or &#x221E;) <var>max</var>, a Boolean\n          <var>greedy</var>, a State <var>x</var>, a Continuation <var>c</var>, an integer <var>parenIndex</var>, and an integer\n          <var>parenCount</var>, and performs the following steps:</p>\n\n          <ol class=\"proc\">\n            <li>If <i>max</i> is zero, return <i>c</i>(<i>x</i>).</li>\n            <li>Create an internal Continuation closure <i>d</i> that takes one State argument <i>y</i> and performs the following\n                steps when evaluated:\n              <ol class=\"nested proc\">\n                <li>If <i>min</i> is zero and <i>y</i>&apos;s <i>endIndex</i> is equal to <i>x</i>&apos;s <i>endIndex</i>, return\n                    <b>failure</b>.</li>\n                <li>If <i>min</i> is zero, let <i>min2</i> be zero; otherwise let <i>min2</i> be <i>min</i>&#x2013;1.</li>\n                <li>If <i>max</i> is &#x221E;, let <i>max2</i> be &#x221E;; otherwise let <i>max2</i> be <i>max</i>&#x2013;1.</li>\n                <li><a href=\"/sec/sec-call.html\">Call</a> RepeatMatcher(<i>m</i>, <i>min2</i>, <i>max2</i>, <i>greedy</i>, <i>y</i>,\n                    <i>c</i>, <i>parenIndex</i>, <i>parenCount</i>) and return its result.</li>\n              </ol>\n            </li>\n            <li>Let <i>cap</i> be a fresh copy of <i>x</i>&apos;s <i>captures</i> <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n            <li>For every integer <i>k</i> that satisfies <i>parenIndex</i> &lt; <i>k</i> and <i>k</i> &#x2264;\n                <i>parenIndex</i>+<i>parenCount</i>, set <i>cap</i>[<i>k</i>] to <b>undefined</b>.</li>\n            <li>Let <i>e</i> be <i>x</i>&apos;s <i>endIndex</i>.</li>\n            <li>Let <i>xr</i> be the State (<i>e</i>, <i>cap</i>).</li>\n            <li>If <i>min</i> is not zero, return <i>m</i>(<i>xr</i>, <i>d</i>).</li>\n            <li>If <i>greedy</i> is <b>false</b>, then\n              <ol class=\"block\">\n                <li><a href=\"/sec/sec-call.html\">Call</a> <i>c</i>(<i>x</i>) and let <i>z</i> be its result.</li>\n                <li>If <i>z</i> is not <b>failure</b>, return <i>z</i>.</li>\n                <li><a href=\"/sec/sec-call.html\">Call</a> <i>m</i>(<i>xr</i>, <i>d</i>) and return its result.</li>\n              </ol>\n            </li>\n            <li><a href=\"/sec/sec-call.html\">Call</a> <i>m</i>(<i>xr</i>, <i>d</i>) and let <i>z</i> be its result.</li>\n            <li>If <i>z</i> is not <b>failure</b>, return <i>z</i>.</li>\n            <li><a href=\"/sec/sec-call.html\">Call</a> <i>c</i>(<i>x</i>) and return its result.</li>\n          </ol>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 1</span> An <span class=\"nt\">Atom</span> followed by a <span class=\"nt\">Quantifier</span> is\n            repeated the number of times specified by the <span class=\"nt\">Quantifier</span>. A <span class=\"nt\">Quantifier</span>\n            can be non-greedy, in which case the <span class=\"nt\">Atom</span> pattern is repeated as few times as possible while\n            still matching the sequel, or it can be greedy, in which case the <span class=\"nt\">Atom</span> pattern is repeated as\n            many times as possible while still matching the sequel. The <span class=\"nt\">Atom</span> pattern is repeated rather\n            than the input character sequence that it matches, so different repetitions of the <span class=\"nt\">Atom</span> can\n            match different input substrings.</p>\n          </div>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 2</span> If the <span class=\"nt\">Atom</span> and the sequel of the regular expression all\n            have choice points, the <span class=\"nt\">Atom</span> is first matched as many (or as few, if non-greedy) times as\n            possible. All choices in the sequel are tried before moving on to the next choice in the last repetition of <span class=\"nt\">Atom</span>. All choices in the last (n<sup>th</sup>) repetition of <span class=\"nt\">Atom</span> are tried\n            before moving on to the next choice in the next-to-last (n&#x2013;1)<sup>st</sup> repetition of <span class=\"nt\">Atom</span>; at which point it may turn out that more or fewer repetitions of <span class=\"nt\">Atom</span>\n            are now possible; these are exhausted (again, starting with either as few or as many as possible) before moving on to\n            the next choice in the (n-1)<sup>st</sup> repetition of <span class=\"nt\">Atom</span> and so on.</p>\n\n            <p>Compare</p>\n\n            <pre>/a[a-z]{2,4}/.exec(&quot;abcdefghi&quot;)</pre>\n\n            <p>which returns <code>&quot;abcde&quot;</code> with</p>\n\n            <pre>/a[a-z]{2,4}?/.exec(&quot;abcdefghi&quot;)</pre>\n\n            <p>which returns <code>&quot;abc&quot;</code>.</p>\n\n            <p>Consider also</p>\n\n            <pre>/(aa|aabaac|ba|b|c)*/.exec(&quot;aabaac&quot;)</pre>\n\n            <p>which, by the choice point ordering above, returns the array</p>\n\n            <pre>[&quot;aaba&quot;, &quot;ba&quot;]</pre>\n\n            <p>and not any of:</p>\n\n            <pre>[&quot;aabaac&quot;, &quot;aabaac&quot;]</pre>\n            <pre>[&quot;aabaac&quot;, &quot;c&quot;]</pre>\n\n            <p>The above ordering of choice points can be used to write a regular expression that calculates the greatest common\n            divisor of two numbers (represented in unary notation). The following example calculates the gcd of 10 and 15:</p>\n\n            <pre>&quot;aaaaaaaaaa,aaaaaaaaaaaaaaa&quot;.replace(/^(a+)\\1*,\\1+$/,&quot;$1&quot;)</pre>\n\n            <p>which returns the gcd in unary notation <code>&quot;aaaaa&quot;</code>.</p>\n          </div>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 3</span> Step 5 of the RepeatMatcher clears <var>Atom&apos;s</var> captures each time <span class=\"nt\">Atom</span> is repeated. We can see its behaviour in the regular expression</p>\n\n            <pre>/(z)((a+)?(b+)?(c))*/.exec(&quot;zaacbbbcac&quot;)</pre>\n\n            <p>which returns the array</p>\n\n            <pre>[&quot;zaacbbbcac&quot;, &quot;z&quot;, &quot;ac&quot;, &quot;a&quot;, undefined, &quot;c&quot;]</pre>\n\n            <p>and not</p>\n\n            <pre>[&quot;zaacbbbcac&quot;, &quot;z&quot;, &quot;ac&quot;, &quot;a&quot;, &quot;bbb&quot;, &quot;c&quot;]</pre>\n\n            <p>because each iteration of the outermost <code>*</code> clears all captured Strings contained in the quantified\n            <span class=\"nt\">Atom</span>, which in this case includes capture Strings numbered 2, 3, 4, and 5.</p>\n          </div>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 4</span> Step 1 of the RepeatMatcher&apos;s <var>d</var> closure states that, once the minimum\n            number of repetitions has been satisfied, any more expansions of <span class=\"nt\">Atom</span> that match the empty\n            character sequence are not considered for further repetitions. This prevents the regular expression engine from\n            falling into an infinite loop on patterns such as:</p>\n\n            <pre>/(a*)*/.exec(&quot;b&quot;)</pre>\n\n            <p>or the slightly more complicated:</p>\n\n            <pre>/(a*)b\\1+/.exec(&quot;baaaac&quot;)</pre>\n\n            <p>which returns the array</p>\n\n            <pre>[&quot;b&quot;, &quot;&quot;]</pre>\n\n            <p></p>\n          </div>\n        </section>\n      </section>\n\n      <section id=\"sec-assertion\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-21.2.2.6\"><a href=\"/sec/sec-assertion.html\" title=\"link to this section\">21.2.2.6</a></span>\n              Assertion</h1>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Assertion</span> <span class=\"geq\">::</span>\n          <code class=\"t\">^</code></span> evaluates by returning an internal AssertionTester closure that takes a State argument\n          <var>x</var> and performs the following steps when evaluated:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>e</i> be <i>x</i>&apos;s <i>endIndex</i>.</li>\n            <li>If <i>e</i> is zero, return <b>true</b>.</li>\n            <li>If <i>Multiline</i> is <b>false</b>, return <b>false</b>.</li>\n            <li>If the character <i>Input</i>[<i>e</i>&#x2013;1] is one of <i>LineTerminator</i>, return <b>true</b>.</li>\n            <li>Return <b>false</b>.</li>\n          </ol>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE</span> Even when the <code>y</code> flag is used with a pattern, <code>^</code> always\n            matches only at the beginning of <span class=\"nt\">Input</span>, or (if <span class=\"nt\">Multiline</span> is <span class=\"value\">true</span>) at the beginning of a line.</p>\n          </div>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Assertion</span> <span class=\"geq\">::</span>\n          <code class=\"t\">$</code></span> evaluates by returning an internal AssertionTester closure that takes a State argument\n          <var>x</var> and performs the following steps when evaluated:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>e</i> be <i>x</i>&apos;s <i>endIndex</i>.</li>\n            <li>If <i>e</i> is equal to <i>InputLength</i>, return <b>true</b>.</li>\n            <li>If <i>Multiline</i> is <b>false</b>, return <b>false</b>.</li>\n            <li>If the character <i>Input</i>[<i>e</i>] is one of <i>LineTerminator</i>, return <b>true</b>.</li>\n            <li>Return <b>false</b>.</li>\n          </ol>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Assertion</span> <span class=\"geq\">::</span>\n          <code class=\"t\">\\</code> <code class=\"t\">b</code></span> evaluates by returning an internal AssertionTester closure that\n          takes a State argument <var>x</var> and performs the following steps when evaluated:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>e</i> be <i>x</i>&apos;s <i>endIndex</i>.</li>\n            <li><a href=\"/sec/sec-call.html\">Call</a> IsWordChar(<i>e</i>&#x2013;1) and let <i>a</i> be the Boolean result.</li>\n            <li><a href=\"/sec/sec-call.html\">Call</a> IsWordChar(<i>e</i>) and let <i>b</i> be the Boolean result.</li>\n            <li>If <i>a</i> is <b>true</b> and <i>b</i> is <b>false</b>, return <b>true</b>.</li>\n            <li>If <i>a</i> is <b>false</b> and <i>b</i> is <b>true</b>, return <b>true</b>.</li>\n            <li>Return <b>false</b>.</li>\n          </ol>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Assertion</span> <span class=\"geq\">::</span>\n          <code class=\"t\">\\</code> <code class=\"t\">B</code></span> evaluates by returning an internal AssertionTester closure that\n          takes a State argument <var>x</var> and performs the following steps when evaluated:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>e</i> be <i>x</i>&apos;s <i>endIndex</i>.</li>\n            <li><a href=\"/sec/sec-call.html\">Call</a> IsWordChar(<i>e</i>&#x2013;1) and let <i>a</i> be the Boolean result.</li>\n            <li><a href=\"/sec/sec-call.html\">Call</a> IsWordChar(<i>e</i>) and let <i>b</i> be the Boolean result.</li>\n            <li>If <i>a</i> is <b>true</b> and <i>b</i> is <b>false</b>, return <b>false</b>.</li>\n            <li>If <i>a</i> is <b>false</b> and <i>b</i> is <b>true</b>, return <b>false</b>.</li>\n            <li>Return <b>true</b>.</li>\n          </ol>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Assertion</span> <span class=\"geq\">::</span>\n          <code class=\"t\">(</code> <code class=\"t\">?</code> <code class=\"t\">=</code> <span class=\"nt\">Disjunction</span> <code class=\"t\">)</code></span> evaluates as follows:</p>\n\n          <ol class=\"proc\">\n            <li>Evaluate <i>Disjunction</i> to obtain a Matcher <i>m</i>.</li>\n            <li>Return an internal Matcher closure that takes two arguments, a State <i>x</i> and a Continuation <i>c</i>, and\n                performs the following steps:\n              <ol class=\"nested proc\">\n                <li>Let <i>d</i> be a Continuation that always returns its State argument as a successful MatchResult.</li>\n                <li><a href=\"/sec/sec-call.html\">Call</a> <i>m</i>(<i>x</i>, <i>d</i>) and let <i>r</i> be its result.</li>\n                <li>If <i>r</i> is <b>failure</b>, return <b>failure</b>.</li>\n                <li>Let <i>y</i> be <i>r</i>&apos;s State.</li>\n                <li>Let <i>cap</i> be <i>y</i>&apos;s <i>captures</i> <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n                <li>Let <i>xe</i> be <i>x</i>&apos;s <i>endIndex</i>.</li>\n                <li>Let <i>z</i> be the State (<i>xe</i>, <i>cap</i>).</li>\n                <li><a href=\"/sec/sec-call.html\">Call</a> <i>c</i>(<i>z</i>) and return its result.</li>\n              </ol>\n            </li>\n          </ol>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Assertion</span> <span class=\"geq\">::</span>\n          <code class=\"t\">(</code> <code class=\"t\">?</code> <code class=\"t\">!</code> <span class=\"nt\">Disjunction</span> <code class=\"t\">)</code></span> evaluates as follows:</p>\n\n          <ol class=\"proc\">\n            <li>Evaluate <i>Disjunction</i> to obtain a Matcher <i>m</i>.</li>\n            <li>Return an internal Matcher closure that takes two arguments, a State <i>x</i> and a Continuation <i>c</i>, and\n                performs the following steps:\n              <ol class=\"nested proc\">\n                <li>Let <i>d</i> be a Continuation that always returns its State argument as a successful MatchResult.</li>\n                <li><a href=\"/sec/sec-call.html\">Call</a> <i>m</i>(<i>x</i>, <i>d</i>) and let <i>r</i> be its result.</li>\n                <li>If <i>r</i> is not <b>failure</b>, return <b>failure</b>.</li>\n                <li><a href=\"/sec/sec-call.html\">Call</a> <i>c</i>(<i>x</i>) and return its result.</li>\n              </ol>\n            </li>\n          </ol>\n        </div>\n\n        <section id=\"sec-runtime-semantics-iswordchar-abstract-operation\">\n          <h1><span class=\"secnum\" id=\"sec-21.2.2.6.1\"><a href=\"/sec/sec-runtime-semantics-iswordchar-abstract-operation.html\" title=\"link to this section\">21.2.2.6.1</a></span> Runtime Semantics: IsWordChar Abstract Operation</h1>\n\n          <p class=\"normalbefore\">The abstract operation IsWordChar takes an integer parameter <var>e</var> and performs the\n          following steps:</p>\n\n          <ol class=\"proc\">\n            <li>If <i>e</i> is &#x2013;1 or <i>e</i>  is <i>InputLength</i>, return <b>false</b>.</li>\n            <li>Let <i>c</i> be the character <i>Input</i>[<i>e</i>].</li>\n            <li>If <i>c</i> is one of the sixty-three characters below, return <b>true</b>.\n              <figure>\n                <table class=\"lightweight-table\">\n                  <tr>\n                    <td><code>a</code></td>\n                    <td><code>b</code></td>\n                    <td><code>c</code></td>\n                    <td><code>d</code></td>\n                    <td><code>e</code></td>\n                    <td><code>f</code></td>\n                    <td><code>g</code></td>\n                    <td><code>h</code></td>\n                    <td><code>i</code></td>\n                    <td><code>j</code></td>\n                    <td><code>k</code></td>\n                    <td><code>l</code></td>\n                    <td><code>m</code></td>\n                    <td><code>n</code></td>\n                    <td><code>o</code></td>\n                    <td><code>p</code></td>\n                    <td><code>q</code></td>\n                    <td><code>r</code></td>\n                    <td><code>s</code></td>\n                    <td><code>t</code></td>\n                    <td><code>u</code></td>\n                    <td><code>v</code></td>\n                    <td><code>w</code></td>\n                    <td><code>x</code></td>\n                    <td><code>y</code></td>\n                    <td><code>z</code></td>\n                  </tr>\n                  <tr>\n                    <td><code>A</code></td>\n                    <td><code>B</code></td>\n                    <td><code>C</code></td>\n                    <td><code>D</code></td>\n                    <td><code>E</code></td>\n                    <td><code>F</code></td>\n                    <td><code>G</code></td>\n                    <td><code>H</code></td>\n                    <td><code>I</code></td>\n                    <td><code>J</code></td>\n                    <td><code>K</code></td>\n                    <td><code>L</code></td>\n                    <td><code>M</code></td>\n                    <td><code>N</code></td>\n                    <td><code>O</code></td>\n                    <td><code>P</code></td>\n                    <td><code>Q</code></td>\n                    <td><code>R</code></td>\n                    <td><code>S</code></td>\n                    <td><code>T</code></td>\n                    <td><code>U</code></td>\n                    <td><code>V</code></td>\n                    <td><code>W</code></td>\n                    <td><code>X</code></td>\n                    <td><code>Y</code></td>\n                    <td><code>Z</code></td>\n                  </tr>\n                  <tr>\n                    <td><code>0</code></td>\n                    <td><code>1</code></td>\n                    <td><code>2</code></td>\n                    <td><code>3</code></td>\n                    <td><code>4</code></td>\n                    <td><code>5</code></td>\n                    <td><code>6</code></td>\n                    <td><code>7</code></td>\n                    <td><code>8</code></td>\n                    <td><code>9</code></td>\n                    <td><code>_</code></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                  </tr>\n                </table>\n              </figure>\n            </li>\n            <li>Return <b>false</b>.</li>\n          </ol>\n        </section>\n      </section>\n\n      <section id=\"sec-quantifier\">\n        <h1><span class=\"secnum\" id=\"sec-21.2.2.7\"><a href=\"/sec/sec-quantifier.html\" title=\"link to this section\">21.2.2.7</a></span>\n            Quantifier</h1>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Quantifier</span> <span class=\"geq\">::</span>\n        <span class=\"nt\">QuantifierPrefix</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Evaluate <i>QuantifierPrefix</i> to obtain the two results: an integer <i>min</i> and an integer (or &#x221E;)\n              <i>max</i>.</li>\n          <li>Return the three results <i>min</i>, <i>max</i>, and <b>true</b>.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Quantifier</span> <span class=\"geq\">::</span>\n        <span class=\"nt\">QuantifierPrefix</span> <code class=\"t\">?</code></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Evaluate <i>QuantifierPrefix</i> to obtain the two results: an integer <i>min</i> and an integer (or &#x221E;)\n              <i>max</i>.</li>\n          <li>Return the three results <i>min</i>, <i>max</i>, and <b>false</b>.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">QuantifierPrefix</span> <span class=\"geq\">::</span> <code class=\"t\">*</code></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the two results 0 and &#x221E;.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">QuantifierPrefix</span> <span class=\"geq\">::</span> <code class=\"t\">+</code></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the two results 1 and &#x221E;.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">QuantifierPrefix</span> <span class=\"geq\">::</span> <code class=\"t\">?</code></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the two results 0 and 1.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">QuantifierPrefix</span> <span class=\"geq\">::</span> <code class=\"t\">{</code> <span class=\"nt\">DecimalDigits</span> <code class=\"t\">}</code></span>\n        evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>i</i> be the MV of <i>DecimalDigits</i> (<a href=\"/sec/sec-literals-numeric-literals.html\">see 11.8.3</a>).</li>\n          <li>Return the two results <i>i</i> and <i>i</i>.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">QuantifierPrefix</span> <span class=\"geq\">::</span> <code class=\"t\">{</code> <span class=\"nt\">DecimalDigits</span> <code class=\"t\">,</code> <code class=\"t\">}</code></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>i</i> be the MV of <i>DecimalDigits</i>.</li>\n          <li>Return the two results <i>i</i> and &#x221E;.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">QuantifierPrefix</span> <span class=\"geq\">::</span> <code class=\"t\">{</code> <span class=\"nt\">DecimalDigits</span> <code class=\"t\">,</code> <span class=\"nt\">DecimalDigits</span> <code class=\"t\">}</code></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>i</i> be the MV of the first <i>DecimalDigits</i>.</li>\n          <li>Let <i>j</i> be the MV of the second <i>DecimalDigits</i>.</li>\n          <li>Return the two results <i>i</i> and <i>j</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-atom\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-21.2.2.8\"><a href=\"/sec/sec-atom.html\" title=\"link to this section\">21.2.2.8</a></span>\n              Atom</h1>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Atom</span> <span class=\"geq\">::</span> <span class=\"nt\">PatternCharacter</span></span> evaluates as follows:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>ch</i> be the character matched by <i>PatternCharacter</i>.</li>\n            <li>Let <i>A</i> be a one-element CharSet containing the character <i>ch</i>.</li>\n            <li><a href=\"/sec/sec-call.html\">Call</a> CharacterSetMatcher(<i>A</i>, <b>false</b>) and return its Matcher result.</li>\n          </ol>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Atom</span> <span class=\"geq\">::</span> <code class=\"t\">.</code></span> evaluates as follows:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>A</i> be the set of all characters except <i>LineTerminator</i>.</li>\n            <li><a href=\"/sec/sec-call.html\">Call</a> CharacterSetMatcher(<i>A</i>, <b>false</b>) and return its Matcher result.</li>\n          </ol>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Atom</span> <span class=\"geq\">::</span> <code class=\"t\">\\</code> <span class=\"nt\">AtomEscape</span></span> evaluates as follows:</p>\n\n          <ol class=\"proc\">\n            <li>Return the Matcher that is the result of evaluating <i>AtomEscape</i>.</li>\n          </ol>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Atom</span> <span class=\"geq\">::</span> <span class=\"nt\">CharacterClass</span></span> evaluates as follows:</p>\n\n          <ol class=\"proc\">\n            <li>Evaluate <i>CharacterClass</i> to obtain a CharSet <i>A</i> and a Boolean <i>invert</i>.</li>\n            <li><a href=\"/sec/sec-call.html\">Call</a> CharacterSetMatcher(<i>A</i>, <i>invert</i>) and return its Matcher result.</li>\n          </ol>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Atom</span> <span class=\"geq\">::</span> <code class=\"t\">(</code> <span class=\"nt\">Disjunction</span> <code class=\"t\">)</code></span> evaluates as follows:</p>\n\n          <ol class=\"proc\">\n            <li>Evaluate <i>Disjunction</i> to obtain a Matcher <i>m</i>.</li>\n            <li>Let <i>parenIndex</i> be the number of left capturing parentheses in the entire regular expression that occur to\n                the left of this production expansion&apos;s initial left parenthesis. This is the total number of times the <span class=\"prod\"><span class=\"nt\">Atom</span> <span class=\"geq\">::</span> <code class=\"t\">(</code> <span class=\"nt\">Disjunction</span> <code class=\"t\">)</code></span> production is expanded prior to this production&apos;s\n                <i>Atom</i> plus the total number of <span class=\"prod\"><span class=\"nt\">Atom</span> <span class=\"geq\">::</span>\n                <code class=\"t\">(</code> <span class=\"nt\">Disjunction</span> <code class=\"t\">)</code></span> productions enclosing\n                this <i>Atom</i>.</li>\n            <li>Return an internal Matcher closure that takes two arguments, a State <i>x</i> and a Continuation <i>c</i>, and\n                performs the following steps:\n              <ol class=\"nested proc\">\n                <li>Create an internal Continuation closure <i>d</i> that takes one State argument <i>y</i> and performs the\n                    following steps:\n                  <ol class=\"nested proc\">\n                    <li>Let <i>cap</i> be a fresh copy of <i>y</i>&apos;s <i>captures</i> <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n                    <li>Let <i>xe</i> be <i>x</i>&apos;s <i>endIndex</i>.</li>\n                    <li>Let <i>ye</i> be <i>y</i>&apos;s <i>endIndex</i>.</li>\n                    <li>Let <i>s</i> be a fresh <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> whose characters are\n                        the characters of <i>Input</i> at indices <i>xe</i> (inclusive) through <i>ye</i> (exclusive).</li>\n                    <li>Set <i>cap</i>[<i>parenIndex</i>+1] to <i>s</i>.</li>\n                    <li>Let <i>z</i> be the State (<i>ye</i>, <i>cap</i>).</li>\n                    <li><a href=\"/sec/sec-call.html\">Call</a> <i>c</i>(<i>z</i>) and return its result.</li>\n                  </ol>\n                </li>\n                <li><a href=\"/sec/sec-call.html\">Call</a> <i>m</i>(<i>x</i>, <i>d</i>) and return its result.</li>\n              </ol>\n            </li>\n          </ol>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Atom</span> <span class=\"geq\">::</span> <code class=\"t\">(</code> <code class=\"t\">?</code> <code class=\"t\">:</code> <span class=\"nt\">Disjunction</span> <code class=\"t\">)</code></span> evaluates as follows:</p>\n\n          <ol class=\"proc\">\n            <li>Return the Matcher that is the result of evaluating <i>Disjunction</i>.</li>\n          </ol>\n        </div>\n\n        <section id=\"sec-runtime-semantics-charactersetmatcher-abstract-operation\">\n          <h1><span class=\"secnum\" id=\"sec-21.2.2.8.1\"><a href=\"/sec/sec-runtime-semantics-charactersetmatcher-abstract-operation.html\" title=\"link to this section\">21.2.2.8.1</a></span> Runtime Semantics: CharacterSetMatcher Abstract Operation</h1>\n\n          <p class=\"normalbefore\">The abstract operation CharacterSetMatcher takes two arguments, a CharSet <var>A</var> and a\n          Boolean flag <var>invert</var>, and performs the following steps:</p>\n\n          <ol class=\"proc\">\n            <li>Return an internal Matcher closure that takes two arguments, a State <i>x</i> and a Continuation <i>c</i>, and\n                performs the following steps when evaluated:\n              <ol class=\"nested proc\">\n                <li>Let <i>e</i> be <i>x</i>&apos;s <i>endIndex</i>.</li>\n                <li>If <i>e</i> is <i>InputLength</i>, return <b>failure</b>.</li>\n                <li>Let <i>ch</i> be the character <i>Input</i>[<i>e</i>].</li>\n                <li>Let <i>cc</i> be Canonicalize(<i>ch</i>).</li>\n                <li>If <i>invert</i> is <b>false</b>, then\n                  <ol class=\"block\">\n                    <li>If there does not exist a member <i>a</i> of set <i>A</i> such that Canonicalize(<i>a</i>) is <i>cc</i>,\n                        return <b>failure</b>.</li>\n                  </ol>\n                </li>\n                <li>Else <i>invert</i> is <b>true</b>,\n                  <ol class=\"block\">\n                    <li>If there exists a member <i>a</i> of set <i>A</i> such that Canonicalize(<i>a</i>) is <i>cc</i>, return\n                        <b>failure.</b></li>\n                  </ol>\n                </li>\n                <li>Let <i>cap</i> be <i>x</i>&apos;s <i>captures</i> <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n                <li>Let <i>y</i> be the State (<i>e</i>+1, <i>cap</i>).</li>\n                <li><a href=\"/sec/sec-call.html\">Call</a> <i>c</i>(<i>y</i>) and return its result.</li>\n              </ol>\n            </li>\n          </ol>\n        </section>\n\n        <section id=\"sec-runtime-semantics-canonicalize-ch\">\n          <h1><span class=\"secnum\" id=\"sec-21.2.2.8.2\"><a href=\"/sec/sec-runtime-semantics-canonicalize-ch.html\" title=\"link to this section\">21.2.2.8.2</a></span> Runtime Semantics: Canonicalize ( ch )</h1>\n\n          <p class=\"normalbefore\">The abstract operation Canonicalize takes a character parameter <var>ch</var> and performs the\n          following steps:</p>\n\n          <ol class=\"proc\">\n            <li>If <i>IgnoreCase</i> is <b>false</b>, return <i>ch</i>.</li>\n            <li>If <i>Unicode</i> is <b>true</b>,\n              <ol class=\"block\">\n                <li>If the file CaseFolding.txt of the Unicode Character Database provides a simple or common case folding mapping\n                    for <i>ch</i>, return the result of applying that mapping to <i>ch</i>.</li>\n                <li>Else, return <i>ch.</i></li>\n              </ol>\n            </li>\n            <li>Else,\n              <ol class=\"block\">\n                <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>ch</i> is a UTF-16 code unit.</li>\n                <li>Let <i>s</i> be the ECMAScript String value consisting of the single code unit <i>ch</i>.</li>\n                <li>Let <i>u</i> be the same result produced as if by performing the algorithm for <code><a href=\"/sec/sec-string.prototype.touppercase.html\">String.prototype.toUpperCase</a></code> using <i>s</i> as the\n                    <b>this</b> value.</li>\n                <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>u</i> is a String value.</li>\n                <li>If <i>u</i> does not consist of a single code unit, return <i>ch</i>.</li>\n                <li>Let <i>cu</i> be <i>u</i>&#x2019;s single code unit element.</li>\n                <li>If <i>ch</i>&apos;s code unit value &#x2265; 128 and <i>cu</i>&apos;s code unit value &lt; 128, return <i>ch</i>.</li>\n                <li>Return <i>cu</i>.</li>\n              </ol>\n            </li>\n          </ol>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 1</span> Parentheses of the form <code>(</code> <span class=\"nt\">Disjunction</span>\n            <code>)</code> serve both to group the components of the <span class=\"nt\">Disjunction</span> pattern together and to\n            save the result of the match. The result can be used either in a backreference (<code>\\</code> followed by a nonzero\n            decimal number), referenced in a replace String, or returned as part of an array from the regular expression matching\n            internal procedure. To inhibit the capturing behaviour of parentheses, use the form <code>(?:</code> <span class=\"nt\">Disjunction</span> <code>)</code> instead.</p>\n          </div>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 2</span> The form <code>(?=</code> <span class=\"nt\">Disjunction</span> <code>)</code>\n            specifies a zero-width positive lookahead. In order for it to succeed, the pattern inside <span class=\"nt\">Disjunction</span> must match at the current position, but the current position is not advanced before\n            matching the sequel. If <span class=\"nt\">Disjunction</span> can match at the current position in several ways, only\n            the first one is tried. Unlike other regular expression operators, there is no backtracking into a <code>(?=</code>\n            form (this unusual behaviour is inherited from Perl). This only matters when the <span class=\"nt\">Disjunction</span>\n            contains capturing parentheses and the sequel of the pattern contains backreferences to those captures.</p>\n\n            <p>For example,</p>\n\n            <pre>/(?=(a+))/.exec(&quot;baaabac&quot;)</pre>\n\n            <p>matches the empty String immediately after the first <code>b</code> and therefore returns the array:</p>\n\n            <pre>[&quot;&quot;, &quot;aaa&quot;]</pre>\n\n            <p>To illustrate the lack of backtracking into the lookahead, consider:</p>\n\n            <pre>/(?=(a+))a*b\\1/.exec(&quot;baaabac&quot;)</pre>\n\n            <p>This expression returns</p>\n\n            <pre>[&quot;aba&quot;, &quot;a&quot;]</pre>\n\n            <p>and not:</p>\n\n            <pre>[&quot;aaaba&quot;, &quot;a&quot;]</pre>\n\n            <p></p>\n          </div>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 3</span> The form <code>(?!</code> <span class=\"nt\">Disjunction</span> <code>)</code>\n            specifies a zero-width negative lookahead. In order for it to succeed, the pattern inside <span class=\"nt\">Disjunction</span> must fail to match at the current position. The current position is not advanced before\n            matching the sequel. <span class=\"nt\">Disjunction</span> can contain capturing parentheses, but backreferences to them\n            only make sense from within <span class=\"nt\">Disjunction</span> itself. Backreferences to these capturing parentheses\n            from elsewhere in the pattern always return <b>undefined</b> because the negative lookahead must fail for the pattern\n            to succeed. For example,</p>\n\n            <pre>/(.*?)a(?!(a+)b\\2c)\\2(.*)/.exec(&quot;baaabaac&quot;)</pre>\n\n            <p>looks for an <code>a</code> not immediately followed by some positive number n of <code>a</code>&apos;s, a\n            <code>b</code>, another n <code>a</code>&apos;s (specified by the first <code>\\2</code>) and a <code>c</code>. The second\n            <code>\\2</code> is outside the negative lookahead, so it matches against <b>undefined</b> and therefore always\n            succeeds. The whole expression returns the array:</p>\n\n            <pre>[&quot;baaabaac&quot;, &quot;ba&quot;, undefined, &quot;abaac&quot;]</pre>\n          </div>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 4</span> In case-insignificant matches when <span class=\"nt\">Unicode</span> is <span class=\"value\">true</span>, all characters are implicitly case-folded using the simple mapping provided by the Unicode\n            standard immediately before they are compared. The simple mapping always maps to a single code point, so it does not\n            map, for example, <code>&quot;&#xDF;&quot;</code> (U+00DF) to <code>&quot;SS&quot;</code>. It may however map a code point outside the\n            Basic Latin range to a character within, for example, <code>&quot;</code>&#x17F;<code>&quot;</code> (U+017F) to\n            <code>&quot;</code>s<code>&quot;</code>. Such characters are not mapped if <span class=\"nt\">Unicode</span> is <span class=\"value\">false</span>. This prevents Unicode code points such as U+017F and U+212A from matching regular\n            expressions such as <code>/[a&#x2011;z]/i</code>, but they will match <code>/[a&#x2011;z]/ui</code>.</p>\n          </div>\n        </section>\n      </section>\n\n      <section id=\"sec-atomescape\">\n        <h1><span class=\"secnum\" id=\"sec-21.2.2.9\"><a href=\"/sec/sec-atomescape.html\" title=\"link to this section\">21.2.2.9</a></span>\n            AtomEscape</h1>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">AtomEscape</span> <span class=\"geq\">::</span>\n        <span class=\"nt\">DecimalEscape</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Evaluate <i>DecimalEscape</i> to obtain an EscapeValue <i>E</i>.</li>\n          <li>If <i>E</i> is a character, then\n            <ol class=\"block\">\n              <li>Let <i>ch</i> be <i>E</i>&apos;s character.</li>\n              <li>Let <i>A</i> be a one-element CharSet containing the character <i>ch</i>.</li>\n              <li><a href=\"/sec/sec-call.html\">Call</a> CharacterSetMatcher(<i>A</i>, <b>false</b>) and return its Matcher result.</li>\n            </ol>\n          </li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>E</i> must be an integer.</li>\n          <li>Let <i>n</i> be that integer.</li>\n          <li>If <i>n</i>=0 or <i>n</i>&gt;<i>NcapturingParens</i>, throw a <b>SyntaxError</b> exception.</li>\n          <li>Return an internal Matcher closure that takes two arguments, a State <i>x</i> and a Continuation <i>c</i>, and\n              performs the following steps:\n            <ol class=\"nested proc\">\n              <li>Let <i>cap</i> be <i>x</i>&apos;s <i>captures</i> <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n              <li>Let <i>s</i> be <i>cap</i>[<i>n</i>].</li>\n              <li>If <i>s</i> is <b>undefined</b>, return <i>c</i>(<i>x</i>).</li>\n              <li>Let <i>e</i> be <i>x</i>&apos;s <i>endIndex</i>.</li>\n              <li>Let <i>len</i> be <i>s</i>&apos;s length.</li>\n              <li>Let <i>f</i> be <i>e</i>+<i>len</i>.</li>\n              <li>If <i>f</i>&gt;<i>InputLength</i>, return <b>failure</b>.</li>\n              <li>If there exists an integer <i>i</i> between 0 (inclusive) and <i>len</i> (exclusive) such that\n                  Canonicalize(<i>s</i>[<i>i</i>]) is not the same character value as Canonicalize(<i>Input</i>\n                  [<i>e</i>+<i>i</i>]), return <b>failure</b>.</li>\n              <li>Let <i>y</i> be the State (<i>f</i>, <i>cap</i>).</li>\n              <li><a href=\"/sec/sec-call.html\">Call</a> <i>c</i>(<i>y</i>) and return its result.</li>\n            </ol>\n          </li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">AtomEscape</span> <span class=\"geq\">::</span>\n        <span class=\"nt\">CharacterEscape</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Evaluate <i>CharacterEscape</i> to obtain a character <i>ch</i>.</li>\n          <li>Let <i>A</i> be a one-element CharSet containing the character <i>ch</i>.</li>\n          <li><a href=\"/sec/sec-call.html\">Call</a> CharacterSetMatcher(<i>A</i>, <b>false</b>) and return its Matcher result.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">AtomEscape</span> <span class=\"geq\">::</span>\n        <span class=\"nt\">CharacterClassEscape</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Evaluate <i>CharacterClassEscape</i> to obtain a CharSet <i>A</i>.</li>\n          <li><a href=\"/sec/sec-call.html\">Call</a> CharacterSetMatcher(<i>A</i>, <b>false</b>) and return its Matcher result.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> An escape sequence of the form <code>\\</code> followed by a nonzero decimal number\n          <var>n</var> matches the result of the <var>n</var>th set of capturing parentheses (see 0). It is an error if the\n          regular expression has fewer than <var>n</var> capturing parentheses. If the regular expression has <var>n</var> or more\n          capturing parentheses but the <var>n</var>th one is <b>undefined</b> because it has not captured anything, then the\n          backreference always succeeds.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-characterescape\">\n        <h1><span class=\"secnum\" id=\"sec-21.2.2.10\"><a href=\"/sec/sec-characterescape.html\" title=\"link to this section\">21.2.2.10</a></span> CharacterEscape</h1>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">CharacterEscape</span> <span class=\"geq\">::</span> <span class=\"nt\">ControlEscape</span></span> evaluates by returning the character according to <a href=\"/sec/table-47.html\">Table 47</a>.</p>\n\n        <figure>\n          <figcaption><span id=\"table-47\">Table 47</span> &#x2014; ControlEscape Character Values</figcaption>\n          <table class=\"real-table\">\n            <tr>\n              <th>ControlEscape</th>\n              <th>Character Value</th>\n              <th>Code Point</th>\n              <th>Unicode Name</th>\n              <th>Symbol</th>\n            </tr>\n            <tr>\n              <td><code>t</code></td>\n              <td>9</td>\n              <td><code>U+0009</code></td>\n              <td>CHARACTER TABULATION</td>\n              <td>&lt;HT&gt;</td>\n            </tr>\n            <tr>\n              <td><code>n</code></td>\n              <td>10</td>\n              <td><code>U+000A</code></td>\n              <td>LINE FEED (LF)</td>\n              <td>&lt;LF&gt;</td>\n            </tr>\n            <tr>\n              <td><code>v</code></td>\n              <td>11</td>\n              <td><code>U+000B</code></td>\n              <td>LINE TABULATION</td>\n              <td>&lt;VT&gt;</td>\n            </tr>\n            <tr>\n              <td><code>f</code></td>\n              <td>12</td>\n              <td><code>U+000C</code></td>\n              <td>FORM FEED (FF)</td>\n              <td>&lt;FF&gt;</td>\n            </tr>\n            <tr>\n              <td><code>r</code></td>\n              <td>13</td>\n              <td><code>U+000D</code></td>\n              <td>CARRIAGE RETURN (CR)</td>\n              <td>&lt;CR&gt;</td>\n            </tr>\n          </table>\n        </figure>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">CharacterEscape</span> <span class=\"geq\">::</span> <code class=\"t\">c</code> <span class=\"nt\">ControlLetter</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>ch</i> be the character matched by <i>ControlLetter</i>.</li>\n          <li>Let <i>i</i> be <i>ch</i>&apos;s character value.</li>\n          <li>Let <i>j</i> be the remainder of dividing <i>i</i> by 32.</li>\n          <li>Return the character whose character value is <i>j</i>.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">CharacterEscape</span> <span class=\"geq\">::</span> <span class=\"nt\">HexEscapeSequence</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the character whose code is the SV of <i>HexEscapeSequence</i>.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">CharacterEscape</span> <span class=\"geq\">::</span> <span class=\"nt\">RegExpUnicodeEscapeSequence</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the result of evaluating <i>RegExpUnicodeEscapeSequence</i>.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">CharacterEscape</span> <span class=\"geq\">::</span> <span class=\"nt\">IdentityEscape</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the character matched by <i>IdentityEscape</i>.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">RegExpUnicodeEscapeSequence</span> <span class=\"geq\">::</span> <code class=\"t\">u</code> <span class=\"nt\">LeadSurrogate</span> <code class=\"t\">\\u</code> <span class=\"nt\">TrailSurrogate</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>lead</i> be the result of evaluating <i>LeadSurrogate</i>.</li>\n          <li>Let <i>trail</i> be the result of evaluating <i>TrailSurrogate</i>.</li>\n          <li>Let <i>cp</i> be <a href=\"/sec/sec-utf16decode.html\">UTF16Decode</a>(<i>lead</i>, <i>trail</i>).</li>\n          <li>Return the character whose character value is <i>cp</i>.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">RegExpUnicodeEscapeSequence</span> <span class=\"geq\">::</span> <code class=\"t\">u</code> <span class=\"nt\">LeadSurrogate</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the character whose code is the result of evaluating <i>LeadSurrogate</i>.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">RegExpUnicodeEscapeSequence</span> <span class=\"geq\">::</span> <code class=\"t\">u</code> <span class=\"nt\">TrailSurrogate</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the character whose code is the result of evaluating <i>TrailSurrogate</i>.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">RegExpUnicodeEscapeSequence</span> <span class=\"geq\">::</span> <code class=\"t\">u</code> <span class=\"nt\">NonSurrogate</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the character whose code is the result of evaluating <i>NonSurrogate</i>.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">RegExpUnicodeEscapeSequence</span> <span class=\"geq\">::</span> <code class=\"t\">u</code> <span class=\"nt\">Hex4Digits</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the character whose code is the SV of <i>Hex4Digits</i>.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">RegExpUnicodeEscapeSequence</span> <span class=\"geq\">::</span> <code class=\"t\">u{</code> <span class=\"nt\">HexDigits</span> <code class=\"t\">}</code></span>\n        evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the character whose code is the MV of <i>HexDigits</i>.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">LeadSurrogate</span> <span class=\"geq\">::</span> <span class=\"nt\">Hex4Digits</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the character whose code is the SV of <i>Hex4Digits</i>.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">TrailSurrogate</span> <span class=\"geq\">::</span> <span class=\"nt\">Hex4Digits</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the character whose code is the SV of <i>Hex4Digits</i>.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">NonSurrogate</span> <span class=\"geq\">::</span>\n        <span class=\"nt\">Hex4Digits</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the character whose code is the SV of <i>Hex4Digits</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-decimalescape\">\n        <h1><span class=\"secnum\" id=\"sec-21.2.2.11\"><a href=\"/sec/sec-decimalescape.html\" title=\"link to this section\">21.2.2.11</a></span>\n            DecimalEscape</h1>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">DecimalEscape</span> <span class=\"geq\">::</span> <span class=\"nt\">DecimalIntegerLiteral</span></span>  evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>i</i> be the MV of <i>DecimalIntegerLiteral</i>.</li>\n          <li>If <i>i</i> is zero, return the EscapeValue consisting of the character U+0000 (NULL).</li>\n          <li>Return the EscapeValue consisting of the integer <i>i</i>.</li>\n        </ol>\n\n        <p>The definition of &#x201C;the MV of <span class=\"nt\">DecimalIntegerLiteral</span>&#x201D; is in <a href=\"/sec/sec-literals-numeric-literals.html\">11.8.3</a>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> If <code>\\</code> is followed by a decimal number <var>n</var> whose first digit is not\n          <code>0</code>, then the escape sequence is considered to be a backreference. It is an error if <var>n</var> is greater\n          than the total number of left capturing parentheses in the entire regular expression. <code>\\0</code> represents the\n          &lt;NUL&gt; character and cannot be followed by a decimal digit.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-characterclassescape\">\n        <h1><span class=\"secnum\" id=\"sec-21.2.2.12\"><a href=\"/sec/sec-characterclassescape.html\" title=\"link to this section\">21.2.2.12</a></span> CharacterClassEscape</h1>\n\n        <p>The production <span class=\"prod\"><span class=\"nt\">CharacterClassEscape</span> <span class=\"geq\">::</span> <code class=\"t\">d</code></span> evaluates by returning the ten-element set of characters containing the characters\n        <code>0</code> through <code>9</code> inclusive.</p>\n\n        <p>The production <span class=\"prod\"><span class=\"nt\">CharacterClassEscape</span> <span class=\"geq\">::</span> <code class=\"t\">D</code></span> evaluates by returning the set of all characters not included in the set returned by <span class=\"prod\"><span class=\"nt\">CharacterClassEscape</span> <span class=\"geq\">::</span> <code class=\"t\">d</code></span>\n        .</p>\n\n        <p>The production <span class=\"prod\"><span class=\"nt\">CharacterClassEscape</span> <span class=\"geq\">::</span> <code class=\"t\">s</code></span> evaluates by returning the set of characters containing the characters that are on the\n        right-hand side of the <span class=\"nt\">WhiteSpace</span> (<a href=\"/sec/sec-white-space.html\">11.2</a>) or <span class=\"nt\">LineTerminator</span> (<a href=\"/sec/sec-line-terminators.html\">11.3</a>) productions.</p>\n\n        <p>The production <span class=\"prod\"><span class=\"nt\">CharacterClassEscape</span> <span class=\"geq\">::</span> <code class=\"t\">S</code></span> evaluates by returning the set of all characters not included in the set returned by <span class=\"prod\"><span class=\"nt\">CharacterClassEscape</span> <span class=\"geq\">::</span> <code class=\"t\">s</code></span>\n        .</p>\n\n        <p>The production <span class=\"prod\"><span class=\"nt\">CharacterClassEscape</span> <span class=\"geq\">::</span> <code class=\"t\">w</code></span> evaluates by returning the set of characters containing the sixty-three characters:</p>\n\n        <figure>\n          <table class=\"lightweight-table\">\n            <tr>\n              <td><code>a</code></td>\n              <td><code>b</code></td>\n              <td><code>c</code></td>\n              <td><code>d</code></td>\n              <td><code>e</code></td>\n              <td><code>f</code></td>\n              <td><code>g</code></td>\n              <td><code>h</code></td>\n              <td><code>i</code></td>\n              <td><code>j</code></td>\n              <td><code>k</code></td>\n              <td><code>l</code></td>\n              <td><code>m</code></td>\n              <td><code>n</code></td>\n              <td><code>o</code></td>\n              <td><code>p</code></td>\n              <td><code>q</code></td>\n              <td><code>r</code></td>\n              <td><code>s</code></td>\n              <td><code>t</code></td>\n              <td><code>u</code></td>\n              <td><code>v</code></td>\n              <td><code>w</code></td>\n              <td><code>x</code></td>\n              <td><code>y</code></td>\n              <td><code>z</code></td>\n            </tr>\n            <tr>\n              <td><code>A</code></td>\n              <td><code>B</code></td>\n              <td><code>C</code></td>\n              <td><code>D</code></td>\n              <td><code>E</code></td>\n              <td><code>F</code></td>\n              <td><code>G</code></td>\n              <td><code>H</code></td>\n              <td><code>I</code></td>\n              <td><code>J</code></td>\n              <td><code>K</code></td>\n              <td><code>L</code></td>\n              <td><code>M</code></td>\n              <td><code>N</code></td>\n              <td><code>O</code></td>\n              <td><code>P</code></td>\n              <td><code>Q</code></td>\n              <td><code>R</code></td>\n              <td><code>S</code></td>\n              <td><code>T</code></td>\n              <td><code>U</code></td>\n              <td><code>V</code></td>\n              <td><code>W</code></td>\n              <td><code>X</code></td>\n              <td><code>Y</code></td>\n              <td><code>Z</code></td>\n            </tr>\n            <tr>\n              <td><code>0</code></td>\n              <td><code>1</code></td>\n              <td><code>2</code></td>\n              <td><code>3</code></td>\n              <td><code>4</code></td>\n              <td><code>5</code></td>\n              <td><code>6</code></td>\n              <td><code>7</code></td>\n              <td><code>8</code></td>\n              <td><code>9</code></td>\n              <td><code>_</code></td>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td></td>\n            </tr>\n          </table>\n        </figure>\n\n        <p>The production <span class=\"prod\"><span class=\"nt\">CharacterClassEscape</span> <span class=\"geq\">::</span> <code class=\"t\">W</code></span> evaluates by returning the set of all characters not included in the set returned by <span class=\"prod\"><span class=\"nt\">CharacterClassEscape</span> <span class=\"geq\">::</span> <code class=\"t\">w</code></span>\n        .</p>\n      </section>\n\n      <section id=\"sec-characterclass\">\n        <h1><span class=\"secnum\" id=\"sec-21.2.2.13\"><a href=\"/sec/sec-characterclass.html\" title=\"link to this section\">21.2.2.13</a></span> CharacterClass</h1>\n\n        <p>The production <span class=\"prod\"><span class=\"nt\">CharacterClass</span> <span class=\"geq\">::</span> <code class=\"t\">[</code> <span class=\"nt\">ClassRanges</span> <code class=\"t\">]</code></span> evaluates by evaluating <span class=\"nt\">ClassRanges</span> to obtain a CharSet and returning that CharSet and the Boolean <b>false</b>.</p>\n\n        <p>The production <span class=\"prod\"><span class=\"nt\">CharacterClass</span> <span class=\"geq\">::</span> <code class=\"t\">[</code> <code class=\"t\">^</code> <span class=\"nt\">ClassRanges</span> <code class=\"t\">]</code></span> evaluates\n        by evaluating <span class=\"nt\">ClassRanges</span> to obtain a CharSet and returning that CharSet and the Boolean\n        <b>true</b>.</p>\n      </section>\n\n      <section id=\"sec-classranges\">\n        <h1><span class=\"secnum\" id=\"sec-21.2.2.14\"><a href=\"/sec/sec-classranges.html\" title=\"link to this section\">21.2.2.14</a></span>\n            ClassRanges</h1>\n\n        <p>The production <span class=\"prod\"><span class=\"nt\">ClassRanges</span> <span class=\"geq\">::</span> <span class=\"grhsannot\">[empty]</span></span> evaluates by returning the empty CharSet.</p>\n\n        <p>The production <span class=\"prod\"><span class=\"nt\">ClassRanges</span> <span class=\"geq\">::</span> <span class=\"nt\">NonemptyClassRanges</span></span> evaluates by evaluating <span class=\"nt\">NonemptyClassRanges</span> to obtain\n        a CharSet and returning that CharSet.</p>\n      </section>\n\n      <section id=\"sec-nonemptyclassranges\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-21.2.2.15\"><a href=\"/sec/sec-nonemptyclassranges.html\" title=\"link to this section\">21.2.2.15</a></span> NonemptyClassRanges</h1>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">NonemptyClassRanges</span> <span class=\"geq\">::</span> <span class=\"nt\">ClassAtom</span></span> evaluates as follows:</p>\n\n          <ol class=\"proc\">\n            <li>Return the CharSet that is the result of evaluating <i>ClassAtom</i>.</li>\n          </ol>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">NonemptyClassRanges</span> <span class=\"geq\">::</span> <span class=\"nt\">ClassAtom</span> <span class=\"nt\">NonemptyClassRangesNoDash</span></span>\n          evaluates as follows:</p>\n\n          <ol class=\"proc\">\n            <li>Evaluate <i>ClassAtom</i> to obtain a CharSet <i>A</i>.</li>\n            <li>Evaluate <i>NonemptyClassRangesNoDash</i> to obtain a CharSet <i>B</i>.</li>\n            <li>Return the union of CharSets <i>A</i> and <i>B</i>.</li>\n          </ol>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">NonemptyClassRanges</span> <span class=\"geq\">::</span> <span class=\"nt\">ClassAtom</span> <code class=\"t\">-</code> <span class=\"nt\">ClassAtom</span> <span class=\"nt\">ClassRanges</span></span> evaluates as follows:</p>\n\n          <ol class=\"proc\">\n            <li>Evaluate the first <i>ClassAtom</i> to obtain a CharSet <i>A</i>.</li>\n            <li>Evaluate the second <i>ClassAtom</i> to obtain a CharSet <i>B</i>.</li>\n            <li>Evaluate <i>ClassRanges</i> to obtain a CharSet <i>C</i>.</li>\n            <li><a href=\"/sec/sec-call.html\">Call</a> CharacterRange(<i>A</i>, <i>B</i>) and let <i>D</i> be the resulting CharSet.</li>\n            <li>Return the union of CharSets <i>D</i> and <i>C</i>.</li>\n          </ol>\n        </div>\n\n        <section id=\"sec-runtime-semantics-characterrange-abstract-operation\">\n          <h1><span class=\"secnum\" id=\"sec-21.2.2.15.1\"><a href=\"/sec/sec-runtime-semantics-characterrange-abstract-operation.html\" title=\"link to this section\">21.2.2.15.1</a></span> Runtime Semantics: CharacterRange Abstract Operation</h1>\n\n          <p class=\"normalbefore\">The abstract operation CharacterRange takes two CharSet parameters <var>A</var> and <var>B</var>\n          and performs the following steps:</p>\n\n          <ol class=\"proc\">\n            <li>If <i>A</i> does not contain exactly one character or <i>B</i> does not contain exactly one character, throw a\n                <b>SyntaxError</b> exception.</li>\n            <li>Let <i>a</i> be the one character in CharSet <i>A</i>.</li>\n            <li>Let <i>b</i> be the one character in CharSet <i>B</i>.</li>\n            <li>Let <i>i</i> be the character value of character <i>a</i>.</li>\n            <li>Let <i>j</i> be the character value of character <i>b</i>.</li>\n            <li>If <i>i</i> &gt; <i>j</i>, throw a <b>SyntaxError</b> exception.</li>\n            <li>Return the set containing all characters numbered <i>i</i> through <i>j</i>, inclusive.</li>\n          </ol>\n        </section>\n      </section>\n\n      <section id=\"sec-nonemptyclassrangesnodash\">\n        <h1><span class=\"secnum\" id=\"sec-21.2.2.16\"><a href=\"/sec/sec-nonemptyclassrangesnodash.html\" title=\"link to this section\">21.2.2.16</a></span> NonemptyClassRangesNoDash</h1>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">NonemptyClassRangesNoDash</span> <span class=\"geq\">::</span> <span class=\"nt\">ClassAtom</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the CharSet that is the result of evaluating <i>ClassAtom</i>.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">NonemptyClassRangesNoDash</span> <span class=\"geq\">::</span> <span class=\"nt\">ClassAtomNoDash</span> <span class=\"nt\">NonemptyClassRangesNoDash</span></span>\n        evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Evaluate <i>ClassAtomNoDash</i> to obtain a CharSet <i>A</i>.</li>\n          <li>Evaluate <i>NonemptyClassRangesNoDash</i> to obtain a CharSet <i>B</i>.</li>\n          <li>Return the union of CharSets <i>A</i> and <i>B</i>.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">NonemptyClassRangesNoDash</span> <span class=\"geq\">::</span> <span class=\"nt\">ClassAtomNoDash</span> <code class=\"t\">-</code> <span class=\"nt\">ClassAtom</span>\n        <span class=\"nt\">ClassRanges</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Evaluate <i>ClassAtomNoDash</i> to obtain a CharSet <i>A</i>.</li>\n          <li>Evaluate <i>ClassAtom</i> to obtain a CharSet <i>B</i>.</li>\n          <li>Evaluate <i>ClassRanges</i> to obtain a CharSet <i>C</i>.</li>\n          <li><a href=\"/sec/sec-call.html\">Call</a> CharacterRange(<i>A</i>, <i>B</i>) and let <i>D</i> be the resulting CharSet.</li>\n          <li>Return the union of CharSets <i>D</i> and <i>C</i>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> <span class=\"nt\">ClassRanges</span> can expand into a single <span class=\"nt\">ClassAtom</span> and/or ranges of two <span class=\"nt\">ClassAtom</span>\n          separated by dashes. In the latter case the <span class=\"nt\">ClassRanges</span> includes all characters between the first <span class=\"nt\">ClassAtom</span> and the\n          second <span class=\"nt\">ClassAtom</span>, inclusive; an error occurs if either <span class=\"nt\">ClassAtom</span> does not represent a single character (for example, if\n          one is \\w) or if the first <span class=\"nt\">ClassAtom</span>&apos;s character value is greater than the second <span class=\"nt\">ClassAtom</span>&apos;s character value.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> Even if the pattern ignores case, the case of the two ends of a range is significant\n          in determining which characters belong to the range. Thus, for example, the pattern <code>/[E-F]/i</code> matches only\n          the letters <code>E</code>, <code>F</code>, <code>e</code>, and <code>f</code>, while the pattern <code>/[E-f]/i</code>\n          matches all upper and lower-case letters in the Unicode Basic Latin block as well as the symbols <code>[</code>,\n          <code>\\</code>, <code>]</code>, <code>^</code>, <code>_</code>, and <code>`</code>.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 3</span> A <code>-</code> character can be treated literally or it can denote a range. It is\n          treated literally if it is the first or last character of <span class=\"nt\">ClassRanges</span>, the beginning or end\n          limit of a range specification, or immediately follows a range specification.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-classatom\">\n        <h1><span class=\"secnum\" id=\"sec-21.2.2.17\"><a href=\"/sec/sec-classatom.html\" title=\"link to this section\">21.2.2.17</a></span>\n            ClassAtom</h1>\n\n        <p>The production <span class=\"prod\"><span class=\"nt\">ClassAtom</span> <span class=\"geq\">::</span> <code class=\"t\">-</code></span> evaluates by returning the CharSet containing the one character <code>-</code>.</p>\n\n        <p>The production <span class=\"prod\"><span class=\"nt\">ClassAtom</span> <span class=\"geq\">::</span> <span class=\"nt\">ClassAtomNoDash</span></span> evaluates by evaluating <span class=\"nt\">ClassAtomNoDash</span> to obtain a\n        CharSet and returning that CharSet.</p>\n      </section>\n\n      <section id=\"sec-classatomnodash\">\n        <h1><span class=\"secnum\" id=\"sec-21.2.2.18\"><a href=\"/sec/sec-classatomnodash.html\" title=\"link to this section\">21.2.2.18</a></span> ClassAtomNoDash</h1>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">ClassAtomNoDash</span> <span class=\"geq\">::</span> <span class=\"nt\">SourceCharacter</span> <span class=\"grhsmod\">but not one of</span> <code class=\"t\">\\</code> <span class=\"grhsmod\">or</span> <code class=\"t\">]</code> <span class=\"grhsmod\">or</span> <code class=\"t\">-</code></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the CharSet containing the character matched by <i>SourceCharacter</i>.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">ClassAtomNoDash</span> <span class=\"geq\">::</span> <code class=\"t\">\\</code> <span class=\"nt\">ClassEscape</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the CharSet that is the result of evaluating <i>ClassEscape</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-classescape\">\n        <h1><span class=\"secnum\" id=\"sec-21.2.2.19\"><a href=\"/sec/sec-classescape.html\" title=\"link to this section\">21.2.2.19</a></span>\n            ClassEscape</h1>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">ClassEscape</span> <span class=\"geq\">::</span>\n        <span class=\"nt\">DecimalEscape</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Evaluate <i>DecimalEscape</i> to obtain an EscapeValue <i>E</i>.</li>\n          <li>If <i>E</i> is not a character, throw a <b>SyntaxError</b> exception.</li>\n          <li>Let <i>ch</i> be <i>E</i>&apos;s character.</li>\n          <li>Return the one-element CharSet containing the character <i>ch</i>.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">ClassEscape</span> <span class=\"geq\">::</span>\n        <code class=\"t\">b</code></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the CharSet containing the single character &lt;BS&gt; U+0008 (BACKSPACE).</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">ClassEscape</span> <span class=\"geq\">::</span>\n        <code class=\"t\">-</code></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the CharSet containing the single character - U+002D (HYPEN-MINUS).</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">ClassEscape</span> <span class=\"geq\">::</span>\n        <span class=\"nt\">CharacterEscape</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the CharSet containing the single character that is the result of evaluating <i>CharacterEscape</i>.</li>\n        </ol>\n\n        <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">ClassEscape</span> <span class=\"geq\">::</span>\n        <span class=\"nt\">CharacterClassEscape</span></span> evaluates as follows:</p>\n\n        <ol class=\"proc\">\n          <li>Return the CharSet that is the result of evaluating <i>CharacterClassEscape</i>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> A <span class=\"nt\">ClassAtom</span> can use any of the escape sequences that are allowed\n          in the rest of the regular expression except for <code>\\b</code>, <code>\\B</code>, and backreferences. Inside a <span class=\"nt\">CharacterClass</span>, <code>\\b</code> means the backspace character, while <code>\\B</code> and\n          backreferences raise errors. Using a backreference inside a <span class=\"nt\">ClassAtom</span> causes an error.</p>\n        </div>\n      </section>\n    "}