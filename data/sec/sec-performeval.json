{"id":"sec-performeval","html":"\n        <h1><span class=\"secnum\" id=\"sec-18.2.1.1\"><a href=\"/sec/sec-performeval.html\" title=\"link to this section\">18.2.1.1</a></span>\n            Runtime Semantics: PerformEval( x, evalRealm, strictCaller, direct)</h1>\n\n        <p class=\"normalbefore\">The abstract operation PerformEval with arguments <var>x</var>, <var>evalRealm</var>,\n        <var>strictCaller</var>, and <var>direct</var> performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: If <i>direct</i> is <b>false</b> then  <i>strictCaller</i> is also\n              <b>false</b>.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>x</i>) is not String, return <i>x</i>.</li>\n          <li>Let <i>script</i> be the ECMAScript code that is the result of parsing <i>x</i>, interpreted as UTF-16 encoded\n              Unicode text as described in <a href=\"/sec/sec-ecmascript-language-types-string-type.html\">6.1.4</a><i>,</i> for the goal\n              symbol <i>Script</i>. If the parse fails or any early errors are detected, throw a <b>SyntaxError</b> exception (but\n              <a href=\"/sec/sec-error-handling-and-language-extensions.html\">see also clause 16</a>).</li>\n          <li>If <i>script</i> Contains <i>ScriptBody</i> is <b>false</b>, return <b>undefined</b>.</li>\n          <li>Let <i>body</i> be the <i>ScriptBody</i> of <i>script.</i></li>\n          <li>If <i>strictCaller</i> is <b>true</b>, let <i>strictEval</i> be <b>true.</b></li>\n          <li>Else, let <i>strictEval</i> be IsStrict of <i>script</i>.</li>\n          <li>Let <i>ctx</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>. If <i>direct</i> is\n              <b>true</b> <i>ctx</i> will be the <a href=\"/sec/sec-execution-contexts.html\">execution context</a> that performed the direct\n              <code>eval</code>. If <i>direct</i> is <b>false</b> <i>ctx</i> will be the <a href=\"/sec/sec-execution-contexts.html\">execution context</a> for the invocation of the eval function.</li>\n          <li>If <i>direct</i> is <b>true</b>, then\n            <ol class=\"block\">\n              <li>Let <i>lexEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>ctx&#x2019;s</i>\n                  <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>).</li>\n              <li>Let <i>varEnv</i> be <i>ctx&#x2019;s</i> <a href=\"/sec/sec-execution-contexts.html\">VariableEnvironment</a>.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>lexEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>evalRealm</i>.[[globalEnv]]).</li>\n              <li>Let <i>varEnv</i> be <i>evalRealm</i>.[[globalEnv]].</li>\n            </ol>\n          </li>\n          <li>If <i>strictEval</i> is <b>true</b>, let <i>varEnv</i> be <i>lexEnv</i>.</li>\n          <li>If <i>ctx</i> is not already <a href=\"/sec/sec-execution-contexts.html\">suspended</a>, <a href=\"/sec/sec-execution-contexts.html\">Suspend</a> <i>ctx</i>.</li>\n          <li>Let <i>evalCxt</i> be a new <a href=\"/sec/sec-execution-contexts.html\">ECMAScript code execution context</a>.</li>\n          <li>Set the <i>evalCxt&#x2019;s</i> <a href=\"/sec/sec-code-realms.html\">Realm</a>  to <i>evalRealm</i>.</li>\n          <li>Set the <i>evalCxt&#x2019;s</i> <a href=\"/sec/sec-execution-contexts.html\">VariableEnvironment</a> to <i>varEnv</i>.</li>\n          <li>Set the <i>evalCxt&#x2019;s</i> <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>lexEnv</i>.</li>\n          <li>Push <i>evalCxt</i> on to <a href=\"/sec/sec-execution-contexts.html\">the execution context stack</a>; <i>evalCxt</i> is now\n              <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n          <li>Let <i>result</i> be <a href=\"/sec/sec-evaldeclarationinstantiation.html\">EvalDeclarationInstantiation</a>(<i>body</i>,\n              <i>varEnv</i>, <i>lexEnv</i>, <i>strictEval</i>).</li>\n          <li>If <i>result</i>.[[type]] is <span style=\"font-family: sans-serif\">normal</span>, then\n            <ol class=\"block\">\n              <li>Let <i>result</i> be the result of evaluating <i>body</i>.</li>\n            </ol>\n          </li>\n          <li>If <i>result</i>.[[type]] is <span style=\"font-family: sans-serif\">normal</span> and <i>result</i>.[[value]] is\n              <span style=\"font-family: sans-serif\">empty</span>,  then\n            <ol class=\"block\">\n              <li>Let <i>result</i> be <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<b>undefined</b>).</li>\n            </ol>\n          </li>\n          <li><a href=\"/sec/sec-execution-contexts.html\">Suspend</a> <i>evalCxt</i> and remove it from <a href=\"/sec/sec-execution-contexts.html\">the execution context stack</a>.</li>\n          <li>Resume the context that is now on the top of <a href=\"/sec/sec-execution-contexts.html\">the execution context stack</a> as <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n          <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>result</i>).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The eval code cannot instantiate variable or function bindings in the variable\n          environment of the calling context that invoked the eval if the calling context is evaluating formal parameter\n          initializers or if either the code of the calling context or the eval code is <a href=\"/sec/sec-strict-mode-code.html\">strict\n          code</a>. Instead such bindings are instantiated in a new <a href=\"/sec/sec-execution-contexts.html\">VariableEnvironment</a> that\n          is only accessible to the eval code. Bindings introduced by <code>let</code>, <code>const</code>, or <code>class</code>\n          declarations are always instantiated in a new <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</p>\n        </div>\n      "}