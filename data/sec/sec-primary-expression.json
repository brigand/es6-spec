{"id":"sec-primary-expression","html":"\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-12.2\"><a href=\"/sec/sec-primary-expression.html\" title=\"link to this section\">12.2</a></span>\n          Primary Expression</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">PrimaryExpression</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">this</code></div>\n        <div class=\"rhs\"><span class=\"nt\">IdentifierReference</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">Literal</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ArrayLiteral</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">ObjectLiteral</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">FunctionExpression</span></div>\n        <div class=\"rhs\"><span class=\"nt\">ClassExpression</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">GeneratorExpression</span></div>\n        <div class=\"rhs\"><span class=\"nt\">RegularExpressionLiteral</span></div>\n        <div class=\"rhs\"><span class=\"nt\">TemplateLiteral</span><sub class=\"g-params\">[?Yield]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span><sub class=\"g-params\">[?Yield]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code></div>\n        <div class=\"rhs\"><code class=\"t\">(</code> <code class=\"t\">)</code></div>\n        <div class=\"rhs\"><code class=\"t\">(</code> <code class=\"t\">...</code> <span class=\"nt\">BindingIdentifier</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">)</code></div>\n        <div class=\"rhs\"><code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">,</code> <code class=\"t\">...</code> <span class=\"nt\">BindingIdentifier</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">)</code></div>\n      </div>\n\n      <h2>Supplemental Syntax</h2>\n\n      <p>When processing the production</p>\n\n      <p class=\"normalbefore\">&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"nt\">PrimaryExpression</span><sub>[Yield]</sub>\n      <b>:</b> <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span><sub>[?Yield]</sub></p>\n\n      <p class=\"normalbefore\">the interpretation of <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span> is\n      refined using the following grammar:</p>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">ParenthesizedExpression</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code></div>\n      </div>\n    </div>\n\n    <section id=\"sec-primary-expression-semantics\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.1\"><a href=\"/sec/sec-primary-expression-semantics.html\" title=\"link to this section\">12.2.1</a></span> Semantics</h1>\n      </div>\n\n      <section id=\"sec-static-semantics-coveredparenthesizedexpression\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.1.1\"><a href=\"/sec/sec-static-semantics-coveredparenthesizedexpression.html\" title=\"link to this section\">12.2.1.1</a></span> Static Semantics:  CoveredParenthesizedExpression</h1>\n        <div class=\"gp prod\"><span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code></div>\n        <ol class=\"proc\">\n          <li>Return the result of parsing the lexical token stream matched by\n              <i>CoverParenthesizedExpressionAndArrowParameterList</i><sub>[Yield]</sub> using either\n              <i>ParenthesizedExpression</i> or <i>ParenthesizedExpression</i><sub>[Yield]</sub> as the goal symbol depending upon\n              whether the <sub>[Yield]</sub> grammar parameter was present when\n              <i>CoverParenthesizedExpressionAndArrowParameterList was matched.</i></li>\n        </ol>\n      </section>\n\n      <section id=\"sec-semantics-static-semantics-hasname\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.1.2\"><a href=\"/sec/sec-semantics-static-semantics-hasname.html\" title=\"link to this section\">12.2.1.2</a></span> Static Semantics:  HasName</h1>\n\n        <p>See also: <a href=\"/sec/sec-function-definitions-static-semantics-hasname.html\">14.1.8</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-hasname.html\">14.2.7</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-hasname.html\">14.4.7</a>, <a href=\"/sec/sec-class-definitions-static-semantics-hasname.html\">14.5.6</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>expr</i> be CoveredParenthesizedExpression of <i>CoverParenthesizedExpressionAndArrowParameterList</i>.</li>\n          <li>If IsFunctionDefinition of <i>expr</i> is <b>false</b>, return <b>false</b>.</li>\n          <li>Return HasName of <i>expr</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-semantics-static-semantics-isfunctiondefinition\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.1.3\"><a href=\"/sec/sec-semantics-static-semantics-isfunctiondefinition.html\" title=\"link to this section\">12.2.1.3</a></span> Static Semantics:  IsFunctionDefinition</h1>\n\n        <p>See also: <a href=\"/sec/sec-grouping-operator-static-semantics-isfunctiondefinition.html\">12.2.10.2</a>, <a href=\"/sec/sec-static-semantics-static-semantics-isfunctiondefinition.html\">12.3.1.2</a>, <a href=\"/sec/sec-postfix-expressions-static-semantics-isfunctiondefinition.html\">12.4.2</a>, <a href=\"/sec/sec-unary-operators-static-semantics-isfunctiondefinition.html\">12.5.2</a>, <a href=\"/sec/sec-multiplicative-operators-static-semantics-isfunctiondefinition.html\">12.6.1</a>, <a href=\"/sec/sec-additive-operators-static-semantics-isfunctiondefinition.html\">12.7.1</a>, <a href=\"/sec/sec-bitwise-shift-operators-static-semantics-isfunctiondefinition.html\">12.8.1</a>, <a href=\"/sec/sec-relational-operators-static-semantics-isfunctiondefinition.html\">12.9.1</a>, <a href=\"/sec/sec-equality-operators-static-semantics-isfunctiondefinition.html\">12.10.1</a>, <a href=\"/sec/sec-binary-bitwise-operators-static-semantics-isfunctiondefinition.html\">12.11.1</a>, <a href=\"/sec/sec-binary-logical-operators-static-semantics-isfunctiondefinition.html\">12.12.1</a>, <a href=\"/sec/sec-conditional-operator-static-semantics-isfunctiondefinition.html\">12.13.1</a>, <a href=\"/sec/sec-assignment-operators-static-semantics-isfunctiondefinition.html\">12.14.2</a>, <a href=\"/sec/sec-comma-operator-static-semantics-isfunctiondefinition.html\">12.15.1</a>, <a href=\"/sec/sec-function-definitions-static-semantics-isfunctiondefinition.html\">14.1.11</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-isfunctiondefinition.html\">14.4.9</a>, <a href=\"/sec/sec-class-definitions-static-semantics-isfunctiondefinition.html\">14.5.8</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">this</code></div>\n          <div class=\"rhs\"><span class=\"nt\">IdentifierReference</span></div>\n          <div class=\"rhs\"><span class=\"nt\">Literal</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ArrayLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ObjectLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">RegularExpressionLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">TemplateLiteral</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>expr</i> be CoveredParenthesizedExpression of <i>CoverParenthesizedExpressionAndArrowParameterList</i>.</li>\n          <li>Return IsFunctionDefinition of <i>expr</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-semantics-static-semantics-isidentifierref\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.1.4\"><a href=\"/sec/sec-semantics-static-semantics-isidentifierref.html\" title=\"link to this section\">12.2.1.4</a></span> Static Semantics:  IsIdentifierRef</h1>\n\n        <p>See also: <a href=\"/sec/sec-static-semantics-static-semantics-isidentifierref.html\">12.3.1.4</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">IdentifierReference</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>true</b>.</li>\n        </ol>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">this</code></div>\n          <div class=\"rhs\"><span class=\"nt\">Literal</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ArrayLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ObjectLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">FunctionExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ClassExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">GeneratorExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">RegularExpressionLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">TemplateLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-semantics-static-semantics-isvalidsimpleassignmenttarget\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.1.5\"><a href=\"/sec/sec-semantics-static-semantics-isvalidsimpleassignmenttarget.html\" title=\"link to this section\">12.2.1.5</a></span> Static Semantics:  IsValidSimpleAssignmentTarget</h1>\n\n        <p>See also: <a href=\"/sec/sec-identifiers-static-semantics-isvalidsimpleassignmenttarget.html\">12.1.3</a>, <a href=\"/sec/sec-grouping-operator-static-semantics-isvalidsimpleassignmenttarget.html\">12.2.10.3</a>, <a href=\"/sec/sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget.html\">12.3.1.5</a>, <a href=\"/sec/sec-postfix-expressions-static-semantics-isvalidsimpleassignmenttarget.html\">12.4.3</a>, <a href=\"/sec/sec-unary-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.5.3</a>, <a href=\"/sec/sec-multiplicative-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.6.2</a>, <a href=\"/sec/sec-additive-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.7.2</a>, <a href=\"/sec/sec-bitwise-shift-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.8.2</a>, <a href=\"/sec/sec-relational-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.9.2</a>, <a href=\"/sec/sec-equality-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.10.2</a>, <a href=\"/sec/sec-binary-bitwise-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.11.2</a>, <a href=\"/sec/sec-binary-logical-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.12.2</a>, <a href=\"/sec/sec-conditional-operator-static-semantics-isvalidsimpleassignmenttarget.html\">12.13.2</a>, <a href=\"/sec/sec-assignment-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.14.3</a>, <a href=\"/sec/sec-comma-operator-static-semantics-isvalidsimpleassignmenttarget.html\">12.15.2</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">this</code></div>\n          <div class=\"rhs\"><span class=\"nt\">Literal</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ArrayLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ObjectLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">FunctionExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ClassExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">GeneratorExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">RegularExpressionLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">TemplateLiteral</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>expr</i> be CoveredParenthesizedExpression of <i>CoverParenthesizedExpressionAndArrowParameterList</i>.</li>\n          <li>Return IsValidSimpleAssignmentTarget of <i>expr</i>.</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-this-keyword\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.2\"><a href=\"/sec/sec-this-keyword.html\" title=\"link to this section\">12.2.2</a></span> The\n            <code>this</code> Keyword</h1>\n      </div>\n\n      <section id=\"sec-this-keyword-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.2.1\"><a href=\"/sec/sec-this-keyword-runtime-semantics-evaluation.html\" title=\"link to this section\">12.2.2.1</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span> <code class=\"t\">this</code></div>\n        <ol class=\"proc\">\n          <li>Return <a href=\"/sec/sec-resolvethisbinding.html\">ResolveThisBinding</a>( ) .</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-identifier-reference\">\n      <h1><span class=\"secnum\" id=\"sec-12.2.3\"><a href=\"/sec/sec-identifier-reference.html\" title=\"link to this section\">12.2.3</a></span>\n          Identifier Reference</h1>\n\n      <p>See <a href=\"/sec/sec-identifiers.html\">12.1</a> for <span class=\"nt\">IdentifierReference</span>.</p>\n    </section>\n\n    <section id=\"sec-primary-expression-literals\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.4\"><a href=\"/sec/sec-primary-expression-literals.html\" title=\"link to this section\">12.2.4</a></span> Literals</h1>\n        <h2>Syntax</h2>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">Literal</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">NullLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">BooleanLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">NumericLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">StringLiteral</span></div>\n        </div>\n      </div>\n\n      <section id=\"sec-literals-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.4.1\"><a href=\"/sec/sec-literals-runtime-semantics-evaluation.html\" title=\"link to this section\">12.2.4.1</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">Literal</span> <span class=\"geq\">:</span> <span class=\"nt\">NullLiteral</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>null</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">Literal</span> <span class=\"geq\">:</span> <span class=\"nt\">BooleanLiteral</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>false</b> if <i>BooleanLiteral</i> is the token <code>false</code>.</li>\n          <li>Return <b>true</b> if <i>BooleanLiteral</i> is the token <code>true</code>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">Literal</span> <span class=\"geq\">:</span> <span class=\"nt\">NumericLiteral</span></div>\n        <ol class=\"proc\">\n          <li>Return the number whose value is  MV of <i>NumericLiteral</i> as defined in <a href=\"/sec/sec-literals-numeric-literals.html\">11.8.3</a>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">Literal</span> <span class=\"geq\">:</span> <span class=\"nt\">StringLiteral</span></div>\n        <ol class=\"proc\">\n          <li>Return the StringValue of <i>StringLiteral</i> as defined in <a href=\"/sec/sec-string-literals-static-semantics-stringvalue.html\">11.8.4.2</a>.</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-array-initializer\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.5\"><a href=\"/sec/sec-array-initializer.html\" title=\"link to this section\">12.2.5</a></span>\n            Array Initializer</h1>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> An <span class=\"nt\">ArrayLiteral</span> is an expression describing the initialization\n          of an Array object, using a list, of zero or more expressions each of which represents an array element, enclosed in\n          square brackets. The elements need not be literals; they are evaluated each time the array initializer is evaluated.</p>\n        </div>\n\n        <p>Array elements may be elided at the beginning, middle or end of the element list. Whenever a comma in the element list\n        is not preceded by an <span class=\"nt\">AssignmentExpression</span> (i.e., a comma at the beginning or after another\n        comma), the missing array element contributes to the length of the Array and increases the index of subsequent elements.\n        Elided array elements are not defined. If an element is elided at the end of an array, that element does not contribute to\n        the length of the Array.</p>\n\n        <h2>Syntax</h2>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">ArrayLiteral</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">[</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">]</code></div>\n          <div class=\"rhs\"><code class=\"t\">[</code> <span class=\"nt\">ElementList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">]</code></div>\n          <div class=\"rhs\"><code class=\"t\">[</code> <span class=\"nt\">ElementList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">,</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">]</code></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">ElementList</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[In, ?Yield]</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">SpreadElement</span><sub class=\"g-params\">[?Yield]</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">ElementList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">,</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[In, ?Yield]</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">ElementList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">,</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">SpreadElement</span><sub class=\"g-params\">[?Yield]</sub></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">Elision</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">,</code></div>\n          <div class=\"rhs\"><span class=\"nt\">Elision</span> <code class=\"t\">,</code></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">SpreadElement</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">...</code> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[In, ?Yield]</sub></div>\n        </div>\n      </div>\n\n      <section id=\"sec-static-semantics-elisionwidth\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.5.1\"><a href=\"/sec/sec-static-semantics-elisionwidth.html\" title=\"link to this section\">12.2.5.1</a></span> Static Semantics:  ElisionWidth</h1>\n        <div class=\"gp prod\"><span class=\"nt\">Elision</span> <span class=\"geq\">:</span> <code class=\"t\">,</code></div>\n        <ol class=\"proc\">\n          <li>Return the numeric value 1.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">Elision</span> <span class=\"geq\">:</span> <span class=\"nt\">Elision</span> <code class=\"t\">,</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>preceding</i> be the ElisionWidth of <i>Elision</i>.</li>\n          <li>Return <i>preceding</i>+1.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-runtime-semantics-arrayaccumulation\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.5.2\"><a href=\"/sec/sec-runtime-semantics-arrayaccumulation.html\" title=\"link to this section\">12.2.5.2</a></span> Runtime Semantics: ArrayAccumulation</h1>\n\n        <p>With parameters <var>array</var> and <var>nextIndex</var>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">ElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">AssignmentExpression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>padding</i> be the ElisionWidth of <i>Elision</i>; if <i>Elision</i> is not present, use the numeric value\n              zero.</li>\n          <li>Let <i>initResult</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n          <li>Let <i>initValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>initResult</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>initValue</i>).</li>\n          <li>Let <i>created</i> be <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>array</i>, <a href=\"/sec/sec-tostring.html\">ToString</a>(<a href=\"/sec/sec-touint32.html\">ToUint32</a>(<i>nextIndex+padding</i>)),\n              <i>initValue</i>).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>created</i> is <b>true</b><i>.</i></li>\n          <li>Return <i>nextIndex+padding+</i>1.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">SpreadElement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>padding</i> be the ElisionWidth of <i>Elision</i>; if <i>Elision</i> is not present, use the numeric value\n              zero.</li>\n          <li>Return the result of performing ArrayAccumulation for <i>SpreadElement</i> with arguments <i>array</i> and\n              <i>nextIndex</i>+<i>padding</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">ElementList</span> <code class=\"t\">,</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">AssignmentExpression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>postIndex</i>  be the result of performing ArrayAccumulation for <i>ElementList</i> with arguments\n              <i>array</i> and <i>nextIndex</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>postIndex</i>).</li>\n          <li>Let <i>padding</i> be the ElisionWidth of <i>Elision</i>; if <i>Elision</i> is not present, use the numeric value\n              zero.</li>\n          <li>Let <i>initResult</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n          <li>Let <i>initValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>initResult</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>initValue</i>).</li>\n          <li>Let <i>created</i> be <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>array</i>, <a href=\"/sec/sec-tostring.html\">ToString</a>(<a href=\"/sec/sec-touint32.html\">ToUint32</a>(<i>postIndex</i>+<i>padding</i>)),\n              <i>initValue</i>).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>created</i> is <b>true</b>.</li>\n          <li>Return <i>postIndex</i>+<i>padding+</i>1.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ElementList</span> <span class=\"geq\">:</span> <span class=\"nt\">ElementList</span> <code class=\"t\">,</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">SpreadElement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>postIndex</i>  be the result of performing ArrayAccumulation for <i>ElementList</i> with arguments\n              <i>array</i> and <i>nextIndex</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>postIndex</i>).</li>\n          <li>Let <i>padding</i> be the ElisionWidth of <i>Elision</i>; if <i>Elision</i> is not present, use the numeric value\n              zero.</li>\n          <li>Return the result of performing ArrayAccumulation for <i>SpreadElement</i> with arguments <i>array</i> and\n              <i>postIndex</i>+<i>padding</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">SpreadElement</span> <span class=\"geq\">:</span> <code class=\"t\">...</code> <span class=\"nt\">AssignmentExpression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>spreadRef</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n          <li>Let <i>spreadObj</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>spreadRef</i>).</li>\n          <li>Let <i>iterator</i> be <a href=\"/sec/sec-getiterator.html\">GetIterator</a>(<i>spreadObj</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>iterator</i>).</li>\n          <li>Repeat\n            <ol class=\"block\">\n              <li>Let <i>next</i> be <a href=\"/sec/sec-iteratorstep.html\">IteratorStep</a>(<i>iterator</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n              <li>If <i>next</i> is <b>false</b>, return <i>nextIndex</i>.</li>\n              <li>Let <i>nextValue</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>next</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextValue</i>).</li>\n              <li>Let <i>status</i> be <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>array</i>, <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>nextIndex</i>), <i>nextValue</i>).</li>\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <i>status</i> is <b>true</b> .</li>\n              <li>Let <i>nextIndex</i> be <i>nextIndex</i> + 1.</li>\n            </ol>\n          </li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a> is used to ensure that own\n          properties are defined for the array even if the standard built-in Array prototype object has been modified in a manner\n          that would preclude the creation of new own properties using [[Set]].</p>\n        </div>\n      </section>\n\n      <section id=\"sec-array-initializer-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.5.3\"><a href=\"/sec/sec-array-initializer-runtime-semantics-evaluation.html\" title=\"link to this section\">12.2.5.3</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">ArrayLiteral</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>array</i> be <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>(0).</li>\n          <li>Let <i>pad</i> be the ElisionWidth of <i>Elision</i>; if <i>Elision</i> is not present, use the numeric value\n              zero.</li>\n          <li>Perform <a href=\"/sec/sec-set-o-p-v-throw.html\">Set</a>(<i>array</i>, <code>&quot;length&quot;</code>, <i>pad</i>, <b>false</b>).</li>\n          <li>NOTE:  The above Set cannot fail because of the nature of the object returned by <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>.</li>\n          <li>Return <i>array</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArrayLiteral</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">ElementList</span> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>array</i> be <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>(0).</li>\n          <li>Let <i>len</i> be the result of performing ArrayAccumulation for <i>ElementList</i> with arguments <i>array</i> and\n              0.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>len</i>).</li>\n          <li>Perform <a href=\"/sec/sec-set-o-p-v-throw.html\">Set</a>(<i>array</i>, <code>&quot;length&quot;</code>, <i>len</i>, <b>false</b>).</li>\n          <li>NOTE:  The above Set cannot fail because of the nature of the object returned by <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>.</li>\n          <li>Return <i>array</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ArrayLiteral</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">ElementList</span> <code class=\"t\">,</code> <span class=\"nt\">Elision</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>array</i> be <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>(0).</li>\n          <li>Let <i>len</i> be the result of performing ArrayAccumulation for <i>ElementList</i> with arguments <i>array</i> and\n              0.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>len</i>).</li>\n          <li>Let <i>padding</i> be the ElisionWidth of <i>Elision</i>; if <i>Elision</i> is not present, use the numeric value\n              zero.</li>\n          <li>Perform <a href=\"/sec/sec-set-o-p-v-throw.html\">Set</a>(<i>array</i>, <code>&quot;length&quot;</code>, <a href=\"/sec/sec-touint32.html\">ToUint32</a>(<i>padding</i>+<i>len</i>), <b>false</b>).</li>\n          <li>NOTE:  The above Set cannot fail because of the nature of the object returned by <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>.</li>\n          <li>Return <i>array</i>.</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-object-initializer\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.6\"><a href=\"/sec/sec-object-initializer.html\" title=\"link to this section\">12.2.6</a></span>\n            Object Initializer</h1>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> An object initializer is an expression describing the initialization of an Object,\n          written in a form resembling a literal. It is a list of zero or more pairs of property keys and associated values,\n          enclosed in curly brackets. The values need not be literals; they are evaluated each time the object initializer is\n          evaluated.</p>\n        </div>\n\n        <h2>Syntax</h2>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">ObjectLiteral</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">{</code> <code class=\"t\">}</code></div>\n          <div class=\"rhs\"><code class=\"t\">{</code> <span class=\"nt\">PropertyDefinitionList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">}</code></div>\n          <div class=\"rhs\"><code class=\"t\">{</code> <span class=\"nt\">PropertyDefinitionList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">,</code> <code class=\"t\">}</code></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">PropertyDefinitionList</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">PropertyDefinition</span><sub class=\"g-params\">[?Yield]</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">PropertyDefinitionList</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">,</code> <span class=\"nt\">PropertyDefinition</span><sub class=\"g-params\">[?Yield]</sub></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">PropertyDefinition</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">IdentifierReference</span><sub class=\"g-params\">[?Yield]</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">CoverInitializedName</span><sub class=\"g-params\">[?Yield]</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">PropertyName</span><sub class=\"g-params\">[?Yield]</sub> <code class=\"t\">:</code> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[In, ?Yield]</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">MethodDefinition</span><sub class=\"g-params\">[?Yield]</sub></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">PropertyName</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">LiteralPropertyName</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ComputedPropertyName</span><sub class=\"g-params\">[?Yield]</sub></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">LiteralPropertyName</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">IdentifierName</span></div>\n          <div class=\"rhs\"><span class=\"nt\">StringLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">NumericLiteral</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">ComputedPropertyName</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">[</code> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">]</code></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">CoverInitializedName</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">IdentifierReference</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">Initializer</span><sub class=\"g-params\">[In, ?Yield]</sub></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">Initializer</span><sub class=\"g-params\">[In, Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">=</code> <span class=\"nt\">AssignmentExpression</span><sub class=\"g-params\">[?In, ?Yield]</sub></div>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> <span class=\"nt\">MethodDefinition</span> is defined in <a href=\"/sec/sec-method-definitions.html\">14.3</a>.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 3</span> In certain contexts, <span class=\"nt\">ObjectLiteral</span> is used as a cover grammar\n          for a more restricted secondary grammar. The <span class=\"nt\">CoverInitializedName</span> production is necessary to\n          fully cover these secondary grammars. However, use of this production results in an early Syntax Error in normal\n          contexts where an actual <span class=\"nt\">ObjectLiteral</span> is expected.</p>\n        </div>\n      </div>\n\n      <section id=\"sec-object-initializer-static-semantics-early-errors\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.6.1\"><a href=\"/sec/sec-object-initializer-static-semantics-early-errors.html\" title=\"link to this section\">12.2.6.1</a></span> Static Semantics:  Early Errors</h1>\n        <div class=\"gp prod\"><span class=\"nt\">PropertyDefinition</span> <span class=\"geq\">:</span> <span class=\"nt\">MethodDefinition</span></div>\n        <ul>\n          <li>It is a Syntax Error if HasDirectSuper of <span class=\"nt\">MethodDefinition</span> is <span style=\"font-family:\n              Times New Roman\"><b><i>true</i></b></span>.</li>\n        </ul>\n\n        <p>In addition to describing an actual object initializer the <span class=\"nt\">ObjectLiteral</span> productions are also\n        used as a cover grammar for <span class=\"nt\">ObjectAssignmentPattern</span> (<a href=\"/sec/sec-destructuring-assignment.html\">12.14.5</a>). and may be recognized as part of a <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span>. When <span class=\"nt\">ObjectLiteral</span> appears in\n        a context where <span class=\"nt\">ObjectAssignmentPattern</span> is required the following Early Error rules are <b>not</b>\n        applied. In addition, they are not applied when initially parsing a\n        <var>CoverParenthesizedExpressionAndArrowParameterList.</var></p>\n\n        <div class=\"gp prod\"><span class=\"nt\">PropertyDefinition</span> <span class=\"geq\">:</span> <span class=\"nt\">CoverInitializedName</span></div>\n        <ul>\n          <li>Always throw a Syntax Error if code matches <span style=\"font-family: Times New Roman\">this production.</span></li>\n        </ul>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> This production exists so that <span class=\"nt\">ObjectLiteral</span> can serve as a\n          cover grammar for <span class=\"nt\">ObjectAssignmentPattern</span> (<a href=\"/sec/sec-destructuring-assignment.html\">12.14.5</a>).\n          It cannot occur in an actual object initializer.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-object-initializer-static-semantics-computedpropertycontains\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.6.2\"><a href=\"/sec/sec-object-initializer-static-semantics-computedpropertycontains.html\" title=\"link to this section\">12.2.6.2</a></span> Static Semantics:  ComputedPropertyContains</h1>\n\n        <p>With parameter <var>symbol</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-method-definitions-static-semantics-computedpropertycontains.html\">14.3.2</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-computedpropertycontains.html\">14.4.3</a>, <a href=\"/sec/sec-class-definitions-static-semantics-computedpropertycontains.html\">14.5.5</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">PropertyName</span> <span class=\"geq\">:</span> <span class=\"nt\">LiteralPropertyName</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">PropertyName</span> <span class=\"geq\">:</span> <span class=\"nt\">ComputedPropertyName</span></div>\n        <ol class=\"proc\">\n          <li>Return the result of <i>ComputedPropertyName</i> Contains <i>symbol</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-object-initializer-static-semantics-contains\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.6.3\"><a href=\"/sec/sec-object-initializer-static-semantics-contains.html\" title=\"link to this section\">12.2.6.3</a></span> Static Semantics:  Contains</h1>\n\n        <p>With parameter <var>symbol</var>.</p>\n\n        <p>See also: <a href=\"/sec/sec-static-semantic-rules.html\">5.3</a>, <a href=\"/sec/sec-static-semantics-static-semantics-contains.html\">12.3.1.1</a>, <a href=\"/sec/sec-function-definitions-static-semantics-contains.html\">14.1.4</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-contains.html\">14.2.3</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-contains.html\">14.4.4</a>, <a href=\"/sec/sec-class-definitions-static-semantics-contains.html\">14.5.4</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">PropertyDefinition</span> <span class=\"geq\">:</span> <span class=\"nt\">MethodDefinition</span></div>\n        <ol class=\"proc\">\n          <li>If <i>symbol</i> is <i>MethodDefinition</i>, return <b>true</b>.</li>\n          <li>Return the result of ComputedPropertyContains for <i>MethodDefinition</i> with argument <i>symbol</i>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> Static semantic rules that depend upon substructure generally do not look into function\n          definitions.</p>\n        </div>\n\n        <div class=\"gp prod\"><span class=\"nt\">LiteralPropertyName</span> <span class=\"geq\">:</span> <span class=\"nt\">IdentifierName</span></div>\n        <ol class=\"proc\">\n          <li>If <i>symbol</i> is a <i>ReservedWord</i>, return <b>false</b>.</li>\n          <li>If <i>symbol</i> is an <i>Identifier</i> and StringValue of <i>symbol</i> is the same value as the StringValue of\n              <i>IdentifierName</i>, return <b>true</b>;</li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-object-initializer-static-semantics-hascomputedpropertykey\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.6.4\"><a href=\"/sec/sec-object-initializer-static-semantics-hascomputedpropertykey.html\" title=\"link to this section\">12.2.6.4</a></span> Static Semantics: HasComputedPropertyKey</h1>\n\n        <p>See also: <a href=\"/sec/sec-method-definitions-static-semantics-hascomputedpropertykey.html\">14.3.4</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-hascomputedpropertykey.html\">14.4.5</a></p>\n\n        <div class=\"gp prod\"><span class=\"nt\">PropertyDefinitionList</span> <span class=\"geq\">:</span> <span class=\"nt\">PropertyDefinitionList</span> <code class=\"t\">,</code> <span class=\"nt\">PropertyDefinition</span></div>\n        <ol class=\"proc\">\n          <li>If HasComputedPropertyKey of <i>PropertyDefinitionList</i> is <b>true</b>, return <b>true</b>.</li>\n          <li>Return HasComputedPropertyKey of <i>PropertyDefinition</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">PropertyDefinition</span> <span class=\"geq\">:</span> <span class=\"nt\">IdentifierReference</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">PropertyDefinition</span> <span class=\"geq\">:</span> <span class=\"nt\">PropertyName</span> <code class=\"t\">:</code> <span class=\"nt\">AssignmentExpression</span></div>\n        <ol class=\"proc\">\n          <li>Return IsComputedPropertyKey of <i>PropertyName</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-static-semantics-iscomputedpropertykey\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.6.5\"><a href=\"/sec/sec-static-semantics-iscomputedpropertykey.html\" title=\"link to this section\">12.2.6.5</a></span> Static Semantics:  IsComputedPropertyKey</h1>\n        <div class=\"gp prod\"><span class=\"nt\">PropertyName</span> <span class=\"geq\">:</span> <span class=\"nt\">LiteralPropertyName</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">PropertyName</span> <span class=\"geq\">:</span> <span class=\"nt\">ComputedPropertyName</span></div>\n        <ol class=\"proc\">\n          <li>Return <b>true</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-object-initializer-static-semantics-propname\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.6.6\"><a href=\"/sec/sec-object-initializer-static-semantics-propname.html\" title=\"link to this section\">12.2.6.6</a></span> Static Semantics: <span class=\"nt\">PropName</span></h1>\n\n        <p>See also: <a href=\"/sec/sec-method-definitions-static-semantics-propname.html\">14.3.6</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-propname.html\">14.4.10</a>, <a href=\"/sec/sec-class-definitions-static-semantics-propname.html\">14.5.12</a></p>\n\n        <div class=\"gp prod\"><span class=\"nt\">PropertyDefinition</span> <span class=\"geq\">:</span> <span class=\"nt\">IdentifierReference</span></div>\n        <ol class=\"proc\">\n          <li>Return StringValue of <i>IdentifierReference</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">PropertyDefinition</span> <span class=\"geq\">:</span> <span class=\"nt\">PropertyName</span> <code class=\"t\">:</code> <span class=\"nt\">AssignmentExpression</span></div>\n        <ol class=\"proc\">\n          <li>Return PropName of <i>PropertyName</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LiteralPropertyName</span> <span class=\"geq\">:</span> <span class=\"nt\">IdentifierName</span></div>\n        <ol class=\"proc\">\n          <li>Return StringValue of <i>IdentifierName</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LiteralPropertyName</span> <span class=\"geq\">:</span> <span class=\"nt\">StringLiteral</span></div>\n        <ol class=\"proc\">\n          <li>Return a String value whose code units are the SV of the <i>StringLiteral</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LiteralPropertyName</span> <span class=\"geq\">:</span> <span class=\"nt\">NumericLiteral</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>nbr</i> be the result of forming the value of the <i>NumericLiteral</i>.</li>\n          <li>Return <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>nbr</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ComputedPropertyName</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Return <span style=\"font-family: sans-serif\">empty</span>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-static-semantics-propertynamelist\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.6.7\"><a href=\"/sec/sec-static-semantics-propertynamelist.html\" title=\"link to this section\">12.2.6.7</a></span> Static Semantics:  PropertyNameList</h1>\n        <div class=\"gp prod\"><span class=\"nt\">PropertyDefinitionList</span> <span class=\"geq\">:</span> <span class=\"nt\">PropertyDefinition</span></div>\n        <ol class=\"proc\">\n          <li>If PropName of <i>PropertyDefinition</i> is <span style=\"font-family: sans-serif\">empty</span>, return a new empty\n              <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>Return a new <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing PropName of\n              <i>PropertyDefinition</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">PropertyDefinitionList</span> <span class=\"geq\">:</span> <span class=\"nt\">PropertyDefinitionList</span> <code class=\"t\">,</code> <span class=\"nt\">PropertyDefinition</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>list</i> be PropertyNameList of <i>PropertyDefinitionList.</i></li>\n          <li>If PropName of <i>PropertyDefinition</i> is <span style=\"font-family: sans-serif\">empty</span>, return\n              <i>list</i>.</li>\n          <li>Append PropName of <i>PropertyDefinition</i> to the end of <i>list</i>.</li>\n          <li>Return <i>list</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-object-initializer-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.6.8\"><a href=\"/sec/sec-object-initializer-runtime-semantics-evaluation.html\" title=\"link to this section\">12.2.6.8</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">ObjectLiteral</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n        <ol class=\"proc\">\n          <li>Return <a href=\"/sec/sec-objectcreate.html\">ObjectCreate</a>(<span style=\"font-family:\n              sans-serif\">%ObjectPrototype%</span>).</li>\n        </ol>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">ObjectLiteral</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">{</code> <span class=\"nt\">PropertyDefinitionList</span> <code class=\"t\">}</code></div>\n          <div class=\"rhs\"><code class=\"t\">{</code> <span class=\"nt\">PropertyDefinitionList</span> <code class=\"t\">,</code> <code class=\"t\">}</code></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Let <i>obj</i> be <a href=\"/sec/sec-objectcreate.html\">ObjectCreate</a>(%ObjectPrototype%).</li>\n          <li>Let <i>status</i> be the result of performing PropertyDefinitionEvaluation of <i>PropertyDefinitionList</i> with\n              arguments <i>obj</i> and <b>true</b>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n          <li>Return <i>obj</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LiteralPropertyName</span> <span class=\"geq\">:</span> <span class=\"nt\">IdentifierName</span></div>\n        <ol class=\"proc\">\n          <li>Return StringValue of <i>IdentifierName</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LiteralPropertyName</span> <span class=\"geq\">:</span> <span class=\"nt\">StringLiteral</span></div>\n        <ol class=\"proc\">\n          <li>Return a String value whose code units are the SV of the <i>StringLiteral</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LiteralPropertyName</span> <span class=\"geq\">:</span> <span class=\"nt\">NumericLiteral</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>nbr</i> be the result of forming the value of the <i>NumericLiteral</i>.</li>\n          <li>Return <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>nbr</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ComputedPropertyName</span> <span class=\"geq\">:</span> <code class=\"t\">[</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">]</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>exprValue</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n          <li>Let <i>propName</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprValue</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>propName</i>).</li>\n          <li>Return <a href=\"/sec/sec-topropertykey.html\">ToPropertyKey</a>(<i>propName</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.6.9\"><a href=\"/sec/sec-object-initializer-runtime-semantics-propertydefinitionevaluation.html\" title=\"link to this section\">12.2.6.9</a></span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n\n        <p>With parameter <var>object</var> and <span style=\"font-family: Times New Roman\"><i>enumerable</i>.</span></p>\n\n        <p>See also: <a href=\"/sec/sec-method-definitions-runtime-semantics-propertydefinitionevaluation.html\">14.3.9</a>, <a href=\"/sec/sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation.html\">14.4.13</a>, B.3.1</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">PropertyDefinitionList</span> <span class=\"geq\">:</span> <span class=\"nt\">PropertyDefinitionList</span> <code class=\"t\">,</code> <span class=\"nt\">PropertyDefinition</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>status</i> be the result of performing PropertyDefinitionEvaluation of  <i>PropertyDefinitionList</i> with\n              arguments <i>object</i> and <i>enumerable</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n          <li>Return the result of performing PropertyDefinitionEvaluation of <i>PropertyDefinition</i> with arguments\n              <i>object</i> and <i>enumerable</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">PropertyDefinition</span> <span class=\"geq\">:</span> <span class=\"nt\">IdentifierReference</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>propName</i> be StringValue of <i>IdentifierReference</i>.</li>\n          <li>Let <i>exprValue</i> be the result of evaluating <i>IdentifierReference</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>exprValue</i>).</li>\n          <li>Let <i>propValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprValue</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>propValue</i>).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>enumerable</i> is <b>true</b>.</li>\n          <li>Return <a href=\"/sec/sec-createdatapropertyorthrow.html\">CreateDataPropertyOrThrow</a>(<i>object</i>, <i>propName</i>,\n              <i>propValue</i>).</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">PropertyDefinition</span> <span class=\"geq\">:</span> <span class=\"nt\">PropertyName</span> <code class=\"t\">:</code> <span class=\"nt\">AssignmentExpression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>propKey</i> be the result of evaluating <i>PropertyName</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>propKey</i>).</li>\n          <li>Let <i>exprValueRef</i> be the result of evaluating <i>AssignmentExpression</i>.</li>\n          <li>Let <i>propValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprValueRef</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>propValue</i>).</li>\n          <li>If <a href=\"/sec/sec-isanonymousfunctiondefinition.html\">IsAnonymousFunctionDefinition</a>(<i>AssignmentExpression)</i> is\n              <b>true</b>, then\n            <ol class=\"block\">\n              <li>Let <i>hasNameProperty</i> be <a href=\"/sec/sec-hasownproperty.html\">HasOwnProperty</a>(<i>propValue</i>,\n                  <code>&quot;name&quot;</code>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>hasNameProperty</i>).</li>\n              <li>If <i>hasNameProperty</i> is <b>false</b>, perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>propValue</i>, <i>propKey</i>).</li>\n            </ol>\n          </li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>enumerable</i> is <b>true</b>.</li>\n          <li>Return <a href=\"/sec/sec-createdatapropertyorthrow.html\">CreateDataPropertyOrThrow</a>(<i>object</i>, <i>propKey</i>,\n              <i>propValue</i>).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> An alternative semantics for this production is given in <a href=\"/sec/sec-__proto__-property-names-in-object-initializers.html\">B.3.1</a>.</p>\n        </div>\n      </section>\n    </section>\n\n    <section id=\"sec-function-defining-expressions\">\n      <h1><span class=\"secnum\" id=\"sec-12.2.7\"><a href=\"/sec/sec-function-defining-expressions.html\" title=\"link to this section\">12.2.7</a></span> Function Defining Expressions</h1>\n\n      <p>See <a href=\"/sec/sec-function-definitions.html\">14.1</a> for <span class=\"prod\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">FunctionExpression</span></span> .</p>\n\n      <p>See <a href=\"/sec/sec-generator-function-definitions.html\">14.4</a> for <span class=\"prod\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">GeneratorExpression</span></span> .</p>\n\n      <p>See <a href=\"/sec/sec-class-definitions.html\">14.5</a> for <span class=\"prod\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">ClassExpression</span></span> .</p>\n    </section>\n\n    <section id=\"sec-primary-expression-regular-expression-literals\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.8\"><a href=\"/sec/sec-primary-expression-regular-expression-literals.html\" title=\"link to this section\">12.2.8</a></span> Regular Expression Literals</h1>\n        <h2>Syntax</h2>\n\n        <p>See <a href=\"/sec/sec-literals-regular-expression-literals.html\">11.8.5</a>.</p>\n      </div>\n\n      <section id=\"sec-primary-expression-regular-expression-literals-static-semantics-early-errors\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.8.1\"><a href=\"/sec/sec-primary-expression-regular-expression-literals-static-semantics-early-errors.html\" title=\"link to this section\">12.2.8.1</a></span> Static Semantics:  Early Errors</h1>\n        <div class=\"gp prod\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">RegularExpressionLiteral</span></div>\n        <ul>\n          <li>\n            <p>It is a Syntax Error if <span style=\"font-family: Times New Roman\">BodyText</span> of <span class=\"nt\">RegularExpressionLiteral</span> cannot be recognized using the goal symbol <span class=\"nt\">Pattern</span>\n            of the ECMAScript RegExp grammar specified in <a href=\"/sec/sec-patterns.html\">21.2.1</a><var>.</var></p>\n          </li>\n\n          <li>\n            <p>It is a Syntax Error if <span style=\"font-family: Times New Roman\">FlagText</span> of <span class=\"nt\">RegularExpressionLiteral</span> contains any code points other than <code>&quot;g&quot;</code>, <code>&quot;i&quot;</code>,\n            <code>&quot;m&quot;</code>, <code>&quot;u&quot;</code>, or <code>&quot;y&quot;</code>, or if it contains the same code point more than once.</p>\n          </li>\n        </ul>\n      </section>\n\n      <section id=\"sec-regular-expression-literals-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.8.2\"><a href=\"/sec/sec-regular-expression-literals-runtime-semantics-evaluation.html\" title=\"link to this section\">12.2.8.2</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">RegularExpressionLiteral</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>pattern</i> be the String value consisting of the <a href=\"/sec/sec-utf16encoding.html\">UTF16Encoding</a> of each code\n              point of BodyText of <i>RegularExpressionLiteral</i>.</li>\n          <li>Let <i>flags</i> be the String value consisting of the <a href=\"/sec/sec-utf16encoding.html\">UTF16Encoding</a> of each code\n              point of FlagText of <i>RegularExpressionLiteral</i>.</li>\n          <li>Return <a href=\"/sec/sec-regexpcreate.html\">RegExpCreate</a>(<i>pattern</i>, <i>flags</i>).</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-template-literals\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.9\"><a href=\"/sec/sec-template-literals.html\" title=\"link to this section\">12.2.9</a></span>\n            Template Literals</h1>\n        <h2>Syntax</h2>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">TemplateLiteral</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">NoSubstitutionTemplate</span></div>\n          <div class=\"rhs\"><span class=\"nt\">TemplateHead</span> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <span class=\"nt\">TemplateSpans</span><sub class=\"g-params\">[?Yield]</sub></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">TemplateSpans</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">TemplateTail</span></div>\n          <div class=\"rhs\"><span class=\"nt\">TemplateMiddleList</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">TemplateTail</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">TemplateMiddleList</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">TemplateMiddle</span> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">TemplateMiddleList</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">TemplateMiddle</span> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub></div>\n        </div>\n      </div>\n\n      <section id=\"sec-static-semantics-templatestrings\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.9.1\"><a href=\"/sec/sec-static-semantics-templatestrings.html\" title=\"link to this section\">12.2.9.1</a></span> Static Semantics:  TemplateStrings</h1>\n\n        <p>With parameter <var>raw</var>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">TemplateLiteral</span> <span class=\"geq\">:</span> <span class=\"nt\">NoSubstitutionTemplate</span></div>\n        <ol class=\"proc\">\n          <li>If <i>raw</i> is <b>false</b>, then\n            <ol class=\"block\">\n              <li>Let <i>string</i> be the TV of <i>NoSubstitutionTemplate</i>.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>string</i> be the TRV of <i>NoSubstitutionTemplate</i>.</li>\n            </ol>\n          </li>\n          <li>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the single element,\n              <i>string</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateLiteral</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateHead</span> <span class=\"nt\">Expression</span> <span class=\"nt\">TemplateSpans</span></div>\n        <ol class=\"proc\">\n          <li>If <i>raw</i> is <b>false</b>, then\n            <ol class=\"block\">\n              <li>Let <i>head</i> be the TV of <i>TemplateHead</i>.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>head</i> be the TRV of <i>TemplateHead</i>.</li>\n            </ol>\n          </li>\n          <li>Let <i>tail</i> be TemplateStrings of <i>TemplateSpans</i> with argument <i>raw</i>.</li>\n          <li>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing <i>head</i> followed by the element,\n              in order of <i>tail</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateSpans</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateTail</span></div>\n        <ol class=\"proc\">\n          <li>If <i>raw</i> is <b>false</b>, then\n            <ol class=\"block\">\n              <li>Let <i>tail</i> be the TV of <i>TemplateTail</i>.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>tail</i> be the TRV of <i>TemplateTail</i>.</li>\n            </ol>\n          </li>\n          <li>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the single element, <i>tail</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateSpans</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddleList</span> <span class=\"nt\">TemplateTail</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>middle</i> be TemplateStrings of <i>TemplateMiddleList</i> with argument <i>raw</i>.</li>\n          <li>If <i>raw</i> is <b>false</b>, then\n            <ol class=\"block\">\n              <li>Let <i>tail</i> be the TV of <i>TemplateTail</i>.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>tail</i> be the TRV of <i>TemplateTail</i>.</li>\n            </ol>\n          </li>\n          <li>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the elements, in order, of\n              <i>middle</i> followed by <i>tail</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateMiddleList</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddle</span> <span class=\"nt\">Expression</span></div>\n        <ol class=\"proc\">\n          <li>If <i>raw</i> is <b>false</b>, then\n            <ol class=\"block\">\n              <li>Let <i>string</i> be the TV of <i>TemplateMiddle</i>.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>string</i> be the TRV of <i>TemplateMiddle</i>.</li>\n            </ol>\n          </li>\n          <li>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the single element,\n              <i>string</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateMiddleList</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddleList</span> <span class=\"nt\">TemplateMiddle</span> <span class=\"nt\">Expression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>front</i> be TemplateStrings of <i>TemplateMiddleList</i> with argument <i>raw</i>.</li>\n          <li>If <i>raw</i> is <b>false</b>, then\n            <ol class=\"block\">\n              <li>Let <i>last</i> be the TV of <i>TemplateMiddle</i>.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>last</i> be the TRV of <i>TemplateMiddle</i>.</li>\n            </ol>\n          </li>\n          <li>Append <i>last</i> as the last element of the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>\n              <i>front</i>.</li>\n          <li>Return <i>front</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-template-literals-runtime-semantics-argumentlistevaluation\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.9.2\"><a href=\"/sec/sec-template-literals-runtime-semantics-argumentlistevaluation.html\" title=\"link to this section\">12.2.9.2</a></span> Runtime Semantics: ArgumentListEvaluation</h1>\n\n        <p>See also: <a href=\"/sec/sec-argument-lists-runtime-semantics-argumentlistevaluation.html\">12.3.6.1</a></p>\n\n        <div class=\"gp prod\"><span class=\"nt\">TemplateLiteral</span> <span class=\"geq\">:</span> <span class=\"nt\">NoSubstitutionTemplate</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>templateLiteral</i> be this <i>TemplateLiteral.</i></li>\n          <li>Let <i>siteObj</i> be <a href=\"/sec/sec-gettemplateobject.html\">GetTemplateObject</a>(<i>templateLiteral</i>).</li>\n          <li>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the one element which is\n              <i>siteObj</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateLiteral</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateHead</span> <span class=\"nt\">Expression</span> <span class=\"nt\">TemplateSpans</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>templateLiteral</i> be this <i>TemplateLiteral.</i></li>\n          <li>Let <i>siteObj</i> be <a href=\"/sec/sec-gettemplateobject.html\">GetTemplateObject</a>(<i>templateLiteral</i>).</li>\n          <li>Let <i>firstSub</i> be the result of  evaluating <i>Expression</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>firstSub</i>).</li>\n          <li>Let <i>restSub</i> be SubstitutionEvaluation of <i>TemplateSpans</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>restSub</i>).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>restSub</i> is a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> whose first element is <i>siteObj</i>, whose\n              second elements is <i>firstSub</i>, and whose subsequent elements are the elements of <i>restSub</i>, in order.\n              <i>restSub</i> may contain no elements.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-gettemplateobject\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.9.3\"><a href=\"/sec/sec-gettemplateobject.html\" title=\"link to this section\">12.2.9.3</a></span> Runtime Semantics: GetTemplateObject ( templateLiteral )</h1>\n\n        <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">GetTemplateObject</span> is\n        called with a grammar production, <var>templateLiteral</var>, as an argument. It performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>rawStrings</i> be TemplateStrings of <i>templateLiteral</i> with argument <b>true</b>.</li>\n          <li>Let <i>ctx</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n          <li>Let <i>realm</i> be the <i>ctx</i>&#x2019;s <a href=\"/sec/sec-code-realms.html\">Realm</a>.</li>\n          <li>Let <i>templateRegistry</i> be <i>realm</i>.[[templateMap]].</li>\n          <li>For each element  <i>e</i> of <i>templateRegistry</i>, do\n            <ol class=\"block\">\n              <li>If <i>e</i>.[[strings]] and <i>rawStrings</i> contain the same values in the same order, then\n                <ol class=\"block\">\n                  <li>Return <i>e.</i>[[array]].</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Let <i>cookedStrings</i> be TemplateStrings of <i>templateLiteral</i> with argument <b>false</b>.</li>\n          <li>Let <i>count</i> be the number of elements in the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>\n              <i>cookedStrings</i>.</li>\n          <li>Let <i>template</i> be <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>(<i>count</i>).</li>\n          <li>Let <i>rawObj</i> be <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>(<i>count</i>).</li>\n          <li>Let <i>index</i> be 0.</li>\n          <li>Repeat while <i>index</i> &lt; <i>count</i>\n            <ol class=\"block\">\n              <li>Let <i>prop</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>index</i>).</li>\n              <li>Let <i>cookedValue</i> be the String value <i>cookedStrings</i>[<i>index</i>].</li>\n              <li><a href=\"/sec/sec-call.html\">Call</a> <i>template</i>.[[DefineOwnProperty]](<i>prop</i>, PropertyDescriptor{[[Value]]:\n                  <i>cookedValue</i>, [[Enumerable]]: <b>true</b>, [[Writable]]: <b>false</b>, [[Configurable]]:\n                  <b>false</b>})<i>.</i></li>\n              <li>Let <i>rawValue</i> be the String value <i>rawStrings</i>[<i>index</i>].</li>\n              <li><a href=\"/sec/sec-call.html\">Call</a> <i>rawObj</i>.[[DefineOwnProperty]](<i>prop</i>, PropertyDescriptor{[[Value]]:\n                  <i>rawValue</i>, [[Enumerable]]: <b>true</b>, [[Writable]]: <b>false</b>, [[Configurable]]:\n                  <b>false</b>})<i>.</i></li>\n              <li>Let <i>index</i> be <i>index</i>+1.</li>\n            </ol>\n          </li>\n          <li>Perform <a href=\"/sec/sec-setintegritylevel.html\">SetIntegrityLevel</a>(<i>rawObj</i>, <code>&quot;frozen&quot;</code>).</li>\n          <li><a href=\"/sec/sec-call.html\">Call</a> <i>template</i>.[[DefineOwnProperty]](<code>&quot;raw&quot;</code>, PropertyDescriptor{[[Value]]:\n              <i>rawObj</i>, [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n              <b>false</b>})<i>.</i></li>\n          <li>Perform <a href=\"/sec/sec-setintegritylevel.html\">SetIntegrityLevel</a>(<i>template</i>, <code>&quot;frozen&quot;</code>).</li>\n          <li>Append the Record{[[strings]]: <i>rawStrings</i>, [[array]]: <i>template</i>} to <i>templateRegistry</i>.</li>\n          <li>Return <i>template</i>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> The creation of a template object cannot result in an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> Each <span class=\"nt\">TemplateLiteral</span> in the program code of a <a href=\"/sec/sec-code-realms.html\">Realm</a> is associated with a unique template object that is used in the evaluation of tagged\n          Templates (<a href=\"/sec/sec-template-literals-runtime-semantics-evaluation.html\">12.2.9.5</a>). The template objects are frozen\n          and the same template object is used each time a specific tagged Template is evaluated. Whether template objects are\n          created lazily upon first evaluation of the <span class=\"nt\">TemplateLiteral</span> or eagerly prior to first evaluation\n          is an implementation choice that is not observable to ECMAScript code.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 3</span> Future editions of this specification may define additional non-enumerable properties\n          of template objects.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-runtime-semantics-substitutionevaluation\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.9.4\"><a href=\"/sec/sec-runtime-semantics-substitutionevaluation.html\" title=\"link to this section\">12.2.9.4</a></span> Runtime Semantics: SubstitutionEvaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateSpans</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateTail</span></div>\n        <ol class=\"proc\">\n          <li>Return an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateSpans</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddleList</span> <span class=\"nt\">TemplateTail</span></div>\n        <ol class=\"proc\">\n          <li>Return the result of SubstitutionEvaluation of <i>TemplateMiddleList</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateMiddleList</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddle</span> <span class=\"nt\">Expression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>sub</i> be the result of evaluating <i>Expression</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>sub</i>).</li>\n          <li>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing only <i>sub</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateMiddleList</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddleList</span> <span class=\"nt\">TemplateMiddle</span> <span class=\"nt\">Expression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>preceding</i> be the result of SubstitutionEvaluation of <i>TemplateMiddleList</i> .</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>preceding</i>).</li>\n          <li>Let <i>next</i>  be the result of evaluating <i>Expression</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n          <li>Append <i>next</i> as the last element of the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>\n              <i>preceding</i>.</li>\n          <li>Return <i>preceding</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-template-literals-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.9.5\"><a href=\"/sec/sec-template-literals-runtime-semantics-evaluation.html\" title=\"link to this section\">12.2.9.5</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateLiteral</span> <span class=\"geq\">:</span> <span class=\"nt\">NoSubstitutionTemplate</span></div>\n        <ol class=\"proc\">\n          <li>Return the String value whose code  units are the elements of the TV of <i>NoSubstitutionTemplate</i> as defined in\n              <a href=\"/sec/sec-template-literal-lexical-components.html\">11.8.6</a>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateLiteral</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateHead</span> <span class=\"nt\">Expression</span> <span class=\"nt\">TemplateSpans</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>head</i> be the TV of <i>TemplateHead</i> as defined in <a href=\"/sec/sec-template-literal-lexical-components.html\">11.8.6</a>.</li>\n          <li>Let <i>sub</i> be the result of evaluating <i>Expression</i>.</li>\n          <li>Let <i>middle</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>sub</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>middle</i>).</li>\n          <li>Let <i>tail</i> be the result of evaluating <i>TemplateSpans</i> .</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>tail</i>).</li>\n          <li>Return the String value whose code units are the elements  of <i>head</i> followed by the elements of <i>middle</i>\n              followed by the elements of <i>tail</i>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> The string conversion semantics applied to the <span class=\"nt\">Expression</span>\n          value are like <code><a href=\"/sec/sec-string.prototype.concat.html\">String.prototype.concat</a></code> rather than the\n          <code>+</code> operator.</p>\n        </div>\n\n        <div class=\"gp prod\"><span class=\"nt\">TemplateSpans</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateTail</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>tail</i> be the TV of <i>TemplateTail</i> as defined in <a href=\"/sec/sec-template-literal-lexical-components.html\">11.8.6</a>.</li>\n          <li>Return the string consisting of the code units of <i>tail</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateSpans</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddleList</span> <span class=\"nt\">TemplateTail</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>head</i> be the result of evaluating <i>TemplateMiddleList</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>head</i>).</li>\n          <li>Let <i>tail</i> be the TV of <i>TemplateTail</i> as defined in <a href=\"/sec/sec-template-literal-lexical-components.html\">11.8.6</a>.</li>\n          <li>Return the string whose code units are the elements of <i>head</i> followed by the elements of <i>tail</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateMiddleList</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddle</span> <span class=\"nt\">Expression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>head</i> be the TV of <i>TemplateMiddle</i> as defined in <a href=\"/sec/sec-template-literal-lexical-components.html\">11.8.6</a>.</li>\n          <li>Let <i>sub</i> be the result of evaluating <i>Expression</i>.</li>\n          <li>Let <i>middle</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>sub</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>middle</i>).</li>\n          <li>Return the sequence of code units consisting of the code units of <i>head</i> followed by the elements of\n              <i>middle</i>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> The string conversion semantics applied to the <span class=\"nt\">Expression</span>\n          value are like <code><a href=\"/sec/sec-string.prototype.concat.html\">String.prototype.concat</a></code> rather than the\n          <code>+</code> operator.</p>\n        </div>\n\n        <div class=\"gp prod\"><span class=\"nt\">TemplateMiddleList</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddleList</span> <span class=\"nt\">TemplateMiddle</span> <span class=\"nt\">Expression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>rest</i> be the result of evaluating <i>TemplateMiddleList</i> .</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>rest</i>).</li>\n          <li>Let <i>middle</i>  be the TV of <i>TemplateMiddle</i> as defined in <a href=\"/sec/sec-template-literal-lexical-components.html\">11.8.6</a>.</li>\n          <li>Let <i>sub</i> be the result of evaluating <i>Expression</i>.</li>\n          <li>Let <i>last</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>sub</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>last</i>).</li>\n          <li>Return the sequence of code units consisting of the elements of <i>rest</i> followed by the code units of\n              <i>middle</i> followed by the elements of <i>last</i>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 3</span> The string conversion semantics applied to the <span class=\"nt\">Expression</span>\n          value are like <code><a href=\"/sec/sec-string.prototype.concat.html\">String.prototype.concat</a></code> rather than the\n          <code>+</code> operator.</p>\n        </div>\n      </section>\n    </section>\n\n    <section id=\"sec-grouping-operator\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.10\"><a href=\"/sec/sec-grouping-operator.html\" title=\"link to this section\">12.2.10</a></span>\n            The Grouping Operator</h1>\n      </div>\n\n      <section id=\"sec-grouping-operator-static-semantics-early-errors\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.10.1\"><a href=\"/sec/sec-grouping-operator-static-semantics-early-errors.html\" title=\"link to this section\">12.2.10.1</a></span> Static Semantics:  Early Errors</h1>\n        <div class=\"gp prod\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span></div>\n        <ul>\n          <li>\n            <p>It is a Syntax Error if the lexical token sequence matched by <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span> cannot be parsed with no tokens left over using\n            <span class=\"nt\">ParenthesizedExpression</span> as the goal symbol.</p>\n          </li>\n\n          <li>\n            <p>All Early Errors rules for <span class=\"nt\">ParenthesizedExpression</span> and its derived productions also apply\n            to <span style=\"font-family: Times New Roman\">CoveredParenthesizedExpression</span> of <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span>.</p>\n          </li>\n        </ul>\n      </section>\n\n      <section id=\"sec-grouping-operator-static-semantics-isfunctiondefinition\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.10.2\"><a href=\"/sec/sec-grouping-operator-static-semantics-isfunctiondefinition.html\" title=\"link to this section\">12.2.10.2</a></span> Static Semantics:  IsFunctionDefinition</h1>\n\n        <p>See also: <a href=\"/sec/sec-semantics-static-semantics-isfunctiondefinition.html\">12.2.1.3</a>, <a href=\"/sec/sec-static-semantics-static-semantics-isfunctiondefinition.html\">12.3.1.2</a>, <a href=\"/sec/sec-postfix-expressions-static-semantics-isfunctiondefinition.html\">12.4.2</a>, <a href=\"/sec/sec-unary-operators-static-semantics-isfunctiondefinition.html\">12.5.2</a>, <a href=\"/sec/sec-multiplicative-operators-static-semantics-isfunctiondefinition.html\">12.6.1</a>, <a href=\"/sec/sec-additive-operators-static-semantics-isfunctiondefinition.html\">12.7.1</a>, <a href=\"/sec/sec-bitwise-shift-operators-static-semantics-isfunctiondefinition.html\">12.8.1</a>, <a href=\"/sec/sec-relational-operators-static-semantics-isfunctiondefinition.html\">12.9.1</a>, <a href=\"/sec/sec-equality-operators-static-semantics-isfunctiondefinition.html\">12.10.1</a>, <a href=\"/sec/sec-binary-bitwise-operators-static-semantics-isfunctiondefinition.html\">12.11.1</a>, <a href=\"/sec/sec-binary-logical-operators-static-semantics-isfunctiondefinition.html\">12.12.1</a>, <a href=\"/sec/sec-conditional-operator-static-semantics-isfunctiondefinition.html\">12.13.1</a>, <a href=\"/sec/sec-assignment-operators-static-semantics-isfunctiondefinition.html\">12.14.2</a>, <a href=\"/sec/sec-comma-operator-static-semantics-isfunctiondefinition.html\">12.15.1</a>, <a href=\"/sec/sec-function-definitions-static-semantics-isfunctiondefinition.html\">14.1.11</a>, <a href=\"/sec/sec-generator-function-definitions-static-semantics-isfunctiondefinition.html\">14.4.9</a>, <a href=\"/sec/sec-class-definitions-static-semantics-isfunctiondefinition.html\">14.5.8</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">ParenthesizedExpression</span> <span class=\"geq\">:</span> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code></div>\n        <ol class=\"proc\">\n          <li>Return IsFunctionDefinition of <i>Expression</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-grouping-operator-static-semantics-isvalidsimpleassignmenttarget\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.10.3\"><a href=\"/sec/sec-grouping-operator-static-semantics-isvalidsimpleassignmenttarget.html\" title=\"link to this section\">12.2.10.3</a></span> Static Semantics:  IsValidSimpleAssignmentTarget</h1>\n\n        <p>See also: <a href=\"/sec/sec-identifiers-static-semantics-isvalidsimpleassignmenttarget.html\">12.1.3</a>, <a href=\"/sec/sec-semantics-static-semantics-isvalidsimpleassignmenttarget.html\">12.2.1.5</a>, <a href=\"/sec/sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget.html\">12.3.1.5</a>, <a href=\"/sec/sec-postfix-expressions-static-semantics-isvalidsimpleassignmenttarget.html\">12.4.3</a>, <a href=\"/sec/sec-unary-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.5.3</a>, <a href=\"/sec/sec-multiplicative-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.6.2</a>, <a href=\"/sec/sec-additive-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.7.2</a>, <a href=\"/sec/sec-bitwise-shift-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.8.2</a>, <a href=\"/sec/sec-relational-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.9.2</a>, <a href=\"/sec/sec-equality-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.10.2</a>, <a href=\"/sec/sec-binary-bitwise-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.11.2</a>, <a href=\"/sec/sec-binary-logical-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.12.2</a>, <a href=\"/sec/sec-conditional-operator-static-semantics-isvalidsimpleassignmenttarget.html\">12.13.2</a>, <a href=\"/sec/sec-assignment-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.14.3</a>, <a href=\"/sec/sec-comma-operator-static-semantics-isvalidsimpleassignmenttarget.html\">12.15.2</a>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">ParenthesizedExpression</span> <span class=\"geq\">:</span> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code></div>\n        <ol class=\"proc\">\n          <li>Return IsValidSimpleAssignmentTarget of <i>Expression</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-grouping-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.10.4\"><a href=\"/sec/sec-grouping-operator-runtime-semantics-evaluation.html\" title=\"link to this section\">12.2.10.4</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>expr</i> be CoveredParenthesizedExpression of <i>CoverParenthesizedExpressionAndArrowParameterList</i>.</li>\n          <li>Return the result of evaluating <i>expr</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ParenthesizedExpression</span> <span class=\"geq\">:</span> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code></div>\n        <ol class=\"proc\">\n          <li>Return the result of evaluating <i>Expression</i>. This may be of type <a href=\"/sec/sec-reference-specification-type.html\">Reference</a>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> This algorithm does not apply <a href=\"/sec/sec-getvalue.html\">GetValue</a> to the result of\n          evaluating <span class=\"nt\">Expression</span>. The principal motivation for this is so that operators such as\n          <code>delete</code> and <code>typeof</code> may be applied to parenthesized expressions.</p>\n        </div>\n      </section>\n    </section>\n  "}