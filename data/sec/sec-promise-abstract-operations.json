{"id":"sec-promise-abstract-operations","html":"\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.1\"><a href=\"/sec/sec-promise-abstract-operations.html\" title=\"link to this section\">25.4.1</a></span> Promise Abstract Operations</h1>\n      </div>\n\n      <section id=\"sec-promisecapability-records\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.1\"><a href=\"/sec/sec-promisecapability-records.html\" title=\"link to this section\">25.4.1.1</a></span> PromiseCapability Records</h1>\n\n          <p>A PromiseCapability is a Record value used to encapsulate a promise object along with the functions that are capable\n          of resolving or rejecting that promise object. PromiseCapability records are produced by the <a href=\"/sec/sec-newpromisecapability.html\">NewPromiseCapability</a> abstract operation.</p>\n\n          <p>PromiseCapability Records have the fields listed in <a href=\"/sec/table-57.html\">Table 57</a>.</p>\n\n          <figure>\n            <figcaption><span id=\"table-57\">Table 57</span> &#x2014; PromiseCapability Record Fields</figcaption>\n            <table class=\"real-table\">\n              <tr>\n                <th>Field Name</th>\n                <th>Value</th>\n                <th>Meaning</th>\n              </tr>\n              <tr>\n                <td>[[Promise]]</td>\n                <td>An object</td>\n                <td>An object that is usable as a promise.</td>\n              </tr>\n              <tr>\n                <td>[[Resolve]]</td>\n                <td>A function object</td>\n                <td>The function that is used to resolve the given promise object.</td>\n              </tr>\n              <tr>\n                <td>[[Reject]]</td>\n                <td>A function object</td>\n                <td>The function that is used to reject the given promise object.</td>\n              </tr>\n            </table>\n          </figure>\n        </div>\n\n        <section id=\"sec-ifabruptrejectpromise\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.1.1\"><a href=\"/sec/sec-ifabruptrejectpromise.html\" title=\"link to this section\">25.4.1.1.1</a></span> IfAbruptRejectPromise ( value, capability )</h1>\n\n          <p class=\"normalbefore\">IfAbruptRejectPromise is a short hand for a sequence of algorithm steps that use a\n          PromiseCapability record. An algorithm step of the form:</p>\n\n          <ol class=\"proc\">\n            <li>IfAbruptRejectPromise(<i>value</i>, <i>capability</i>).</li>\n          </ol>\n\n          <p>means the same thing as:</p>\n\n          <ol class=\"proc\">\n            <li>If <i>value</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>,\n              <ol class=\"block\">\n                <li>Let <i>rejectResult</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>capability</i>.[[Reject]], <b>undefined</b>,\n                    &#xAB;<i>value</i>.[[value]]&#xBB;).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>rejectResult</i>).</li>\n                <li>Return <i>capability</i>.[[Promise]].</li>\n              </ol>\n            </li>\n            <li>Else if <i>value</i> is a <a href=\"/sec/sec-completion-record-specification-type.html\">Completion Record</a>, let\n                <i>value</i> be <i>value</i>.[[value]].</li>\n          </ol>\n        </section>\n      </section>\n\n      <section id=\"sec-promisereaction-records\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.1.2\"><a href=\"/sec/sec-promisereaction-records.html\" title=\"link to this section\">25.4.1.2</a></span> PromiseReaction Records</h1>\n\n        <p>The PromiseReaction is a Record value used to store information about how a promise should react when it becomes\n        resolved or rejected with a given value. PromiseReaction records are created by the <code>then</code> method of the\n        Promise prototype, and are used by a <a href=\"/sec/sec-promisereactionjob.html\">PromiseReactionJob</a>.</p>\n\n        <p>PromiseReaction records have the fields listed in <a href=\"/sec/table-58.html\">Table 58</a>.</p>\n\n        <figure>\n          <figcaption><span id=\"table-58\">Table 58</span> &#x2014; PromiseReaction Record Fields</figcaption>\n          <table class=\"real-table\">\n            <tr>\n              <th>Field Name</th>\n              <th>Value</th>\n              <th>Meaning</th>\n            </tr>\n            <tr>\n              <td>[[Capabilities]]</td>\n              <td>A PromiseCapability record</td>\n              <td>The capabilities of the promise for which this record provides a reaction handler.</td>\n            </tr>\n            <tr>\n              <td>[[Handler]]</td>\n              <td>A function object or a String</td>\n              <td>The function that should be applied to the incoming value, and whose return value will govern what happens to the derived promise. If [[Handler]] is <code>&quot;Identity&quot;</code> it is equivalent to a function that simply returns its first argument. If [[Handler]] is <code>&quot;Thrower&quot;</code> it is equivalent to a function that throws its first argument as an exception.</td>\n            </tr>\n          </table>\n        </figure>\n      </section>\n\n      <section id=\"sec-createresolvingfunctions\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.3\"><a href=\"/sec/sec-createresolvingfunctions.html\" title=\"link to this section\">25.4.1.3</a></span> CreateResolvingFunctions ( promise )</h1>\n\n          <p class=\"normalbefore\">When CreateResolvingFunctions is performed with argument <var>promise</var>, the following steps\n          are taken:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>alreadyResolved</i> be a new Record { [[value]]: <b>false</b> }.</li>\n            <li>Let <i>resolve</i> be a new built-in function object as defined in Promise Resolve Functions (<a href=\"/sec/sec-promise-resolve-functions.html\">25.4.1.3.2</a>).</li>\n            <li>Set the [[Promise]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of <i>resolve</i>\n                to <i>promise</i>.</li>\n            <li>Set the [[AlreadyResolved]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                <i>resolve</i> to <i>alreadyResolved</i>.</li>\n            <li>Let <i>reject</i> be a new built-in function object as defined in Promise Reject Functions (<a href=\"/sec/sec-promise-reject-functions.html\">25.4.1.3.1</a>).</li>\n            <li>Set the [[Promise]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of <i>reject</i>\n                to <i>promise</i>.</li>\n            <li>Set the [[AlreadyResolved]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                <i>reject</i> to <i>alreadyResolved</i>.</li>\n            <li>Return a new Record { [[Resolve]]: <i>resolve</i>, [[Reject]]: <i>reject</i> }.</li>\n          </ol>\n        </div>\n\n        <section id=\"sec-promise-reject-functions\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.3.1\"><a href=\"/sec/sec-promise-reject-functions.html\" title=\"link to this section\">25.4.1.3.1</a></span> Promise Reject Functions</h1>\n\n          <p>A promise reject function is an anonymous built-in function that has [[Promise]] and [[AlreadyResolved]] internal\n          slots.</p>\n\n          <p class=\"normalbefore\">When a promise reject function <var>F</var> is called with argument <var>reason</var>, the\n          following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>F</i> has a [[Promise]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> whose value is an Object.</li>\n            <li>Let <i>promise</i> be the value of <i>F</i>&apos;s [[Promise]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>Let <i>alreadyResolved</i> be the value of <i>F</i>&apos;s [[AlreadyResolved]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>If <i>alreadyResolved</i>.[[value]] is <b>true</b>, return <b>undefined</b>.</li>\n            <li>Set <i>alreadyResolved</i>.[[value]] to <b>true</b>.</li>\n            <li>Return <a href=\"/sec/sec-rejectpromise.html\">RejectPromise</a>(<i>promise</i>, <i>reason</i>).</li>\n          </ol>\n\n          <p>The <code>length</code> property of a promise reject function is <b>1</b>.</p>\n        </section>\n\n        <section id=\"sec-promise-resolve-functions\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.3.2\"><a href=\"/sec/sec-promise-resolve-functions.html\" title=\"link to this section\">25.4.1.3.2</a></span> Promise Resolve Functions</h1>\n\n          <p>A promise resolve function is an anonymous built-in function that has [[Promise]] and [[AlreadyResolved]] internal\n          slots.</p>\n\n          <p class=\"normalbefore\">When a promise resolve function <var>F</var> is called with argument <var>resolution</var>, the\n          following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>F</i> has a [[Promise]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> whose value is an Object.</li>\n            <li>Let <i>promise</i> be the value of <i>F</i>&apos;s [[Promise]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>Let <i>alreadyResolved</i> be the value of <i>F</i>&apos;s [[AlreadyResolved]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>If <i>alreadyResolved</i>.[[value]] is <b>true</b>, return <b>undefined</b>.</li>\n            <li>Set <i>alreadyResolved</i>.[[value]] to <b>true</b>.</li>\n            <li>If <a href=\"/sec/sec-samevalue.html\">SameValue</a>(<i>resolution</i>, <i>promise</i>) is <b>true</b>, then\n              <ol class=\"block\">\n                <li>Let <i>selfResolutionError</i> be a newly created <b>TypeError</b> object.</li>\n                <li>Return <a href=\"/sec/sec-rejectpromise.html\">RejectPromise</a>(<i>promise</i>, <i>selfResolutionError</i>).</li>\n              </ol>\n            </li>\n            <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>resolution</i>) is not Object, then\n              <ol class=\"block\">\n                <li>Return <a href=\"/sec/sec-fulfillpromise.html\">FulfillPromise</a>(<i>promise</i>, <i>resolution</i>).</li>\n              </ol>\n            </li>\n            <li>Let <i>then</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>resolution</i>, <code>&quot;then&quot;</code>).</li>\n            <li>If <i>then</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n              <ol class=\"block\">\n                <li>Return <a href=\"/sec/sec-rejectpromise.html\">RejectPromise</a>(<i>promise</i>, <i>then</i>.[[value]]).</li>\n              </ol>\n            </li>\n            <li>Let <i>thenAction</i> be <i>then</i>.[[value]].</li>\n            <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>thenAction</i>) is <b>false</b>, then\n              <ol class=\"block\">\n                <li>Return <a href=\"/sec/sec-fulfillpromise.html\">FulfillPromise</a>(<i>promise</i>, <i>resolution</i>).</li>\n              </ol>\n            </li>\n            <li>Perform <a href=\"/sec/sec-enqueuejob.html\">EnqueueJob</a> (<code>&quot;PromiseJobs&quot;</code>, <a href=\"/sec/sec-promiseresolvethenablejob.html\">PromiseResolveThenableJob</a>, &#xAB;&#x200D;<i>promise</i>,\n                <i>resolution</i>, <i>thenAction</i>&#xBB;)</li>\n            <li>Return <b>undefined</b>.</li>\n          </ol>\n\n          <p>The <code>length</code> property of a promise resolve function is <b>1</b>.</p>\n        </section>\n      </section>\n\n      <section id=\"sec-fulfillpromise\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.1.4\"><a href=\"/sec/sec-fulfillpromise.html\" title=\"link to this section\">25.4.1.4</a></span>\n            FulfillPromise ( promise, value)</h1>\n\n        <p class=\"normalbefore\">When the FulfillPromise abstract operation is called with arguments <var>promise</var> and\n        <var>value</var> the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: the value of <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is <code>&quot;pending&quot;</code>.</li>\n          <li>Let <i>reactions</i> be the value of <i>promise</i>&apos;s [[PromiseFulfillReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseResult]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <i>value</i>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseFulfillReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <b>undefined</b>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseRejectReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <b>undefined</b>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <code>&quot;fulfilled&quot;</code>.</li>\n          <li>Return <a href=\"/sec/sec-triggerpromisereactions.html\">TriggerPromiseReactions</a>(<i>reactions</i>, <i>value</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-newpromisecapability\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.5\"><a href=\"/sec/sec-newpromisecapability.html\" title=\"link to this section\">25.4.1.5</a></span> NewPromiseCapability ( C )</h1>\n\n          <p class=\"normalbefore\">The abstract operation NewPromiseCapability takes a constructor function, and attempts to use\n          that constructor function in the fashion of the built-in <code>Promise</code> constructor to create a Promise object and\n          extract its resolve and reject functions. The promise plus the resolve and reject functions are used to initialize a new\n          PromiseCapability record which is returned as the value of this abstract operation.</p>\n\n          <ol class=\"proc\">\n            <li>If <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a>(<i>C</i>) is <b>false</b>, throw a <b>TypeError</b>\n                exception.</li>\n            <li>NOTE <span style=\"font-family: Times New Roman\"><i>C</i></span> is assumed to be a constructor function that\n                supports the parameter conventions of the <code>Promise</code> constructor (<a href=\"/sec/sec-promise-executor.html\">see\n                25.4.3.1</a>).</li>\n            <li>Let <i>promiseCapability</i> be a new PromiseCapability { [[Promise]]: <b>undefined</b>, [[Resolve]]:\n                <b>undefined</b>, [[Reject]]: <b>undefined</b> }.</li>\n            <li>Let <i>executor</i> be a new built-in function object as defined in <a href=\"/sec/sec-getcapabilitiesexecutor-functions.html\">GetCapabilitiesExecutor Functions</a> (<a href=\"/sec/sec-getcapabilitiesexecutor-functions.html\">25.4.1.5.1</a>).</li>\n            <li>Set the [[Capability]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                <i>executor</i> to <i>promiseCapability</i>.</li>\n            <li>Let <i>promise</i> be <a href=\"/sec/sec-construct.html\">Construct</a>(<i>C</i>, &#xAB;<i>executor</i>&#xBB;).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>promise</i>).</li>\n            <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>promiseCapability</i>.[[Resolve]]) is <b>false</b>, throw a\n                <b>TypeError</b> exception.</li>\n            <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>promiseCapability</i>.[[Reject]]) is <b>false</b>, throw a\n                <b>TypeError</b> exception.</li>\n            <li>Set <i>promiseCapability</i>.[[Promise]] to <i>promise</i>.</li>\n            <li>Return <i>promiseCapability</i>.</li>\n          </ol>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE</span> This abstract operation supports Promise subclassing, as it is generic on any\n            constructor that calls a passed executor function argument in the same way as the Promise constructor. It is used to\n            generalize static methods of the Promise constructor to any subclass.</p>\n          </div>\n        </div>\n\n        <section id=\"sec-getcapabilitiesexecutor-functions\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.5.1\"><a href=\"/sec/sec-getcapabilitiesexecutor-functions.html\" title=\"link to this section\">25.4.1.5.1</a></span> GetCapabilitiesExecutor Functions</h1>\n\n          <p>A GetCapabilitiesExecutor function is an anonymous built-in function that has a [[Capability]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</p>\n\n          <p class=\"normalbefore\">When a GetCapabilitiesExecutor function <var>F</var> is called with arguments <var>resolve</var>\n          and <var>reject</var> the following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>F</i> has a [[Capability]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> whose value is a PromiseCapability\n                Record.</li>\n            <li>Let <i>promiseCapability</i> be the value of <i>F</i>&apos;s [[Capability]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>If <i>promiseCapability</i>.[[Resolve]] is not <b>undefined</b>, throw a <b>TypeError</b> exception.</li>\n            <li>If <i>promiseCapability</i>.[[Reject]] is not <b>undefined</b>, throw a <b>TypeError</b> exception.</li>\n            <li>Set <i>promiseCapability</i>.[[Resolve]] to <i>resolve</i>.</li>\n            <li>Set <i>promiseCapability</i>.[[Reject]] to <i>reject</i>.</li>\n            <li>Return <b>undefined</b>.</li>\n          </ol>\n\n          <p>The <code>length</code> property of a GetCapabilitiesExecutor function is <b>2</b>.</p>\n        </section>\n      </section>\n\n      <section id=\"sec-ispromise\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.1.6\"><a href=\"/sec/sec-ispromise.html\" title=\"link to this section\">25.4.1.6</a></span>\n            IsPromise ( x )</h1>\n\n        <p class=\"normalbefore\">The abstract operation IsPromise checks for the promise brand on an object.</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>x</i>) is not Object, return <b>false</b>.</li>\n          <li>If <i>x</i> does not have a [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a>, return <b>false</b>.</li>\n          <li>Return <b>true</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-rejectpromise\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.1.7\"><a href=\"/sec/sec-rejectpromise.html\" title=\"link to this section\">25.4.1.7</a></span>\n            RejectPromise ( promise, reason)</h1>\n\n        <p class=\"normalbefore\">When the RejectPromise abstract operation is called with arguments <var>promise</var> and\n        <var>reason</var> the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: the value of <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is <code>&quot;pending&quot;</code>.</li>\n          <li>Let <i>reactions</i> be the value of <i>promise</i>&apos;s [[PromiseRejectReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseResult]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <i>reason</i>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseFulfillReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <b>undefined</b>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseRejectReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <b>undefined</b>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <code>&quot;rejected&quot;</code>.</li>\n          <li>Return <a href=\"/sec/sec-triggerpromisereactions.html\">TriggerPromiseReactions</a>(<i>reactions</i>, <i>reason</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-triggerpromisereactions\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.1.8\"><a href=\"/sec/sec-triggerpromisereactions.html\" title=\"link to this section\">25.4.1.8</a></span> TriggerPromiseReactions ( reactions, argument )</h1>\n\n        <p>The abstract operation TriggerPromiseReactions takes a collection of PromiseReactionRecords and enqueues a new Job for\n        each record. Each such Job processes the [[Handler]] of the PromiseReactionRecord, and if the [[Handler]] is a function\n        calls it passing the given argument.</p>\n\n        <ol class=\"proc\">\n          <li>Repeat for each <i>reaction</i> in <i>reactions</i>, in original insertion order\n            <ol class=\"block\">\n              <li>Perform <a href=\"/sec/sec-enqueuejob.html\">EnqueueJob</a>(<code>&quot;<b>PromiseJobs</b>&quot;</code><span style=\"font-family:\n                  sans-serif\">,</span> <a href=\"/sec/sec-promisereactionjob.html\">PromiseReactionJob</a>, &#xAB;&#x200D;<i>reaction</i>,\n                  <i>argument</i>&#xBB;).</li>\n            </ol>\n          </li>\n          <li>Return <b>undefined</b>.</li>\n        </ol>\n      </section>\n    "}