{"id":"sec-promise-executor","html":"\n        <h1><span class=\"secnum\" id=\"sec-25.4.3.1\"><a href=\"/sec/sec-promise-executor.html\" title=\"link to this section\">25.4.3.1</a></span> Promise ( executor )</h1>\n\n        <p class=\"normalbefore\">When the <code>Promise</code> function is called with argument <var>executor</var> the following\n        steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If NewTarget is <b>undefined</b>, throw a <b>TypeError</b> exception.</li>\n          <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>executor</i>) is <b>false</b>, throw a <b>TypeError</b>\n              exception.</li>\n          <li>Let <i>promise</i> be <a href=\"/sec/sec-ordinarycreatefromconstructor.html\">OrdinaryCreateFromConstructor</a>(NewTarget,\n              <code>&quot;%PromisePrototype%&quot;</code>, &#xAB;&#x200D;[[PromiseState]], [[PromiseResult]], [[PromiseFulfillReactions]],\n              [[PromiseRejectReactions]]&#xBB; ).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>promise</i>).</li>\n          <li>Set <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to\n              <code>&quot;pending&quot;</code>.</li>\n          <li>Set <i>promise</i>&apos;s [[PromiseFulfillReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a> to a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>Set <i>promise</i>&apos;s [[PromiseRejectReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a> to a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>Let <i>resolvingFunctions</i> be <a href=\"/sec/sec-createresolvingfunctions.html\">CreateResolvingFunctions</a>(<i>promise</i>).</li>\n          <li>Let <i>completion</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>executor</i>, <b>undefined</b>,\n              &#xAB;<i>resolvingFunctions</i>.[[Resolve]], <i>resolvingFunctions</i>.[[Reject]]&#xBB;).</li>\n          <li>If <i>completion</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n            <ol class=\"block\">\n              <li>Let <i>status</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>resolvingFunctions</i>.[[Reject]], <b>undefined</b>,\n                  &#xAB;<i>completion</i>.[[value]]&#xBB;).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n            </ol>\n          </li>\n          <li>Return <i>promise</i>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The <var>executor</var> argument must be a function object. It is called for initiating\n          and reporting completion of the possibly deferred action represented by this Promise object. The executor is called with\n          two arguments: <var>resolve</var> and <var>reject</var>. These are functions that may be used by the <var>executor</var>\n          function to report eventual completion or failure of the deferred computation. Returning from the executor function does\n          not mean that the deferred action has been completed but only that the request to eventually perform the deferred action\n          has been accepted.</p>\n\n          <p>The <var>resolve</var> function that is passed to an <var>executor</var> function accepts a single argument. The\n          <var>executor</var> code may eventually call the <var>resolve</var> function to indicate that it wishes to resolve the\n          associated Promise object. The argument passed to the <var>resolve</var> function represents the eventual value of the\n          deferred action and can be either the actual fulfillment value or another Promise object which will provide the value if\n          it is fulfilled.</p>\n\n          <p>The <var>reject</var> function that is passed to an <var>executor</var> function accepts a single argument. The\n          <var>executor</var> code may eventually call the <var>reject</var> function to indicate that the associated Promise is\n          rejected and will never be fulfilled. The argument passed to the <var>reject</var> function is used as the rejection\n          value of the promise. Typically it will be an <code>Error</code> object.</p>\n\n          <p>The resolve and reject functions passed to an <var>executor</var> function by the Promise constructor have the\n          capability to actually resolve and reject the associated promise. Subclasses may have different constructor behaviour\n          that passes in customized values for resolve and reject.</p>\n        </div>\n      "}