{"id":"sec-promise-objects","html":"\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-25.4\"><a href=\"/sec/sec-promise-objects.html\" title=\"link to this section\">25.4</a></span> Promise\n          Objects</h1>\n\n      <p>A Promise is an object that is used as a placeholder for the eventual results of a deferred (and possibly asynchronous)\n      computation.</p>\n\n      <p class=\"normalbefore\">Any Promise object is in one of three mutually exclusive states: <i>fulfilled</i>, <i>rejected</i>,\n      and <i>pending</i>:</p>\n\n      <ul>\n        <li>\n          <p>A promise <code>p</code> is fulfilled if <code>p.then(f, r)</code> will immediately enqueue a Job to call the\n          function <code>f</code>.</p>\n        </li>\n\n        <li>\n          <p>A promise <code>p</code> is rejected if <code>p.then(f, r)</code> will immediately enqueue a Job to call the function\n          <code>r</code>.</p>\n        </li>\n\n        <li>\n          <p>A promise is pending if it is neither fulfilled nor rejected.</p>\n        </li>\n      </ul>\n\n      <p>A promise is said to be <i>settled</i> if it is not pending, i.e. if it is either fulfilled or rejected.</p>\n\n      <p>A promise is <i>resolved</i> if it is settled or if it has been &#x201C;locked in&#x201D; to match the state of another\n      promise. Attempting to resolve or reject a resolved promise has no effect. A promise is <i>unresolved</i> if it is not\n      resolved. An unresolved promise is always in the pending state. A resolved promise may be pending, fulfilled or\n      rejected.</p>\n    </div>\n\n    <section id=\"sec-promise-abstract-operations\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.1\"><a href=\"/sec/sec-promise-abstract-operations.html\" title=\"link to this section\">25.4.1</a></span> Promise Abstract Operations</h1>\n      </div>\n\n      <section id=\"sec-promisecapability-records\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.1\"><a href=\"/sec/sec-promisecapability-records.html\" title=\"link to this section\">25.4.1.1</a></span> PromiseCapability Records</h1>\n\n          <p>A PromiseCapability is a Record value used to encapsulate a promise object along with the functions that are capable\n          of resolving or rejecting that promise object. PromiseCapability records are produced by the <a href=\"/sec/sec-newpromisecapability.html\">NewPromiseCapability</a> abstract operation.</p>\n\n          <p>PromiseCapability Records have the fields listed in <a href=\"/sec/table-57.html\">Table 57</a>.</p>\n\n          <figure>\n            <figcaption><span id=\"table-57\">Table 57</span> &#x2014; PromiseCapability Record Fields</figcaption>\n            <table class=\"real-table\">\n              <tr>\n                <th>Field Name</th>\n                <th>Value</th>\n                <th>Meaning</th>\n              </tr>\n              <tr>\n                <td>[[Promise]]</td>\n                <td>An object</td>\n                <td>An object that is usable as a promise.</td>\n              </tr>\n              <tr>\n                <td>[[Resolve]]</td>\n                <td>A function object</td>\n                <td>The function that is used to resolve the given promise object.</td>\n              </tr>\n              <tr>\n                <td>[[Reject]]</td>\n                <td>A function object</td>\n                <td>The function that is used to reject the given promise object.</td>\n              </tr>\n            </table>\n          </figure>\n        </div>\n\n        <section id=\"sec-ifabruptrejectpromise\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.1.1\"><a href=\"/sec/sec-ifabruptrejectpromise.html\" title=\"link to this section\">25.4.1.1.1</a></span> IfAbruptRejectPromise ( value, capability )</h1>\n\n          <p class=\"normalbefore\">IfAbruptRejectPromise is a short hand for a sequence of algorithm steps that use a\n          PromiseCapability record. An algorithm step of the form:</p>\n\n          <ol class=\"proc\">\n            <li>IfAbruptRejectPromise(<i>value</i>, <i>capability</i>).</li>\n          </ol>\n\n          <p>means the same thing as:</p>\n\n          <ol class=\"proc\">\n            <li>If <i>value</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>,\n              <ol class=\"block\">\n                <li>Let <i>rejectResult</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>capability</i>.[[Reject]], <b>undefined</b>,\n                    &#xAB;<i>value</i>.[[value]]&#xBB;).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>rejectResult</i>).</li>\n                <li>Return <i>capability</i>.[[Promise]].</li>\n              </ol>\n            </li>\n            <li>Else if <i>value</i> is a <a href=\"/sec/sec-completion-record-specification-type.html\">Completion Record</a>, let\n                <i>value</i> be <i>value</i>.[[value]].</li>\n          </ol>\n        </section>\n      </section>\n\n      <section id=\"sec-promisereaction-records\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.1.2\"><a href=\"/sec/sec-promisereaction-records.html\" title=\"link to this section\">25.4.1.2</a></span> PromiseReaction Records</h1>\n\n        <p>The PromiseReaction is a Record value used to store information about how a promise should react when it becomes\n        resolved or rejected with a given value. PromiseReaction records are created by the <code>then</code> method of the\n        Promise prototype, and are used by a <a href=\"/sec/sec-promisereactionjob.html\">PromiseReactionJob</a>.</p>\n\n        <p>PromiseReaction records have the fields listed in <a href=\"/sec/table-58.html\">Table 58</a>.</p>\n\n        <figure>\n          <figcaption><span id=\"table-58\">Table 58</span> &#x2014; PromiseReaction Record Fields</figcaption>\n          <table class=\"real-table\">\n            <tr>\n              <th>Field Name</th>\n              <th>Value</th>\n              <th>Meaning</th>\n            </tr>\n            <tr>\n              <td>[[Capabilities]]</td>\n              <td>A PromiseCapability record</td>\n              <td>The capabilities of the promise for which this record provides a reaction handler.</td>\n            </tr>\n            <tr>\n              <td>[[Handler]]</td>\n              <td>A function object or a String</td>\n              <td>The function that should be applied to the incoming value, and whose return value will govern what happens to the derived promise. If [[Handler]] is <code>&quot;Identity&quot;</code> it is equivalent to a function that simply returns its first argument. If [[Handler]] is <code>&quot;Thrower&quot;</code> it is equivalent to a function that throws its first argument as an exception.</td>\n            </tr>\n          </table>\n        </figure>\n      </section>\n\n      <section id=\"sec-createresolvingfunctions\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.3\"><a href=\"/sec/sec-createresolvingfunctions.html\" title=\"link to this section\">25.4.1.3</a></span> CreateResolvingFunctions ( promise )</h1>\n\n          <p class=\"normalbefore\">When CreateResolvingFunctions is performed with argument <var>promise</var>, the following steps\n          are taken:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>alreadyResolved</i> be a new Record { [[value]]: <b>false</b> }.</li>\n            <li>Let <i>resolve</i> be a new built-in function object as defined in Promise Resolve Functions (<a href=\"/sec/sec-promise-resolve-functions.html\">25.4.1.3.2</a>).</li>\n            <li>Set the [[Promise]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of <i>resolve</i>\n                to <i>promise</i>.</li>\n            <li>Set the [[AlreadyResolved]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                <i>resolve</i> to <i>alreadyResolved</i>.</li>\n            <li>Let <i>reject</i> be a new built-in function object as defined in Promise Reject Functions (<a href=\"/sec/sec-promise-reject-functions.html\">25.4.1.3.1</a>).</li>\n            <li>Set the [[Promise]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of <i>reject</i>\n                to <i>promise</i>.</li>\n            <li>Set the [[AlreadyResolved]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                <i>reject</i> to <i>alreadyResolved</i>.</li>\n            <li>Return a new Record { [[Resolve]]: <i>resolve</i>, [[Reject]]: <i>reject</i> }.</li>\n          </ol>\n        </div>\n\n        <section id=\"sec-promise-reject-functions\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.3.1\"><a href=\"/sec/sec-promise-reject-functions.html\" title=\"link to this section\">25.4.1.3.1</a></span> Promise Reject Functions</h1>\n\n          <p>A promise reject function is an anonymous built-in function that has [[Promise]] and [[AlreadyResolved]] internal\n          slots.</p>\n\n          <p class=\"normalbefore\">When a promise reject function <var>F</var> is called with argument <var>reason</var>, the\n          following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>F</i> has a [[Promise]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> whose value is an Object.</li>\n            <li>Let <i>promise</i> be the value of <i>F</i>&apos;s [[Promise]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>Let <i>alreadyResolved</i> be the value of <i>F</i>&apos;s [[AlreadyResolved]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>If <i>alreadyResolved</i>.[[value]] is <b>true</b>, return <b>undefined</b>.</li>\n            <li>Set <i>alreadyResolved</i>.[[value]] to <b>true</b>.</li>\n            <li>Return <a href=\"/sec/sec-rejectpromise.html\">RejectPromise</a>(<i>promise</i>, <i>reason</i>).</li>\n          </ol>\n\n          <p>The <code>length</code> property of a promise reject function is <b>1</b>.</p>\n        </section>\n\n        <section id=\"sec-promise-resolve-functions\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.3.2\"><a href=\"/sec/sec-promise-resolve-functions.html\" title=\"link to this section\">25.4.1.3.2</a></span> Promise Resolve Functions</h1>\n\n          <p>A promise resolve function is an anonymous built-in function that has [[Promise]] and [[AlreadyResolved]] internal\n          slots.</p>\n\n          <p class=\"normalbefore\">When a promise resolve function <var>F</var> is called with argument <var>resolution</var>, the\n          following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>F</i> has a [[Promise]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> whose value is an Object.</li>\n            <li>Let <i>promise</i> be the value of <i>F</i>&apos;s [[Promise]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>Let <i>alreadyResolved</i> be the value of <i>F</i>&apos;s [[AlreadyResolved]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>If <i>alreadyResolved</i>.[[value]] is <b>true</b>, return <b>undefined</b>.</li>\n            <li>Set <i>alreadyResolved</i>.[[value]] to <b>true</b>.</li>\n            <li>If <a href=\"/sec/sec-samevalue.html\">SameValue</a>(<i>resolution</i>, <i>promise</i>) is <b>true</b>, then\n              <ol class=\"block\">\n                <li>Let <i>selfResolutionError</i> be a newly created <b>TypeError</b> object.</li>\n                <li>Return <a href=\"/sec/sec-rejectpromise.html\">RejectPromise</a>(<i>promise</i>, <i>selfResolutionError</i>).</li>\n              </ol>\n            </li>\n            <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>resolution</i>) is not Object, then\n              <ol class=\"block\">\n                <li>Return <a href=\"/sec/sec-fulfillpromise.html\">FulfillPromise</a>(<i>promise</i>, <i>resolution</i>).</li>\n              </ol>\n            </li>\n            <li>Let <i>then</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>resolution</i>, <code>&quot;then&quot;</code>).</li>\n            <li>If <i>then</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n              <ol class=\"block\">\n                <li>Return <a href=\"/sec/sec-rejectpromise.html\">RejectPromise</a>(<i>promise</i>, <i>then</i>.[[value]]).</li>\n              </ol>\n            </li>\n            <li>Let <i>thenAction</i> be <i>then</i>.[[value]].</li>\n            <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>thenAction</i>) is <b>false</b>, then\n              <ol class=\"block\">\n                <li>Return <a href=\"/sec/sec-fulfillpromise.html\">FulfillPromise</a>(<i>promise</i>, <i>resolution</i>).</li>\n              </ol>\n            </li>\n            <li>Perform <a href=\"/sec/sec-enqueuejob.html\">EnqueueJob</a> (<code>&quot;PromiseJobs&quot;</code>, <a href=\"/sec/sec-promiseresolvethenablejob.html\">PromiseResolveThenableJob</a>, &#xAB;&#x200D;<i>promise</i>,\n                <i>resolution</i>, <i>thenAction</i>&#xBB;)</li>\n            <li>Return <b>undefined</b>.</li>\n          </ol>\n\n          <p>The <code>length</code> property of a promise resolve function is <b>1</b>.</p>\n        </section>\n      </section>\n\n      <section id=\"sec-fulfillpromise\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.1.4\"><a href=\"/sec/sec-fulfillpromise.html\" title=\"link to this section\">25.4.1.4</a></span>\n            FulfillPromise ( promise, value)</h1>\n\n        <p class=\"normalbefore\">When the FulfillPromise abstract operation is called with arguments <var>promise</var> and\n        <var>value</var> the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: the value of <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is <code>&quot;pending&quot;</code>.</li>\n          <li>Let <i>reactions</i> be the value of <i>promise</i>&apos;s [[PromiseFulfillReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseResult]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <i>value</i>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseFulfillReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <b>undefined</b>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseRejectReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <b>undefined</b>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <code>&quot;fulfilled&quot;</code>.</li>\n          <li>Return <a href=\"/sec/sec-triggerpromisereactions.html\">TriggerPromiseReactions</a>(<i>reactions</i>, <i>value</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-newpromisecapability\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.5\"><a href=\"/sec/sec-newpromisecapability.html\" title=\"link to this section\">25.4.1.5</a></span> NewPromiseCapability ( C )</h1>\n\n          <p class=\"normalbefore\">The abstract operation NewPromiseCapability takes a constructor function, and attempts to use\n          that constructor function in the fashion of the built-in <code>Promise</code> constructor to create a Promise object and\n          extract its resolve and reject functions. The promise plus the resolve and reject functions are used to initialize a new\n          PromiseCapability record which is returned as the value of this abstract operation.</p>\n\n          <ol class=\"proc\">\n            <li>If <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a>(<i>C</i>) is <b>false</b>, throw a <b>TypeError</b>\n                exception.</li>\n            <li>NOTE <span style=\"font-family: Times New Roman\"><i>C</i></span> is assumed to be a constructor function that\n                supports the parameter conventions of the <code>Promise</code> constructor (<a href=\"/sec/sec-promise-executor.html\">see\n                25.4.3.1</a>).</li>\n            <li>Let <i>promiseCapability</i> be a new PromiseCapability { [[Promise]]: <b>undefined</b>, [[Resolve]]:\n                <b>undefined</b>, [[Reject]]: <b>undefined</b> }.</li>\n            <li>Let <i>executor</i> be a new built-in function object as defined in <a href=\"/sec/sec-getcapabilitiesexecutor-functions.html\">GetCapabilitiesExecutor Functions</a> (<a href=\"/sec/sec-getcapabilitiesexecutor-functions.html\">25.4.1.5.1</a>).</li>\n            <li>Set the [[Capability]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                <i>executor</i> to <i>promiseCapability</i>.</li>\n            <li>Let <i>promise</i> be <a href=\"/sec/sec-construct.html\">Construct</a>(<i>C</i>, &#xAB;<i>executor</i>&#xBB;).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>promise</i>).</li>\n            <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>promiseCapability</i>.[[Resolve]]) is <b>false</b>, throw a\n                <b>TypeError</b> exception.</li>\n            <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>promiseCapability</i>.[[Reject]]) is <b>false</b>, throw a\n                <b>TypeError</b> exception.</li>\n            <li>Set <i>promiseCapability</i>.[[Promise]] to <i>promise</i>.</li>\n            <li>Return <i>promiseCapability</i>.</li>\n          </ol>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE</span> This abstract operation supports Promise subclassing, as it is generic on any\n            constructor that calls a passed executor function argument in the same way as the Promise constructor. It is used to\n            generalize static methods of the Promise constructor to any subclass.</p>\n          </div>\n        </div>\n\n        <section id=\"sec-getcapabilitiesexecutor-functions\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.1.5.1\"><a href=\"/sec/sec-getcapabilitiesexecutor-functions.html\" title=\"link to this section\">25.4.1.5.1</a></span> GetCapabilitiesExecutor Functions</h1>\n\n          <p>A GetCapabilitiesExecutor function is an anonymous built-in function that has a [[Capability]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</p>\n\n          <p class=\"normalbefore\">When a GetCapabilitiesExecutor function <var>F</var> is called with arguments <var>resolve</var>\n          and <var>reject</var> the following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>F</i> has a [[Capability]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> whose value is a PromiseCapability\n                Record.</li>\n            <li>Let <i>promiseCapability</i> be the value of <i>F</i>&apos;s [[Capability]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>If <i>promiseCapability</i>.[[Resolve]] is not <b>undefined</b>, throw a <b>TypeError</b> exception.</li>\n            <li>If <i>promiseCapability</i>.[[Reject]] is not <b>undefined</b>, throw a <b>TypeError</b> exception.</li>\n            <li>Set <i>promiseCapability</i>.[[Resolve]] to <i>resolve</i>.</li>\n            <li>Set <i>promiseCapability</i>.[[Reject]] to <i>reject</i>.</li>\n            <li>Return <b>undefined</b>.</li>\n          </ol>\n\n          <p>The <code>length</code> property of a GetCapabilitiesExecutor function is <b>2</b>.</p>\n        </section>\n      </section>\n\n      <section id=\"sec-ispromise\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.1.6\"><a href=\"/sec/sec-ispromise.html\" title=\"link to this section\">25.4.1.6</a></span>\n            IsPromise ( x )</h1>\n\n        <p class=\"normalbefore\">The abstract operation IsPromise checks for the promise brand on an object.</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>x</i>) is not Object, return <b>false</b>.</li>\n          <li>If <i>x</i> does not have a [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a>, return <b>false</b>.</li>\n          <li>Return <b>true</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-rejectpromise\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.1.7\"><a href=\"/sec/sec-rejectpromise.html\" title=\"link to this section\">25.4.1.7</a></span>\n            RejectPromise ( promise, reason)</h1>\n\n        <p class=\"normalbefore\">When the RejectPromise abstract operation is called with arguments <var>promise</var> and\n        <var>reason</var> the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: the value of <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is <code>&quot;pending&quot;</code>.</li>\n          <li>Let <i>reactions</i> be the value of <i>promise</i>&apos;s [[PromiseRejectReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseResult]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <i>reason</i>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseFulfillReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <b>undefined</b>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseRejectReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <b>undefined</b>.</li>\n          <li>Set the value of <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <code>&quot;rejected&quot;</code>.</li>\n          <li>Return <a href=\"/sec/sec-triggerpromisereactions.html\">TriggerPromiseReactions</a>(<i>reactions</i>, <i>reason</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-triggerpromisereactions\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.1.8\"><a href=\"/sec/sec-triggerpromisereactions.html\" title=\"link to this section\">25.4.1.8</a></span> TriggerPromiseReactions ( reactions, argument )</h1>\n\n        <p>The abstract operation TriggerPromiseReactions takes a collection of PromiseReactionRecords and enqueues a new Job for\n        each record. Each such Job processes the [[Handler]] of the PromiseReactionRecord, and if the [[Handler]] is a function\n        calls it passing the given argument.</p>\n\n        <ol class=\"proc\">\n          <li>Repeat for each <i>reaction</i> in <i>reactions</i>, in original insertion order\n            <ol class=\"block\">\n              <li>Perform <a href=\"/sec/sec-enqueuejob.html\">EnqueueJob</a>(<code>&quot;<b>PromiseJobs</b>&quot;</code><span style=\"font-family:\n                  sans-serif\">,</span> <a href=\"/sec/sec-promisereactionjob.html\">PromiseReactionJob</a>, &#xAB;&#x200D;<i>reaction</i>,\n                  <i>argument</i>&#xBB;).</li>\n            </ol>\n          </li>\n          <li>Return <b>undefined</b>.</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-promise-jobs\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.2\"><a href=\"/sec/sec-promise-jobs.html\" title=\"link to this section\">25.4.2</a></span>\n            Promise Jobs</h1>\n      </div>\n\n      <section id=\"sec-promisereactionjob\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.2.1\"><a href=\"/sec/sec-promisereactionjob.html\" title=\"link to this section\">25.4.2.1</a></span> PromiseReactionJob ( reaction, argument )</h1>\n\n        <p class=\"normalbefore\">The job PromiseReactionJob with parameters <var>reaction</var> and <var>argument</var> applies the\n        appropriate handler to the incoming value, and uses the handler&apos;s return value to resolve or reject the derived promise\n        associated with that handler.</p>\n\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>reaction</i> is a PromiseReaction Record.</li>\n          <li>Let <i>promiseCapability</i> be <i>reaction</i>.[[Capabilities]].</li>\n          <li>Let <i>handler</i> be <i>reaction</i>.[[Handler]].</li>\n          <li>If <i>handler</i> is <code>&quot;Identity&quot;</code>, let <i>handlerResult</i> be <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>argument</i>).</li>\n          <li>Else if <i>handler</i> is <code>&quot;Thrower&quot;</code>, let <i>handlerResult</i> be <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family:\n              sans-serif\">throw</span>, [[value]]: <i>argument</i>, [[target]]: <span style=\"font-family:\n              sans-serif\">empty</span>}.</li>\n          <li>Else, let <i>handlerResult</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>handler</i>, <b>undefined</b>,\n              &#xAB;<i>argument</i>&#xBB;).</li>\n          <li>If <i>handlerResult</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n            <ol class=\"block\">\n              <li>Let <i>status</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>promiseCapability</i>.[[Reject]], <b>undefined</b>,\n                  &#xAB;<i>handlerResult</i>.[[value]]&#xBB;).</li>\n              <li>NextJob <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>status</i>).</li>\n            </ol>\n          </li>\n          <li>Let <i>status</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>promiseCapability</i>.[[Resolve]], <b>undefined</b>,\n              &#xAB;<i>handlerResult</i>.[[value]]&#xBB;)<i>.</i></li>\n          <li>NextJob <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>status</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-promiseresolvethenablejob\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.2.2\"><a href=\"/sec/sec-promiseresolvethenablejob.html\" title=\"link to this section\">25.4.2.2</a></span> PromiseResolveThenableJob ( promiseToResolve, thenable, then)</h1>\n\n        <p class=\"normalbefore\">The job PromiseResolveThenableJob with parameters <var>promiseToResolve</var>,\n        <var>thenable</var>, and <var>then</var> performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>resolvingFunctions</i> be <a href=\"/sec/sec-createresolvingfunctions.html\">CreateResolvingFunctions</a>(<i>promiseToResolve</i>).</li>\n          <li>Let <i>thenCallResult</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>then</i>, <i>thenable</i>,\n              &#xAB;<i>resolvingFunctions</i>.[[Resolve]], <i>resolvingFunctions</i>.[[Reject]]&#xBB;).</li>\n          <li>If <i>thenCallResult</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>,\n            <ol class=\"block\">\n              <li>Let <i>status</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>resolvingFunctions</i>.[[Reject]], <b>undefined</b>,\n                  &#xAB;<i>thenCallResult</i>.[[value]]&#xBB;)<i>.</i></li>\n              <li>NextJob <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>status</i>)<i>.</i></li>\n            </ol>\n          </li>\n          <li>NextJob <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>thenCallResult</i>).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> This Job uses the supplied thenable and its <code>then</code> method to resolve the\n          given promise. This process must take place as a Job to ensure that the evaluation of the <code>then</code> method\n          occurs after evaluation of any surrounding code has completed.</p>\n        </div>\n      </section>\n    </section>\n\n    <section id=\"sec-promise-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.3\"><a href=\"/sec/sec-promise-constructor.html\" title=\"link to this section\">25.4.3</a></span>\n            The Promise Constructor</h1>\n\n        <p>The Promise constructor is the %Promise% intrinsic object and the initial value of the <code>Promise</code> property of\n        the global object. When called as a constructor it creates and initializes a new Promise object. <code>Promise</code> is\n        not intended to be called as a function and will throw an exception when called in that manner.</p>\n\n        <p>The <code>Promise</code> constructor is designed to be subclassable. It may be used as the value in an\n        <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified\n        <code>Promise</code> behaviour must include a <code>super</code> call to the <code>Promise</code> constructor to create\n        and initialize the subclass instance with the internal state necessary to support the <code>Promise</code> and\n        <code>Promise.prototype</code> built-in methods.</p>\n      </div>\n\n      <section id=\"sec-promise-executor\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.3.1\"><a href=\"/sec/sec-promise-executor.html\" title=\"link to this section\">25.4.3.1</a></span> Promise ( executor )</h1>\n\n        <p class=\"normalbefore\">When the <code>Promise</code> function is called with argument <var>executor</var> the following\n        steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If NewTarget is <b>undefined</b>, throw a <b>TypeError</b> exception.</li>\n          <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>executor</i>) is <b>false</b>, throw a <b>TypeError</b>\n              exception.</li>\n          <li>Let <i>promise</i> be <a href=\"/sec/sec-ordinarycreatefromconstructor.html\">OrdinaryCreateFromConstructor</a>(NewTarget,\n              <code>&quot;%PromisePrototype%&quot;</code>, &#xAB;&#x200D;[[PromiseState]], [[PromiseResult]], [[PromiseFulfillReactions]],\n              [[PromiseRejectReactions]]&#xBB; ).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>promise</i>).</li>\n          <li>Set <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to\n              <code>&quot;pending&quot;</code>.</li>\n          <li>Set <i>promise</i>&apos;s [[PromiseFulfillReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a> to a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>Set <i>promise</i>&apos;s [[PromiseRejectReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a> to a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>Let <i>resolvingFunctions</i> be <a href=\"/sec/sec-createresolvingfunctions.html\">CreateResolvingFunctions</a>(<i>promise</i>).</li>\n          <li>Let <i>completion</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>executor</i>, <b>undefined</b>,\n              &#xAB;<i>resolvingFunctions</i>.[[Resolve]], <i>resolvingFunctions</i>.[[Reject]]&#xBB;).</li>\n          <li>If <i>completion</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n            <ol class=\"block\">\n              <li>Let <i>status</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>resolvingFunctions</i>.[[Reject]], <b>undefined</b>,\n                  &#xAB;<i>completion</i>.[[value]]&#xBB;).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n            </ol>\n          </li>\n          <li>Return <i>promise</i>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The <var>executor</var> argument must be a function object. It is called for initiating\n          and reporting completion of the possibly deferred action represented by this Promise object. The executor is called with\n          two arguments: <var>resolve</var> and <var>reject</var>. These are functions that may be used by the <var>executor</var>\n          function to report eventual completion or failure of the deferred computation. Returning from the executor function does\n          not mean that the deferred action has been completed but only that the request to eventually perform the deferred action\n          has been accepted.</p>\n\n          <p>The <var>resolve</var> function that is passed to an <var>executor</var> function accepts a single argument. The\n          <var>executor</var> code may eventually call the <var>resolve</var> function to indicate that it wishes to resolve the\n          associated Promise object. The argument passed to the <var>resolve</var> function represents the eventual value of the\n          deferred action and can be either the actual fulfillment value or another Promise object which will provide the value if\n          it is fulfilled.</p>\n\n          <p>The <var>reject</var> function that is passed to an <var>executor</var> function accepts a single argument. The\n          <var>executor</var> code may eventually call the <var>reject</var> function to indicate that the associated Promise is\n          rejected and will never be fulfilled. The argument passed to the <var>reject</var> function is used as the rejection\n          value of the promise. Typically it will be an <code>Error</code> object.</p>\n\n          <p>The resolve and reject functions passed to an <var>executor</var> function by the Promise constructor have the\n          capability to actually resolve and reject the associated promise. Subclasses may have different constructor behaviour\n          that passes in customized values for resolve and reject.</p>\n        </div>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-promise-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.4\"><a href=\"/sec/sec-properties-of-the-promise-constructor.html\" title=\"link to this section\">25.4.4</a></span> Properties of the Promise Constructor</h1>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        <code>Promise</code> constructor is the intrinsic object %FunctionPrototype% (<a href=\"/sec/sec-properties-of-the-function-prototype-object.html\">19.2.3</a>).</p>\n\n        <p>Besides the <code>length</code> property (whose value is 1), the Promise constructor has the following properties:</p>\n      </div>\n\n      <section id=\"sec-promise.all\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.4.1\"><a href=\"/sec/sec-promise.all.html\" title=\"link to this section\">25.4.4.1</a></span>\n              Promise.all ( iterable )</h1>\n\n          <p class=\"normalbefore\">The <code>all</code> function returns a new promise which is fulfilled with an array of\n          fulfillment values for the passed promises, or rejects with the reason of the first passed promise that rejects. It\n          resolves all elements of the passed iterable to promises as it runs this algorithm.</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>C</i> be the <b>this</b> value.</li>\n            <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>C</i>) is not Object, throw a <b>TypeError</b>\n                exception.</li>\n            <li>Let <i>S</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>C</i>, @@species).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>S</i>).</li>\n            <li>If <i>S</i> is neither <b>undefined</b> nor <b>null</b>, let <i>C</i> be <i>S</i>.</li>\n            <li>Let <i>promiseCapability</i> be <a href=\"/sec/sec-newpromisecapability.html\">NewPromiseCapability</a>(<i>C</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>promiseCapability</i>).</li>\n            <li>Let <i>iterator</i> be <a href=\"/sec/sec-getiterator.html\">GetIterator</a>(<i>iterable</i>).</li>\n            <li><a href=\"/sec/sec-ifabruptrejectpromise.html\">IfAbruptRejectPromise</a>(<i>iterator</i>, <i>promiseCapability</i>).</li>\n            <li>Let <i>iteratorRecord</i> be Record {[[iterator]]: <i>iterator</i>, [[done]]: <b>false</b>}.</li>\n            <li>Let <i>result</i> be <a href=\"/sec/sec-performpromiseall.html\">PerformPromiseAll</a>(<i>iteratorRecord</i>, <i>C</i>,\n                <i>promiseCapability</i>).</li>\n            <li>If <i>result</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>,\n              <ol class=\"block\">\n                <li>If <i>iteratorRecord</i>.[[done]] is <b>false</b>, let <i>result</i> be <a href=\"/sec/sec-iteratorclose.html\">IteratorClose</a>(<i>iterator</i>, <i>result</i>).</li>\n                <li><a href=\"/sec/sec-ifabruptrejectpromise.html\">IfAbruptRejectPromise</a>(<i>result</i>, <i>promiseCapability</i>).</li>\n              </ol>\n            </li>\n            <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>result</i>).</li>\n          </ol>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE</span> The <code>all</code> function requires its <b>this</b> value to be a constructor\n            function that supports the parameter conventions of the <code>Promise</code> constructor.</p>\n          </div>\n        </div>\n\n        <section id=\"sec-performpromiseall\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.4.1.1\"><a href=\"/sec/sec-performpromiseall.html\" title=\"link to this section\">25.4.4.1.1</a></span> Runtime Semantics: PerformPromiseAll( iteratorRecord,\n              constructor, resultCapability)</h1>\n\n          <p class=\"normalbefore\">When the PerformPromiseAll abstract operation is called with arguments <var>iteratorRecord,\n          constructor,</var> and <var>resultCapability</var> the following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>constructor</i> is a constructor function.</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>resultCapability</i> is a PromiseCapability record.</li>\n            <li>Let <i>values</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n            <li>Let <i>remainingElementsCount</i> be a new Record { [[value]]: 1 }.</li>\n            <li>Let <i>index</i> be 0.</li>\n            <li>Repeat\n              <ol class=\"block\">\n                <li>Let <i>next</i> be <a href=\"/sec/sec-iteratorstep.html\">IteratorStep</a>(<i>iteratorRecord</i>.[[iterator]]).</li>\n                <li>If <i>next</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, set\n                    <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n                <li>If <i>next</i> is <b>false</b>,\n                  <ol class=\"block\">\n                    <li>Set <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n                    <li>Set <i>remainingElementsCount</i>.[[value]] to <i>remainingElementsCount</i>.[[value]] &#x2212; 1.</li>\n                    <li>If <i>remainingElementsCount</i>.[[value]] is 0,\n                      <ol class=\"block\">\n                        <li>Let <i>valuesArray</i> be <a href=\"/sec/sec-createarrayfromlist.html\">CreateArrayFromList</a>(<i>values</i>).</li>\n                        <li>Let <i>resolveResult</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>resultCapability</i>.[[Resolve]],\n                            <b>undefined</b>, &#xAB;<i>valuesArray</i>&#xBB;).</li>\n                        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>resolveResult</i>)</li>\n                      </ol>\n                    </li>\n                    <li>Return <i>resultCapability</i>.[[Promise]].</li>\n                  </ol>\n                </li>\n                <li>Let <i>nextValue</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>next</i>).</li>\n                <li>If <i>nextValue</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, set\n                    <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextValue</i>).</li>\n                <li>Append <b>undefined</b> to <i>values</i>.</li>\n                <li>Let <i>nextPromise</i> be <a href=\"/sec/sec-invoke.html\">Invoke</a>(<i>constructor</i>, <code>&quot;resolve&quot;</code>,\n                    &#xAB;&#x200D;<i>nextValue</i>&#xBB;).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextPromise</i> ).</li>\n                <li>Let <i>resolveElement</i> be a new built-in function object as defined in <a href=\"/sec/sec-promise.all.html\">Promise.all</a> Resolve Element Functions.</li>\n                <li>Set the [[AlreadyCalled]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                    <i>resolveElement</i> to a new Record {[[value]]: <b>false</b> }.</li>\n                <li>Set the [[Index]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                    <i>resolveElement</i> to <i>index</i>.</li>\n                <li>Set the [[Values]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                    <i>resolveElement</i> to <i>values</i>.</li>\n                <li>Set the [[Capabilities]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                    <i>resolveElement</i> to <i>resultCapability</i>.</li>\n                <li>Set the [[RemainingElements]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                    <i>resolveElement</i> to <i>remainingElementsCount</i>.</li>\n                <li>Set <i>remainingElementsCount</i>.[[value]] to <i>remainingElementsCount</i>.[[value]] + 1.</li>\n                <li>Let <i>result</i> be <a href=\"/sec/sec-invoke.html\">Invoke</a>(<i>nextPromise</i>, <code>&quot;then&quot;</code>,\n                    &#xAB;&#x200D;<i>resolveElement</i>, <i>resultCapability</i>.[[Reject]]&#xBB;).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>result</i>).</li>\n                <li>Set <i>index</i> to <i>index</i> + 1.</li>\n              </ol>\n            </li>\n          </ol>\n        </section>\n\n        <section id=\"sec-promise.all-resolve-element-functions\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.4.1.2\"><a href=\"/sec/sec-promise.all-resolve-element-functions.html\" title=\"link to this section\">25.4.4.1.2</a></span> Promise.all Resolve Element Functions</h1>\n\n          <p>A <a href=\"/sec/sec-promise.all.html\">Promise.all</a> resolve element function is an anonymous built-in function that is used\n          to resolve a specific <a href=\"/sec/sec-promise.all.html\">Promise.all</a> element. Each <a href=\"/sec/sec-promise.all.html\">Promise.all</a> resolve element function has [[Index]], [[Values]], [[Capabilities]],\n          [[RemainingElements]], and [[AlreadyCalled]] internal slots.</p>\n\n          <p class=\"normalbefore\">When a <a href=\"/sec/sec-promise.all.html\">Promise.all</a> resolve element function <var>F</var> is\n          called with argument <var>x</var>, the following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>alreadyCalled</i> be the value of <i>F</i>&apos;s [[AlreadyCalled]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>If <i>alreadyCalled</i>.[[value]] is <b>true</b>, return <b>undefined</b>.</li>\n            <li>Set <i>alreadyCalled</i>.[[value]] to <b>true</b>.</li>\n            <li>Let <i>index</i> be the value of <i>F</i>&apos;s [[Index]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>Let <i>values</i> be the value of <i>F</i>&apos;s [[Values]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>Let <i>promiseCapability</i> be the value of <i>F</i>&apos;s [[Capabilities]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>Let <i>remainingElementsCount</i> be the value of <i>F</i>&apos;s [[RemainingElements]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>Set <i>values</i>[<i>index</i>] to <i>x</i>.</li>\n            <li>Set <i>remainingElementsCount</i>.[[value]] to <i>remainingElementsCount</i>.[[value]] - 1.</li>\n            <li>If <i>remainingElementsCount</i>.[[value]] is 0,\n              <ol class=\"block\">\n                <li>Let <i>valuesArray</i> be <a href=\"/sec/sec-createarrayfromlist.html\">CreateArrayFromList</a>(<i>values</i>).</li>\n                <li>Return <a href=\"/sec/sec-call.html\">Call</a>(<i>promiseCapability</i>.[[Resolve]], <b>undefined</b>,\n                    &#xAB;<i>valuesArray</i>&#xBB;).</li>\n              </ol>\n            </li>\n            <li>Return <b>undefined</b>.</li>\n          </ol>\n\n          <p>The <code>length</code> property of a <a href=\"/sec/sec-promise.all.html\">Promise.all</a> resolve element function is\n          <b>1</b>.</p>\n        </section>\n      </section>\n\n      <section id=\"sec-promise.prototype\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.4.2\"><a href=\"/sec/sec-promise.prototype.html\" title=\"link to this section\">25.4.4.2</a></span> Promise.prototype</h1>\n\n        <p>The initial value of <code>Promise.prototype</code> is the intrinsic object %PromisePrototype% (<a href=\"/sec/sec-properties-of-the-promise-prototype-object.html\">25.4.5</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-promise.race\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.4.3\"><a href=\"/sec/sec-promise.race.html\" title=\"link to this section\">25.4.4.3</a></span>\n              Promise.race ( iterable )</h1>\n\n          <p class=\"normalbefore\">The <code>race</code> function returns a new promise which is settled in the same way as the\n          first passed promise to settle. It resolves all elements of the passed <span style=\"font-family: Times New\n          Roman\">iterable</span> to promises as it runs this algorithm.</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>C</i> be the <b>this</b> value.</li>\n            <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>C</i>) is not Object, throw a <b>TypeError</b>\n                exception.</li>\n            <li>Let <i>S</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>C</i>, @@species).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>S</i>).</li>\n            <li>If <i>S</i> is neither <b>undefined</b> nor <b>null</b>, let <i>C</i> be <i>S</i>.</li>\n            <li>Let <i>promiseCapability</i> be <a href=\"/sec/sec-newpromisecapability.html\">NewPromiseCapability</a>(<i>C</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>promiseCapability</i>).</li>\n            <li>Let <i>iterator</i> be <a href=\"/sec/sec-getiterator.html\">GetIterator</a>(<i>iterable</i>).</li>\n            <li><a href=\"/sec/sec-ifabruptrejectpromise.html\">IfAbruptRejectPromise</a>(<i>iterator</i>, <i>promiseCapability</i>).</li>\n            <li>Let <i>iteratorRecord</i> be Record {[[iterator]]: <i>iterator</i>, [[done]]: <b>false</b>}.</li>\n            <li>Let <i>result</i> be <a href=\"/sec/sec-performpromiserace.html\">PerformPromiseRace</a>(<i>iteratorRecord</i>,\n                <i>promiseCapability</i>, <i>C</i>).</li>\n            <li>If <i>result</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n              <ol class=\"block\">\n                <li>If <i>iteratorRecord</i>.[[done]] is <b>false</b>, let <i>result</i> be <a href=\"/sec/sec-iteratorclose.html\">IteratorClose</a>(<i>iterator,result</i>).</li>\n                <li><a href=\"/sec/sec-ifabruptrejectpromise.html\">IfAbruptRejectPromise</a>(<i>result</i>, <i>promiseCapability</i>).</li>\n              </ol>\n            </li>\n            <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>result</i>).</li>\n          </ol>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 1</span> If the <var>iterable</var> argument is empty or if none of the promises in\n            <var>iterable</var> ever settle then the pending promise returned by this method will never be settled</p>\n          </div>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 2</span> The <code>race</code> function expects its <b>this</b> value to be a constructor\n            function that supports the parameter conventions of the <code>Promise</code> constructor. It also expects that its\n            <b>this</b> value provides a <code>resolve</code> method.</p>\n          </div>\n        </div>\n\n        <section id=\"sec-performpromiserace\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.4.3.1\"><a href=\"/sec/sec-performpromiserace.html\" title=\"link to this section\">25.4.4.3.1</a></span> Runtime Semantics:  PerformPromiseRace ( iteratorRecord,\n              promiseCapability, C )</h1>\n\n          <p class=\"normalbefore\">When the PerformPromiseRace abstract operation is called with arguments <var>iteratorRecord,\n          promiseCapability,</var> and <var>C</var> the following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li>Repeat\n              <ol class=\"block\">\n                <li>Let <i>next</i> be <a href=\"/sec/sec-iteratorstep.html\">IteratorStep</a>(<i>iteratorRecord</i>.[[iterator]]).</li>\n                <li>If <i>next</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, set\n                    <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n                <li>If <i>next</i> is <b>false</b>, then\n                  <ol class=\"block\">\n                    <li>Set <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n                    <li>Return <i>promiseCapability</i>.[[Promise]].</li>\n                  </ol>\n                </li>\n                <li>Let <i>nextValue</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>next</i>).</li>\n                <li>If <i>nextValue</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, set\n                    <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextValue</i>).</li>\n                <li>Let <i>nextPromise</i> be <a href=\"/sec/sec-invoke.html\">Invoke</a>(<i>C</i>, <code>&quot;resolve&quot;</code>,\n                    &#xAB;&#x200D;<i>nextValue</i>&#xBB;).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextPromise</i>).</li>\n                <li>Let <i>result</i> be <a href=\"/sec/sec-invoke.html\">Invoke</a>(<i>nextPromise</i>, <code>&quot;then&quot;</code>,\n                    &#xAB;&#x200D;<i>promiseCapability</i>.[[Resolve]], <i>promiseCapability</i>.[[Reject]]&#xBB;).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>result</i>).</li>\n              </ol>\n            </li>\n          </ol>\n        </section>\n      </section>\n\n      <section id=\"sec-promise.reject\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.4.4\"><a href=\"/sec/sec-promise.reject.html\" title=\"link to this section\">25.4.4.4</a></span>\n            Promise.reject ( r )</h1>\n\n        <p class=\"normalbefore\">The <code>reject</code> function returns a new promise rejected with the passed argument.</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>C</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>C</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>Let <i>promiseCapability</i> be <a href=\"/sec/sec-newpromisecapability.html\">NewPromiseCapability</a>(<i>C</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>promiseCapability</i>).</li>\n          <li>Let <i>rejectResult</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>promiseCapability</i>.[[Reject]], <b>undefined</b>,\n              &#xAB;<i>r</i>&#xBB;).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>rejectResult</i>).</li>\n          <li>Return <i>promiseCapability</i>.[[Promise]].</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The <code>reject</code> function expects its <b>this</b> value to be a constructor\n          function that supports the parameter conventions of the <code>Promise</code> constructor.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-promise.resolve\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.4.5\"><a href=\"/sec/sec-promise.resolve.html\" title=\"link to this section\">25.4.4.5</a></span>\n            Promise.resolve ( x )</h1>\n\n        <p class=\"normalbefore\">The <code>resolve</code> function returns either a new promise resolved with the passed argument,\n        or the argument itself if the argument is a promise produced by this constructor.</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>C</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>C</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <a href=\"/sec/sec-ispromise.html\">IsPromise</a>(<i>x</i>) is <b>true</b>,\n            <ol class=\"block\">\n              <li>Let <i>xConstructor</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>x</i>, <code>&quot;constructor&quot;</code>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>xConstructor</i>).</li>\n              <li>If <a href=\"/sec/sec-samevalue.html\">SameValue</a>(<i>xConstructor</i>, <i>C</i>) is <b>true</b>, return <i>x</i>.</li>\n            </ol>\n          </li>\n          <li>Let <i>promiseCapability</i> be <a href=\"/sec/sec-newpromisecapability.html\">NewPromiseCapability</a>(<i>C</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>promiseCapability</i>).</li>\n          <li>Let <i>resolveResult</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>promiseCapability</i>.[[Resolve]], <b>undefined</b>,\n              &#xAB;<i>x</i>&#xBB;).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>resolveResult</i>).</li>\n          <li>Return <i>promiseCapability</i>.[[Promise]].</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span>  The <code>resolve</code> function expects its <b>this</b> value to be a constructor\n          function that supports the parameter conventions of the <code>Promise</code> constructor.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-get-promise-@@species\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.4.6\"><a href=\"/sec/sec-get-promise-@@species.html\" title=\"link to this section\">25.4.4.6</a></span> get Promise [ @@species ]</h1>\n\n        <p class=\"normalbefore\"><code>Promise[@@species]</code> is an accessor property whose set accessor function is <span class=\"value\">undefined</span>. Its get accessor function performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Return the <b>this</b> value.</li>\n        </ol>\n\n        <p>The value of the <code>name</code> property of this function is <code>&quot;get [Symbol.species]&quot;</code>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> Promise prototype methods normally use their <code>this</code> object&#x2019;s\n          constructor to create a derived object. However, a subclass constructor may over-ride that default behaviour by\n          redefining its @@species property.</p>\n        </div>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-promise-prototype-object\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.5\"><a href=\"/sec/sec-properties-of-the-promise-prototype-object.html\" title=\"link to this section\">25.4.5</a></span> Properties of the Promise Prototype Object</h1>\n\n        <p>The Promise prototype object is the intrinsic object %PromisePrototype%. The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the Promise prototype object is the intrinsic\n        object %ObjectPrototype% (<a href=\"/sec/sec-properties-of-the-object-prototype-object.html\">19.1.3</a>). The Promise prototype\n        object is an ordinary object. It does not have a [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> or any of the other internal slots of Promise\n        instances.</p>\n      </div>\n\n      <section id=\"sec-promise.prototype.catch\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.5.1\"><a href=\"/sec/sec-promise.prototype.catch.html\" title=\"link to this section\">25.4.5.1</a></span> Promise.prototype.catch ( onRejected )</h1>\n\n        <p class=\"normalbefore\">When the <code>catch</code> method is called with argument <var>onRejected</var> the following\n        steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>promise</i> be the <b>this</b> value.</li>\n          <li>Return <a href=\"/sec/sec-invoke.html\">Invoke</a>(<i>promise</i>, <code>&quot;then&quot;</code>, &#xAB;&#x200D;<b>undefined</b>,\n              <i>onRejected</i>&#xBB;).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-promise.prototype.constructor\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.5.2\"><a href=\"/sec/sec-promise.prototype.constructor.html\" title=\"link to this section\">25.4.5.2</a></span> Promise.prototype.constructor</h1>\n\n        <p>The initial value of <code>Promise.prototype.constructor</code> is the intrinsic object %Promise%.</p>\n      </section>\n\n      <section id=\"sec-promise.prototype.then\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.5.3\"><a href=\"/sec/sec-promise.prototype.then.html\" title=\"link to this section\">25.4.5.3</a></span> Promise.prototype.then ( onFulfilled , onRejected )</h1>\n\n          <p class=\"normalbefore\">When the <code>then</code> method is called with arguments <var>onFulfilled</var> and\n          <var>onRejected</var> the following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>promise</i> be the <b>this</b> value.</li>\n            <li>If <a href=\"/sec/sec-ispromise.html\">IsPromise</a>(<i>promise</i>) is <b>false</b>, throw a <b>TypeError</b>\n                exception.</li>\n            <li>Let <i>C</i> be <a href=\"/sec/sec-speciesconstructor.html\">SpeciesConstructor</a>(<i>promise</i>, %Promise%).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>C</i>).</li>\n            <li>Let <i>resultCapability</i> be <a href=\"/sec/sec-newpromisecapability.html\">NewPromiseCapability</a>(<i>C</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>resultCapability</i>).</li>\n            <li>Return <a href=\"/sec/sec-performpromisethen.html\">PerformPromiseThen</a>(<i>promise</i>, <i>onFulfilled</i>,\n                <i>onRejected</i>, <i>resultCapability</i>).</li>\n          </ol>\n        </div>\n\n        <section id=\"sec-performpromisethen\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.5.3.1\"><a href=\"/sec/sec-performpromisethen.html\" title=\"link to this section\">25.4.5.3.1</a></span> PerformPromiseThen ( promise, onFulfilled, onRejected,\n              resultCapability )</h1>\n\n          <p class=\"normalbefore\">The abstract operation PerformPromiseThen performs the &#x201C;then&#x201D; operation on\n          <var>promise</var> using <var>onFulfilled</var> and <var>onRejected</var> as its settlement actions. The result is\n          <var>resultCapability</var>&#x2019;s promise.</p>\n\n          <ol class=\"proc\">\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ispromise.html\">IsPromise</a>(<i>promise</i>) is\n                <b>true</b>.</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>resultCapability</i> is a PromiseCapability record.</li>\n            <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>onFulfilled</i>) is <b>false</b>, then\n              <ol class=\"block\">\n                <li>Let <i>onFulfilled</i> be <code>&quot;Identity&quot;</code>.</li>\n              </ol>\n            </li>\n            <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>onRejected</i>) is <b>false</b>, then\n              <ol class=\"block\">\n                <li>Let <i>onRejected</i> be <code>&quot;Thrower&quot;</code>.</li>\n              </ol>\n            </li>\n            <li>Let <i>fulfillReaction</i> be the PromiseReaction { [[Capabilities]]: <i>resultCapability</i>, [[Handler]]:\n                <i>onFulfilled</i> }.</li>\n            <li>Let <i>rejectReaction</i> be the PromiseReaction { [[Capabilities]]: <i>resultCapability</i>, [[Handler]]:\n                <i>onRejected</i>}.</li>\n            <li>If the value of <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is <code>&quot;pending&quot;</code>,\n              <ol class=\"block\">\n                <li>Append <i>fulfillReaction</i> as the last element of the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> that is the value of <i>promise</i>&apos;s\n                    [[PromiseFulfillReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n                <li>Append <i>rejectReaction</i> as the last element of the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> that is the value of <i>promise</i>&apos;s\n                    [[PromiseRejectReactions]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n              </ol>\n            </li>\n            <li>Else if the value of <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is <code>&quot;fulfilled&quot;</code>,\n              <ol class=\"block\">\n                <li>Let <i>value</i> be the value of <i>promise</i>&apos;s [[PromiseResult]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n                <li>Perform <a href=\"/sec/sec-enqueuejob.html\">EnqueueJob</a>(<code>&quot;PromiseJobs&quot;</code>, <a href=\"/sec/sec-promisereactionjob.html\">PromiseReactionJob</a>, &#xAB;&#x200D;<i>fulfillReaction</i>,\n                    <i>value</i>&#xBB;).</li>\n              </ol>\n            </li>\n            <li>Else if the value of <i>promise</i>&apos;s [[PromiseState]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is <code>&quot;rejected&quot;</code>,\n              <ol class=\"block\">\n                <li>Let <i>reason</i> be the value of <i>promise</i>&apos;s [[PromiseResult]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n                <li>Perform <a href=\"/sec/sec-enqueuejob.html\">EnqueueJob</a>(<code>&quot;PromiseJobs&quot;</code>, <a href=\"/sec/sec-promisereactionjob.html\">PromiseReactionJob</a>, &#xAB;&#x200D;<i>rejectReaction</i>,\n                    <i>reason</i>&#xBB;).</li>\n              </ol>\n            </li>\n            <li>Return <i>resultCapability</i>.[[Promise]].</li>\n          </ol>\n        </section>\n      </section>\n\n      <section id=\"sec-promise.prototype-@@tostringtag\">\n        <h1><span class=\"secnum\" id=\"sec-25.4.5.4\"><a href=\"/sec/sec-promise.prototype-@@tostringtag.html\" title=\"link to this section\">25.4.5.4</a></span> Promise.prototype [ @@toStringTag ]</h1>\n\n        <p>The initial value of the @@toStringTag property is the String value <code>&quot;Promise&quot;</code>.</p>\n\n        <p>This property has the attributes { [[Writable]]: <span class=\"value\">false</span>, [[Enumerable]]: <span class=\"value\">false</span>, [[Configurable]]: <span class=\"value\">true</span> }.</p>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-promise-instances\">\n      <h1><span class=\"secnum\" id=\"sec-25.4.6\"><a href=\"/sec/sec-properties-of-promise-instances.html\" title=\"link to this section\">25.4.6</a></span> Properties of Promise Instances</h1>\n\n      <p>Promise instances are ordinary objects that inherit properties from the Promise prototype object (the intrinsic,\n      %PromisePrototype%). Promise instances are initially created with the internal slots described in <a href=\"/sec/table-59.html\">Table\n      59</a>.</p>\n\n      <figure>\n        <figcaption><span id=\"table-59\">Table 59</span> &#x2014; Internal Slots of Promise Instances</figcaption>\n        <table class=\"real-table\">\n          <tr>\n            <th>Internal Slot</th>\n            <th>Description</th>\n          </tr>\n          <tr>\n            <td>[[PromiseState]]</td>\n            <td>A String value that governs how a promise will react to incoming calls to its <code>then</code> method. The possible values are: <code>&quot;pending&quot;</code><span style=\"font-family: Times New Roman\">,</span> <code>&quot;fulfilled&quot;</code>, and <code>&quot;rejected&quot;</code><span style=\"font-family: Times New Roman\">.</span></td>\n          </tr>\n          <tr>\n            <td>[[PromiseResult]]</td>\n            <td>The value with which the promise has been fulfilled or rejected, if any. Only meaningful if <span style=\"font-family: Times New Roman\">[[PromiseState]]</span> is not <code>&quot;pending&quot;</code>.</td>\n          </tr>\n          <tr>\n            <td>[[PromiseFulfillReactions]]</td>\n            <td>A <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> of PromiseReaction records to be processed when/if the promise transitions from the <code>&quot;pending&quot;</code> state to the <code>&quot;fulfilled&quot;</code> state.</td>\n          </tr>\n          <tr>\n            <td>[[PromiseRejectReactions]]</td>\n            <td>A <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> of PromiseReaction records to be processed when/if the promise transitions from the <code>&quot;pending&quot;</code> state to the <code>&quot;rejected&quot;</code> state.</td>\n          </tr>\n        </table>\n      </figure>\n    </section>\n  "}