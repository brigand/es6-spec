{"id":"sec-promise.race","html":"\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.4.3\"><a href=\"/sec/sec-promise.race.html\" title=\"link to this section\">25.4.4.3</a></span>\n              Promise.race ( iterable )</h1>\n\n          <p class=\"normalbefore\">The <code>race</code> function returns a new promise which is settled in the same way as the\n          first passed promise to settle. It resolves all elements of the passed <span style=\"font-family: Times New\n          Roman\">iterable</span> to promises as it runs this algorithm.</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>C</i> be the <b>this</b> value.</li>\n            <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>C</i>) is not Object, throw a <b>TypeError</b>\n                exception.</li>\n            <li>Let <i>S</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>C</i>, @@species).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>S</i>).</li>\n            <li>If <i>S</i> is neither <b>undefined</b> nor <b>null</b>, let <i>C</i> be <i>S</i>.</li>\n            <li>Let <i>promiseCapability</i> be <a href=\"/sec/sec-newpromisecapability.html\">NewPromiseCapability</a>(<i>C</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>promiseCapability</i>).</li>\n            <li>Let <i>iterator</i> be <a href=\"/sec/sec-getiterator.html\">GetIterator</a>(<i>iterable</i>).</li>\n            <li><a href=\"/sec/sec-ifabruptrejectpromise.html\">IfAbruptRejectPromise</a>(<i>iterator</i>, <i>promiseCapability</i>).</li>\n            <li>Let <i>iteratorRecord</i> be Record {[[iterator]]: <i>iterator</i>, [[done]]: <b>false</b>}.</li>\n            <li>Let <i>result</i> be <a href=\"/sec/sec-performpromiserace.html\">PerformPromiseRace</a>(<i>iteratorRecord</i>,\n                <i>promiseCapability</i>, <i>C</i>).</li>\n            <li>If <i>result</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n              <ol class=\"block\">\n                <li>If <i>iteratorRecord</i>.[[done]] is <b>false</b>, let <i>result</i> be <a href=\"/sec/sec-iteratorclose.html\">IteratorClose</a>(<i>iterator,result</i>).</li>\n                <li><a href=\"/sec/sec-ifabruptrejectpromise.html\">IfAbruptRejectPromise</a>(<i>result</i>, <i>promiseCapability</i>).</li>\n              </ol>\n            </li>\n            <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>result</i>).</li>\n          </ol>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 1</span> If the <var>iterable</var> argument is empty or if none of the promises in\n            <var>iterable</var> ever settle then the pending promise returned by this method will never be settled</p>\n          </div>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 2</span> The <code>race</code> function expects its <b>this</b> value to be a constructor\n            function that supports the parameter conventions of the <code>Promise</code> constructor. It also expects that its\n            <b>this</b> value provides a <code>resolve</code> method.</p>\n          </div>\n        </div>\n\n        <section id=\"sec-performpromiserace\">\n          <h1><span class=\"secnum\" id=\"sec-25.4.4.3.1\"><a href=\"/sec/sec-performpromiserace.html\" title=\"link to this section\">25.4.4.3.1</a></span> Runtime Semantics:  PerformPromiseRace ( iteratorRecord,\n              promiseCapability, C )</h1>\n\n          <p class=\"normalbefore\">When the PerformPromiseRace abstract operation is called with arguments <var>iteratorRecord,\n          promiseCapability,</var> and <var>C</var> the following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li>Repeat\n              <ol class=\"block\">\n                <li>Let <i>next</i> be <a href=\"/sec/sec-iteratorstep.html\">IteratorStep</a>(<i>iteratorRecord</i>.[[iterator]]).</li>\n                <li>If <i>next</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, set\n                    <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n                <li>If <i>next</i> is <b>false</b>, then\n                  <ol class=\"block\">\n                    <li>Set <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n                    <li>Return <i>promiseCapability</i>.[[Promise]].</li>\n                  </ol>\n                </li>\n                <li>Let <i>nextValue</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>next</i>).</li>\n                <li>If <i>nextValue</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, set\n                    <i>iteratorRecord</i>.[[done]] to <b>true</b>.</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextValue</i>).</li>\n                <li>Let <i>nextPromise</i> be <a href=\"/sec/sec-invoke.html\">Invoke</a>(<i>C</i>, <code>&quot;resolve&quot;</code>,\n                    &#xAB;&#x200D;<i>nextValue</i>&#xBB;).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextPromise</i>).</li>\n                <li>Let <i>result</i> be <a href=\"/sec/sec-invoke.html\">Invoke</a>(<i>nextPromise</i>, <code>&quot;then&quot;</code>,\n                    &#xAB;&#x200D;<i>promiseCapability</i>.[[Resolve]], <i>promiseCapability</i>.[[Reject]]&#xBB;).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>result</i>).</li>\n              </ol>\n            </li>\n          </ol>\n        </section>\n      "}