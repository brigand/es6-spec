{"id":"sec-properties-of-the-%typedarray%-intrinsic-object","html":"\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-22.2.2\"><a href=\"/sec/sec-properties-of-the-%typedarray%-intrinsic-object.html\" title=\"link to this section\">22.2.2</a></span> Properties of the %TypedArray% Intrinsic Object</h1>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n        %TypedArray% is the intrinsic object %FunctionPrototype% (<a href=\"/sec/sec-properties-of-the-function-prototype-object.html\">19.2.3</a>).</p>\n\n        <p>Besides a <code>length</code> property whose value is 3 and a <code>name</code> property whose value is\n        <code>&quot;TypedArray&quot;</code>, %TypedArray% has the following properties:</p>\n      </div>\n\n      <section id=\"sec-%typedarray%.from\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-22.2.2.1\"><a href=\"/sec/sec-%typedarray%.from.html\" title=\"link to this section\">22.2.2.1</a></span> %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )</h1>\n\n          <p class=\"normalbefore\">When the <code>from</code> method is called with  argument <var>source</var>, and optional\n          arguments <i>mapfn</i> and <i>thisArg</i>, the following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>C</i> be the <b>this</b> value.</li>\n            <li>If <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a>(<i>C</i>) is <b>false</b>, throw a <b>TypeError</b>\n                exception.</li>\n            <li>If <i>mapfn</i> was supplied, let <i>f</i> be <i>mapfn</i>; otherwise let <i>f</i> be <b>undefined</b>.</li>\n            <li>If <i>f</i> is not <b>undefined</b>, then\n              <ol class=\"block\">\n                <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>f</i>) is <b>false</b>, throw a <b>TypeError</b>\n                    exception.</li>\n              </ol>\n            </li>\n            <li>If <i>thisArg</i> was supplied, let <i>t</i> be <i>thisArg</i>; else let <i>t</i> be <b>undefined</b>.</li>\n            <li>Return <a href=\"/sec/sec-typedarrayfrom.html\">TypedArrayFrom</a>(<i>C</i>, <i>source</i>, <i>f</i>, <i>t</i>).</li>\n          </ol>\n\n          <p>The <code>length</code> property of the <code>from</code> method is <b>1</b>.</p>\n        </div>\n\n        <section id=\"sec-typedarrayfrom\">\n          <h1><span class=\"secnum\" id=\"sec-22.2.2.1.1\"><a href=\"/sec/sec-typedarrayfrom.html\" title=\"link to this section\">22.2.2.1.1</a></span> Runtime Semantics: TypedArrayFrom( constructor, items, mapfn,\n              thisArg )</h1>\n\n          <p class=\"normalbefore\">When the TypedArrayFrom abstract operation is called with arguments <span style=\"font-family:\n          Times New Roman\"><i>constructor</i>, <i>items</i></span>, <var>mapfn</var>, and <var>thisArg</var>, the following steps\n          are taken:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>C</i> be <i>constructor</i>.</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a>(<i>C</i>) is\n                <b>true</b>.</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>mapfn</i> is either a callable Object or\n                <b>undefined</b>.</li>\n            <li>If <i>mapfn</i> is <b>undefined</b>, let <i>mapping</i> be <b>false.</b></li>\n            <li>Else\n              <ol class=\"block\">\n                <li>Let <i>T</i> be <i>thisArg</i>.</li>\n                <li>Let <i>mapping</i> be <b>true</b></li>\n              </ol>\n            </li>\n            <li>Let <i>usingIterator</i> be <a href=\"/sec/sec-getmethod.html\">GetMethod</a>(<i>items</i>, @@iterator).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>usingIterator</i>).</li>\n            <li>If <i>usingIterator</i> is not <b>undefined</b>, then\n              <ol class=\"block\">\n                <li>Let <i>iterator</i> be <a href=\"/sec/sec-getiterator.html\">GetIterator</a>(<i>items</i>, <i>usingIterator</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>iterator</i>).</li>\n                <li>Let <i>values</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n                <li>Let <i>next</i> be <b>true</b>.</li>\n                <li>Repeat, while <i>next</i> is not <b>false</b>\n                  <ol class=\"block\">\n                    <li>Let <i>next</i> be <a href=\"/sec/sec-iteratorstep.html\">IteratorStep</a>(<i>iterator</i>).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n                    <li>If <i>next</i> is not <b>false</b>, then\n                      <ol class=\"block\">\n                        <li>Let <i>nextValue</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>next</i>).</li>\n                        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextValue</i>).</li>\n                        <li>Append <i>nextValue</i> to the end of the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>\n                            <i>values</i>.</li>\n                      </ol>\n                    </li>\n                  </ol>\n                </li>\n                <li>Let <i>len</i> be the number of elements in <i>values</i>.</li>\n                <li>Let <i>targetObj</i> be <a href=\"/sec/sec-allocatetypedarray.html\">AllocateTypedArray</a>(<i>C</i>, <i>len</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>targetObj</i>).</li>\n                <li>Let <i>k</i> be 0.</li>\n                <li>Repeat, while <i>k</i> &lt; <i>len</i>\n                  <ol class=\"block\">\n                    <li>Let <i>Pk</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>k</i>).</li>\n                    <li>Let <i>kValue</i> be the first element of <i>values</i> and remove that element from <i>values</i>.</li>\n                    <li>If <i>mapping</i> is <b>true</b>, then\n                      <ol class=\"block\">\n                        <li>Let <i>mappedValue</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>mapfn</i>, <i>T</i>, &#xAB;<i>kValue</i>,\n                            <i>k</i>&#xBB;).</li>\n                        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>mappedValue</i>).</li>\n                      </ol>\n                    </li>\n                    <li>Else, let <i>mappedValue</i> be <i>kValue</i>.</li>\n                    <li>Let <i>setStatus</i> be <a href=\"/sec/sec-set-o-p-v-throw.html\">Set</a>(<i>targetObj</i>, <i>Pk</i>,\n                        <i>mappedValue</i>, <b>true</b>).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>setStatus</i>).</li>\n                    <li>Increase <i>k</i> by 1.</li>\n                  </ol>\n                </li>\n                <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>values</i> is now an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n                <li>Return <i>targetObj</i>.</li>\n              </ol>\n            </li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>items</i> is not an Iterable so assume it is an array-like\n                object.</li>\n            <li>Let <i>arrayLike</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<i>items</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>arrayLike</i>).</li>\n            <li>Let <i>len</i> be <a href=\"/sec/sec-tolength.html\">ToLength</a>(<a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>arrayLike</i>,\n                <code>&quot;length&quot;</code>)).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>len</i>).</li>\n            <li>Let <i>targetObj</i> be <a href=\"/sec/sec-allocatetypedarray.html\">AllocateTypedArray</a>(<i>C</i>, <i>len</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>targetObj</i>).</li>\n            <li>Let <i>k</i> be 0.</li>\n            <li>Repeat, while <i>k</i> &lt; <i>len</i>\n              <ol class=\"block\">\n                <li>Let <i>Pk</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>k</i>).</li>\n                <li>Let <i>kValue</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>arrayLike</i>, <i>Pk</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>kValue</i>).</li>\n                <li>If <i>mapping</i> is <b>true</b>, then\n                  <ol class=\"block\">\n                    <li>Let <i>mappedValue</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>mapfn</i>, <i>T</i>, &#xAB;<i>kValue</i>,\n                        <i>k</i>&#xBB;).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>mappedValue</i>).</li>\n                  </ol>\n                </li>\n                <li>Else, let <i>mappedValue</i> be <i>kValue</i>.</li>\n                <li>Let <i>setStatus</i> be <a href=\"/sec/sec-set-o-p-v-throw.html\">Set</a>(<i>targetObj</i>, <i>Pk</i>,\n                    <i>mappedValue</i>, <b>true</b>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>setStatus</i>).</li>\n                <li>Increase <i>k</i> by 1.</li>\n              </ol>\n            </li>\n            <li>Return <i>targetObj</i>.</li>\n          </ol>\n        </section>\n      </section>\n\n      <section id=\"sec-%typedarray%.of\">\n        <h1><span class=\"secnum\" id=\"sec-22.2.2.2\"><a href=\"/sec/sec-%typedarray%.of.html\" title=\"link to this section\">22.2.2.2</a></span>\n            %TypedArray%.of ( ...items )</h1>\n\n        <p class=\"normalbefore\">When the <code>of</code> method is called with any number of arguments, the following steps are\n        taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>len</i> be the actual number of arguments passed to this function.</li>\n          <li>Let <i>items</i> be the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> of arguments passed to this\n              function.</li>\n          <li>Let <i>C</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a>(<i>C</i>) is <b>false</b>, throw a <b>TypeError</b>\n              exception.</li>\n          <li>Let <i>newObj</i> be <a href=\"/sec/sec-allocatetypedarray.html\">AllocateTypedArray</a>(<i>C</i>, <i>len</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>newObj</i>).</li>\n          <li>Let <i>k</i> be 0.</li>\n          <li>Repeat, while <i>k</i> &lt; <i>len</i>\n            <ol class=\"block\">\n              <li>Let <i>kValue</i> be <i>items</i>[<i>k</i>].</li>\n              <li>Let <i>Pk</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>k</i>).</li>\n              <li>Let <i>status</i> be <a href=\"/sec/sec-set-o-p-v-throw.html\">Set</a>(<i>newObj</i>, <i>Pk</i>, <i>kValue</i>,\n                  <b>true</b>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>status</i>).</li>\n              <li>Increase <i>k</i> by 1.</li>\n            </ol>\n          </li>\n          <li>Return <i>newObj</i>.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>of</code> method is <b>0</b>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The <var>items</var> argument is assumed to be a well-formed rest argument value.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-%typedarray%.prototype\">\n        <h1><span class=\"secnum\" id=\"sec-22.2.2.3\"><a href=\"/sec/sec-%typedarray%.prototype.html\" title=\"link to this section\">22.2.2.3</a></span> %TypedArray%.prototype</h1>\n\n        <p>The initial value of %TypedArray%.prototype is the %TypedArrayPrototype% intrinsic object (<a href=\"/sec/sec-properties-of-the-%typedarrayprototype%-object.html\">22.2.3</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <span class=\"value\">false</span>, [[Enumerable]]: <span class=\"value\">false</span>, [[Configurable]]: <span class=\"value\">false</span> }.</p>\n      </section>\n\n      <section id=\"sec-get-%typedarray%-@@species\">\n        <h1><span class=\"secnum\" id=\"sec-22.2.2.4\"><a href=\"/sec/sec-get-%typedarray%-@@species.html\" title=\"link to this section\">22.2.2.4</a></span> get %TypedArray% [ @@species ]</h1>\n\n        <p class=\"normalbefore\">%TypedArray%[@@species] is an accessor property whose set accessor function is <span class=\"value\">undefined</span>. Its get accessor function performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Return the <b>this</b> value.</li>\n        </ol>\n\n        <p>The value of the <code>name</code> property of this function is <code>&quot;get [Symbol.species]&quot;</code>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> %TypedArrayPrototype% methods normally use their <code>this</code> object&#x2019;s\n          constructor to create a derived object. However, a subclass constructor may over-ride that default behaviour by\n          redefining its @@species property.</p>\n        </div>\n      </section>\n    "}