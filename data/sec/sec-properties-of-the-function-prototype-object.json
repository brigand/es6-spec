{"id":"sec-properties-of-the-function-prototype-object","html":"\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.3\"><a href=\"/sec/sec-properties-of-the-function-prototype-object.html\" title=\"link to this section\">19.2.3</a></span> Properties of the Function Prototype Object</h1>\n\n        <p>The Function prototype object is the intrinsic object %FunctionPrototype%. The Function prototype object is itself a\n        built-in function object. When invoked, it accepts any arguments and returns <span class=\"value\">undefined</span>. It does\n        not have a [[Construct]] internal method so it is not a constructor.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The Function prototype object is specified to be a function object to ensure\n          compatibility with ECMAScript code that was created prior to the ECMAScript 2015 specification.</p>\n        </div>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        Function prototype object is the intrinsic object %ObjectPrototype% (<a href=\"/sec/sec-properties-of-the-object-prototype-object.html\">19.1.3</a>). The initial value of the [[Extensible]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the Function prototype object is <span class=\"value\">true</span>.</p>\n\n        <p>The Function prototype object does not have a <code>prototype</code> property.</p>\n\n        <p>The value of the <code>length</code> property of the Function prototype object is <b>0</b>.</p>\n\n        <p>The value of the <code>name</code> property of the Function prototype object is the empty String.</p>\n      </div>\n\n      <section id=\"sec-function.prototype.apply\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.3.1\"><a href=\"/sec/sec-function.prototype.apply.html\" title=\"link to this section\">19.2.3.1</a></span> Function.prototype.apply ( thisArg, argArray )</h1>\n\n        <p class=\"normalbefore\">When the <code>apply</code> method is called on an object <var>func</var> with arguments\n        <var>thisArg</var> and <var>argArray</var>, the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>func</i>) is <b>false</b>, throw a <b>TypeError</b> exception.</li>\n          <li>If <i>argArray</i> is <b>null</b> or <b>undefined</b>, then\n            <ol class=\"block\">\n              <li>Return <a href=\"/sec/sec-call.html\">Call</a>(<i>func</i>, <i>thisArg</i>).</li>\n            </ol>\n          </li>\n          <li>Let <i>argList</i> be <a href=\"/sec/sec-createlistfromarraylike.html\">CreateListFromArrayLike</a>(<i>argArray</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>argList</i> ).</li>\n          <li>Perform <a href=\"/sec/sec-preparefortailcall.html\">PrepareForTailCall</a>().</li>\n          <li>Return <a href=\"/sec/sec-call.html\">Call</a>(<i>func</i>, <i>thisArg</i>, <i>argList</i>).</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>apply</code> method is <b>2</b>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> The thisArg value is passed without modification as the <b>this</b> value. This is a\n          change from Edition 3, where an <b>undefined</b> or <b>null</b> thisArg is replaced with the global object and <a href=\"/sec/sec-toobject.html\">ToObject</a> is applied to all other values and that result is passed as the <b>this</b> value.\n          Even though the thisArg is passed without modification, non-strict functions still perform these transformations upon\n          entry to the function.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> If <var>func</var> is an arrow function or a <a href=\"/sec/sec-bound-function-exotic-objects.html\">bound function</a> then the <var>thisArg</var> will be ignored by the function\n          [[Call]] in step 6.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-function.prototype.bind\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.3.2\"><a href=\"/sec/sec-function.prototype.bind.html\" title=\"link to this section\">19.2.3.2</a></span> Function.prototype.bind ( thisArg , ...args)</h1>\n\n        <p class=\"normalbefore\">When the <code>bind</code> method is called with argument <var>thisArg</var> and zero or more\n        <var>args</var>, it performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>Target</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>Target</i>) is <b>false</b>, throw a <b>TypeError</b> exception.</li>\n          <li>Let <i>args</i> be a new (possibly empty) <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> consisting of\n              all of the argument values provided after <i>thisArg</i>  in order.</li>\n          <li>Let <i>F</i> be <a href=\"/sec/sec-boundfunctioncreate.html\">BoundFunctionCreate</a>(<i>Target</i>, <i>thisArg</i>,\n              <i>args</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>F</i>).</li>\n          <li>Let <i>targetHasLength</i> be <a href=\"/sec/sec-hasownproperty.html\">HasOwnProperty</a>(<i>Target</i>,\n              <code>&quot;length&quot;</code>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>targetHasLength</i>).</li>\n          <li>If <i>targetHasLength</i> is <b>true</b>, then\n            <ol class=\"block\">\n              <li>Let <i>targetLen</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>Target</i>, <code>&quot;length&quot;</code>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>targetLen</i>).</li>\n              <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>targetLen</i>) is not Number, let <i>L</i> be\n                  0.</li>\n              <li>Else,\n                <ol class=\"block\">\n                  <li>Let <i>targetLen</i> be <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>targetLen</i>).</li>\n                  <li>Let <i>L</i> be the larger of 0 and the result of <i>targetLen</i> minus the number of elements of\n                      <i>args</i>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Else let <i>L</i> be 0.</li>\n          <li>Let <i>status</i> be <a href=\"/sec/sec-definepropertyorthrow.html\">DefinePropertyOrThrow</a>(<i>F</i>, <code>&quot;length&quot;</code>,\n              PropertyDescriptor {[[Value]]: <i>L</i>, [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n              <b>true</b>}).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n          <li>Let <i>targetName</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>Target</i>, <code>&quot;name&quot;</code>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>targetName</i>).</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>targetName</i>) is not String, let <i>targetName</i>\n              be the empty string.</li>\n          <li>Perform <a href=\"/sec/sec-setfunctionname.html\">SetFunctionName</a>(<i>F</i>, <i>targetName</i>, <code>&quot;bound&quot;</code>).</li>\n          <li>Return <i>F</i>.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>bind</code> method is <b>1</b>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> Function objects created using <code>Function.prototype.bind</code> are exotic\n          objects. They also do not have a <code>prototype</code> property.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> If <span class=\"nt\">Target</span> is an arrow function or a <a href=\"/sec/sec-bound-function-exotic-objects.html\">bound function</a> then the <var>thisArg</var> passed to this method will not\n          be used by subsequent calls to <var>F</var>.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-function.prototype.call\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.3.3\"><a href=\"/sec/sec-function.prototype.call.html\" title=\"link to this section\">19.2.3.3</a></span> Function.prototype.call (thisArg , ...args)</h1>\n\n        <p class=\"normalbefore\">When the <code>call</code> method is called on an object <var>func</var> with argument,\n        <var>thisArg</var> and zero or more <var>args</var>, the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>func</i>) is <b>false</b>, throw a <b>TypeError</b> exception.</li>\n          <li>Let <i>argList</i> be an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>If this method was called with more than one argument then in left to right order, starting with the second\n              argument, append each argument as the last element of <i>argList</i>.</li>\n          <li>Perform <a href=\"/sec/sec-preparefortailcall.html\">PrepareForTailCall</a>().</li>\n          <li>Return <a href=\"/sec/sec-call.html\">Call</a>(<i>func</i>, <i>thisArg</i>, <i>argList</i>).</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>call</code> method is <b>1</b>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> The thisArg value is passed without modification as the <b>this</b> value. This is a\n          change from Edition 3, where an <b>undefined</b> or <b>null</b> thisArg is replaced with the global object and <a href=\"/sec/sec-toobject.html\">ToObject</a> is applied to all other values and that result is passed as the <b>this</b> value.\n          Even though the thisArg is passed without modification, non-strict functions still perform these transformations upon\n          entry to the function.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> If <var>func</var> is an arrow function or a <a href=\"/sec/sec-bound-function-exotic-objects.html\">bound function</a> then the <var>thisArg</var> will be ignored by the function\n          [[Call]] in step 5.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-function.prototype.constructor\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.3.4\"><a href=\"/sec/sec-function.prototype.constructor.html\" title=\"link to this section\">19.2.3.4</a></span> Function.prototype.constructor</h1>\n\n        <p>The initial value of <code>Function.prototype.constructor</code> is the intrinsic object %Function%.</p>\n      </section>\n\n      <section id=\"sec-function.prototype.tostring\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.3.5\"><a href=\"/sec/sec-function.prototype.tostring.html\" title=\"link to this section\">19.2.3.5</a></span> Function.prototype.toString ( )</h1>\n\n        <p class=\"normalbefore\">When the <code>toString</code> method is called on an object <var>func</var> the following steps\n        are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If <i>func</i> is a <a href=\"/sec/sec-bound-function-exotic-objects.html\">Bound Function</a> exotic object, then\n            <ol class=\"block\">\n              <li>Return an implementation-dependent String source code representation of <i>func</i>. The representation must\n                  conform to the rules below. It is implementation dependent whether the representation includes <a href=\"/sec/sec-bound-function-exotic-objects.html\">bound function</a> information or information about the target\n                  function.</li>\n            </ol>\n          </li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>func</i>) is Object and is either a built-in function\n              object or  has an [[ECMAScriptCode]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>,\n              then\n            <ol class=\"block\">\n              <li>Return an implementation-dependent String source code representation of <i>func</i>. The representation must\n                  conform to the rules below.</li>\n            </ol>\n          </li>\n          <li>Throw a <b>TypeError</b> exception.</li>\n        </ol>\n\n        <p class=\"normalbefore\"><code>toString</code> Representation Requirements:</p>\n\n        <ul>\n          <li>\n            <p>The string representation must have the syntax of a <i>FunctionDeclaration</i>, <i>FunctionExpression</i>,\n            <i>GeneratorDeclaration, GeneratorExpression, ClassDeclaration</i>, <i>ClassExpression</i>, <i>ArrowFunction</i>,\n            <i>MethodDefinition</i>, or <i>GeneratorMethod</i> depending upon the actual characteristics of the object.</p>\n          </li>\n\n          <li>\n            <p>T<span style=\"font-family: Times New Roman\">he use and placement of white space, line terminators, and semicolons\n            within the representation String is implementation-dependent.</span></p>\n          </li>\n\n          <li>\n            <p>If the object was defined using ECMAScript code and the returned string representation is not in the form of a\n            <i>MethodDefinition</i> or <i>GeneratorMethod</i> then the representation must be such that if the string is\n            evaluated, using <code>eval</code> in a lexical context that is equivalent to the lexical context used to create the\n            original object, it will result in a new functionally equivalent object. In that case the returned source code must\n            not mention freely any variables that were not mentioned freely by the original function&#x2019;s source code, even if\n            these &#x201C;extra&#x201D; names were originally in scope.</p>\n          </li>\n\n          <li>\n            <p>If the implementation cannot produce a source code string that meets these criteria then it must return a string\n            for which <code>eval</code> will throw a <span style=\"font-family: sans-serif\"><b>SyntaxError</b></span>\n            exception.</p>\n          </li>\n        </ul>\n      </section>\n\n      <section id=\"sec-function.prototype-@@hasinstance\">\n        <h1><span class=\"secnum\" id=\"sec-19.2.3.6\"><a href=\"/sec/sec-function.prototype-@@hasinstance.html\" title=\"link to this section\">19.2.3.6</a></span> Function.prototype[@@hasInstance] ( V )</h1>\n\n        <p class=\"normalbefore\">When the @@hasInstance method of an object <var>F</var> is called with value <var>V</var>, the\n        following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>F</i> be the <b>this</b> value.</li>\n          <li>Return <a href=\"/sec/sec-ordinaryhasinstance.html\">OrdinaryHasInstance</a>(<i>F</i>, <i>V</i>).</li>\n        </ol>\n\n        <p>The value of the <code>name</code> property of this function is <code>&quot;[Symbol.hasInstance]&quot;</code>.</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <span class=\"value\">false</span>,\n        [[Configurable]]: <span class=\"value\">false</span> }.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> This is the default implementation of <code>@@hasInstance</code> that most functions\n          inherit. <code>@@hasInstance</code> is called by the <code>instanceof</code> operator to determine whether a value is an\n          instance of a specific constructor. An expression such as</p>\n\n          <p>&#xA0;&#xA0;&#xA0;<code>v instanceof F</code></p>\n\n          <p>evaluates as</p>\n\n          <p>&#xA0;&#xA0;&#xA0;<code>F[@@hasInstance](v)</code></p>\n\n          <p>A constructor function can control which objects are recognized as its instances by <code>instanceof</code> by\n          exposing a different <code>@@hasInstance</code> method on the function.</p>\n        </div>\n\n        <p>This property is non-writable and non-configurable to prevent tampering that could be used to globally expose the\n        target function of a <a href=\"/sec/sec-bound-function-exotic-objects.html\">bound function</a>.</p>\n      </section>\n    "}