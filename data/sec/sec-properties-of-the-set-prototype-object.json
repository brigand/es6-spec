{"id":"sec-properties-of-the-set-prototype-object","html":"\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3\"><a href=\"/sec/sec-properties-of-the-set-prototype-object.html\" title=\"link to this section\">23.2.3</a></span> Properties of the Set Prototype Object</h1>\n\n        <p>The Set prototype object is the intrinsic object %SetPrototype%. The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the Set prototype object is the intrinsic\n        object %ObjectPrototype% (<a href=\"/sec/sec-properties-of-the-object-prototype-object.html\">19.1.3</a>). The Set prototype object\n        is an ordinary object. It does not have a [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n        slot</a>.</p>\n      </div>\n\n      <section id=\"sec-set.prototype.add\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.1\"><a href=\"/sec/sec-set.prototype.add.html\" title=\"link to this section\">23.2.3.1</a></span> Set.prototype.add ( value )</h1>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>S</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>S</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>S</i> does not have a [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>,\n              throw a <b>TypeError</b> exception.</li>\n          <li>Let <i>entries</i> be the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> that is the value of\n              <i>S</i>&#x2019;s [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Repeat for each <i>e</i> that is an element of <i>entries,</i>\n            <ol class=\"block\">\n              <li>If <i>e</i> is not <span style=\"font-family: sans-serif\">empty</span> and <a href=\"/sec/sec-samevaluezero.html\">SameValueZero</a>(<i>e</i>, <i>value</i>) is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Return <i>S</i>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>If <i>value</i> is &#x2212;0, let <i>value</i> be +0.</li>\n          <li>Append <i>value</i> as the last element of <i>entries</i>.</li>\n          <li>Return <i>S</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-set.prototype.clear\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.2\"><a href=\"/sec/sec-set.prototype.clear.html\" title=\"link to this section\">23.2.3.2</a></span> Set.prototype.clear ( )</h1>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>S</i> be <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>S</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>S</i> does not have a [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>,\n              throw a <b>TypeError</b> exception.</li>\n          <li>Let <i>entries</i> be the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> that is the value of\n              <i>S</i>&#x2019;s [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Repeat for each <i>e</i> that is an element of <i>entries,</i>\n            <ol class=\"block\">\n              <li>Replace the element of <i>entries</i> whose value is <i>e</i> with an element whose value is <span style=\"font-family: sans-serif\">empty</span><i>.</i></li>\n            </ol>\n          </li>\n          <li>Return <b>undefined</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-set.prototype.constructor\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.3\"><a href=\"/sec/sec-set.prototype.constructor.html\" title=\"link to this section\">23.2.3.3</a></span> Set.prototype.constructor</h1>\n\n        <p>The initial value of <code>Set.prototype.constructor</code> is the intrinsic object %Set%.</p>\n      </section>\n\n      <section id=\"sec-set.prototype.delete\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.4\"><a href=\"/sec/sec-set.prototype.delete.html\" title=\"link to this section\">23.2.3.4</a></span> Set.prototype.delete ( value )</h1>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>S</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>S</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>S</i> does not have a [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>,\n              throw a <b>TypeError</b> exception.</li>\n          <li>Let <i>entries</i> be the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> that is the value of\n              <i>S</i>&#x2019;s [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Repeat for each  <i>e</i> that is an element of <i>entries</i>,\n            <ol class=\"block\">\n              <li>If <i>e</i> is not <span style=\"font-family: sans-serif\">empty</span> and <a href=\"/sec/sec-samevaluezero.html\">SameValueZero</a>(<i>e</i>, <i>value</i>) is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Replace the element of <i>entries</i> whose value is <i>e</i> with an element whose value is <span style=\"font-family: sans-serif\">empty</span><i>.</i></li>\n                  <li>Return <b>true</b>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The value <b>empty</b> is used as a specification device to indicate that an entry has\n          been deleted. Actual implementations may take other actions such as physically removing the entry from internal data\n          structures.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-set.prototype.entries\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.5\"><a href=\"/sec/sec-set.prototype.entries.html\" title=\"link to this section\">23.2.3.5</a></span> Set.prototype.entries ( )</h1>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>S</i> be the <b>this</b> value.</li>\n          <li>Return <a href=\"/sec/sec-createsetiterator.html\">CreateSetIterator</a>(<i>S</i>, <b>&quot;<code>key+value</code>&quot;</b>).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> For iteration purposes, a Set appears similar to a Map where each entry has the same\n          value for its key and value.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-set.prototype.foreach\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.6\"><a href=\"/sec/sec-set.prototype.foreach.html\" title=\"link to this section\">23.2.3.6</a></span> Set.prototype.forEach ( callbackfn [ , thisArg ] )</h1>\n\n        <p class=\"normalbefore\">When the <code>forEach</code> method is called with one or two arguments, the following steps are\n        taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>S</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>S</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>S</i> does not have a [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>,\n              throw a <b>TypeError</b> exception.</li>\n          <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>callbackfn</i>) is <b>false</b>, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>thisArg</i> was supplied, let <i>T</i> be <i>thisArg</i>; else let <i>T</i> be <b>undefined</b>.</li>\n          <li>Let <i>entries</i> be the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> that is the value of\n              <i>S</i>&#x2019;s [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Repeat for each <i>e</i> that is an element of <i>entries,</i> in original insertion order\n            <ol class=\"block\">\n              <li>If <i>e</i> is not <span style=\"font-family: sans-serif\">empty</span>, then\n                <ol class=\"block\">\n                  <li>Let <i>funcResult</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>callbackfn</i>, <i>T</i>, &#xAB;<i>e</i>,\n                      <i>e</i>, <i>S</i>&#xBB;).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>funcResult</i>).</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Return <b>undefined</b>.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>forEach</code> method is <b>1</b>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> <var>callbackfn</var> should be a function that accepts three arguments.\n          <code>forEach</code> calls <var>callbackfn</var> once for each value present in the set object, in value insertion\n          order. <var>callbackfn</var> is called only for values of the Set which actually exist; it is not called for keys that\n          have been  deleted from the set.</p>\n\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <b>this</b> value for each invocation of\n          <var>callbackfn</var>. If it is not provided, <b>undefined</b> is used instead.</p>\n\n          <p><var>callbackfn</var> is called with three arguments: the first two arguments are a value contained in the Set. The\n          same value is passed for both arguments. The Set object being traversed is passed as the third argument.</p>\n\n          <p>The <var>callbackfn</var> is called with three arguments to be consistent with the call back functions used by\n          <code>forEach</code> methods for Map and Array. For Sets, each item value is considered to be both the key and the\n          value.</p>\n\n          <p><code>forEach</code> does not directly mutate the object on which it is called but the object may be mutated by the\n          calls to <var>callbackfn</var>.</p>\n\n          <p>Each value is normally visited only once. However, a value will be revisited if it is deleted after it has been\n          visited and then re-added before the <code>forEach</code> call completes. Values that are deleted after the call to\n          <code>forEach</code> begins and before being visited are not visited unless the value is added again before the\n          <code>forEach</code> call completes. New values added after the call to <code>forEach</code> begins are visited.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-set.prototype.has\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.7\"><a href=\"/sec/sec-set.prototype.has.html\" title=\"link to this section\">23.2.3.7</a></span> Set.prototype.has ( value )</h1>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>S</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>S</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>S</i> does not have a [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>,\n              throw a <b>TypeError</b> exception.</li>\n          <li>Let <i>entries</i> be the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> that is the value of\n              <i>S</i>&#x2019;s [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Repeat for each <i>e</i> that is an element of <i>entries,</i>\n            <ol class=\"block\">\n              <li>If <i>e</i> is not <span style=\"font-family: sans-serif\">empty</span> and <a href=\"/sec/sec-samevaluezero.html\">SameValueZero</a>(<i>e</i>, <i>value</i>) is <b>true</b>, return\n                  <b>true</b><i>.</i></li>\n            </ol>\n          </li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-set.prototype.keys\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.8\"><a href=\"/sec/sec-set.prototype.keys.html\" title=\"link to this section\">23.2.3.8</a></span> Set.prototype.keys ( )</h1>\n\n        <p>The initial value of the <code>keys</code> property is the same function object as the initial value of the\n        <code>values</code> property.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> For iteration purposes, a Set appears similar to a Map where each entry has the same\n          value for its key and value.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-get-set.prototype.size\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.9\"><a href=\"/sec/sec-get-set.prototype.size.html\" title=\"link to this section\">23.2.3.9</a></span> get Set.prototype.size</h1>\n\n        <p class=\"normalbefore\"><code>Set.prototype.size</code> is an accessor property whose set accessor function is <span class=\"value\">undefined</span>. Its get accessor function performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>S</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>S</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>S</i> does not have a [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>,\n              throw a <b>TypeError</b> exception.</li>\n          <li>Let <i>entries</i> be the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> that is the value of\n              <i>S</i>&#x2019;s [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Let <i>count</i> be 0.</li>\n          <li>For each <i>e</i> that is an element of <i>entries</i>\n            <ol class=\"block\">\n              <li>If <i>e</i> is not <span style=\"font-family: sans-serif\">empty</span>, set <i>count</i> to <i>count</i>+1.</li>\n            </ol>\n          </li>\n          <li>Return <i>count</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-set.prototype.values\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.10\"><a href=\"/sec/sec-set.prototype.values.html\" title=\"link to this section\">23.2.3.10</a></span> Set.prototype.values ( )</h1>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>S</i> be the <b>this</b> value.</li>\n          <li>Return <a href=\"/sec/sec-createsetiterator.html\">CreateSetIterator</a>(<i>S</i>, <b>&quot;<code>value</code>&quot;</b>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-set.prototype-@@iterator\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.11\"><a href=\"/sec/sec-set.prototype-@@iterator.html\" title=\"link to this section\">23.2.3.11</a></span> Set.prototype [ @@iterator ] ( )</h1>\n\n        <p>The initial value of the @@iterator property is the same function object as the initial value of the\n        <code>values</code> property.</p>\n      </section>\n\n      <section id=\"sec-set.prototype-@@tostringtag\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.12\"><a href=\"/sec/sec-set.prototype-@@tostringtag.html\" title=\"link to this section\">23.2.3.12</a></span> Set.prototype [ @@toStringTag ]</h1>\n\n        <p>The initial value of the @@toStringTag property is the String value <code>&quot;Set&quot;</code>.</p>\n\n        <p>This property has the attributes { [[Writable]]: <span class=\"value\">false</span>, [[Enumerable]]: <span class=\"value\">false</span>, [[Configurable]]: <span class=\"value\">true</span> }.</p>\n      </section>\n    "}