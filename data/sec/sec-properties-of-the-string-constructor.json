{"id":"sec-properties-of-the-string-constructor","html":"\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-21.1.2\"><a href=\"/sec/sec-properties-of-the-string-constructor.html\" title=\"link to this section\">21.1.2</a></span> Properties of the String Constructor</h1>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        String constructor is the intrinsic object %FunctionPrototype% (<a href=\"/sec/sec-properties-of-the-function-prototype-object.html\">19.2.3</a>).</p>\n\n        <p>Besides the <code>length</code> property (whose value is <b>1</b>), the String constructor has the following\n        properties:</p>\n      </div>\n\n      <section id=\"sec-string.fromcharcode\">\n        <h1><span class=\"secnum\" id=\"sec-21.1.2.1\"><a href=\"/sec/sec-string.fromcharcode.html\" title=\"link to this section\">21.1.2.1</a></span> String.fromCharCode ( ...codeUnits )</h1>\n\n        <p class=\"normalbefore\">The <code>String.fromCharCode</code> function may be called with any number of arguments which\n        form the rest parameter <var>codeUnits</var>. The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>codeUnits</i> be a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the arguments passed\n              to this function.</li>\n          <li>Let <i>length</i> be the number of elements in <i>codeUnits</i><b>.</b></li>\n          <li>Let <i>elements</i> be  a new <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>Let <i>nextIndex</i> be 0.</li>\n          <li>Repeat while <i>nextIndex</i> &lt; <i>length</i>\n            <ol class=\"block\">\n              <li>Let <i>next</i> be <i>codeUnits</i>[<i>nextIndex</i>].</li>\n              <li>Let <i>nextCU</i> be <a href=\"/sec/sec-touint16.html\">ToUint16</a>(<i>next</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextCU</i>).</li>\n              <li>Append <i>nextCU</i> to the end of <i>elements</i>.</li>\n              <li>Let <i>nextIndex</i> be <i>nextIndex</i> + 1.</li>\n            </ol>\n          </li>\n          <li>Return the String value whose elements are, in order, the elements in the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> <i>elements</i>. If <i>length</i> is 0, the empty string is\n              returned.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>fromCharCode</code> function is <b>1</b>.</p>\n      </section>\n\n      <section id=\"sec-string.fromcodepoint\">\n        <h1><span class=\"secnum\" id=\"sec-21.1.2.2\"><a href=\"/sec/sec-string.fromcodepoint.html\" title=\"link to this section\">21.1.2.2</a></span> String.fromCodePoint ( ...codePoints )</h1>\n\n        <p class=\"normalbefore\">The <code>String.fromCodePoint</code> function may be called with any number of arguments which\n        form the rest parameter <var>codePoints</var>. The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>codePoints</i> be a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the arguments\n              passed to this function.</li>\n          <li>Let <i>length</i> be the number of elements in <i>codePoints</i><code>.</code></li>\n          <li>Let <i>elements</i> be a new <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>Let <i>nextIndex</i> be 0.</li>\n          <li>Repeat while <i>nextIndex</i> &lt; <i>length</i>\n            <ol class=\"block\">\n              <li>Let <i>next</i> be <i>codePoints</i>[<i>nextIndex</i>].</li>\n              <li>Let <i>nextCP</i> be <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<i>next</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextCP</i>).</li>\n              <li>If <a href=\"/sec/sec-samevalue.html\">SameValue</a>(<i>nextCP</i>, <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>nextCP</i>))\n                  is <b>false</b>, throw a <b>RangeError</b> exception.</li>\n              <li>If  <i>nextCP</i> &lt; 0 or <i>nextCP</i> &gt; 0x10FFFF, throw a <b>RangeError</b> exception.</li>\n              <li>Append the elements of the <a href=\"/sec/sec-utf16encoding.html\">UTF16Encoding</a> (<a href=\"/sec/sec-utf16encoding.html\">10.1.1</a>) of <i>nextCP</i> to the end of <i>elements</i>.</li>\n              <li>Let <i>nextIndex</i> be <i>nextIndex</i> + 1.</li>\n            </ol>\n          </li>\n          <li>Return the String value whose elements are, in order, the elements in the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> <i>elements</i>. If <i>length</i> is 0, the empty string is\n              returned.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>fromCodePoint</code> function is <b>1</b>.</p>\n      </section>\n\n      <section id=\"sec-string.prototype\">\n        <h1><span class=\"secnum\" id=\"sec-21.1.2.3\"><a href=\"/sec/sec-string.prototype.html\" title=\"link to this section\">21.1.2.3</a></span> String.prototype</h1>\n\n        <p>The initial value of <code>String.prototype</code> is the intrinsic object %StringPrototype% (<a href=\"/sec/sec-properties-of-the-string-prototype-object.html\">21.1.3</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-string.raw\">\n        <h1><span class=\"secnum\" id=\"sec-21.1.2.4\"><a href=\"/sec/sec-string.raw.html\" title=\"link to this section\">21.1.2.4</a></span>\n            String.raw ( template , ...substitutions  )</h1>\n\n        <p class=\"normalbefore\">The <code>String.raw</code> function may be called with a variable number of arguments. The first\n        argument is <var>template</var> and the remainder of the arguments form the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> <var>substitutions</var>. The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>substitutions</i> be a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> consisting of all of the\n              arguments passed to this function, starting with the second argument. If fewer than two arguments were passed, the\n              <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> is empty.</li>\n          <li>Let <i>numberOfSubstitutions</i> be the number of elements in <i>substitutions</i>.</li>\n          <li>Let <i>cooked</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<i>template</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>cooked</i>).</li>\n          <li>Let <i>raw</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>cooked</i>,\n              <code>&quot;raw&quot;</code>)).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>raw</i>).</li>\n          <li>Let <i>literalSegments</i> be <a href=\"/sec/sec-tolength.html\">ToLength</a>(<a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>raw</i>,\n              <code>&quot;length&quot;</code>)).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>literalSegments</i>).</li>\n          <li>If <i>literalSegments</i> &#x2264; 0, return the empty string.</li>\n          <li>Let <i>stringElements</i> be a new <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>Let <i>nextIndex</i> be 0.</li>\n          <li>Repeat\n            <ol class=\"block\">\n              <li>Let <i>nextKey</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>nextIndex</i>).</li>\n              <li>Let <i>nextSeg</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>raw</i>,\n                  <i>nextKey</i>)).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextSeg</i>).</li>\n              <li>Append in order the code unit elements of <i>nextSeg</i> to the end of <i>stringElements</i>.</li>\n              <li>If <i>nextIndex</i> + 1 = <i>literalSegments</i>, then\n                <ol class=\"block\">\n                  <li>Return the String value whose code units are, in order, the elements in the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> <i>stringElements</i>. If <i>stringElements</i> has\n                      no elements, the empty string is returned.</li>\n                </ol>\n              </li>\n              <li>If <i>nextIndex &lt; numberOfSubstitutions</i>, let <i>next</i> be <i>substitutions</i>[<i>nextIndex</i>].</li>\n              <li>Else, let <i>next</i> be the empty String.</li>\n              <li>Let <i>nextSub</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>next</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextSub</i>).</li>\n              <li>Append in order the code unit elements of <i>nextSub</i> to the end of <i>stringElements</i>.</li>\n              <li>Let <i>nextIndex</i> be <i>nextIndex</i> + 1.</li>\n            </ol>\n          </li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>raw</code> function is <b>1</b>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> String.raw is intended for use as a tag function of a Tagged Template (<a href=\"/sec/sec-tagged-templates.html\">12.3.7</a>). When called as such, the first argument will be a well formed template object\n          and the rest parameter will contain the substitution values.</p>\n        </div>\n      </section>\n    "}