{"id":"sec-property-accessors","html":"\n      <h1><span class=\"secnum\" id=\"sec-12.3.2\"><a href=\"/sec/sec-property-accessors.html\" title=\"link to this section\">12.3.2</a></span>\n          Property Accessors</h1>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> Properties are accessed by name, using either the dot notation:</p>\n\n        <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <code>.</code> <span class=\"nt\">IdentifierName</span><br> <span class=\"nt\">CallExpression</span> <code>.</code> <span class=\"nt\">IdentifierName</span></div>\n\n        <p>or the bracket notation:</p>\n\n        <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <code>[</code> <span class=\"nt\">Expression</span> <code>]</code><br><span class=\"nt\">CallExpression</span> <code>[</code> <span class=\"nt\">Expression</span> <code>]</code></div>\n\n        <p>The dot notation is explained by the following syntactic conversion:</p>\n\n        <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <code>.</code> <span class=\"nt\">IdentifierName</span></div>\n\n        <p>is identical in its behaviour to</p>\n\n        <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <code>[</code> &lt;<i>identifier-name-string</i>&gt; <code>]</code></div>\n\n        <p>and similarly</p>\n\n        <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <code>.</code> <span class=\"nt\">IdentifierName</span></div>\n\n        <p>is identical in its behaviour to</p>\n\n        <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <code>[</code> &lt;<i>identifier-name-string</i>&gt; <code>]</code></div>\n\n        <p>where <var>&lt;<i>identifier-name-string</i>&gt;</var> is the result of evaluating StringValue of <span class=\"nt\">IdentifierName</span>.</p>\n\n        <section id=\"sec-property-accessors-runtime-semantics-evaluation\">\n          <h1><span class=\"secnum\" id=\"sec-12.3.2.1\"><a href=\"/sec/sec-property-accessors-runtime-semantics-evaluation.html\" title=\"link to this section\">12.3.2.1</a></span> Runtime Semantics: Evaluation</h1>\n          <div class=\"gp prod\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">MemberExpression</span> <code class=\"t\">[</code> <span class=\"nt\">Expression</span> <code class=\"t\">]</code></div>\n          <ol class=\"proc\">\n            <li>Let <i>baseReference</i> be the result of evaluating <i>MemberExpression</i>.</li>\n            <li>Let <i>baseValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>baseReference</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>baseValue</i>).</li>\n            <li>Let <i>propertyNameReference</i> be the result of evaluating <i>Expression</i>.</li>\n            <li>Let <i>propertyNameValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>propertyNameReference</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>propertyNameValue</i>).</li>\n            <li>Let <i>bv</i> be <a href=\"/sec/sec-requireobjectcoercible.html\">RequireObjectCoercible</a>(<i>baseValue</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>bv</i>).</li>\n            <li>Let <i>propertyKey</i> be <a href=\"/sec/sec-topropertykey.html\">ToPropertyKey</a>(<i>propertyNameValue</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>propertyKey</i>).</li>\n            <li>If the code matched by the syntactic production that is being evaluated is <a href=\"/sec/sec-strict-mode-code.html\">strict\n                mode code</a>, let <i>strict</i> be <b>true</b>, else let <i>strict</i> be <b>false</b>.</li>\n            <li>Return a value of type <a href=\"/sec/sec-reference-specification-type.html\">Reference</a> whose base value is <i>bv</i> and\n                whose referenced name is <i>propertyKey</i>, and whose strict reference flag is <i>strict</i>.</li>\n          </ol>\n          <div class=\"gp prod\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">MemberExpression</span> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n          <ol class=\"proc\">\n            <li>Let <i>baseReference</i> be the result of evaluating <i>MemberExpression</i>.</li>\n            <li>Let <i>baseValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>baseReference</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>baseValue</i>).</li>\n            <li>Let <i>bv</i> be <a href=\"/sec/sec-requireobjectcoercible.html\">RequireObjectCoercible</a>(<i>baseValue</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>bv</i>).</li>\n            <li>Let <i>propertyNameString</i> be StringValue of <i>IdentifierName</i></li>\n            <li>If the code matched by the syntactic production that is being evaluated is <a href=\"/sec/sec-strict-mode-code.html\">strict\n                mode code</a>, let <i>strict</i> be <b>true</b>, else let <i>strict</i> be <b>false</b>.</li>\n            <li>Return a value of type <a href=\"/sec/sec-reference-specification-type.html\">Reference</a> whose base value is <i>bv</i> and\n                whose referenced name is <i>propertyNameString</i>, and whose strict reference flag is <i>strict</i>.</li>\n          </ol>\n          <div class=\"gp prod\"><span class=\"nt\">CallExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">CallExpression</span> <code class=\"t\">[</code> <span class=\"nt\">Expression</span> <code class=\"t\">]</code></div>\n\n          <p>Is evaluated in exactly the same manner as <span class=\"prod\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">MemberExpression</span> <code class=\"t\">[</code> <span class=\"nt\">Expression</span> <code class=\"t\">]</code></span> except that the contained <span class=\"nt\">CallExpression</span> is evaluated in step 1.</p>\n\n          <div class=\"gp prod\"><span class=\"nt\">CallExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">CallExpression</span> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n\n          <p>Is evaluated in exactly the same manner as <span class=\"prod\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">MemberExpression</span> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></span>  except that the contained <span class=\"nt\">CallExpression</span> is evaluated\n          in step 1.</p>\n        </section>\n      </div>\n    "}