{"id":"sec-putvalue","html":"\n        <h1><span class=\"secnum\" id=\"sec-6.2.3.2\"><a href=\"/sec/sec-putvalue.html\" title=\"link to this section\">6.2.3.2</a></span> PutValue\n            (V, W)</h1>\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>V</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>W</i>).</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>V</i>) is not <a href=\"/sec/sec-reference-specification-type.html\">Reference</a>, throw a <b>ReferenceError</b> exception.</li>\n          <li>Let <i>base</i> be <a href=\"/sec/sec-reference-specification-type.html\">GetBase</a>(<i>V</i>).</li>\n          <li>If <a href=\"/sec/sec-reference-specification-type.html\">IsUnresolvableReference</a>(<i>V</i>), then\n            <ol class=\"block\">\n              <li>If <a href=\"/sec/sec-reference-specification-type.html\">IsStrictReference</a>(<i>V</i>) is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Throw <b>ReferenceError</b> exception.</li>\n                </ol>\n              </li>\n              <li>Let <i>globalObj</i> be <a href=\"/sec/sec-getglobalobject.html\">GetGlobalObject</a>().</li>\n              <li>Return <a href=\"/sec/sec-set-o-p-v-throw.html\">Set</a>(<i>globalObj</i>,<a href=\"/sec/sec-reference-specification-type.html\">GetReferencedName</a>(<i>V</i>), <i>W</i>, <b>false</b>).</li>\n            </ol>\n          </li>\n          <li>Else if <a href=\"/sec/sec-reference-specification-type.html\">IsPropertyReference</a>(<i>V</i>), then\n            <ol class=\"block\">\n              <li>If <a href=\"/sec/sec-reference-specification-type.html\">HasPrimitiveBase</a>(<i>V</i>) is <b>true</b>, then\n                <ol class=\"block\">\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: In this case, <i>base</i> will never be <b>null</b> or\n                      <b>undefined</b>.</li>\n                  <li>Set <i>base</i>  to <a href=\"/sec/sec-toobject.html\">ToObject</a>(<i>base</i>).</li>\n                </ol>\n              </li>\n              <li>Let <i>succeeded</i> be <i>base.</i>[[Set]](<a href=\"/sec/sec-reference-specification-type.html\">GetReferencedName</a>(<i>V</i>), <i>W</i>, <a href=\"/sec/sec-getthisvalue.html\">GetThisValue</a>(<i>V</i>)).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>succeeded</i>).</li>\n              <li>If <i>succeeded</i> is <b>false</b> and <a href=\"/sec/sec-reference-specification-type.html\">IsStrictReference</a>(<i>V</i>) is <b>true</b>, throw a\n                  <b>TypeError</b> exception.</li>\n              <li>Return.</li>\n            </ol>\n          </li>\n          <li>Else <i>base</i> must be an <a href=\"/sec/sec-environment-records.html\">Environment Record</a>.\n            <ol class=\"block\">\n              <li>Return <i>base.</i>SetMutableBinding(<a href=\"/sec/sec-reference-specification-type.html\">GetReferencedName</a>(<i>V</i>), <i>W</i>, <a href=\"/sec/sec-reference-specification-type.html\">IsStrictReference</a>(<i>V</i>)) (<a href=\"/sec/sec-environment-records.html\">see 8.1.1</a>).</li>\n            </ol>\n          </li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The object that may be created in step 6.a.ii is not accessible outside of the above\n          algorithm and the ordinary object [[Set]] internal method. An implementation might choose to avoid the actual creation\n          of that object.</p>\n        </div>\n      "}