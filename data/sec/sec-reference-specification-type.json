{"id":"sec-reference-specification-type","html":"\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-6.2.3\"><a href=\"/sec/sec-reference-specification-type.html\" title=\"link to this section\">6.2.3</a></span> The Reference Specification Type</h1>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The Reference type is used to explain the behaviour of such operators as\n          <code>delete</code>, <code>typeof</code>, the assignment operators, the <code>super</code> keyword and other language\n          features. For example, the left-hand operand of an assignment is expected to produce a reference.</p>\n        </div>\n\n        <p>A <b>Reference</b> is a resolved name or property binding. A Reference consists of three components, the\n        <var>base</var> value, the <var>referenced name</var> and the Boolean valued <var>strict reference</var> flag. The\n        <var>base</var> value is either <b>undefined</b>, an Object, a Boolean, a String, a Symbol, a Number, or an <a href=\"/sec/sec-environment-records.html\">Environment Record</a> (<a href=\"/sec/sec-environment-records.html\">8.1.1</a>). A <var>base</var>\n        value of <b>undefined</b> indicates that the Reference could not be resolved to a binding. The <var>referenced name</var>\n        is a String or Symbol value.</p>\n\n        <p>A Super Reference is a Reference that is used to represents a name binding that was expressed using the super keyword.\n        A Super Reference has an additional <var>thisValue</var> component and its <var>base</var> value will never be an <a href=\"/sec/sec-environment-records.html\">Environment Record</a>.</p>\n\n        <p class=\"normalbefore\">The following abstract operations are used in this specification to access the components of\n        references:</p>\n\n        <ul>\n          <li>\n            <p>GetBase(V). Returns the <var>base</var> value component of the reference V.</p>\n          </li>\n\n          <li>\n            <p>GetReferencedName(V). Returns the <var>referenced name</var> component of the reference V.</p>\n          </li>\n\n          <li>\n            <p>IsStrictReference(V). Returns the <var>strict reference</var> flag component of the reference V.</p>\n          </li>\n\n          <li>\n            <p>HasPrimitiveBase(V). Returns <span class=\"value\">true</span> if <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<span style=\"font-family: Times New Roman\"><i>base</i>)</span>\n            is Boolean, String, Symbol, or Number.</p>\n          </li>\n\n          <li>\n            <p>IsPropertyReference(V). Returns <span class=\"value\">true</span> if either the <var>base</var> value is an object or\n            HasPrimitiveBase(V) is <b>true</b>; otherwise returns <span class=\"value\">false</span>.</p>\n          </li>\n\n          <li>\n            <p>IsUnresolvableReference(V). Returns <span class=\"value\">true</span> if the <var>base</var> value is\n            <b>undefined</b> and <b>false</b> otherwise.</p>\n          </li>\n\n          <li>\n            <p>IsSuperReference(V). Returns <span class=\"value\">true</span> if this reference has a <var>thisValue</var>\n            component.</p>\n          </li>\n        </ul>\n\n        <p>The following abstract operations are used in this specification to operate on references:</p>\n      </div>\n\n      <section id=\"sec-getvalue\">\n        <h1><span class=\"secnum\" id=\"sec-6.2.3.1\"><a href=\"/sec/sec-getvalue.html\" title=\"link to this section\">6.2.3.1</a></span> GetValue\n            (V)</h1>\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>V</i>).</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>V</i>) is not <a href=\"/sec/sec-reference-specification-type.html\">Reference</a>, return <i>V</i>.</li>\n          <li>Let <i>base</i> be <a href=\"/sec/sec-reference-specification-type.html\">GetBase</a>(<i>V</i>).</li>\n          <li>If <a href=\"/sec/sec-reference-specification-type.html\">IsUnresolvableReference</a>(<i>V</i>), throw a <b>ReferenceError</b>\n              exception.</li>\n          <li>If <a href=\"/sec/sec-reference-specification-type.html\">IsPropertyReference</a>(<i>V</i>), then\n            <ol class=\"block\">\n              <li>If <a href=\"/sec/sec-reference-specification-type.html\">HasPrimitiveBase</a>(<i>V</i>) is <b>true</b>, then\n                <ol class=\"block\">\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: In this case, <i>base</i> will never be <b>null</b> or\n                      <b>undefined</b>.</li>\n                  <li>Let <i>base</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<i>base</i>).</li>\n                </ol>\n              </li>\n              <li>Return <i>base.</i>[[Get]](<a href=\"/sec/sec-reference-specification-type.html\">GetReferencedName</a>(<i>V</i>), <a href=\"/sec/sec-getthisvalue.html\">GetThisValue</a>(<i>V</i>)).</li>\n            </ol>\n          </li>\n          <li>Else <i>base</i> must be an <a href=\"/sec/sec-environment-records.html\">Environment Record</a>,\n            <ol class=\"block\">\n              <li>Return <i>base.</i>GetBindingValue(<a href=\"/sec/sec-reference-specification-type.html\">GetReferencedName</a>(<i>V</i>),\n                  <a href=\"/sec/sec-reference-specification-type.html\">IsStrictReference</a>(<i>V</i>)) (<a href=\"/sec/sec-environment-records.html\">see 8.1.1</a>).</li>\n            </ol>\n          </li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The object that may be created in step 5.a.ii is not accessible outside of the above\n          abstract operation and the ordinary object [[Get]] internal method. An implementation might choose to avoid the actual\n          creation of the object.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-putvalue\">\n        <h1><span class=\"secnum\" id=\"sec-6.2.3.2\"><a href=\"/sec/sec-putvalue.html\" title=\"link to this section\">6.2.3.2</a></span> PutValue\n            (V, W)</h1>\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>V</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>W</i>).</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>V</i>) is not <a href=\"/sec/sec-reference-specification-type.html\">Reference</a>, throw a <b>ReferenceError</b> exception.</li>\n          <li>Let <i>base</i> be <a href=\"/sec/sec-reference-specification-type.html\">GetBase</a>(<i>V</i>).</li>\n          <li>If <a href=\"/sec/sec-reference-specification-type.html\">IsUnresolvableReference</a>(<i>V</i>), then\n            <ol class=\"block\">\n              <li>If <a href=\"/sec/sec-reference-specification-type.html\">IsStrictReference</a>(<i>V</i>) is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Throw <b>ReferenceError</b> exception.</li>\n                </ol>\n              </li>\n              <li>Let <i>globalObj</i> be <a href=\"/sec/sec-getglobalobject.html\">GetGlobalObject</a>().</li>\n              <li>Return <a href=\"/sec/sec-set-o-p-v-throw.html\">Set</a>(<i>globalObj</i>,<a href=\"/sec/sec-reference-specification-type.html\">GetReferencedName</a>(<i>V</i>), <i>W</i>, <b>false</b>).</li>\n            </ol>\n          </li>\n          <li>Else if <a href=\"/sec/sec-reference-specification-type.html\">IsPropertyReference</a>(<i>V</i>), then\n            <ol class=\"block\">\n              <li>If <a href=\"/sec/sec-reference-specification-type.html\">HasPrimitiveBase</a>(<i>V</i>) is <b>true</b>, then\n                <ol class=\"block\">\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: In this case, <i>base</i> will never be <b>null</b> or\n                      <b>undefined</b>.</li>\n                  <li>Set <i>base</i>  to <a href=\"/sec/sec-toobject.html\">ToObject</a>(<i>base</i>).</li>\n                </ol>\n              </li>\n              <li>Let <i>succeeded</i> be <i>base.</i>[[Set]](<a href=\"/sec/sec-reference-specification-type.html\">GetReferencedName</a>(<i>V</i>), <i>W</i>, <a href=\"/sec/sec-getthisvalue.html\">GetThisValue</a>(<i>V</i>)).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>succeeded</i>).</li>\n              <li>If <i>succeeded</i> is <b>false</b> and <a href=\"/sec/sec-reference-specification-type.html\">IsStrictReference</a>(<i>V</i>) is <b>true</b>, throw a\n                  <b>TypeError</b> exception.</li>\n              <li>Return.</li>\n            </ol>\n          </li>\n          <li>Else <i>base</i> must be an <a href=\"/sec/sec-environment-records.html\">Environment Record</a>.\n            <ol class=\"block\">\n              <li>Return <i>base.</i>SetMutableBinding(<a href=\"/sec/sec-reference-specification-type.html\">GetReferencedName</a>(<i>V</i>), <i>W</i>, <a href=\"/sec/sec-reference-specification-type.html\">IsStrictReference</a>(<i>V</i>)) (<a href=\"/sec/sec-environment-records.html\">see 8.1.1</a>).</li>\n            </ol>\n          </li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The object that may be created in step 6.a.ii is not accessible outside of the above\n          algorithm and the ordinary object [[Set]] internal method. An implementation might choose to avoid the actual creation\n          of that object.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-getthisvalue\">\n        <h1><span class=\"secnum\" id=\"sec-6.2.3.3\"><a href=\"/sec/sec-getthisvalue.html\" title=\"link to this section\">6.2.3.3</a></span>\n            GetThisValue (V)</h1>\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-reference-specification-type.html\">IsPropertyReference</a>(<i>V</i>) is <b>true</b>.</li>\n          <li>If <a href=\"/sec/sec-reference-specification-type.html\">IsSuperReference</a>(<i>V</i>), then\n            <ol class=\"block\">\n              <li>Return the value of the <i>thisValue</i> component of the reference <i>V</i>.</li>\n            </ol>\n          </li>\n          <li>Return <a href=\"/sec/sec-reference-specification-type.html\">GetBase</a>(<i>V</i>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-initializereferencedbinding\">\n        <h1><span class=\"secnum\" id=\"sec-6.2.3.4\"><a href=\"/sec/sec-initializereferencedbinding.html\" title=\"link to this section\">6.2.3.4</a></span> InitializeReferencedBinding (V, W)</h1>\n        <ol class=\"proc\">\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>V</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>W</i>).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>V</i>)\n              is <a href=\"/sec/sec-reference-specification-type.html\">Reference</a>.</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-reference-specification-type.html\">IsUnresolvableReference</a>(<i>V</i>) is <b>false</b>.</li>\n          <li>Let <i>base</i> be <a href=\"/sec/sec-reference-specification-type.html\">GetBase</a>(<i>V</i>).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>base</i> is an <a href=\"/sec/sec-environment-records.html\">Environment\n              Record</a>.</li>\n          <li>Return <i>base.</i>InitializeBinding(<a href=\"/sec/sec-reference-specification-type.html\">GetReferencedName</a>(<i>V</i>),\n              <i>W</i>).</li>\n        </ol>\n      </section>\n    "}