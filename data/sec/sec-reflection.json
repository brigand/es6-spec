{"id":"sec-reflection","html":"\n  <div class=\"front\">\n    <h1><span class=\"secnum\" id=\"sec-26\"><a href=\"/sec/sec-reflection.html\" title=\"link to this section\">26</a></span> Reflection</h1>\n  </div>\n\n  <section id=\"sec-reflect-object\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-26.1\"><a href=\"/sec/sec-reflect-object.html\" title=\"link to this section\">26.1</a></span> The\n          Reflect Object</h1>\n\n      <p>The Reflect object is the %Reflect% intrinsic object and the initial value of the <code>Reflect</code> property of the\n      global object.The Reflect object is an ordinary object.</p>\n\n      <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the Reflect\n      object is the intrinsic object %ObjectPrototype% (<a href=\"/sec/sec-properties-of-the-object-prototype-object.html\">19.1.3</a>).</p>\n\n      <p>The Reflect object is not a function object. It does not have a [[Construct]] internal method; it is not possible to use\n      the Reflect object as a constructor with the <code>new</code> operator. The Reflect object also does not have a [[Call]]\n      internal method; it is not possible to invoke the Reflect object as a function.</p>\n    </div>\n\n    <section id=\"sec-reflect.apply\">\n      <h1><span class=\"secnum\" id=\"sec-26.1.1\"><a href=\"/sec/sec-reflect.apply.html\" title=\"link to this section\">26.1.1</a></span>\n          Reflect.apply ( target, thisArgument, argumentsList )</h1>\n\n      <p class=\"normalbefore\">When the <code>apply</code> function is called with arguments <span style=\"font-family: Times New\n      Roman\"><i>target</i>, <i>thisArgument</i></span>, and <var>argumentsList</var> the following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>target</i>) is <b>false</b>, throw a <b>TypeError</b> exception.</li>\n        <li>Let <i>args</i> be <a href=\"/sec/sec-createlistfromarraylike.html\">CreateListFromArrayLike</a>(<i>argumentsList</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>args</i>).</li>\n        <li>Perform <a href=\"/sec/sec-preparefortailcall.html\">PrepareForTailCall</a>().</li>\n        <li>Return <a href=\"/sec/sec-call.html\">Call</a>(<i>target</i>, <i>thisArgument</i>, <i>args</i>).</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-reflect.construct\">\n      <h1><span class=\"secnum\" id=\"sec-26.1.2\"><a href=\"/sec/sec-reflect.construct.html\" title=\"link to this section\">26.1.2</a></span>\n          Reflect.construct ( target, argumentsList [, newTarget] )</h1>\n\n      <p class=\"normalbefore\">When the <code>construct</code> function is called with arguments <var>target</var>,\n      <var>argumentsList</var>, and <var>newTarget</var> the following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>If <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a>(<i>target</i>) is <b>false</b>, throw a <b>TypeError</b>\n            exception.</li>\n        <li>If <i>newTarget</i> is not present, let <i>newTarget</i> be <i>target</i>.</li>\n        <li>Else, if <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a>(<i>newTarget</i>) is <b>false</b>, throw a <b>TypeError</b>\n            exception.</li>\n        <li>Let <i>args</i> be <a href=\"/sec/sec-createlistfromarraylike.html\">CreateListFromArrayLike</a>(<i>argumentsList</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>args</i>).</li>\n        <li>Return <a href=\"/sec/sec-construct.html\">Construct</a>(<i>target</i>, <i>args</i>, <i>newTarget</i>).</li>\n      </ol>\n\n      <p>The <code>length</code> property of the <code>construct</code> function is <b>2</b>.</p>\n    </section>\n\n    <section id=\"sec-reflect.defineproperty\">\n      <h1><span class=\"secnum\" id=\"sec-26.1.3\"><a href=\"/sec/sec-reflect.defineproperty.html\" title=\"link to this section\">26.1.3</a></span> Reflect.defineProperty ( target, propertyKey, attributes )</h1>\n\n      <p class=\"normalbefore\">When the <code>defineProperty</code> function is called with arguments <span style=\"font-family:\n      Times New Roman\"><i>target</i>, <i>propertyKey</i></span>, and <var>attributes</var> the following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>target</i>) is not Object, throw a <b>TypeError</b>\n            exception.</li>\n        <li>Let <i>key</i> be <a href=\"/sec/sec-topropertykey.html\">ToPropertyKey</a>(<i>propertyKey</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>key</i>).</li>\n        <li>Let <i>desc</i> be <a href=\"/sec/sec-topropertydescriptor.html\">ToPropertyDescriptor</a>(<i>attributes</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>desc</i>).</li>\n        <li>Return <i>target.</i>[[DefineOwnProperty]](<i>key</i>, <i>desc</i>).</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-reflect.deleteproperty\">\n      <h1><span class=\"secnum\" id=\"sec-26.1.4\"><a href=\"/sec/sec-reflect.deleteproperty.html\" title=\"link to this section\">26.1.4</a></span> Reflect.deleteProperty ( target, propertyKey )</h1>\n\n      <p class=\"normalbefore\">When the <code>deleteProperty</code> function is called with arguments <span style=\"font-family:\n      Times New Roman\"><i>target</i> and <i>propertyKey</i></span>, the following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>target</i>) is not Object, throw a <b>TypeError</b>\n            exception.</li>\n        <li>Let <i>key</i> be <a href=\"/sec/sec-topropertykey.html\">ToPropertyKey</a>(<i>propertyKey</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>key</i>).</li>\n        <li>Return <i>target.</i>[[Delete]](<i>key</i>).</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-reflect.enumerate\">\n      <h1><span class=\"secnum\" id=\"sec-26.1.5\"><a href=\"/sec/sec-reflect.enumerate.html\" title=\"link to this section\">26.1.5</a></span>\n          Reflect.enumerate ( target )</h1>\n\n      <p class=\"normalbefore\">When the <code>enumerate</code> function is called with argument <var>target</var> the following\n      steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>target</i>) is not Object, throw a <b>TypeError</b>\n            exception.</li>\n        <li>Return <i>target.</i>[[Enumerate]]().</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-reflect.get\">\n      <h1><span class=\"secnum\" id=\"sec-26.1.6\"><a href=\"/sec/sec-reflect.get.html\" title=\"link to this section\">26.1.6</a></span>\n          Reflect.get ( target, propertyKey [ , receiver ])</h1>\n\n      <p class=\"normalbefore\">When the <code>get</code> function is called with arguments <span style=\"font-family: Times New\n      Roman\"><i>target</i>, <i>propertyKey</i></span>, and <var>receiver</var> the following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>target</i>) is not Object, throw a <b>TypeError</b>\n            exception.</li>\n        <li>Let <i>key</i> be <a href=\"/sec/sec-topropertykey.html\">ToPropertyKey</a>(<i>propertyKey</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>key</i>).</li>\n        <li>If <i>receiver</i> is not present, then\n          <ol class=\"block\">\n            <li>Let <i>receiver</i> be <i>target</i>.</li>\n          </ol>\n        </li>\n        <li>Return <i>target.</i>[[Get]](<i>key</i>, <i>receiver</i>).</li>\n      </ol>\n\n      <p>The <code>length</code> property of the <code>get</code> function is <b>2</b>.</p>\n    </section>\n\n    <section id=\"sec-reflect.getownpropertydescriptor\">\n      <h1><span class=\"secnum\" id=\"sec-26.1.7\"><a href=\"/sec/sec-reflect.getownpropertydescriptor.html\" title=\"link to this section\">26.1.7</a></span> Reflect.getOwnPropertyDescriptor ( target, propertyKey )</h1>\n\n      <p class=\"normalbefore\">When the <code>getOwnPropertyDescriptor</code> function is called with arguments <span style=\"font-family: Times New Roman\"><i>target</i> and <i>propertyKey</i></span>, the following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>target</i>) is not Object, throw a <b>TypeError</b>\n            exception.</li>\n        <li>Let <i>key</i> be <a href=\"/sec/sec-topropertykey.html\">ToPropertyKey</a>(<i>propertyKey</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>key</i>).</li>\n        <li>Let <i>desc</i> be <i>target.</i>[[GetOwnProperty]](<i>key</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>desc</i>).</li>\n        <li>Return <a href=\"/sec/sec-frompropertydescriptor.html\">FromPropertyDescriptor</a>(<i>desc</i>).</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-reflect.getprototypeof\">\n      <h1><span class=\"secnum\" id=\"sec-26.1.8\"><a href=\"/sec/sec-reflect.getprototypeof.html\" title=\"link to this section\">26.1.8</a></span> Reflect.getPrototypeOf ( target )</h1>\n\n      <p class=\"normalbefore\">When the <code>getPrototypeOf</code> function is called with argument <var>target</var> the\n      following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>target</i>) is not Object, throw a <b>TypeError</b>\n            exception.</li>\n        <li>Return <i>target.</i>[[GetPrototypeOf]]().</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-reflect.has\">\n      <h1><span class=\"secnum\" id=\"sec-26.1.9\"><a href=\"/sec/sec-reflect.has.html\" title=\"link to this section\">26.1.9</a></span>\n          Reflect.has ( target, propertyKey )</h1>\n\n      <p class=\"normalbefore\">When the <code>has</code> function is called with arguments <span style=\"font-family: Times New\n      Roman\"><i>target</i> and <i>propertyKey</i></span>, the following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>target</i>) is not Object, throw a <b>TypeError</b>\n            exception.</li>\n        <li>Let <i>key</i> be <a href=\"/sec/sec-topropertykey.html\">ToPropertyKey</a>(<i>propertyKey</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>key</i>).</li>\n        <li>Return <i>target.</i>[[HasProperty]](<i>key</i>).</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-reflect.isextensible\">\n      <h1><span class=\"secnum\" id=\"sec-26.1.10\"><a href=\"/sec/sec-reflect.isextensible.html\" title=\"link to this section\">26.1.10</a></span> Reflect.isExtensible (target)</h1>\n\n      <p class=\"normalbefore\">When the <code>isExtensible</code> function is called with argument <var>target</var> the following\n      steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>target</i>) is not Object, throw a <b>TypeError</b>\n            exception.</li>\n        <li>Return <i>target.</i>[[IsExtensible]]().</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-reflect.ownkeys\">\n      <h1><span class=\"secnum\" id=\"sec-26.1.11\"><a href=\"/sec/sec-reflect.ownkeys.html\" title=\"link to this section\">26.1.11</a></span>\n          Reflect.ownKeys ( target )</h1>\n\n      <p class=\"normalbefore\">When the <code>ownKeys</code> function is called with argument <var>target</var> the following steps\n      are taken:</p>\n\n      <ol class=\"proc\">\n        <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>target</i>) is not Object, throw a <b>TypeError</b>\n            exception.</li>\n        <li>Let <i>keys</i> be <i>target.</i>[[OwnPropertyKeys]]().</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>keys</i>).</li>\n        <li>Return <a href=\"/sec/sec-createarrayfromlist.html\">CreateArrayFromList</a>(<i>keys</i>).</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-reflect.preventextensions\">\n      <h1><span class=\"secnum\" id=\"sec-26.1.12\"><a href=\"/sec/sec-reflect.preventextensions.html\" title=\"link to this section\">26.1.12</a></span> Reflect.preventExtensions ( target )</h1>\n\n      <p class=\"normalbefore\">When the <code>preventExtensions</code> function is called with argument <var>target</var>, the\n      following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>target</i>) is not Object, throw a <b>TypeError</b>\n            exception.</li>\n        <li>Return <i>target.</i>[[PreventExtensions]]().</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-reflect.set\">\n      <h1><span class=\"secnum\" id=\"sec-26.1.13\"><a href=\"/sec/sec-reflect.set.html\" title=\"link to this section\">26.1.13</a></span>\n          Reflect.set ( target, propertyKey, V [ , receiver ] )</h1>\n\n      <p class=\"normalbefore\">When the <code>set</code> function is called with arguments <span style=\"font-family: Times New\n      Roman\"><i>target</i>, <i>V</i>, <i>propertyKey</i></span>, and <var>receiver</var> the following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>target</i>) is not Object, throw a <b>TypeError</b>\n            exception.</li>\n        <li>Let <i>key</i> be <a href=\"/sec/sec-topropertykey.html\">ToPropertyKey</a>(<i>propertyKey</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>key</i>).</li>\n        <li>If <i>receiver</i> is not present, then\n          <ol class=\"block\">\n            <li>Let <i>receiver</i> be <i>target</i>.</li>\n          </ol>\n        </li>\n        <li>Return <i>target.</i>[[Set]](<i>key</i>, <i>V</i>, <i>receiver</i>).</li>\n      </ol>\n\n      <p>The <code>length</code> property of the <code>set</code> function is <b>3</b>.</p>\n    </section>\n\n    <section id=\"sec-reflect.setprototypeof\">\n      <h1><span class=\"secnum\" id=\"sec-26.1.14\"><a href=\"/sec/sec-reflect.setprototypeof.html\" title=\"link to this section\">26.1.14</a></span> Reflect.setPrototypeOf ( target, proto )</h1>\n\n      <p class=\"normalbefore\">When the <code>setPrototypeOf</code> function is called with arguments <span style=\"font-family:\n      Times New Roman\"><i>target</i> and <i>propertyKey</i></span>, the following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>target</i>) is not Object, throw a <b>TypeError</b>\n            exception.</li>\n        <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>proto</i>) is not Object and <i>proto</i> is not\n            <b>null</b>, throw a <b>TypeError</b> exception</li>\n        <li>Return <i>target.</i>[[SetPrototypeOf]](<i>proto</i>).</li>\n      </ol>\n    </section>\n  </section>\n\n  <section id=\"sec-proxy-objects\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-26.2\"><a href=\"/sec/sec-proxy-objects.html\" title=\"link to this section\">26.2</a></span> Proxy\n          Objects</h1>\n    </div>\n\n    <section id=\"sec-proxy-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-26.2.1\"><a href=\"/sec/sec-proxy-constructor.html\" title=\"link to this section\">26.2.1</a></span>\n            The Proxy Constructor</h1>\n\n        <p>The Proxy constructor is the %Proxy% intrinsic object and the initial value of the <code>Proxy</code> property of the\n        global object. When called as a constructor it creates and initializes a new proxy exotic object. <code>Proxy</code> is\n        not intended to be called as a function and will throw an exception when called in that manner.</p>\n      </div>\n\n      <section id=\"sec-proxy-target-handler\">\n        <h1><span class=\"secnum\" id=\"sec-26.2.1.1\"><a href=\"/sec/sec-proxy-target-handler.html\" title=\"link to this section\">26.2.1.1</a></span> Proxy ( target, handler )</h1>\n\n        <p class=\"normalbefore\">When <code>Proxy</code> is called with arguments <var>target</var> and <var>handler</var> performs\n        the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>If NewTarget is <b>undefined</b>, throw a <b>TypeError</b> exception.</li>\n          <li>Return <a href=\"/sec/sec-proxycreate.html\">ProxyCreate</a>(<i>target</i>, <i>handler</i>).</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-proxy-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-26.2.2\"><a href=\"/sec/sec-properties-of-the-proxy-constructor.html\" title=\"link to this section\">26.2.2</a></span> Properties of the Proxy Constructor</h1>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the\n        <code>Proxy</code> constructor is the intrinsic object %FunctionPrototype% (<a href=\"/sec/sec-properties-of-the-function-prototype-object.html\">19.2.3</a>).</p>\n\n        <p>The <code>Proxy</code> constructor does not have a <code>prototype</code> property because proxy exotic objects do not\n        have a [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> that requires\n        initialization.</p>\n\n        <p>Besides the <code>length</code> property (whose value is <b>2</b>), the <code>Proxy</code> constructor has the\n        following properties:</p>\n      </div>\n\n      <section id=\"sec-proxy.revocable\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-26.2.2.1\"><a href=\"/sec/sec-proxy.revocable.html\" title=\"link to this section\">26.2.2.1</a></span> Proxy.revocable ( target, handler )</h1>\n\n          <p class=\"normalbefore\">The <code>Proxy.revocable</code> function is used to create a revocable Proxy object. When\n          <code>Proxy.revocable</code> is called with arguments <var>target</var> and <var>handler</var> the following steps are\n          taken:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>p</i> be <a href=\"/sec/sec-proxycreate.html\">ProxyCreate</a>(<i>target</i>, <i>handler</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>p</i>).</li>\n            <li>Let <i>revoker</i> be a new built-in function object as defined in <a href=\"/sec/sec-proxy-revocation-functions.html\">26.2.2.1.1</a>.</li>\n            <li>Set the [[RevocableProxy]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                <i>revoker</i> to <i>p</i>.</li>\n            <li>Let <i>result</i> be <a href=\"/sec/sec-objectcreate.html\">ObjectCreate</a>(%ObjectPrototype%).</li>\n            <li>Perform <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>result</i>, <code>&quot;proxy&quot;</code>,\n                <i>p</i>).</li>\n            <li>Perform <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>result</i>, <code>&quot;revoke&quot;</code>,\n                <i>revoker</i>).</li>\n            <li>Return <i>result</i>.</li>\n          </ol>\n        </div>\n\n        <section id=\"sec-proxy-revocation-functions\">\n          <h1><span class=\"secnum\" id=\"sec-26.2.2.1.1\"><a href=\"/sec/sec-proxy-revocation-functions.html\" title=\"link to this section\">26.2.2.1.1</a></span> Proxy Revocation Functions</h1>\n\n          <p>A Proxy revocation function is an anonymous function that has the ability to invalidate a specific Proxy object.</p>\n\n          <p>Each Proxy revocation function has a [[RevocableProxy]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</p>\n\n          <p class=\"normalbefore\">When a Proxy revocation function, <var>F</var>, is called the following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>p</i> be the value of <i>F</i>&#x2019;s [[RevocableProxy]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>If <i>p</i> is <b>null</b>, return <b>undefined</b>.</li>\n            <li>Set the value of <i>F</i>&#x2019;s [[RevocableProxy]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <b>null</b>.</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>p</i> is a Proxy object.</li>\n            <li>Set the [[ProxyTarget]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of <i>p</i> to\n                <b>null</b>.</li>\n            <li>Set the [[ProxyHandler]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of <i>p</i>\n                to <b>null</b>.</li>\n            <li>Return <b>undefined</b>.</li>\n          </ol>\n        </section>\n      </section>\n    </section>\n  </section>\n\n  <section id=\"sec-module-namespace-objects\">\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-26.3\"><a href=\"/sec/sec-module-namespace-objects.html\" title=\"link to this section\">26.3</a></span>\n          Module Namespace Objects</h1>\n\n      <p>A Module Namespace Object is a module namespace exotic object that provides runtime property-based access to a\n      module&#x2019;s exported bindings. There is no constructor function for Module Namespace Objects. Instead, such an object is\n      created for each module that is imported by an <span class=\"nt\">ImportDeclaration</span> that includes a <span class=\"nt\">NameSpaceImport</span> (See <a href=\"/sec/sec-imports.html\">15.2.2</a>).</p>\n\n      <p>In addition to the properties specified in <a href=\"/sec/sec-module-namespace-exotic-objects.html\">9.4.6</a> each Module Namespace\n      Object has the own following properties:</p>\n    </div>\n\n    <section id=\"sec-@@tostringtag\">\n      <h1><span class=\"secnum\" id=\"sec-26.3.1\"><a href=\"/sec/sec-@@tostringtag.html\" title=\"link to this section\">26.3.1</a></span>\n          @@toStringTag</h1>\n\n      <p>The initial value of the @@toStringTag property is the String value <code>&quot;Module&quot;</code>.</p>\n\n      <p>This property has the attributes { [[Writable]]: <span class=\"value\">false</span>, [[Enumerable]]: <span class=\"value\">false</span>, [[Configurable]]: <span class=\"value\">true</span> }.</p>\n    </section>\n\n    <section id=\"sec-@@iterator\">\n      <h1><span class=\"secnum\" id=\"sec-26.3.2\"><a href=\"/sec/sec-@@iterator.html\" title=\"link to this section\">26.3.2</a></span> [\n          @@iterator ] (   )</h1>\n\n      <p class=\"normalbefore\">When the @@iterator method is called with no arguments, the following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>N</i> be the <b>this</b> value.</li>\n        <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>N</i>) is not Object, throw a <b>TypeError</b>\n            exception.</li>\n        <li>Return <i>N</i>.[[Enumerate]]().</li>\n      </ol>\n\n      <p>The value of the <code>name</code> property of this function is <code>&quot;[Symbol.iterator]&quot;</code>.</p>\n    </section>\n  </section>\n"}