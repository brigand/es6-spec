{"id":"sec-regexp-pattern-flags","html":"\n        <h1><span class=\"secnum\" id=\"sec-21.2.3.1\"><a href=\"/sec/sec-regexp-pattern-flags.html\" title=\"link to this section\">21.2.3.1</a></span> RegExp ( pattern, flags )</h1>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>patternIsRegExp</i> be <a href=\"/sec/sec-isregexp.html\">IsRegExp</a>(<i>pattern</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>patternIsRegExp</i>).</li>\n          <li>If NewTarget is not <b>undefined</b>, let <i>newTarget</i> be NewTarget.</li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>newTarget</i> be the active function object.</li>\n              <li>If <i>patternIsRegExp</i> is <b>true</b> and <i>flags</i> is <b>undefined</b>, then\n                <ol class=\"block\">\n                  <li>Let <i>patternConstructor</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>pattern</i>,\n                      <code>&quot;constructor&quot;</code>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>patternConstructor</i>).</li>\n                  <li>If <a href=\"/sec/sec-samevalue.html\">SameValue</a>(<i>newTarget</i>, <i>patternConstructor</i>) is <b>true</b>,\n                      return <i>pattern</i>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>pattern</i>) is Object and <i>pattern</i> has a\n              [[RegExpMatcher]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>, then\n            <ol class=\"block\">\n              <li>Let <i>P</i> be the value of <i>pattern&#x2019;s</i> [[OriginalSource]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n              <li>If <i>flags</i> is <b>undefined</b>, let <i>F</i> be the value of <i>pattern&#x2019;s</i> [[OriginalFlags]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n              <li>Else, let <i>F</i> be <i>flags</i>.</li>\n            </ol>\n          </li>\n          <li>Else if <i>patternIsRegExp</i> is <b>true</b>, then\n            <ol class=\"block\">\n              <li>Let <i>P</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>pattern</i>, <code>&quot;source&quot;</code>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>P</i>).</li>\n              <li>If <i>flags</i> is <b>undefined</b>, then\n                <ol class=\"block\">\n                  <li>Let <i>F</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>pattern</i>, <code>&quot;flags&quot;</code>).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>F</i>).</li>\n                </ol>\n              </li>\n              <li>Else, let <i>F</i> be <i>flags</i>.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>P</i> be <i>pattern</i>.</li>\n              <li>Let <i>F</i> be <i>flags</i>.</li>\n            </ol>\n          </li>\n          <li>Let <i>O</i> be <a href=\"/sec/sec-regexpalloc.html\">RegExpAlloc</a>(<i>newTarget</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>O</i>).</li>\n          <li>Return <a href=\"/sec/sec-regexpinitialize.html\">RegExpInitialize</a>(<i>O,</i> <i>P</i>, <i>F</i>).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> If pattern is supplied using a <span class=\"nt\">StringLiteral</span>, the usual escape\n          sequence substitutions are performed before the String is processed by RegExp. If pattern must contain an escape\n          sequence to be recognized by RegExp, any U+005C (REVERSE SOLIDUS) code points must be escaped within the <span class=\"nt\">StringLiteral</span> to prevent them being removed when the contents of the <span class=\"nt\">StringLiteral</span> are formed.</p>\n        </div>\n      "}