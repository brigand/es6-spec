{"id":"sec-regexp.prototype-@@split","html":"\n        <h1><span class=\"secnum\" id=\"sec-21.2.5.11\"><a href=\"/sec/sec-regexp.prototype-@@split.html\" title=\"link to this section\">21.2.5.11</a></span> RegExp.prototype [ @@split ] ( string, limit )</h1>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> Returns an Array object into which substrings of the result of converting\n          <var>string</var> to a String have been stored. The substrings are determined by searching from left to right for\n          matches of the <b>this</b> value regular expression; these occurrences are not part of any substring in the returned\n          array, but serve to divide up the String value.</p>\n        </div>\n\n        <p class=\"NoteMore\">The <b>this</b> value may be an empty regular expression or a regular expression that can match an\n        empty String. In this case, regular expression does not match the empty substring at the beginning or end of the input\n        String, nor does it match the empty substring at the end of the previous separator match. (For example, if the regular\n        expression matches the empty String, the String is split up into individual code unit elements; the length of the result\n        array equals the length of the String, and each substring contains one code unit.) Only the first match at a given index\n        of the <b>this</b> String is considered, even if backtracking could yield a non-empty-substring match at that index. (For\n        example, <code>/a*?/[Symbol.split](&quot;ab&quot;)</code> evaluates to the array <code>[&quot;a&quot;,&quot;b&quot;]</code>, while\n        <code>/a*/[Symbol.split](&quot;ab&quot;)</code> evaluates to the array<code>[&quot;&quot;,&quot;b&quot;]</code>.)</p>\n\n        <p class=\"NoteMore\">If the <var>string</var> is (or converts to) the empty String, the result depends on whether the\n        regular expression can match the empty String. If it can, the result array contains no elements. Otherwise, the result\n        array contains one element, which is the empty String.</p>\n\n        <p class=\"NoteMore\">If the regular expression that contains capturing parentheses, then each time <var>separator</var> is\n        matched the results (including any <b>undefined</b> results) of the capturing parentheses are spliced into the output\n        array. For&#xA0;example,</p>\n\n        <p class=\"NoteMore\">&#xA0;&#xA0;&#xA0;&#xA0;<code>/&lt;(\\/)?([^&lt;&gt;]+)&gt;/[Symbol.split](&quot;A&lt;B&gt;bold&lt;/B&gt;and&lt;CODE&gt;coded&lt;/CODE&gt;&quot;)</code></p>\n\n        <p class=\"NoteMore\">evaluates to the array</p>\n\n        <p class=\"NoteMore\">&#xA0;&#xA0;&#xA0;&#xA0;<code>[&quot;A&quot;,undefined,&quot;B&quot;,&quot;bold&quot;,&quot;/&quot;,&quot;B&quot;,&quot;and&quot;,undefined,&quot;CODE&quot;,&quot;coded&quot;,&quot;/&quot;,&quot;CODE&quot;,&quot;&quot;]</code></p>\n\n        <p class=\"NoteMore\">If <var>limit</var> is not <b>undefined</b>, then the output array is truncated so that it contains no\n        more than <var>limit</var> elements.</p>\n\n        <p class=\"normalbefore\">When the @@<code>split</code> method is called, the following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>rx</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>rx</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>Let <i>S</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>string</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>S</i>).</li>\n          <li>Let <i>C</i> be <a href=\"/sec/sec-speciesconstructor.html\">SpeciesConstructor</a>(<i>rx</i>, %RegExp%).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>C</i>).</li>\n          <li>Let <i>flags</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>rx</i>,\n              <code>&quot;<b>flags&quot;</b></code>)).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>flags</i>).</li>\n          <li>If <i>flags</i> contains <code>&quot;<b>u&quot;</b></code>, let <i>unicodeMatching</i> be <b>true</b>.</li>\n          <li>Else, let <i>unicodeMatching</i> be <b>false</b>.</li>\n          <li>If <i>flags</i> contains <code>&quot;<b>y&quot;</b></code>, let <i>newFlags</i> be <i>flags</i>.</li>\n          <li>Else, let <i>newFlags</i> be the string that is the concatenation of <i>flags</i> and <code>&quot;<b>y&quot;</b></code>.</li>\n          <li>Let <i>splitter</i> be <a href=\"/sec/sec-construct.html\">Construct</a>(<i>C</i>, &#xAB;<i>rx</i>,\n              <i>newFlags</i>&#xBB;).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>splitter</i>).</li>\n          <li>Let <i>A</i> be <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>(0).</li>\n          <li>Let <i>lengthA</i> be 0.</li>\n          <li>If <i>limit</i> is <b>undefined</b>, let <i>lim</i> be 2<sup>53</sup>&#x2013;1; else let <i>lim</i> be <a href=\"/sec/sec-tolength.html\">ToLength</a>(<i>limit</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>lim</i>).</li>\n          <li>Let <i>size</i> be the number of elements in <i>S</i>.</li>\n          <li>Let <i>p</i> be 0.</li>\n          <li>If <i>lim</i> = 0, return <i>A</i>.</li>\n          <li>If <i>size</i> = 0, then\n            <ol class=\"block\">\n              <li>Let <i>z</i> be <a href=\"/sec/sec-regexpexec.html\">RegExpExec</a>(<i>splitter</i>, <i>S</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>z</i>).</li>\n              <li>If <i>z</i> is not <b>null</b>, return <i>A</i>.</li>\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: The following call will never result in an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n              <li>Perform  <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>A</i>, <code>&quot;<b>0</b>&quot;</code>,\n                  <i>S</i>).</li>\n              <li>Return <i>A</i>.</li>\n            </ol>\n          </li>\n          <li>Let <i>q</i> be <i>p</i>.</li>\n          <li>Repeat, while <i>q</i> &lt; <i>size</i>\n            <ol class=\"block\">\n              <li>Let <i>setStatus</i> be <a href=\"/sec/sec-set-o-p-v-throw.html\">Set</a>(<i>splitter</i>, <code>&quot;<b>lastIndex</b>&quot;</code>,\n                  <i>q</i>, <b>true</b>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>setStatus</i>).</li>\n              <li>Let <i>z</i> be <a href=\"/sec/sec-regexpexec.html\">RegExpExec</a>(<i>splitter</i>, <i>S</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>z</i>).</li>\n              <li>If <i>z</i> is <b>null</b>, let <i>q</i> be <a href=\"/sec/sec-advancestringindex.html\">AdvanceStringIndex</a>(<i>S</i>,\n                  <i>q</i>, <i>unicodeMatching</i>).</li>\n              <li>Else  <i>z</i> is not <b>null</b>,\n                <ol class=\"block\">\n                  <li>Let <i>e</i> be <a href=\"/sec/sec-tolength.html\">ToLength</a>(<a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>splitter</i>,\n                      <code>&quot;<b>lastIndex</b>&quot;</code>)).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>e</i>).</li>\n                  <li>If <i>e</i> = <i>p</i>, let <i>q</i> be <a href=\"/sec/sec-advancestringindex.html\">AdvanceStringIndex</a>(<i>S</i>,\n                      <i>q</i>, <i>unicodeMatching</i>).</li>\n                  <li>Else <i>e</i> &#x2260; <i>p</i>,\n                    <ol class=\"block\">\n                      <li>Let <i>T</i> be a String value equal to the substring of <i>S</i> consisting of the elements at indices\n                          <i>p</i> (inclusive) through <i>q</i> (exclusive).</li>\n                      <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: The following call will never result in an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                      <li>Perform  <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>A</i>, <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>lengthA</i>), <i>T</i>).</li>\n                      <li>Let <i>lengthA</i> be <i>lengthA</i> +1.</li>\n                      <li>If <i>lengthA</i> = <i>lim</i>, return <i>A</i>.</li>\n                      <li>Let <i>p</i> be <i>e</i>.</li>\n                      <li>Let <i>numberOfCaptures</i> be <a href=\"/sec/sec-tolength.html\">ToLength</a>(<a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>z</i>, <code>&quot;<b>length</b>&quot;</code>)).</li>\n                      <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>numberOfCaptures</i>).</li>\n                      <li>Let <i>numberOfCaptures</i> be max(<i>numberOfCaptures</i>-1, 0).</li>\n                      <li>Let <i>i</i> be 1.</li>\n                      <li>Repeat, while <i>i</i> &#x2264; <i>numberOfCaptures</i>.\n                        <ol class=\"block\">\n                          <li>Let <i>nextCapture</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>z</i>, <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>i</i>)).</li>\n                          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextCapture</i>).</li>\n                          <li>Perform  <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>A</i>, <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>lengthA</i>), <i>nextCapture</i>).</li>\n                          <li>Let <i>i</i> be <i>i</i> +1.</li>\n                          <li>Let <i>lengthA</i> be <i>lengthA</i> +1.</li>\n                          <li>If <i>lengthA</i> = <i>lim</i>, return <i>A</i>.</li>\n                        </ol>\n                      </li>\n                      <li>Let <i>q</i> be <i>p</i>.</li>\n                    </ol>\n                  </li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Let <i>T</i> be a String value equal to the substring of <i>S</i> consisting of the elements at indices <i>p</i>\n              (inclusive) through <i>size</i> (exclusive).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: The following call will never result in an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n          <li>Perform <a href=\"/sec/sec-createdataproperty.html\">CreateDataProperty</a>(<i>A</i>, <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>lengthA</i>), <i>T</i> ).</li>\n          <li>Return <i>A</i>.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the @@<code>split</code> method is <b>2</b>.</p>\n\n        <p>The value of the <code>name</code> property of this function is <code>&quot;[Symbol.split]&quot;</code>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> The @@<code>split</code> method ignores the value of the <code>global</code> and\n          <code>sticky</code> properties of this RegExp object.</p>\n        </div>\n      "}