{"id":"sec-runtime-semantics-catchclauseevaluation","html":"\n      <h1><span class=\"secnum\" id=\"sec-13.15.7\"><a href=\"/sec/sec-runtime-semantics-catchclauseevaluation.html\" title=\"link to this section\">13.15.7</a></span> Runtime Semantics: CatchClauseEvaluation</h1>\n\n      <p>with parameter <var>thrownValue</var></p>\n\n      <div class=\"gp prod\"><span class=\"nt\">Catch</span> <span class=\"geq\">:</span> <code class=\"t\">catch</code> <code class=\"t\">(</code> <span class=\"nt\">CatchParameter</span> <code class=\"t\">)</code> <span class=\"nt\">Block</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>oldEnv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n        <li>Let <i>catchEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>oldEnv</i>).</li>\n        <li>For each element <i>argName</i> of the BoundNames of <i>CatchParameter</i>, do\n          <ol class=\"block\">\n            <li>Perform <i>catchEnv</i>.CreateMutableBinding(<i>argName</i>).</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: The above call to CreateMutableBinding will never return an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n          </ol>\n        </li>\n        <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>catchEnv</i>.</li>\n        <li>Let <i>status</i> be the result of performing BindingInitialization for <i>CatchParameter</i> passing\n            <i>thrownValue</i> and <i>catchEnv</i> as arguments.</li>\n        <li>If <i>status</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n          <ol class=\"block\">\n            <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n            <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>status</i>).</li>\n          </ol>\n        </li>\n        <li>Let <i>B</i> be the result of evaluating <i>Block</i>.</li>\n        <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n        <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>B</i>).</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> No matter how control leaves the <span class=\"nt\">Block</span> the <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> is always restored to its former state.</p>\n      </div>\n    "}