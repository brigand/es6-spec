{"id":"sec-runtime-semantics-classdefinitionevaluation","html":"\n      <h1><span class=\"secnum\" id=\"sec-14.5.14\"><a href=\"/sec/sec-runtime-semantics-classdefinitionevaluation.html\" title=\"link to this section\">14.5.14</a></span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n\n      <p>With parameter <var>className</var>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">ClassTail</span> <span class=\"geq\">:</span> <span class=\"nt\">ClassHeritage</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">{</code> <span class=\"nt\">ClassBody</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Let <i>lex</i> be the <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> of <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n        <li>Let <i>classScope</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>lex</i>).</li>\n        <li>Let <i>classScopeEnvRec</i> be <i>classScope</i>&#x2019;s <a href=\"/sec/sec-lexical-environments.html\">EnvironmentRecord</a>.</li>\n        <li>If <i>className</i> is not <b>undefined</b>, then\n          <ol class=\"block\">\n            <li>Perform <i>classScopeEnvRec.</i>CreateImmutableBinding(<i>className</i>, <b>true</b>).</li>\n          </ol>\n        </li>\n        <li>If <i>ClassHeritage</i><sub>opt</sub> is not present, then\n          <ol class=\"block\">\n            <li>Let <i>protoParent</i> be the intrinsic object %ObjectPrototype%.</li>\n            <li>Let <i>constructorParent</i> be the intrinsic object %FunctionPrototype%.</li>\n          </ol>\n        </li>\n        <li>Else\n          <ol class=\"block\">\n            <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>classScope</i>.</li>\n            <li>Let <i>superclass</i> be the result of evaluating <i>ClassHeritage</i>.</li>\n            <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>lex</i>.</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>superclass</i>).</li>\n            <li>If <i>superclass</i> is <b>null</b>, then\n              <ol class=\"block\">\n                <li>Let <i>protoParent</i> be <b>null</b>.</li>\n                <li>Let <i>constructorParent</i> be the intrinsic object %FunctionPrototype%.</li>\n              </ol>\n            </li>\n            <li>Else if <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a>(<i>superclass</i>) is <b>false</b>, throw a\n                <b>TypeError</b> exception.</li>\n            <li>Else\n              <ol class=\"block\">\n                <li>If <i>superclass</i> has a [[FunctionKind]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n                    slot</a> whose value is <code>&quot;generator&quot;</code>, throw a <b>TypeError</b> exception.</li>\n                <li>Let <i>protoParent</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>superclass</i>, <code>&quot;prototype&quot;</code>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>protoParent</i>).</li>\n                <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>protoParent</i>) is neither Object nor Null,\n                    throw a <b>TypeError</b> exception.</li>\n                <li>Let <i>constructorParent</i> be <i>superclass</i>.</li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>Let <i>proto</i> be <a href=\"/sec/sec-objectcreate.html\">ObjectCreate</a>(<i>protoParent</i>).</li>\n        <li>If <i>ClassBody</i><sub>opt</sub> is not present, let <i>constructor</i> be <span style=\"font-family:\n            sans-serif\">empty</span>.</li>\n        <li>Else, let <i>constructor</i> be ConstructorMethod of <i>ClassBody</i>.</li>\n        <li>If <i>constructor</i> is <span style=\"font-family: sans-serif\">empty</span>, then,\n          <ol class=\"block\">\n            <li>If <i>ClassHeritage</i><sub>opt</sub> is present, then\n              <ol class=\"block\">\n                <li>Let <i>constructor</i> be the result of parsing the source\n                    text<br>&#xA0;&#xA0;&#xA0;&#xA0;<code>constructor(... args){ super</code> <code>(...args);}<br></code>using\n                    the syntactic grammar with the goal symbol <i>MethodDefinition.</i></li>\n              </ol>\n            </li>\n            <li>Else,\n              <ol class=\"block\">\n                <li>Let <i>constructor</i> be the result of parsing the source text<br>&#xA0;&#xA0;&#xA0;&#xA0;<code>constructor(\n                    ){ }<br></code>using the syntactic grammar with the goal symbol <i>MethodDefinition.</i></li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>classScope</i>.</li>\n        <li>Let <i>constructorInfo</i> be the result of performing DefineMethod for <i>constructor</i> with arguments <i>proto</i>\n            and <i>constructorParent</i> as the optional <i>functionPrototype</i> argument.</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <i>constructorInfo</i> is not an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n        <li>Let <i>F</i> be <i>constructorInfo</i>.[[closure]]</li>\n        <li>If <i>ClassHeritage</i><sub>opt</sub> is present, set <i>F</i>&#x2019;s [[ConstructorKind]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to <code>&quot;derived&quot;</code>.</li>\n        <li>Perform <a href=\"/sec/sec-makeconstructor.html\">MakeConstructor</a>(<i>F</i>, <b>false</b>, <i>proto</i>).</li>\n        <li>Perform <a href=\"/sec/sec-makeclassconstructor.html\">MakeClassConstructor</a>(<i>F</i>).</li>\n        <li>Perform <a href=\"/sec/sec-createmethodproperty.html\">CreateMethodProperty</a>(<i>proto</i>, <code>&quot;constructor&quot;</code>,\n            <i>F</i>)<i>.</i></li>\n        <li>If <i>ClassBody</i><sub>opt</sub> is not present, let <i>methods</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>Else, let <i>methods</i> be NonConstructorMethodDefinitions of <i>ClassBody</i>.</li>\n        <li>For each <i>ClassElement</i> <i>m</i> in order from <i>methods</i>\n          <ol class=\"block\">\n            <li>If IsStatic of <i>m</i> is <b>false</b>, then\n              <ol class=\"block\">\n                <li>Let <i>status</i> be the result of performing PropertyDefinitionEvaluation for <i>m</i> with arguments\n                    <i>proto</i> and <b>false</b>.</li>\n              </ol>\n            </li>\n            <li>Else,\n              <ol class=\"block\">\n                <li>Let <i>status</i> be the result of performing PropertyDefinitionEvaluation for <i>m</i> with arguments\n                    <i>F</i> and <b>false</b>.</li>\n              </ol>\n            </li>\n            <li>If <i>status</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n              <ol class=\"block\">\n                <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>lex</i>.</li>\n                <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>status</i>).</li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>lex</i>.</li>\n        <li>If <i>className</i> is not <b>undefined</b>, then\n          <ol class=\"block\">\n            <li>Perform <i>classScopeEnvRec.</i>InitializeBinding(<i>className</i>, <i>F</i>).</li>\n          </ol>\n        </li>\n        <li>Return <i>F</i>.</li>\n      </ol>\n    "}