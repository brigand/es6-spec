{"id":"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind","html":"\n        <h1><span class=\"secnum\" id=\"sec-13.7.5.12\"><a href=\"/sec/sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind.html\" title=\"link to this section\">13.7.5.12</a></span> Runtime Semantics: ForIn/OfHeadEvaluation ( TDZnames, expr,\n            iterationKind)</h1>\n\n        <p class=\"normalbefore\">The abstract operation ForIn/OfHeadEvaluation is called with arguments <span class=\"nt\">TDZnames</span>, <var>expr</var>, and <span style=\"font-family: Times New Roman\"><i>iterationKind</i>.</span>\n        The value of <var>iterationKind</var> is either <b>enumerate</b> or <b>iterate</b>.</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>oldEnv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n          <li>If <i>TDZnames</i> is not an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>, then\n            <ol class=\"block\">\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>TDZnames</i> has no duplicate entries.</li>\n              <li>Let <i>TDZ</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>oldEnv</i>).</li>\n              <li>For each string <i>name</i> in <i>TDZnames</i>, do\n                <ol class=\"block\">\n                  <li>Let <i>status</i> be <i>TDZ</i>.CreateMutableBinding(<i>name</i>, <b>false</b>).</li>\n                  <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>status</i> is never an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</li>\n                </ol>\n              </li>\n              <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>TDZ</i>.</li>\n            </ol>\n          </li>\n          <li>Let <i>exprRef</i> be the result of evaluating the production that is <i>expr</i>.</li>\n          <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n          <li>Let <i>exprValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>exprValue</i>).</li>\n          <li>If <i>iterationKind</i> is <span style=\"font-family: sans-serif\">enumerate</span>, then\n            <ol class=\"block\">\n              <li>If <i>exprValue</i>.[[value]] is <b>null</b> or <b>undefined</b>, then\n                <ol class=\"block\">\n                  <li>Return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <span style=\"font-family: sans-serif\">break</span>, [[value]]: <span style=\"font-family: sans-serif\">empty,</span>\n                      [[target]]: <span style=\"font-family: sans-serif\">empty</span>}.</li>\n                </ol>\n              </li>\n              <li>Let <i>obj</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<i>exprValue</i>).</li>\n              <li>Return <i>obj</i>.[[Enumerate]]().</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>iterationKind</i> is <span style=\"font-family:\n                  sans-serif\">iterate</span>.</li>\n              <li>Return <a href=\"/sec/sec-getiterator.html\">GetIterator</a>(<i>exprValue</i>).</li>\n            </ol>\n          </li>\n        </ol>\n      "}