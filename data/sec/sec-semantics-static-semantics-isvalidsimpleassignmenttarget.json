{"id":"sec-semantics-static-semantics-isvalidsimpleassignmenttarget","html":"\n        <h1><span class=\"secnum\" id=\"sec-12.2.1.5\"><a href=\"/sec/sec-semantics-static-semantics-isvalidsimpleassignmenttarget.html\" title=\"link to this section\">12.2.1.5</a></span> Static Semantics:  IsValidSimpleAssignmentTarget</h1>\n\n        <p>See also: <a href=\"/sec/sec-identifiers-static-semantics-isvalidsimpleassignmenttarget.html\">12.1.3</a>, <a href=\"/sec/sec-grouping-operator-static-semantics-isvalidsimpleassignmenttarget.html\">12.2.10.3</a>, <a href=\"/sec/sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget.html\">12.3.1.5</a>, <a href=\"/sec/sec-postfix-expressions-static-semantics-isvalidsimpleassignmenttarget.html\">12.4.3</a>, <a href=\"/sec/sec-unary-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.5.3</a>, <a href=\"/sec/sec-multiplicative-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.6.2</a>, <a href=\"/sec/sec-additive-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.7.2</a>, <a href=\"/sec/sec-bitwise-shift-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.8.2</a>, <a href=\"/sec/sec-relational-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.9.2</a>, <a href=\"/sec/sec-equality-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.10.2</a>, <a href=\"/sec/sec-binary-bitwise-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.11.2</a>, <a href=\"/sec/sec-binary-logical-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.12.2</a>, <a href=\"/sec/sec-conditional-operator-static-semantics-isvalidsimpleassignmenttarget.html\">12.13.2</a>, <a href=\"/sec/sec-assignment-operators-static-semantics-isvalidsimpleassignmenttarget.html\">12.14.3</a>, <a href=\"/sec/sec-comma-operator-static-semantics-isvalidsimpleassignmenttarget.html\">12.15.2</a>.</p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">this</code></div>\n          <div class=\"rhs\"><span class=\"nt\">Literal</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ArrayLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ObjectLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">FunctionExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ClassExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">GeneratorExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">RegularExpressionLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">TemplateLiteral</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>expr</i> be CoveredParenthesizedExpression of <i>CoverParenthesizedExpressionAndArrowParameterList</i>.</li>\n          <li>Return IsValidSimpleAssignmentTarget of <i>expr</i>.</li>\n        </ol>\n      "}