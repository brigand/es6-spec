{"id":"sec-set-objects","html":"\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-23.2\"><a href=\"/sec/sec-set-objects.html\" title=\"link to this section\">23.2</a></span> Set\n          Objects</h1>\n\n      <p>Set objects are collections of <a href=\"/sec/sec-ecmascript-language-types.html\">ECMAScript language values</a>. A distinct value\n      may only occur once as an element of a Set&#x2019;s collection. Distinct values are discriminated using the <a href=\"/sec/sec-samevaluezero.html\">SameValueZero</a> comparison algorithm.</p>\n\n      <p>Set objects must be implemented using either hash tables or other mechanisms that, on average, provide access times that\n      are sublinear on the number of elements in the collection. The data structures used in this Set objects specification is\n      only intended to describe the required observable semantics of Set objects. It is not intended to be a viable implementation\n      model.</p>\n    </div>\n\n    <section id=\"sec-set-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.1\"><a href=\"/sec/sec-set-constructor.html\" title=\"link to this section\">23.2.1</a></span> The\n            Set Constructor</h1>\n\n        <p>The Set constructor is the %Set% intrinsic object and the initial value of the <code>Set</code> property of the global\n        object. When called as a constructor it creates and initializes a new Set object. <code>Set</code> is not intended to be\n        called as a function and will throw an exception when called in that manner.</p>\n\n        <p>The <code>Set</code> constructor is designed to be subclassable. It may be used as the value in an <code>extends</code>\n        clause of a class definition. Subclass constructors that intend to inherit the specified <code>Set</code> behaviour must\n        include a <code>super</code> call to the <code>Set</code> constructor to create and initialize the subclass instance with\n        the internal state necessary to support the <code>Set.prototype</code> built-in methods.</p>\n      </div>\n\n      <section id=\"sec-set-iterable\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.1.1\"><a href=\"/sec/sec-set-iterable.html\" title=\"link to this section\">23.2.1.1</a></span>\n            Set ( [ iterable ] )</h1>\n\n        <p class=\"normalbefore\">When the <code>Set</code> function is called with optional argument <var>iterable</var> the\n        following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If NewTarget is <b>undefined</b>, throw a <b>TypeError</b> exception.</li>\n          <li>Let <i>set</i> be <a href=\"/sec/sec-ordinarycreatefromconstructor.html\">OrdinaryCreateFromConstructor</a>(NewTarget,\n              <code>&quot;%SetPrototype%&quot;</code>, &#xAB;&#x200D;[[SetData]]&#xBB; ).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>set</i>).</li>\n          <li>Set <i>set&#x2019;s</i> [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> to a\n              new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>If <i>iterable</i> is not present, let <i>iterable</i> be <b>undefined</b>.</li>\n          <li>If <i>iterable</i> is either <b>undefined</b> or <b>null</b>, let <i>iter</i> be <b>undefined</b>.</li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>adder</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>set</i>, <code>&quot;add&quot;</code>)<b>.</b></li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>adder</i>).</li>\n              <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>adder</i>) is <b>false</b>, throw a <b>TypeError</b>\n                  exception.</li>\n              <li>Let <i>iter</i> be <a href=\"/sec/sec-getiterator.html\">GetIterator</a>(<i>iterable</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>iter</i>).</li>\n            </ol>\n          </li>\n          <li>If <i>iter</i> is <b>undefined</b>, return <i>set</i>.</li>\n          <li>Repeat\n            <ol class=\"block\">\n              <li>Let <i>next</i> be <a href=\"/sec/sec-iteratorstep.html\">IteratorStep</a>(<i>iter</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n              <li>If <i>next</i> is <b>false</b>, return <i>set</i>.</li>\n              <li>Let <i>nextValue</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>next</i>).</li>\n              <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextValue</i>).</li>\n              <li>Let <i>status</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>adder</i>, <i>set</i>,\n                  &#xAB;<i>nextValue</i>.[[value]]&#xBB;).</li>\n              <li>If <i>status</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, return <a href=\"/sec/sec-iteratorclose.html\">IteratorClose</a>(<i>iter</i>, <i>status</i>).</li>\n            </ol>\n          </li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-set-constructor\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.2\"><a href=\"/sec/sec-properties-of-the-set-constructor.html\" title=\"link to this section\">23.2.2</a></span> Properties of the Set Constructor</h1>\n\n        <p>The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the Set\n        constructor is the intrinsic object %FunctionPrototype% (<a href=\"/sec/sec-properties-of-the-function-prototype-object.html\">19.2.3</a>).</p>\n\n        <p>Besides the <code>length</code> property (whose value is <b>0</b>), the Set constructor has the following\n        properties:</p>\n      </div>\n\n      <section id=\"sec-set.prototype\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.2.1\"><a href=\"/sec/sec-set.prototype.html\" title=\"link to this section\">23.2.2.1</a></span>\n            Set.prototype</h1>\n\n        <p>The initial value of <code>Set.prototype</code> is the intrinsic %SetPrototype% object (<a href=\"/sec/sec-properties-of-the-set-prototype-object.html\">23.2.3</a>).</p>\n\n        <p>This property has the attributes { [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n        <b>false</b> }.</p>\n      </section>\n\n      <section id=\"sec-get-set-@@species\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.2.2\"><a href=\"/sec/sec-get-set-@@species.html\" title=\"link to this section\">23.2.2.2</a></span> get Set [ @@species ]</h1>\n\n        <p class=\"normalbefore\"><code>Set[@@species]</code> is an accessor property whose set accessor function is <span class=\"value\">undefined</span>. Its get accessor function performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Return the <b>this</b> value.</li>\n        </ol>\n\n        <p>The value of the <code>name</code> property of this function is <code>&quot;get [Symbol.species]&quot;</code>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> Methods that create derived collection objects should call @@species to determine the\n          constructor to use to create the derived objects. Subclass constructor may over-ride @@species to change the default\n          constructor assignment.</p>\n        </div>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-the-set-prototype-object\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3\"><a href=\"/sec/sec-properties-of-the-set-prototype-object.html\" title=\"link to this section\">23.2.3</a></span> Properties of the Set Prototype Object</h1>\n\n        <p>The Set prototype object is the intrinsic object %SetPrototype%. The value of the [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of the Set prototype object is the intrinsic\n        object %ObjectPrototype% (<a href=\"/sec/sec-properties-of-the-object-prototype-object.html\">19.1.3</a>). The Set prototype object\n        is an ordinary object. It does not have a [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n        slot</a>.</p>\n      </div>\n\n      <section id=\"sec-set.prototype.add\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.1\"><a href=\"/sec/sec-set.prototype.add.html\" title=\"link to this section\">23.2.3.1</a></span> Set.prototype.add ( value )</h1>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>S</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>S</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>S</i> does not have a [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>,\n              throw a <b>TypeError</b> exception.</li>\n          <li>Let <i>entries</i> be the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> that is the value of\n              <i>S</i>&#x2019;s [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Repeat for each <i>e</i> that is an element of <i>entries,</i>\n            <ol class=\"block\">\n              <li>If <i>e</i> is not <span style=\"font-family: sans-serif\">empty</span> and <a href=\"/sec/sec-samevaluezero.html\">SameValueZero</a>(<i>e</i>, <i>value</i>) is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Return <i>S</i>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>If <i>value</i> is &#x2212;0, let <i>value</i> be +0.</li>\n          <li>Append <i>value</i> as the last element of <i>entries</i>.</li>\n          <li>Return <i>S</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-set.prototype.clear\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.2\"><a href=\"/sec/sec-set.prototype.clear.html\" title=\"link to this section\">23.2.3.2</a></span> Set.prototype.clear ( )</h1>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>S</i> be <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>S</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>S</i> does not have a [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>,\n              throw a <b>TypeError</b> exception.</li>\n          <li>Let <i>entries</i> be the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> that is the value of\n              <i>S</i>&#x2019;s [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Repeat for each <i>e</i> that is an element of <i>entries,</i>\n            <ol class=\"block\">\n              <li>Replace the element of <i>entries</i> whose value is <i>e</i> with an element whose value is <span style=\"font-family: sans-serif\">empty</span><i>.</i></li>\n            </ol>\n          </li>\n          <li>Return <b>undefined</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-set.prototype.constructor\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.3\"><a href=\"/sec/sec-set.prototype.constructor.html\" title=\"link to this section\">23.2.3.3</a></span> Set.prototype.constructor</h1>\n\n        <p>The initial value of <code>Set.prototype.constructor</code> is the intrinsic object %Set%.</p>\n      </section>\n\n      <section id=\"sec-set.prototype.delete\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.4\"><a href=\"/sec/sec-set.prototype.delete.html\" title=\"link to this section\">23.2.3.4</a></span> Set.prototype.delete ( value )</h1>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>S</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>S</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>S</i> does not have a [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>,\n              throw a <b>TypeError</b> exception.</li>\n          <li>Let <i>entries</i> be the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> that is the value of\n              <i>S</i>&#x2019;s [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Repeat for each  <i>e</i> that is an element of <i>entries</i>,\n            <ol class=\"block\">\n              <li>If <i>e</i> is not <span style=\"font-family: sans-serif\">empty</span> and <a href=\"/sec/sec-samevaluezero.html\">SameValueZero</a>(<i>e</i>, <i>value</i>) is <b>true</b>, then\n                <ol class=\"block\">\n                  <li>Replace the element of <i>entries</i> whose value is <i>e</i> with an element whose value is <span style=\"font-family: sans-serif\">empty</span><i>.</i></li>\n                  <li>Return <b>true</b>.</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The value <b>empty</b> is used as a specification device to indicate that an entry has\n          been deleted. Actual implementations may take other actions such as physically removing the entry from internal data\n          structures.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-set.prototype.entries\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.5\"><a href=\"/sec/sec-set.prototype.entries.html\" title=\"link to this section\">23.2.3.5</a></span> Set.prototype.entries ( )</h1>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>S</i> be the <b>this</b> value.</li>\n          <li>Return <a href=\"/sec/sec-createsetiterator.html\">CreateSetIterator</a>(<i>S</i>, <b>&quot;<code>key+value</code>&quot;</b>).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> For iteration purposes, a Set appears similar to a Map where each entry has the same\n          value for its key and value.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-set.prototype.foreach\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.6\"><a href=\"/sec/sec-set.prototype.foreach.html\" title=\"link to this section\">23.2.3.6</a></span> Set.prototype.forEach ( callbackfn [ , thisArg ] )</h1>\n\n        <p class=\"normalbefore\">When the <code>forEach</code> method is called with one or two arguments, the following steps are\n        taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>S</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>S</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>S</i> does not have a [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>,\n              throw a <b>TypeError</b> exception.</li>\n          <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>callbackfn</i>) is <b>false</b>, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>thisArg</i> was supplied, let <i>T</i> be <i>thisArg</i>; else let <i>T</i> be <b>undefined</b>.</li>\n          <li>Let <i>entries</i> be the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> that is the value of\n              <i>S</i>&#x2019;s [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Repeat for each <i>e</i> that is an element of <i>entries,</i> in original insertion order\n            <ol class=\"block\">\n              <li>If <i>e</i> is not <span style=\"font-family: sans-serif\">empty</span>, then\n                <ol class=\"block\">\n                  <li>Let <i>funcResult</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>callbackfn</i>, <i>T</i>, &#xAB;<i>e</i>,\n                      <i>e</i>, <i>S</i>&#xBB;).</li>\n                  <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>funcResult</i>).</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Return <b>undefined</b>.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>forEach</code> method is <b>1</b>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> <var>callbackfn</var> should be a function that accepts three arguments.\n          <code>forEach</code> calls <var>callbackfn</var> once for each value present in the set object, in value insertion\n          order. <var>callbackfn</var> is called only for values of the Set which actually exist; it is not called for keys that\n          have been  deleted from the set.</p>\n\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <b>this</b> value for each invocation of\n          <var>callbackfn</var>. If it is not provided, <b>undefined</b> is used instead.</p>\n\n          <p><var>callbackfn</var> is called with three arguments: the first two arguments are a value contained in the Set. The\n          same value is passed for both arguments. The Set object being traversed is passed as the third argument.</p>\n\n          <p>The <var>callbackfn</var> is called with three arguments to be consistent with the call back functions used by\n          <code>forEach</code> methods for Map and Array. For Sets, each item value is considered to be both the key and the\n          value.</p>\n\n          <p><code>forEach</code> does not directly mutate the object on which it is called but the object may be mutated by the\n          calls to <var>callbackfn</var>.</p>\n\n          <p>Each value is normally visited only once. However, a value will be revisited if it is deleted after it has been\n          visited and then re-added before the <code>forEach</code> call completes. Values that are deleted after the call to\n          <code>forEach</code> begins and before being visited are not visited unless the value is added again before the\n          <code>forEach</code> call completes. New values added after the call to <code>forEach</code> begins are visited.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-set.prototype.has\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.7\"><a href=\"/sec/sec-set.prototype.has.html\" title=\"link to this section\">23.2.3.7</a></span> Set.prototype.has ( value )</h1>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>S</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>S</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>S</i> does not have a [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>,\n              throw a <b>TypeError</b> exception.</li>\n          <li>Let <i>entries</i> be the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> that is the value of\n              <i>S</i>&#x2019;s [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Repeat for each <i>e</i> that is an element of <i>entries,</i>\n            <ol class=\"block\">\n              <li>If <i>e</i> is not <span style=\"font-family: sans-serif\">empty</span> and <a href=\"/sec/sec-samevaluezero.html\">SameValueZero</a>(<i>e</i>, <i>value</i>) is <b>true</b>, return\n                  <b>true</b><i>.</i></li>\n            </ol>\n          </li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-set.prototype.keys\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.8\"><a href=\"/sec/sec-set.prototype.keys.html\" title=\"link to this section\">23.2.3.8</a></span> Set.prototype.keys ( )</h1>\n\n        <p>The initial value of the <code>keys</code> property is the same function object as the initial value of the\n        <code>values</code> property.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> For iteration purposes, a Set appears similar to a Map where each entry has the same\n          value for its key and value.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-get-set.prototype.size\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.9\"><a href=\"/sec/sec-get-set.prototype.size.html\" title=\"link to this section\">23.2.3.9</a></span> get Set.prototype.size</h1>\n\n        <p class=\"normalbefore\"><code>Set.prototype.size</code> is an accessor property whose set accessor function is <span class=\"value\">undefined</span>. Its get accessor function performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>S</i> be the <b>this</b> value.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>S</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>S</i> does not have a [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>,\n              throw a <b>TypeError</b> exception.</li>\n          <li>Let <i>entries</i> be the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> that is the value of\n              <i>S</i>&#x2019;s [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n          <li>Let <i>count</i> be 0.</li>\n          <li>For each <i>e</i> that is an element of <i>entries</i>\n            <ol class=\"block\">\n              <li>If <i>e</i> is not <span style=\"font-family: sans-serif\">empty</span>, set <i>count</i> to <i>count</i>+1.</li>\n            </ol>\n          </li>\n          <li>Return <i>count</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-set.prototype.values\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.10\"><a href=\"/sec/sec-set.prototype.values.html\" title=\"link to this section\">23.2.3.10</a></span> Set.prototype.values ( )</h1>\n\n        <p class=\"normalbefore\">The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>S</i> be the <b>this</b> value.</li>\n          <li>Return <a href=\"/sec/sec-createsetiterator.html\">CreateSetIterator</a>(<i>S</i>, <b>&quot;<code>value</code>&quot;</b>).</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-set.prototype-@@iterator\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.11\"><a href=\"/sec/sec-set.prototype-@@iterator.html\" title=\"link to this section\">23.2.3.11</a></span> Set.prototype [ @@iterator ] ( )</h1>\n\n        <p>The initial value of the @@iterator property is the same function object as the initial value of the\n        <code>values</code> property.</p>\n      </section>\n\n      <section id=\"sec-set.prototype-@@tostringtag\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.3.12\"><a href=\"/sec/sec-set.prototype-@@tostringtag.html\" title=\"link to this section\">23.2.3.12</a></span> Set.prototype [ @@toStringTag ]</h1>\n\n        <p>The initial value of the @@toStringTag property is the String value <code>&quot;Set&quot;</code>.</p>\n\n        <p>This property has the attributes { [[Writable]]: <span class=\"value\">false</span>, [[Enumerable]]: <span class=\"value\">false</span>, [[Configurable]]: <span class=\"value\">true</span> }.</p>\n      </section>\n    </section>\n\n    <section id=\"sec-properties-of-set-instances\">\n      <h1><span class=\"secnum\" id=\"sec-23.2.4\"><a href=\"/sec/sec-properties-of-set-instances.html\" title=\"link to this section\">23.2.4</a></span> Properties of Set Instances</h1>\n\n      <p>Set instances are ordinary objects that inherit properties from the Set prototype. Set instances also have a [[SetData]]\n      <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</p>\n    </section>\n\n    <section id=\"sec-set-iterator-objects\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.5\"><a href=\"/sec/sec-set-iterator-objects.html\" title=\"link to this section\">23.2.5</a></span> Set Iterator Objects</h1>\n\n        <p>A Set Iterator is an ordinary object, with the structure defined below, that represents a specific iteration over some\n        specific Set instance object. There is not a named constructor for Set Iterator objects. Instead, set iterator objects are\n        created by calling certain methods of Set instance objects.</p>\n      </div>\n\n      <section id=\"sec-createsetiterator\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.5.1\"><a href=\"/sec/sec-createsetiterator.html\" title=\"link to this section\">23.2.5.1</a></span> CreateSetIterator Abstract Operation</h1>\n\n        <p class=\"normalbefore\">Several methods of Set objects return Iterator objects. The abstract operation CreateSetIterator\n        with arguments <var>set</var> and <var>kind</var> is used to create such iterator objects. It performs the following\n        steps:</p>\n\n        <ol class=\"proc\">\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>set</i>) is not Object, throw a <b>TypeError</b>\n              exception.</li>\n          <li>If <i>set</i> does not have a [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a>, throw a <b>TypeError</b> exception.</li>\n          <li>Let <i>iterator</i> be <a href=\"/sec/sec-objectcreate.html\">ObjectCreate</a>(%SetIteratorPrototype%,\n              &#xAB;&#x200D;[[IteratedSet]], [[SetNextIndex]], [[SetIterationKind]]&#xBB;).</li>\n          <li>Set <i>iterator&#x2019;s</i> [[IteratedSet]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a> to <i>set</i>.</li>\n          <li>Set <i>iterator&#x2019;s</i> [[SetNextIndex]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a> to 0.</li>\n          <li>Set <i>iterator&#x2019;s</i> [[SetIterationKind]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n              slot</a> to <i>kind</i>.</li>\n          <li>Return <i>iterator</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-%setiteratorprototype%-object\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-23.2.5.2\"><a href=\"/sec/sec-%setiteratorprototype%-object.html\" title=\"link to this section\">23.2.5.2</a></span> The %SetIteratorPrototype% Object</h1>\n\n          <p>All Set Iterator Objects inherit properties from the %SetIteratorPrototype% intrinsic object. The\n          %SetIteratorPrototype% intrinsic object is an ordinary object and its [[Prototype]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is the %IteratorPrototype% intrinsic object (<a href=\"/sec/sec-%iteratorprototype%-object.html\">25.1.2</a>). In addition, %SetIteratorPrototype% has the following\n          properties:</p>\n        </div>\n\n        <section id=\"sec-%setiteratorprototype%.next\">\n          <h1><span class=\"secnum\" id=\"sec-23.2.5.2.1\"><a href=\"/sec/sec-%setiteratorprototype%.next.html\" title=\"link to this section\">23.2.5.2.1</a></span> %SetIteratorPrototype%.next ( )</h1>\n          <ol class=\"proc\">\n            <li>Let <i>O</i> be the <b>this</b> value.</li>\n            <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is not Object, throw a <b>TypeError</b>\n                exception.</li>\n            <li>If <i>O</i> does not have all of the internal slots of a Set Iterator Instance (<a href=\"/sec/sec-properties-of-set-iterator-instances.html\">23.2.5.3</a>), throw a <b>TypeError</b> exception.</li>\n            <li>Let <i>s</i> be the value of the [[IteratedSet]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of <i>O</i>.</li>\n            <li>Let <i>index</i> be the value of the [[SetNextIndex]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of <i>O</i>.</li>\n            <li>Let <i>itemKind</i> be the value of the [[SetIterationKind]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of <i>O</i>.</li>\n            <li>If <i>s</i> is <b>undefined</b>, return <a href=\"/sec/sec-createiterresultobject.html\">CreateIterResultObject</a>(<b>undefined</b>, <b>true</b>).</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>s</i> has a [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n            <li>Let <i>entries</i> be the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> that is the value of the\n                [[SetData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of <i>s</i>.</li>\n            <li>Repeat while <i>index</i> is less than the total number of elements of <i>entries</i>. The number of elements must\n                be redetermined each time this method is evaluated.\n              <ol class=\"block\">\n                <li>Let <i>e</i> be <i>entries</i>[<i>index</i>].</li>\n                <li>Set <i>index</i> to <i>index</i>+1;</li>\n                <li>Set the [[SetNextIndex]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of\n                    <i>O</i> to <i>index</i>.</li>\n                <li>If <i>e</i> is not <span style=\"font-family: sans-serif\">empty</span>, then\n                  <ol class=\"block\">\n                    <li>If <i>itemKind</i> is <b>&quot;<code>key+value</code>&quot;</b>, then\n                      <ol class=\"block\">\n                        <li>Return <a href=\"/sec/sec-createiterresultobject.html\">CreateIterResultObject</a>(<a href=\"/sec/sec-createarrayfromlist.html\">CreateArrayFromList</a>(&#xAB;<i>e</i>, <i>e</i>&#xBB;),\n                            <b>false</b>).</li>\n                      </ol>\n                    </li>\n                    <li>Return <a href=\"/sec/sec-createiterresultobject.html\">CreateIterResultObject</a>(<i>e</i>, <b>false</b>).</li>\n                  </ol>\n                </li>\n              </ol>\n            </li>\n            <li>Set the [[IteratedSet]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> of <i>O</i> to\n                <b>undefined</b>.</li>\n            <li>Return <a href=\"/sec/sec-createiterresultobject.html\">CreateIterResultObject</a>(<b>undefined</b>, <b>true</b>).</li>\n          </ol>\n        </section>\n\n        <section id=\"sec-%setiteratorprototype%-@@tostringtag\">\n          <h1><span class=\"secnum\" id=\"sec-23.2.5.2.2\"><a href=\"/sec/sec-%setiteratorprototype%-@@tostringtag.html\" title=\"link to this section\">23.2.5.2.2</a></span> %SetIteratorPrototype% [ @@toStringTag ]</h1>\n\n          <p>The initial value of the @@toStringTag property is the String value <code>&quot;Set Iterator&quot;</code>.</p>\n\n          <p>This property has the attributes { [[Writable]]: <span class=\"value\">false</span>, [[Enumerable]]: <span class=\"value\">false</span>, [[Configurable]]: <span class=\"value\">true</span> }.</p>\n        </section>\n      </section>\n\n      <section id=\"sec-properties-of-set-iterator-instances\">\n        <h1><span class=\"secnum\" id=\"sec-23.2.5.3\"><a href=\"/sec/sec-properties-of-set-iterator-instances.html\" title=\"link to this section\">23.2.5.3</a></span> Properties of Set Iterator Instances</h1>\n\n        <p>Set Iterator instances are ordinary objects that inherit properties from the %SetIteratorPrototype% intrinsic  object.\n        Set Iterator instances are initially created with the internal slots specified in <a href=\"/sec/table-51.html\">Table 51</a>.</p>\n\n        <figure>\n          <figcaption><span id=\"table-51\">Table 51</span> &#x2014; Internal Slots of Set Iterator Instances</figcaption>\n          <table class=\"real-table\">\n            <tr>\n              <th style=\"background-color: #BFBFBF\">Internal Slot</th>\n              <th style=\"background-color: #BFBFBF\">Description</th>\n            </tr>\n            <tr>\n              <td>[[IteratedSet]]</td>\n              <td>The Set object that is being iterated.</td>\n            </tr>\n            <tr>\n              <td>[[SetNextIndex]]</td>\n              <td>The integer index of the next Set data element to be examined by this iterator</td>\n            </tr>\n            <tr>\n              <td>[[SetIterationKind]]</td>\n              <td>A String value that identifies what is to be returned for each element of the iteration. The possible values are: <code>&quot;key&quot;</code>, <code>&quot;value&quot;</code>, <code>&quot;key+value&quot;</code>. <code>&quot;key&quot;</code> and <code>&quot;value&quot;</code> have the same meaning.</td>\n            </tr>\n          </table>\n        </figure>\n      </section>\n    </section>\n  "}