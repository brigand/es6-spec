{"id":"sec-sortcompare","html":"\n          <h1><span class=\"secnum\" id=\"sec-22.1.3.24.1\"><a href=\"/sec/sec-sortcompare.html\" title=\"link to this section\">22.1.3.24.1</a></span> Runtime Semantics: SortCompare( x, y )</h1>\n\n          <p class=\"normalbefore\">The SortCompare abstract operation is called with two arguments <var>x</var> and <var>y</var>.\n          It also has access to the <var>comparefn</var> argument passed to the current invocation of the <code>sort</code>\n          method. The following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li>If <i>x</i> and <i>y</i> are both <b>undefined</b>, return +0.</li>\n            <li>If <i>x</i> is <b>undefined</b>, return 1.</li>\n            <li>If <i>y</i> is <b>undefined</b>, return &#x2212;1.</li>\n            <li>If the argument <i>comparefn</i> is not <b>undefined</b>, then\n              <ol class=\"block\">\n                <li>Let <i>v</i> be <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<a href=\"/sec/sec-call.html\">Call</a>(<i>comparefn</i>,\n                    <b>undefined</b>, &#xAB;<i>x</i>, <i>y</i>&#xBB;)).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>v</i>).</li>\n                <li>If <i>v</i> is <b>NaN</b>, return +0.</li>\n                <li>Return <i>v</i>.</li>\n              </ol>\n            </li>\n            <li>Let <i>xString</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>x</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>xString</i>).</li>\n            <li>Let <i>yString</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>y</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>yString</i>).</li>\n            <li>If <i>xString</i> &lt; <i>yString</i>, return &#x2212;1.</li>\n            <li>If <i>xString</i> &gt; <i>yString</i>, return 1.</li>\n            <li>Return +0.</li>\n          </ol>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 1</span> Because non-existent property values always compare greater than <b>undefined</b>\n            property values, and <b>undefined</b> always compares greater than any other value, <b>undefined</b> property values\n            always sort to the end of the result, followed by non-existent property values.</p>\n          </div>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 2</span> Method calls performed by the <a href=\"/sec/sec-tostring.html\">ToString</a> abstract\n            operations in steps 5 and 7 have the potential to cause SortCompare to not behave as a consistent comparison\n            function.</p>\n          </div>\n        "}