{"id":"sec-statement-rules","html":"\n        <h1><span class=\"secnum\" id=\"sec-14.6.2.1\"><a href=\"/sec/sec-statement-rules.html\" title=\"link to this section\">14.6.2.1</a></span>\n            Statement Rules</h1>\n        <div class=\"gp prod\"><span class=\"nt\">ConciseBody</span> <span class=\"geq\">:</span> <span class=\"nt\">AssignmentExpression</span></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>AssignmentExpression</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">StatementList</span> <span class=\"geq\">:</span> <span class=\"nt\">StatementList</span> <span class=\"nt\">StatementListItem</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>has</i> be HasProductionInTailPosition of <i>StatementList</i> with argument <i>nonterminal</i>.</li>\n          <li>If <i>has</i> is <b>true</b>, return <b>true</b>.</li>\n          <li>Return HasProductionInTailPosition of <i>StatementListItem</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n\n        <p><span class=\"prod\"><span class=\"nt\">FunctionStatementList</span> <span class=\"geq\">:</span> <span class=\"grhsannot\">[empty]</span></span></p>\n\n        <p><span class=\"prod\"><span class=\"nt\">StatementListItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Declaration</span></span></p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">Statement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">VariableStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">EmptyStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ExpressionStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ContinueStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">BreakStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ThrowStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">DebuggerStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">Block</span> <code class=\"t\">:</code> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n          <div class=\"rhs\"><span class=\"nt\">ReturnStatement</span> <code class=\"t\">:</code> <code class=\"t\">return</code> <code class=\"t\">;</code></div>\n          <div class=\"rhs\"><span class=\"nt\">LabelledItem</span> <code class=\"t\">:</code> <span class=\"nt\">FunctionDeclaration</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">CaseBlock</span> <code class=\"t\">:</code> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IfStatement</span> <span class=\"geq\">:</span> <code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span> <code class=\"t\">else</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>has</i> be HasProductionInTailPosition of the first <i>Statement</i> with argument <i>nonterminal</i>.</li>\n          <li>If <i>has</i> is <b>true</b>, return <b>true</b>.</li>\n          <li>Return HasProductionInTailPosition of the second <i>Statement</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n\n        <p><span class=\"prod\"><span class=\"nt\">IfStatement</span> <span class=\"geq\">:</span> <code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></span></p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">do</code> <span class=\"nt\">Statement</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <code class=\"t\">;</code></div>\n          <div class=\"rhs\"><code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">WithStatement</span> <code class=\"t\">:</code> <code class=\"t\">with</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>Statement</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">LabelledStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">LabelIdentifier</span> <code class=\"t\">:</code> <span class=\"nt\">LabelledItem</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>LabelledItem</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ReturnStatement</span> <span class=\"geq\">:</span> <code class=\"t\">return</code> <span class=\"nt\">Expression</span> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>Expression</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">SwitchStatement</span> <span class=\"geq\">:</span> <code class=\"t\">switch</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">CaseBlock</span></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>CaseBlock</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>has</i> be <b>false</b>.</li>\n          <li>If the first <i>CaseClauses</i> is present, let <i>has</i> be HasProductionInTailPosition of the first\n              <i>CaseClauses</i> with argument <i>nonterminal</i>.</li>\n          <li>If <i>has</i> is <b>true</b>, return <b>true</b>.</li>\n          <li>Let <i>has</i> be HasProductionInTailPosition of the <i>DefaultClause</i> with argument <i>nonterminal</i>.</li>\n          <li>If <i>has</i> is <b>true</b>, return <b>true</b>.</li>\n          <li>If the second <i>CaseClauses</i> is present, let <i>has</i> be HasProductionInTailPosition of the second\n              <i>CaseClauses</i> with argument <i>nonterminal</i>.</li>\n          <li>Return <i>has</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">CaseClauses</span> <span class=\"geq\">:</span> <span class=\"nt\">CaseClauses</span> <span class=\"nt\">CaseClause</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>has</i> be HasProductionInTailPosition of <i>CaseClauses</i> with argument <i>nonterminal</i>.</li>\n          <li>If <i>has</i> is <b>true</b>, return <b>true</b>.</li>\n          <li>Return HasProductionInTailPosition of <i>CaseClause</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n\n        <p><span class=\"prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></span></p>\n\n        <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n        <ol class=\"proc\">\n          <li>If <i>StatementList</i> is present, return HasProductionInTailPosition of <i>StatementList</i> with argument\n              <i>nonterminal</i>.</li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Catch</span></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>Catch</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n\n        <p><span class=\"prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Finally</span></span></p>\n\n        <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Catch</span> <span class=\"nt\">Finally</span></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>Finally</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">Catch</span> <span class=\"geq\">:</span> <code class=\"t\">catch</code> <code class=\"t\">(</code> <span class=\"nt\">CatchParameter</span> <code class=\"t\">)</code> <span class=\"nt\">Block</span></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>Block</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n      "}