{"id":"sec-string.prototype.slice","html":"\n        <h1><span class=\"secnum\" id=\"sec-21.1.3.16\"><a href=\"/sec/sec-string.prototype.slice.html\" title=\"link to this section\">21.1.3.16</a></span> String.prototype.slice ( start, end )</h1>\n\n        <p class=\"normalbefore\">The <code>slice</code> method takes two arguments, <var>start</var> and <var>end</var>, and\n        returns a substring of the result of converting this object to a String, starting from index <var>start</var> and running\n        to, but not including, index <var>end</var> (or through the end of the String if <var>end</var> is <b>undefined</b>). If\n        <var>start</var> is negative, it is treated as <span style=\"font-family: Times New\n        Roman\"><i>sourceLength</i>+<i>start</i></span> where <var>sourceLength</var> is the length of the String. If\n        <var>end</var> is negative, it is treated as <span style=\"font-family: Times New\n        Roman\"><i>sourceLength</i>+<i>end</i></span> where <var>sourceLength</var> is the length of the String. The result is a\n        String value, not a String object. The following steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>O</i> be <a href=\"/sec/sec-requireobjectcoercible.html\">RequireObjectCoercible</a>(<b>this</b> value).</li>\n          <li>Let <i>S</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>O</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>S</i>).</li>\n          <li>Let <i>len</i> be the number of elements in <i>S</i>.</li>\n          <li>Let <i>intStart</i> be <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>start</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>intStart</i>).</li>\n          <li>If <i>end</i> is <b>undefined</b>, let <i>intEnd</i> be <i>len</i>; else let <i>intEnd</i> be <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>end</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>intEnd</i>).</li>\n          <li>If  <i>intStart</i> &lt; 0, let <i>from</i> be max(<i>len</i> + <i>intStart</i>,0); otherwise let <i>from</i> be\n              min(<i>intStart</i>, <i>len</i>).</li>\n          <li>If <i>intEnd</i> &lt; 0, let <i>to</i> be max(<i>len</i> + <i>intEnd</i>,0); otherwise let <i>to</i> be\n              min(<i>intEnd</i>, <i>len</i>).</li>\n          <li>Let <i>span</i> be max(<i>to</i> &#x2013; <i>from</i>,0).</li>\n          <li>Return a String value containing <i>span</i> consecutive elements from <i>S</i> beginning with the element at index\n              <i>from</i>.</li>\n        </ol>\n\n        <p>The <code>length</code> property of the <code>slice</code> method is <b>2</b>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> The <code>slice</code> function is intentionally generic; it does not require that its\n          <b>this</b> value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div>\n      "}