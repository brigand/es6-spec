{"id":"sec-switch-statement","html":"\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-13.12\"><a href=\"/sec/sec-switch-statement.html\" title=\"link to this section\">13.12</a></span> The\n          <code>switch</code> Statement</h1>\n      <h2>Syntax</h2>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">SwitchStatement</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">switch</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">)</code> <span class=\"nt\">CaseBlock</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">CaseBlock</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-params\">[?Yield, ?Return]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n        <div class=\"rhs\"><code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-params\">[?Yield, ?Return]</sub><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span><sub class=\"g-params\">[?Yield, ?Return]</sub> <span class=\"nt\">CaseClauses</span><sub class=\"g-params\">[?Yield, ?Return]</sub><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">CaseClauses</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><span class=\"nt\">CaseClause</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n        <div class=\"rhs\"><span class=\"nt\">CaseClauses</span><sub class=\"g-params\">[?Yield, ?Return]</sub> <span class=\"nt\">CaseClause</span><sub class=\"g-params\">[?Yield, ?Return]</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">CaseClause</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">case</code> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-params\">[?Yield, ?Return]</sub><sub class=\"g-opt\">opt</sub></div>\n      </div>\n\n      <div class=\"gp\">\n        <div class=\"lhs\"><span class=\"nt\">DefaultClause</span><sub class=\"g-params\">[Yield, Return]</sub> <span class=\"geq\">:</span></div>\n        <div class=\"rhs\"><code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-params\">[?Yield, ?Return]</sub><sub class=\"g-opt\">opt</sub></div>\n      </div>\n    </div>\n\n    <section id=\"sec-switch-statement-static-semantics-early-errors\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.1\"><a href=\"/sec/sec-switch-statement-static-semantics-early-errors.html\" title=\"link to this section\">13.12.1</a></span> Static Semantics:  Early Errors</h1>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span> <code class=\"t\">}</code></div>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if the LexicallyDeclaredNames of <span class=\"nt\">CaseClauses</span> contains any duplicate\n          entries.</p>\n        </li>\n\n        <li>\n          <p>It is a Syntax Error if any element of the LexicallyDeclaredNames of <span class=\"nt\">CaseClauses</span> also occurs\n          in the VarDeclaredNames of <span class=\"nt\">CaseClauses</span>.</p>\n        </li>\n      </ul>\n    </section>\n\n    <section id=\"sec-switch-statement-static-semantics-containsduplicatelabels\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.2\"><a href=\"/sec/sec-switch-statement-static-semantics-containsduplicatelabels.html\" title=\"link to this section\">13.12.2</a></span> Static Semantics: ContainsDuplicateLabels</h1>\n\n      <p>With argument <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsduplicatelabels.html\">13.1.1</a>, <a href=\"/sec/sec-block-static-semantics-containsduplicatelabels.html\">13.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsduplicatelabels.html\">13.6.2</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsduplicatelabels.html\">13.7.2.1</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsduplicatelabels.html\">13.7.3.1</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsduplicatelabels.html\">13.7.4.2</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels.html\">13.7.5.3</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsduplicatelabels.html\">13.11.2</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsduplicatelabels.html\">13.13.2</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsduplicatelabels.html\">13.15.2</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsduplicatelabels.html\">15.2.1.2</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">SwitchStatement</span> <span class=\"geq\">:</span> <code class=\"t\">switch</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">CaseBlock</span></div>\n      <ol class=\"proc\">\n        <li>Return ContainsDuplicateLabels of <i>CaseBlock</i> with argument <i>labelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the first <i>CaseClauses</i> is present, then\n          <ol class=\"block\">\n            <li>Let <i>hasDuplicates</i> be ContainsDuplicateLabels of the first <i>CaseClauses</i> with argument\n                <i>labelSet</i>.</li>\n            <li>If <i>hasDuplicates</i> is <b>true</b>, return <b>true</b>.</li>\n          </ol>\n        </li>\n        <li>Let <i>hasDuplicates</i> be ContainsDuplicateLabels of <i>DefaultClause</i> with argument <i>labelSet.</i></li>\n        <li>If <i>hasDuplicates</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>If the second <i>CaseClauses</i> is not present, return <b>false</b>.</li>\n        <li>Return ContainsDuplicateLabels of the second <i>CaseClauses</i> with argument <i>labelSet</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClauses</span> <span class=\"geq\">:</span> <span class=\"nt\">CaseClauses</span> <span class=\"nt\">CaseClause</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasDuplicates</i> be ContainsDuplicateLabels of <i>CaseClauses</i> with argument <i>labelSet</i>.</li>\n        <li>If <i>hasDuplicates</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsDuplicateLabels of <i>CaseClause</i> with argument <i>labelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return ContainsDuplicateLabels of <i>StatementList</i> with argument\n            <i>labelSet</i>.</li>\n        <li>Else return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return ContainsDuplicateLabels of <i>StatementList</i> with argument\n            <i>labelSet</i>.</li>\n        <li>Else return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-switch-statement-static-semantics-containsundefinedbreaktarget\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.3\"><a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedbreaktarget.html\" title=\"link to this section\">13.12.3</a></span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n\n      <p>With argument <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedbreaktarget.html\">13.1.2</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedbreaktarget.html\">13.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedbreaktarget.html\">13.6.3</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.2.2</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.3.2</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedbreaktarget.html\">13.7.4.3</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget.html\">13.7.5.4</a>, <a href=\"/sec/sec-break-statement-static-semantics-containsundefinedbreaktarget.html\">13.9.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedbreaktarget.html\">13.11.3</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedbreaktarget.html\">13.13.3</a>, <a href=\"/sec/sec-try-statement-static-semantics-containsundefinedbreaktarget.html\">13.15.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedbreaktarget.html\">15.2.1.3</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">SwitchStatement</span> <span class=\"geq\">:</span> <code class=\"t\">switch</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">CaseBlock</span></div>\n      <ol class=\"proc\">\n        <li>Return ContainsUndefinedBreakTarget of <i>CaseBlock</i> with argument <i>labelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the first <i>CaseClauses</i> is present, then\n          <ol class=\"block\">\n            <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedBreakTarget of the first <i>CaseClauses</i> with argument\n                <i>labelSet</i>.</li>\n            <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n          </ol>\n        </li>\n        <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedBreakTarget of <i>DefaultClause</i> with argument\n            <i>labelSet.</i></li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>If the second <i>CaseClauses</i> is not present, return <b>false</b>.</li>\n        <li>Return ContainsUndefinedBreakTarget of the second <i>CaseClauses</i> with argument <i>labelSet</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClauses</span> <span class=\"geq\">:</span> <span class=\"nt\">CaseClauses</span> <span class=\"nt\">CaseClause</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedBreakTarget of <i>CaseClauses</i> with argument\n            <i>labelSet</i>.</li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsUndefinedBreakTarget of <i>CaseClause</i> with argument <i>labelSet.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return ContainsUndefinedBreakTarget of <i>StatementList</i> with argument\n            <i>labelSet</i>.</li>\n        <li>Else return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return ContainsUndefinedBreakTarget of <i>StatementList</i> with argument\n            <i>labelSet</i>.</li>\n        <li>Else return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-switch-statement-static-semantics-containsundefinedcontinuetarget\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.4\"><a href=\"/sec/sec-switch-statement-static-semantics-containsundefinedcontinuetarget.html\" title=\"link to this section\">13.12.4</a></span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n\n      <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-containsundefinedcontinuetarget.html\">13.1.3</a>, <a href=\"/sec/sec-block-static-semantics-containsundefinedcontinuetarget.html\">13.2.4</a>, <a href=\"/sec/sec-if-statement-static-semantics-containsundefinedcontinuetarget.html\">13.6.4</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.2.3</a>, <a href=\"/sec/sec-while-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.3.3</a>, <a href=\"/sec/sec-for-statement-static-semantics-containsundefinedcontinuetarget.html\">13.7.4.4</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget.html\">13.7.5.5</a>, <a href=\"/sec/sec-continue-statement-static-semantics-containsundefinedcontinuetarget.html\">13.8.2</a>, <a href=\"/sec/sec-with-statement-static-semantics-containsundefinedcontinuetarget.html\">13.11.4</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-containsundefinedcontinuetarget.html\">13.13.4</a>,<a href=\"/sec/sec-try-statement-static-semantics-containsundefinedcontinuetarget.html\">13.15.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-containsundefinedcontinuetarget.html\">15.2.1.4</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">SwitchStatement</span> <span class=\"geq\">:</span> <code class=\"t\">switch</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">CaseBlock</span></div>\n      <ol class=\"proc\">\n        <li>Return ContainsUndefinedContinueTarget of <i>CaseBlock</i> with arguments <i>iterationSet</i> and\n            &#xAB;&#xA0;&#xBB;<i>.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the first <i>CaseClauses</i> is present, then\n          <ol class=\"block\">\n            <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedContinueTarget of the first <i>CaseClauses</i> with arguments\n                <i>iterationSet</i> and &#xAB;&#xA0;&#xBB;.</li>\n            <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n          </ol>\n        </li>\n        <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedContinueTarget of <i>DefaultClause</i> with arguments\n            <i>iterationSet</i> and &#xAB;&#xA0;&#xBB;<i>.</i></li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>If the second <i>CaseClauses</i> is not present, return <b>false</b>.</li>\n        <li>Return ContainsUndefinedContinueTarget of the second <i>CaseClauses</i> with arguments <i>iterationSet</i> and\n            &#xAB;&#xA0;&#xBB;.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClauses</span> <span class=\"geq\">:</span> <span class=\"nt\">CaseClauses</span> <span class=\"nt\">CaseClause</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>hasUndefinedLabels</i> be ContainsUndefinedContinueTarget of <i>CaseClauses</i> with arguments\n            <i>iterationSet</i> and &#xAB;&#xA0;&#xBB;.</li>\n        <li>If <i>hasUndefinedLabels</i> is <b>true</b>, return <b>true</b>.</li>\n        <li>Return ContainsUndefinedContinueTarget of <i>CaseClause</i> with arguments <i>iterationSet</i> and\n            &#xAB;&#xA0;&#xBB;<i>.</i></li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return ContainsUndefinedContinueTarget of <i>StatementList</i> with arguments\n            <i>iterationSet</i> and &#xAB;&#xA0;&#xBB;.</li>\n        <li>Else return <b>false</b>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return ContainsUndefinedContinueTarget of <i>StatementList</i> with arguments\n            <i>iterationSet</i> and &#xAB;&#xA0;&#xBB;.</li>\n        <li>Else return <b>false</b>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-switch-statement-static-semantics-lexicallydeclarednames\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.5\"><a href=\"/sec/sec-switch-statement-static-semantics-lexicallydeclarednames.html\" title=\"link to this section\">13.12.5</a></span> Static Semantics:  LexicallyDeclaredNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-block-static-semantics-lexicallydeclarednames.html\">13.2.5</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-lexicallydeclarednames.html\">13.13.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-lexicallydeclarednames.html\">14.1.13</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-lexicallydeclarednames.html\">14.2.10</a>, <a href=\"/sec/sec-scripts-static-semantics-lexicallydeclarednames.html\">15.1.3</a>, <a href=\"/sec/sec-module-semantics-static-semantics-lexicallydeclarednames.html\">15.2.1.11</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the first <i>CaseClauses</i> is present, let <i>names</i> be the LexicallyDeclaredNames of the first\n            <i>CaseClauses</i>.</li>\n        <li>Else let <i>names</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>Append to <i>names</i> the elements of the LexicallyDeclaredNames of the <i>DefaultClause.</i></li>\n        <li>If the second <i>CaseClauses</i> is not present, return <i>names</i>.</li>\n        <li>Else return the result of appending to <i>names</i> the elements of the LexicallyDeclaredNames of the second\n            <i>CaseClauses</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClauses</span> <span class=\"geq\">:</span> <span class=\"nt\">CaseClauses</span> <span class=\"nt\">CaseClause</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>names</i> be LexicallyDeclaredNames of <i>CaseClauses</i>.</li>\n        <li>Append to <i>names</i> the elements of the LexicallyDeclaredNames of <i>CaseClause.</i></li>\n        <li>Return <i>names</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return the LexicallyDeclaredNames of <i>StatementList</i>.</li>\n        <li>Else return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return the LexicallyDeclaredNames of <i>StatementList</i>.</li>\n        <li>Else return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-switch-statement-static-semantics-lexicallyscopeddeclarations\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.6\"><a href=\"/sec/sec-switch-statement-static-semantics-lexicallyscopeddeclarations.html\" title=\"link to this section\">13.12.6</a></span> Static Semantics:  LexicallyScopedDeclarations</h1>\n\n      <p>See also: <a href=\"/sec/sec-block-static-semantics-lexicallyscopeddeclarations.html\">13.2.6</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-lexicallyscopeddeclarations.html\">13.13.7</a>, <a href=\"/sec/sec-function-definitions-static-semantics-lexicallyscopeddeclarations.html\">14.1.14</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations.html\">14.2.11</a>, <a href=\"/sec/sec-scripts-static-semantics-lexicallyscopeddeclarations.html\">15.1.4</a>, <a href=\"/sec/sec-module-semantics-static-semantics-lexicallyscopeddeclarations.html\">15.2.1.12</a>, <a href=\"/sec/sec-exports-static-semantics-lexicallyscopeddeclarations.html\">15.2.3.8</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the first <i>CaseClauses</i> is present, let <i>declarations</i> be the LexicallyScopedDeclarations of the first\n            <i>CaseClauses</i>.</li>\n        <li>Else let <i>declarations</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>Append to <i>declarations</i> the elements of the LexicallyScopedDeclarations of the <i>DefaultClause.</i></li>\n        <li>If the second <i>CaseClauses</i> is not present, return <i>declarations</i>.</li>\n        <li>Else return the result of appending to <i>declarations</i> the elements of the LexicallyScopedDeclarations of the\n            second <i>CaseClauses</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClauses</span> <span class=\"geq\">:</span> <span class=\"nt\">CaseClauses</span> <span class=\"nt\">CaseClause</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>declarations</i> be LexicallyScopedDeclarations of <i>CaseClauses</i>.</li>\n        <li>Append to <i>declarations</i> the elements of the LexicallyScopedDeclarations of <i>CaseClause.</i></li>\n        <li>Return <i>declarations</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return the LexicallyScopedDeclarations of <i>StatementList</i>.</li>\n        <li>Else return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return the LexicallyScopedDeclarations of <i>StatementList</i>.</li>\n        <li>Else return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-switch-statement-static-semantics-vardeclarednames\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.7\"><a href=\"/sec/sec-switch-statement-static-semantics-vardeclarednames.html\" title=\"link to this section\">13.12.7</a></span> Static Semantics:  VarDeclaredNames</h1>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-vardeclarednames.html\">13.1.5</a>, <a href=\"/sec/sec-block-static-semantics-vardeclarednames.html\">13.2.11</a>, <a href=\"/sec/sec-variable-statement-static-semantics-vardeclarednames.html\">13.3.2.2</a>, <a href=\"/sec/sec-if-statement-static-semantics-vardeclarednames.html\">13.6.5</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-vardeclarednames.html\">13.7.2.4</a>, <a href=\"/sec/sec-while-statement-static-semantics-vardeclarednames.html\">13.7.3.4</a>, <a href=\"/sec/sec-for-statement-static-semantics-vardeclarednames.html\">13.7.4.5</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-vardeclarednames.html\">13.7.5.7</a>, <a href=\"/sec/sec-with-statement-static-semantics-vardeclarednames.html\">13.11.5</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-vardeclarednames.html\">13.13.12</a>, <a href=\"/sec/sec-try-statement-static-semantics-vardeclarednames.html\">13.15.5</a>, <a href=\"/sec/sec-function-definitions-static-semantics-vardeclarednames.html\">14.1.15</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-vardeclarednames.html\">14.2.12</a>, <a href=\"/sec/sec-scripts-static-semantics-vardeclarednames.html\">15.1.5</a>, <a href=\"/sec/sec-module-semantics-static-semantics-vardeclarednames.html\">15.2.1.13</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">SwitchStatement</span> <span class=\"geq\">:</span> <code class=\"t\">switch</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">CaseBlock</span></div>\n      <ol class=\"proc\">\n        <li>Return the VarDeclaredNames of <i>CaseBlock</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the first <i>CaseClauses</i> is present, let <i>names</i> be the VarDeclaredNames of the first\n            <i>CaseClauses</i>.</li>\n        <li>Else let <i>names</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>Append to <i>names</i> the elements of the VarDeclaredNames of the <i>DefaultClause.</i></li>\n        <li>If the second <i>CaseClauses</i> is not present, return <i>names</i>.</li>\n        <li>Else return the result of appending to <i>names</i> the elements of the VarDeclaredNames of the second\n            <i>CaseClauses</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClauses</span> <span class=\"geq\">:</span> <span class=\"nt\">CaseClauses</span> <span class=\"nt\">CaseClause</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>names</i> be VarDeclaredNames of <i>CaseClauses</i>.</li>\n        <li>Append to <i>names</i> the elements of the VarDeclaredNames of <i>CaseClause.</i></li>\n        <li>Return <i>names</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return the VarDeclaredNames of <i>StatementList</i>.</li>\n        <li>Else return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return the VarDeclaredNames of <i>StatementList</i>.</li>\n        <li>Else return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-switch-statement-static-semantics-varscopeddeclarations\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.8\"><a href=\"/sec/sec-switch-statement-static-semantics-varscopeddeclarations.html\" title=\"link to this section\">13.12.8</a></span> Static Semantics:  VarScopedDeclarations</h1>\n\n      <p>See also: <a href=\"/sec/sec-statement-semantics-static-semantics-varscopeddeclarations.html\">13.1.6</a>, <a href=\"/sec/sec-block-static-semantics-varscopeddeclarations.html\">13.2.12</a>, <a href=\"/sec/sec-variable-statement-static-semantics-varscopeddeclarations.html\">13.3.2.3</a>, <a href=\"/sec/sec-if-statement-static-semantics-varscopeddeclarations.html\">13.6.6</a>, <a href=\"/sec/sec-do-while-statement-static-semantics-varscopeddeclarations.html\">13.7.2.5</a>, <a href=\"/sec/sec-while-statement-static-semantics-varscopeddeclarations.html\">13.7.3.5</a>, <a href=\"/sec/sec-for-statement-static-semantics-varscopeddeclarations.html\">13.7.4.6</a>, <a href=\"/sec/sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations.html\">13.7.5.8</a>, <a href=\"/sec/sec-with-statement-static-semantics-varscopeddeclarations.html\">13.11.6</a>, <a href=\"/sec/sec-labelled-statements-static-semantics-varscopeddeclarations.html\">13.13.13</a>, <a href=\"/sec/sec-try-statement-static-semantics-varscopeddeclarations.html\">13.15.6</a>, <a href=\"/sec/sec-function-definitions-static-semantics-varscopeddeclarations.html\">14.1.16</a>, <a href=\"/sec/sec-arrow-function-definitions-static-semantics-varscopeddeclarations.html\">14.2.13</a>, <a href=\"/sec/sec-scripts-static-semantics-varscopeddeclarations.html\">15.1.6</a>, <a href=\"/sec/sec-module-semantics-static-semantics-varscopeddeclarations.html\">15.2.1.14</a>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">SwitchStatement</span> <span class=\"geq\">:</span> <code class=\"t\">switch</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">CaseBlock</span></div>\n      <ol class=\"proc\">\n        <li>Return the VarScopedDeclarations of <i>CaseBlock</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>If the first <i>CaseClauses</i> is present, let <i>declarations</i> be the VarScopedDeclarations of the first\n            <i>CaseClauses</i>.</li>\n        <li>Else let <i>declarations</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        <li>Append to <i>declarations</i> the elements of the VarScopedDeclarations of the <i>DefaultClause.</i></li>\n        <li>If the second <i>CaseClauses</i> is not present, return <i>declarations</i>.</li>\n        <li>Else return the result of appending to <i>declarations</i> the elements of the VarScopedDeclarations of the second\n            <i>CaseClauses</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClauses</span> <span class=\"geq\">:</span> <span class=\"nt\">CaseClauses</span> <span class=\"nt\">CaseClause</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>declarations</i> be VarScopedDeclarations of <i>CaseClauses</i>.</li>\n        <li>Append to <i>declarations</i> the elements of the VarScopedDeclarations of <i>CaseClause.</i></li>\n        <li>Return <i>declarations</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return the VarScopedDeclarations of <i>StatementList</i>.</li>\n        <li>Else return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>If the <i>StatementList</i> is present, return the VarScopedDeclarations of <i>StatementList</i>.</li>\n        <li>Else return a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-runtime-semantics-caseblockevaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.9\"><a href=\"/sec/sec-runtime-semantics-caseblockevaluation.html\" title=\"link to this section\">13.12.9</a></span> Runtime Semantics: CaseBlockEvaluation</h1>\n\n      <p>With argument <var>input</var>.</p>\n\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<b>undefined</b>).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Let <i>V</i> = <b>undefined</b>.</li>\n        <li>Let <i>A</i> be the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> of <i>CaseClause</i> items in\n            <i>CaseClauses</i>, in source text order.</li>\n        <li>Let <i>found</i> be <b>false</b>.</li>\n        <li>Repeat for each <i>CaseClause</i> <i>C</i> in <i>A</i>,\n          <ol class=\"block\">\n            <li>If <i>found</i> is <b>false</b>, then\n              <ol class=\"block\">\n                <li>Let <i>clauseSelector</i> be the result of CaseSelectorEvaluation of <i>C</i>.</li>\n                <li>If <i>clauseSelector</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n                  <ol class=\"block\">\n                    <li>If <i>clauseSelector</i>.[[value]] is <span style=\"font-family: sans-serif\">empty</span>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <i>clauseSelector</i>.[[type]],\n                        [[value]]:  <b>undefined</b>, [[target]]:  <i>clauseSelector</i>.[[target]]}.</li>\n                    <li>Else, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>clauseSelector</i>).</li>\n                  </ol>\n                </li>\n                <li>Let <i>found</i> be the result of performing Strict Equality Comparison <i>input</i> ===\n                    <i>clauseSelector</i>.[[value]].</li>\n              </ol>\n            </li>\n            <li>If <i>found</i> is <b>true</b>, then\n              <ol class=\"block\">\n                <li>Let <i>R</i> be the result of evaluating <i>C</i>.</li>\n                <li>If <i>R</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, let <i>V</i> =\n                    <i>R</i>.[[value]].</li>\n                <li>If <i>R</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>R</i>, <i>V</i>)).</li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>V</i>).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n      <ol class=\"proc\">\n        <li>Let <i>V</i> = <b>undefined</b>.</li>\n        <li>Let <i>A</i> be the list of <i>CaseClause</i> items in the first <i>CaseClauses</i>, in source text order. If the\n            first <i>CaseClauses</i> is not present <i>A</i> is &#xAB; &#xBB;.</li>\n        <li>Let <i>found</i> be <b>false</b>.</li>\n        <li>Repeat for each <i>CaseClause</i> <i>C</i> in <i>A</i>\n          <ol class=\"block\">\n            <li>If <i>found</i> is <b>false</b>, then\n              <ol class=\"block\">\n                <li>Let <i>clauseSelector</i> be the result of CaseSelectorEvaluation of <i>C</i>.</li>\n                <li>If <i>clauseSelector</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, then\n                  <ol class=\"block\">\n                    <li>If <i>clauseSelector</i>.[[value]] is <span style=\"font-family: sans-serif\">empty</span>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]: <i>clauseSelector</i>.[[type]],\n                        [[value]]:  <b>undefined</b>, [[target]]:  <i>clauseSelector</i>.[[target]]}.</li>\n                    <li>Else, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>clauseSelector</i>).</li>\n                  </ol>\n                </li>\n                <li>Let <i>found</i> be the result of performing Strict Equality Comparison <i>input</i> ===\n                    <i>clauseSelector</i>.[[value]].</li>\n              </ol>\n            </li>\n            <li>If <i>found</i> is <b>true</b>, then\n              <ol class=\"block\">\n                <li>Let <i>R</i> be the result of evaluating <i>C</i>.</li>\n                <li>If <i>R</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, let <i>V</i> =\n                    <i>R</i>.[[value]].</li>\n                <li>If <i>R</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>R</i>, <i>V</i>)).</li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>Let <i>foundInB</i> be <b>false</b>.</li>\n        <li>Let <i>B</i> be the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the <i>CaseClause</i> items\n            in the second <i>CaseClauses</i>, in source text order. If the second <i>CaseClauses</i> is not present <i>B</i> is\n            &#xAB; &#xBB;.</li>\n        <li>If <i>found</i> is <b>false</b>, then\n          <ol class=\"block\">\n            <li>Repeat for  each <i>CaseClause C</i> in <i>B</i>\n              <ol class=\"block\">\n                <li>If <i>foundInB</i> is <b>false</b>, then\n                  <ol class=\"block\">\n                    <li>Let <i>clauseSelector</i> be the result of CaseSelectorEvaluation of <i>C</i>.</li>\n                    <li>If <i>clauseSelector</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>,\n                        then\n                      <ol class=\"block\">\n                        <li>If <i>clauseSelector</i>.[[value]] is <span style=\"font-family: sans-serif\">empty</span>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>{[[type]]:\n                            <i>clauseSelector</i>.[[type]], [[value]]: <b>undefined</b>, [[target]]:\n                            <i>clauseSelector</i>.[[target]]}.</li>\n                        <li>Else, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<i>clauseSelector</i>).</li>\n                      </ol>\n                    </li>\n                    <li>Let <i>foundInB</i> be the result of performing Strict Equality Comparison <i>input</i> ===\n                        <i>clauseSelector</i>.[[value]].</li>\n                  </ol>\n                </li>\n                <li>If <i>foundInB</i> is <b>true</b>, then\n                  <ol class=\"block\">\n                    <li>Let <i>R</i> be the result of evaluating <i>CaseClause C</i>.</li>\n                    <li>If <i>R</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, let <i>V</i> =\n                        <i>R</i>.[[value]].</li>\n                    <li>If <i>R</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>R</i>, <i>V</i>)).</li>\n                  </ol>\n                </li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>If <i>foundInB</i> is <b>true</b>, return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>V</i>).</li>\n        <li>Let <i>R</i> be the result of evaluating <i>DefaultClause</i>.</li>\n        <li>If <i>R</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, let <i>V</i> =\n            <i>R</i>.[[value]].</li>\n        <li>If <i>R</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>R</i>,\n            <i>V</i>)).</li>\n        <li>Repeat for each <i>CaseClause C</i> in <i>B</i> (NOTE  this is another complete iteration of the second\n            <i>CaseClauses</i>)\n          <ol class=\"block\">\n            <li>Let <i>R</i> be the result of evaluating <i>CaseClause</i> <i>C</i>.</li>\n            <li>If <i>R</i>.[[value]] is not <span style=\"font-family: sans-serif\">empty</span>, let <i>V</i> =\n                <i>R</i>.[[value]].</li>\n            <li>If <i>R</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, return <a href=\"/sec/sec-completion-record-specification-type.html\">Completion</a>(<a href=\"/sec/sec-updateempty.html\">UpdateEmpty</a>(<i>R</i>, <i>V</i>)).</li>\n          </ol>\n        </li>\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<i>V</i>).</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-runtime-semantics-caseselectorevaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.10\"><a href=\"/sec/sec-runtime-semantics-caseselectorevaluation.html\" title=\"link to this section\">13.12.10</a></span> Runtime Semantics: CaseSelectorEvaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n      <ol class=\"proc\">\n        <li>Let <i>exprRef</i> be the result of evaluating <i>Expression</i>.</li>\n        <li>Return <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> CaseSelectorEvaluation does not execute the associated <span class=\"nt\">StatementList</span>. It simply evaluates the <span class=\"nt\">Expression</span> and returns the value, which\n        the <span class=\"nt\">CaseBlock</span> algorithm uses to determine which <span class=\"nt\">StatementList</span> to start\n        executing.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-switch-statement-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum\" id=\"sec-13.12.11\"><a href=\"/sec/sec-switch-statement-runtime-semantics-evaluation.html\" title=\"link to this section\">13.12.11</a></span> Runtime Semantics: Evaluation</h1>\n      <div class=\"gp prod\"><span class=\"nt\">SwitchStatement</span> <span class=\"geq\">:</span> <code class=\"t\">switch</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">CaseBlock</span></div>\n      <ol class=\"proc\">\n        <li>Let <i>exprRef</i> be the result of evaluating <i>Expression</i>.</li>\n        <li>Let <i>switchValue</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>exprRef</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>switchValue</i>).</li>\n        <li>Let <i>oldEnv</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a>.</li>\n        <li>Let <i>blockEnv</i> be <a href=\"/sec/sec-newdeclarativeenvironment.html\">NewDeclarativeEnvironment</a>(<i>oldEnv</i>).</li>\n        <li>Perform <a href=\"/sec/sec-blockdeclarationinstantiation.html\">BlockDeclarationInstantiation</a>(<i>CaseBlock,</i>\n            <i>blockEnv</i>).</li>\n        <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>blockEnv</i>.</li>\n        <li>Let <i>R</i> be the result of performing CaseBlockEvaluation of <i>CaseBlock</i> with argument\n            <i>switchValue</i>.</li>\n        <li>Set <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>&#x2019;s <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> to <i>oldEnv</i>.</li>\n        <li>Return <i>R</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> No matter how control leaves the <span class=\"nt\">SwitchStatement</span> the <a href=\"/sec/sec-execution-contexts.html\">LexicalEnvironment</a> is always restored to its former state.</p>\n      </div>\n\n      <div class=\"gp prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code></div>\n      <ol class=\"proc\">\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family: sans-serif\">empty</span>).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span></div>\n      <ol class=\"proc\">\n        <li>Return the result of evaluating <i>StatementList</i>.</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code></div>\n      <ol class=\"proc\">\n        <li>Return <a href=\"/sec/sec-normalcompletion.html\">NormalCompletion</a>(<span style=\"font-family: sans-serif\">empty</span>).</li>\n      </ol>\n      <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span></div>\n      <ol class=\"proc\">\n        <li>Return the result of evaluating <i>StatementList</i>.</li>\n      </ol>\n    </section>\n  "}