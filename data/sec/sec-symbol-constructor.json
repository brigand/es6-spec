{"id":"sec-symbol-constructor","html":"\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.1\"><a href=\"/sec/sec-symbol-constructor.html\" title=\"link to this section\">19.4.1</a></span>\n            The Symbol Constructor</h1>\n\n        <p>The Symbol constructor is the %Symbol% intrinsic object and the initial value of the <code>Symbol</code> property of\n        the global object. When <code>Symbol</code> is called as a function, it returns a new Symbol value.</p>\n\n        <p>The <code>Symbol</code> constructor is not intended to be used with the <code>new</code> operator or to be subclassed.\n        It may be used as the value of an <code>extends</code> clause of a class definition but a <code>super</code> call to the\n        <code>Symbol</code> constructor will cause an exception.</p>\n      </div>\n\n      <section id=\"sec-symbol-description\">\n        <h1><span class=\"secnum\" id=\"sec-19.4.1.1\"><a href=\"/sec/sec-symbol-description.html\" title=\"link to this section\">19.4.1.1</a></span> Symbol ( [ description ] )</h1>\n\n        <p class=\"normalbefore\">When <code>Symbol</code> is called with optional argument <var>description</var>, the following\n        steps are taken:</p>\n\n        <ol class=\"proc\">\n          <li>If NewTarget is not <b>undefined</b><i>,</i> throw a <b>TypeError</b> exception.</li>\n          <li>If <i>description</i> is <b>undefined</b>, let <i>descString</i> be <b>undefined</b>.</li>\n          <li>Else, let <i>descString</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>description</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>descString</i>).</li>\n          <li>Return a new unique Symbol value whose [[Description]] value is <i>descString</i>.</li>\n        </ol>\n      </section>\n    "}