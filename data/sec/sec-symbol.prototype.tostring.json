{"id":"sec-symbol.prototype.tostring","html":"\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-19.4.3.2\"><a href=\"/sec/sec-symbol.prototype.tostring.html\" title=\"link to this section\">19.4.3.2</a></span> Symbol.prototype.toString ( )</h1>\n\n          <p class=\"normalbefore\">The following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>s</i> be the <b>this</b> value.</li>\n            <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>s</i>) is Symbol, let <i>sym</i> be <i>s</i>.</li>\n            <li>Else,\n              <ol class=\"block\">\n                <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>s</i>) is not Object, throw a <b>TypeError</b>\n                    exception.</li>\n                <li>If <i>s</i> does not have a [[SymbolData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal\n                    slot</a>, throw a <b>TypeError</b> exception.</li>\n                <li>Let <i>sym</i> be the value of <i>s&#x2019;s</i> [[SymbolData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a>.</li>\n              </ol>\n            </li>\n            <li>Return <a href=\"/sec/sec-symboldescriptivestring.html\">SymbolDescriptiveString</a>(<i>sym</i>).</li>\n          </ol>\n        </div>\n\n        <section id=\"sec-symboldescriptivestring\">\n          <h1><span class=\"secnum\" id=\"sec-19.4.3.2.1\"><a href=\"/sec/sec-symboldescriptivestring.html\" title=\"link to this section\">19.4.3.2.1</a></span> Runtime Semantics:  SymbolDescriptiveString ( sym )</h1>\n\n          <p class=\"normalbefore\">When the abstract operation SymbolDescriptiveString is called with argument <var>sym</var>, the\n          following steps are taken:</p>\n\n          <ol class=\"proc\">\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>sym</i>) is Symbol.</li>\n            <li>Let <i>desc</i> be <i>sym&#x2019;s</i> [[Description]] value.</li>\n            <li>If <i>desc</i> is <b>undefined</b>, let <i>desc</i> be the empty string.</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>:  <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>desc</i>) is String.</li>\n            <li>Return the result of concatenating the strings <code>&quot;Symbol(&quot;</code>, <i>desc</i>, and <code>&quot;)&quot;</code>.</li>\n          </ol>\n        </section>\n      "}