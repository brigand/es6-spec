{"id":"sec-tail-position-calls","html":"\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-14.6\"><a href=\"/sec/sec-tail-position-calls.html\" title=\"link to this section\">14.6</a></span> Tail\n          Position Calls</h1>\n    </div>\n\n    <section id=\"sec-isintailposition\">\n      <h1><span class=\"secnum\" id=\"sec-14.6.1\"><a href=\"/sec/sec-isintailposition.html\" title=\"link to this section\">14.6.1</a></span>\n          Static Semantics: IsInTailPosition(nonterminal)</h1>\n\n      <p class=\"normalbefore\">The abstract operation IsInTailPosition with argument <var>nonterminal</var> performs the following\n      steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>nonterminal</i> is a parsed grammar production.</li>\n        <li>If the source code matching <i>nonterminal</i> is not <a href=\"/sec/sec-strict-mode-code.html\">strict code</a>, return\n            <b>false.</b></li>\n        <li>If <i>nonterminal</i> is not contained within a <i>FunctionBody</i> or <i>ConciseBody</i>, return <b>false</b>.</li>\n        <li>Let <i>body</i> be the <i>FunctionBody</i> or <i>ConciseBody</i> that most closely contains <i>nonterminal</i>.</li>\n        <li>If <i>body</i> is the <i>FunctionBody</i> of a <i>GeneratorBody</i>, return <b>false</b>.</li>\n        <li>Return the result of HasProductionInTailPosition of <i>body</i> with argument <i>nonterminal</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> Tail Position calls are only defined in <a href=\"/sec/sec-strict-mode-code.html\">strict mode\n        code</a> because of a common non-standard language extension (<a href=\"/sec/sec-addrestrictedfunctionproperties.html\">see\n        9.2.7</a>) that enables  observation of the chain of caller contexts.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-static-semantics-hasproductionintailposition\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-14.6.2\"><a href=\"/sec/sec-static-semantics-hasproductionintailposition.html\" title=\"link to this section\">14.6.2</a></span> Static Semantics: HasProductionInTailPosition</h1>\n\n        <p>With parameter <var>nonterminal</var>.</p>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> <var>nonterminal</var> is a parsed grammar production that represent a specific range of\n          source text. When the following algorithms compare <var>nonterminal</var> to other grammar symbols they are testing\n          whether the same source text was matched by both symbols.</p>\n        </div>\n      </div>\n\n      <section id=\"sec-statement-rules\">\n        <h1><span class=\"secnum\" id=\"sec-14.6.2.1\"><a href=\"/sec/sec-statement-rules.html\" title=\"link to this section\">14.6.2.1</a></span>\n            Statement Rules</h1>\n        <div class=\"gp prod\"><span class=\"nt\">ConciseBody</span> <span class=\"geq\">:</span> <span class=\"nt\">AssignmentExpression</span></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>AssignmentExpression</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">StatementList</span> <span class=\"geq\">:</span> <span class=\"nt\">StatementList</span> <span class=\"nt\">StatementListItem</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>has</i> be HasProductionInTailPosition of <i>StatementList</i> with argument <i>nonterminal</i>.</li>\n          <li>If <i>has</i> is <b>true</b>, return <b>true</b>.</li>\n          <li>Return HasProductionInTailPosition of <i>StatementListItem</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n\n        <p><span class=\"prod\"><span class=\"nt\">FunctionStatementList</span> <span class=\"geq\">:</span> <span class=\"grhsannot\">[empty]</span></span></p>\n\n        <p><span class=\"prod\"><span class=\"nt\">StatementListItem</span> <span class=\"geq\">:</span> <span class=\"nt\">Declaration</span></span></p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">Statement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">VariableStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">EmptyStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ExpressionStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ContinueStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">BreakStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ThrowStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">DebuggerStatement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">Block</span> <code class=\"t\">:</code> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n          <div class=\"rhs\"><span class=\"nt\">ReturnStatement</span> <code class=\"t\">:</code> <code class=\"t\">return</code> <code class=\"t\">;</code></div>\n          <div class=\"rhs\"><span class=\"nt\">LabelledItem</span> <code class=\"t\">:</code> <span class=\"nt\">FunctionDeclaration</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">in</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">ForBinding</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">ForDeclaration</span> <code class=\"t\">of</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">CaseBlock</span> <code class=\"t\">:</code> <code class=\"t\">{</code> <code class=\"t\">}</code></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">IfStatement</span> <span class=\"geq\">:</span> <code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span> <code class=\"t\">else</code> <span class=\"nt\">Statement</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>has</i> be HasProductionInTailPosition of the first <i>Statement</i> with argument <i>nonterminal</i>.</li>\n          <li>If <i>has</i> is <b>true</b>, return <b>true</b>.</li>\n          <li>Return HasProductionInTailPosition of the second <i>Statement</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n\n        <p><span class=\"prod\"><span class=\"nt\">IfStatement</span> <span class=\"geq\">:</span> <code class=\"t\">if</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></span></p>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">IterationStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">do</code> <span class=\"nt\">Statement</span> <code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <code class=\"t\">;</code></div>\n          <div class=\"rhs\"><code class=\"t\">while</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <code class=\"t\">var</code> <span class=\"nt\">VariableDeclarationList</span> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><code class=\"t\">for</code> <code class=\"t\">(</code> <span class=\"nt\">LexicalDeclaration</span> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">;</code> <span class=\"nt\">Expression</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n          <div class=\"rhs\"><span class=\"nt\">WithStatement</span> <code class=\"t\">:</code> <code class=\"t\">with</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">Statement</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>Statement</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">LabelledStatement</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">LabelIdentifier</span> <code class=\"t\">:</code> <span class=\"nt\">LabelledItem</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>LabelledItem</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ReturnStatement</span> <span class=\"geq\">:</span> <code class=\"t\">return</code> <span class=\"nt\">Expression</span> <code class=\"t\">;</code></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>Expression</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">SwitchStatement</span> <span class=\"geq\">:</span> <code class=\"t\">switch</code> <code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code> <span class=\"nt\">CaseBlock</span></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>CaseBlock</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">CaseBlock</span> <span class=\"geq\">:</span> <code class=\"t\">{</code> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">DefaultClause</span> <span class=\"nt\">CaseClauses</span><sub class=\"g-opt\">opt</sub> <code class=\"t\">}</code></div>\n        <ol class=\"proc\">\n          <li>Let <i>has</i> be <b>false</b>.</li>\n          <li>If the first <i>CaseClauses</i> is present, let <i>has</i> be HasProductionInTailPosition of the first\n              <i>CaseClauses</i> with argument <i>nonterminal</i>.</li>\n          <li>If <i>has</i> is <b>true</b>, return <b>true</b>.</li>\n          <li>Let <i>has</i> be HasProductionInTailPosition of the <i>DefaultClause</i> with argument <i>nonterminal</i>.</li>\n          <li>If <i>has</i> is <b>true</b>, return <b>true</b>.</li>\n          <li>If the second <i>CaseClauses</i> is present, let <i>has</i> be HasProductionInTailPosition of the second\n              <i>CaseClauses</i> with argument <i>nonterminal</i>.</li>\n          <li>Return <i>has</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">CaseClauses</span> <span class=\"geq\">:</span> <span class=\"nt\">CaseClauses</span> <span class=\"nt\">CaseClause</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>has</i> be HasProductionInTailPosition of <i>CaseClauses</i> with argument <i>nonterminal</i>.</li>\n          <li>If <i>has</i> is <b>true</b>, return <b>true</b>.</li>\n          <li>Return HasProductionInTailPosition of <i>CaseClause</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n\n        <p><span class=\"prod\"><span class=\"nt\">CaseClause</span> <span class=\"geq\">:</span> <code class=\"t\">case</code> <span class=\"nt\">Expression</span> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></span></p>\n\n        <div class=\"gp prod\"><span class=\"nt\">DefaultClause</span> <span class=\"geq\">:</span> <code class=\"t\">default</code> <code class=\"t\">:</code> <span class=\"nt\">StatementList</span><sub class=\"g-opt\">opt</sub></div>\n        <ol class=\"proc\">\n          <li>If <i>StatementList</i> is present, return HasProductionInTailPosition of <i>StatementList</i> with argument\n              <i>nonterminal</i>.</li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Catch</span></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>Catch</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n\n        <p><span class=\"prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Finally</span></span></p>\n\n        <div class=\"gp prod\"><span class=\"nt\">TryStatement</span> <span class=\"geq\">:</span> <code class=\"t\">try</code> <span class=\"nt\">Block</span> <span class=\"nt\">Catch</span> <span class=\"nt\">Finally</span></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>Finally</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">Catch</span> <span class=\"geq\">:</span> <code class=\"t\">catch</code> <code class=\"t\">(</code> <span class=\"nt\">CatchParameter</span> <code class=\"t\">)</code> <span class=\"nt\">Block</span></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>Block</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-expression-rules\">\n        <h1><span class=\"secnum\" id=\"sec-14.6.2.2\"><a href=\"/sec/sec-expression-rules.html\" title=\"link to this section\">14.6.2.2</a></span> Expression Rules</h1>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> A potential tail position call that is immediately followed by return <a href=\"/sec/sec-getvalue.html\">GetValue</a> of the call result is also a possible tail position call. Function calls cannot return\n          reference values, so such a <a href=\"/sec/sec-getvalue.html\">GetValue</a> operation will always returns the same value as the\n          actual function call result.</p>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">AssignmentExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">YieldExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ArrowFunction</span></div>\n          <div class=\"rhs\"><span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">=</code> <span class=\"nt\">AssignmentExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">LeftHandSideExpression</span> <span class=\"nt\">AssignmentOperator</span> <span class=\"nt\">AssignmentExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">BitwiseANDExpression</span> <code class=\"t\">:</code> <span class=\"nt\">BitwiseANDExpression</span> <code class=\"t\">&amp;</code> <span class=\"nt\">EqualityExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">BitwiseXORExpression</span> <code class=\"t\">:</code> <span class=\"nt\">BitwiseXORExpression</span> <code class=\"t\">^</code> <span class=\"nt\">BitwiseANDExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">BitwiseORExpression</span> <code class=\"t\">:</code> <span class=\"nt\">BitwiseORExpression</span> <code class=\"t\">|</code> <span class=\"nt\">BitwiseXORExpression</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">EqualityExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">EqualityExpression</span> <code class=\"t\">==</code> <span class=\"nt\">RelationalExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">EqualityExpression</span> <code class=\"t\">!=</code> <span class=\"nt\">RelationalExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">EqualityExpression</span> <code class=\"t\">===</code> <span class=\"nt\">RelationalExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">EqualityExpression</span> <code class=\"t\">!==</code> <span class=\"nt\">RelationalExpression</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">RelationalExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">RelationalExpression</span> <code class=\"t\">&lt;</code> <span class=\"nt\">ShiftExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">RelationalExpression</span> <code class=\"t\">&gt;</code> <span class=\"nt\">ShiftExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">RelationalExpression</span> <code class=\"t\">&lt;=</code> <span class=\"nt\">ShiftExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">RelationalExpression</span> <code class=\"t\">&gt;=</code> <span class=\"nt\">ShiftExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">RelationalExpression</span> <code class=\"t\">instanceof</code> <span class=\"nt\">ShiftExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">RelationalExpression</span> <code class=\"t\">in</code> <span class=\"nt\">ShiftExpression</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">ShiftExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ShiftExpression</span> <code class=\"t\">&lt;&lt;</code> <span class=\"nt\">AdditiveExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ShiftExpression</span> <code class=\"t\">&gt;&gt;</code> <span class=\"nt\">AdditiveExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ShiftExpression</span> <code class=\"t\">&gt;&gt;&gt;</code> <span class=\"nt\">AdditiveExpression</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">AdditiveExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">AdditiveExpression</span> <code class=\"t\">+</code> <span class=\"nt\">MultiplicativeExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">AdditiveExpression</span> <code class=\"t\">-</code> <span class=\"nt\">MultiplicativeExpression</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">MultiplicativeExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MultiplicativeExpression</span> <span class=\"nt\">MultiplicativeOperator</span> <span class=\"nt\">UnaryExpression</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">UnaryExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">delete</code> <span class=\"nt\">UnaryExpression</span></div>\n          <div class=\"rhs\"><code class=\"t\">void</code> <span class=\"nt\">UnaryExpression</span></div>\n          <div class=\"rhs\"><code class=\"t\">typeof</code> <span class=\"nt\">UnaryExpression</span></div>\n          <div class=\"rhs\"><code class=\"t\">++</code> <span class=\"nt\">UnaryExpression</span></div>\n          <div class=\"rhs\"><code class=\"t\">--</code> <span class=\"nt\">UnaryExpression</span></div>\n          <div class=\"rhs\"><code class=\"t\">+</code> <span class=\"nt\">UnaryExpression</span></div>\n          <div class=\"rhs\"><code class=\"t\">-</code> <span class=\"nt\">UnaryExpression</span></div>\n          <div class=\"rhs\"><code class=\"t\">~</code> <span class=\"nt\">UnaryExpression</span></div>\n          <div class=\"rhs\"><code class=\"t\">!</code> <span class=\"nt\">UnaryExpression</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">PostfixExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">++</code></div>\n          <div class=\"rhs\"><span class=\"nt\">LeftHandSideExpression</span> <code class=\"t\">--</code></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">CallExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">SuperCall</span></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <code class=\"t\">[</code> <span class=\"nt\">Expression</span> <code class=\"t\">]</code></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n          <div class=\"rhs\"><span class=\"nt\">NewExpression</span> <code class=\"t\">:</code> <code class=\"t\">new</code> <span class=\"nt\">NewExpression</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <code class=\"t\">[</code> <span class=\"nt\">Expression</span> <code class=\"t\">]</code></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <code class=\"t\">.</code> <span class=\"nt\">IdentifierName</span></div>\n          <div class=\"rhs\"><span class=\"nt\">SuperProperty</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MetaProperty</span></div>\n          <div class=\"rhs\"><code class=\"t\">new</code> <span class=\"nt\">MemberExpression</span> <span class=\"nt\">Arguments</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">this</code></div>\n          <div class=\"rhs\"><span class=\"nt\">IdentifierReference</span></div>\n          <div class=\"rhs\"><span class=\"nt\">Literal</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ArrayLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ObjectLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">FunctionExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">ClassExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">GeneratorExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">RegularExpressionLiteral</span></div>\n          <div class=\"rhs\"><span class=\"nt\">TemplateLiteral</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return <b>false</b>.</li>\n        </ol>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">Expression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">AssignmentExpression</span></div>\n          <div class=\"rhs\"><span class=\"nt\">Expression</span> <code class=\"t\">,</code> <span class=\"nt\">AssignmentExpression</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>AssignmentExpression</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">ConditionalExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">LogicalORExpression</span> <code class=\"t\">?</code> <span class=\"nt\">AssignmentExpression</span> <code class=\"t\">:</code> <span class=\"nt\">AssignmentExpression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>has</i> be HasProductionInTailPosition of the first <i>AssignmentExpression</i> with argument\n              <i>nonterminal</i>.</li>\n          <li>If <i>has</i> is <b>true</b>, return <b>true</b>.</li>\n          <li>Return HasProductionInTailPosition of the second <i>AssignmentExpression</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LogicalANDExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">LogicalANDExpression</span> <code class=\"t\">&amp;&amp;</code> <span class=\"nt\">BitwiseORExpression</span></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>BitwiseORExpression</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">LogicalORExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">LogicalORExpression</span> <code class=\"t\">||</code> <span class=\"nt\">LogicalANDExpression</span></div>\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>LogicalANDExpression</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">CallExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <span class=\"nt\">Arguments</span></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <span class=\"nt\">Arguments</span></div>\n          <div class=\"rhs\"><span class=\"nt\">CallExpression</span> <span class=\"nt\">TemplateLiteral</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>If this <i>CallExpression</i> is <i>nonterminal</i>, return <b>true</b>.</li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">MemberExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">MemberExpression</span> <span class=\"nt\">TemplateLiteral</span></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>If this <i>MemberExpression</i> is <i>nonterminal</i>, return <b>true</b>.</li>\n          <li>Return <b>false</b>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">PrimaryExpression</span> <span class=\"geq\">:</span> <span class=\"nt\">CoverParenthesizedExpressionAndArrowParameterList</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>expr</i> be CoveredParenthesizedExpression of <i>CoverParenthesizedExpressionAndArrowParameterList</i>.</li>\n          <li>Return HasProductionInTailPosition of <i>expr</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">ParenthesizedExpression</span> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><code class=\"t\">(</code> <span class=\"nt\">Expression</span> <code class=\"t\">)</code></div>\n        </div>\n\n        <ol class=\"proc\">\n          <li>Return HasProductionInTailPosition of <i>Expression</i> with argument <i>nonterminal</i>.</li>\n        </ol>\n      </section>\n    </section>\n\n    <section id=\"sec-preparefortailcall\">\n      <h1><span class=\"secnum\" id=\"sec-14.6.3\"><a href=\"/sec/sec-preparefortailcall.html\" title=\"link to this section\">14.6.3</a></span>\n          Runtime Semantics: PrepareForTailCall ( )</h1>\n\n      <p class=\"normalbefore\">The abstract operation PrepareForTailCall performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>leafContext</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n        <li><a href=\"/sec/sec-execution-contexts.html\">Suspend</a> <i>leafContext</i>.</li>\n        <li>Pop <i>leafContext</i> from <a href=\"/sec/sec-execution-contexts.html\">the execution context stack</a>. The <a href=\"/sec/sec-execution-contexts.html\">execution context</a> now on the top of the stack becomes <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>leafContext</i> has no further use. It will never be activated as\n            <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n      </ol>\n\n      <p>A tail position call must either release any transient internal resources associated with the currently executing\n      function <a href=\"/sec/sec-execution-contexts.html\">execution context</a> before invoking the target function or reuse those\n      resources in support of the target function.</p>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> For example, a tail position call should only grow an implementation&#x2019;s activation\n        record stack by the amount that the size of the target function&#x2019;s activation record exceeds the size of the calling\n        function&#x2019;s activation record. If the target function&#x2019;s activation record is smaller, then the total size of\n        the stack should decrease.</p>\n      </div>\n    </section>\n  "}