{"id":"sec-template-literals-runtime-semantics-evaluation","html":"\n        <h1><span class=\"secnum\" id=\"sec-12.2.9.5\"><a href=\"/sec/sec-template-literals-runtime-semantics-evaluation.html\" title=\"link to this section\">12.2.9.5</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateLiteral</span> <span class=\"geq\">:</span> <span class=\"nt\">NoSubstitutionTemplate</span></div>\n        <ol class=\"proc\">\n          <li>Return the String value whose code  units are the elements of the TV of <i>NoSubstitutionTemplate</i> as defined in\n              <a href=\"/sec/sec-template-literal-lexical-components.html\">11.8.6</a>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateLiteral</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateHead</span> <span class=\"nt\">Expression</span> <span class=\"nt\">TemplateSpans</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>head</i> be the TV of <i>TemplateHead</i> as defined in <a href=\"/sec/sec-template-literal-lexical-components.html\">11.8.6</a>.</li>\n          <li>Let <i>sub</i> be the result of evaluating <i>Expression</i>.</li>\n          <li>Let <i>middle</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>sub</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>middle</i>).</li>\n          <li>Let <i>tail</i> be the result of evaluating <i>TemplateSpans</i> .</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>tail</i>).</li>\n          <li>Return the String value whose code units are the elements  of <i>head</i> followed by the elements of <i>middle</i>\n              followed by the elements of <i>tail</i>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> The string conversion semantics applied to the <span class=\"nt\">Expression</span>\n          value are like <code><a href=\"/sec/sec-string.prototype.concat.html\">String.prototype.concat</a></code> rather than the\n          <code>+</code> operator.</p>\n        </div>\n\n        <div class=\"gp prod\"><span class=\"nt\">TemplateSpans</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateTail</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>tail</i> be the TV of <i>TemplateTail</i> as defined in <a href=\"/sec/sec-template-literal-lexical-components.html\">11.8.6</a>.</li>\n          <li>Return the string consisting of the code units of <i>tail</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateSpans</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddleList</span> <span class=\"nt\">TemplateTail</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>head</i> be the result of evaluating <i>TemplateMiddleList</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>head</i>).</li>\n          <li>Let <i>tail</i> be the TV of <i>TemplateTail</i> as defined in <a href=\"/sec/sec-template-literal-lexical-components.html\">11.8.6</a>.</li>\n          <li>Return the string whose code units are the elements of <i>head</i> followed by the elements of <i>tail</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateMiddleList</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddle</span> <span class=\"nt\">Expression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>head</i> be the TV of <i>TemplateMiddle</i> as defined in <a href=\"/sec/sec-template-literal-lexical-components.html\">11.8.6</a>.</li>\n          <li>Let <i>sub</i> be the result of evaluating <i>Expression</i>.</li>\n          <li>Let <i>middle</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>sub</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>middle</i>).</li>\n          <li>Return the sequence of code units consisting of the code units of <i>head</i> followed by the elements of\n              <i>middle</i>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> The string conversion semantics applied to the <span class=\"nt\">Expression</span>\n          value are like <code><a href=\"/sec/sec-string.prototype.concat.html\">String.prototype.concat</a></code> rather than the\n          <code>+</code> operator.</p>\n        </div>\n\n        <div class=\"gp prod\"><span class=\"nt\">TemplateMiddleList</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddleList</span> <span class=\"nt\">TemplateMiddle</span> <span class=\"nt\">Expression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>rest</i> be the result of evaluating <i>TemplateMiddleList</i> .</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>rest</i>).</li>\n          <li>Let <i>middle</i>  be the TV of <i>TemplateMiddle</i> as defined in <a href=\"/sec/sec-template-literal-lexical-components.html\">11.8.6</a>.</li>\n          <li>Let <i>sub</i> be the result of evaluating <i>Expression</i>.</li>\n          <li>Let <i>last</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>sub</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>last</i>).</li>\n          <li>Return the sequence of code units consisting of the elements of <i>rest</i> followed by the code units of\n              <i>middle</i> followed by the elements of <i>last</i>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 3</span> The string conversion semantics applied to the <span class=\"nt\">Expression</span>\n          value are like <code><a href=\"/sec/sec-string.prototype.concat.html\">String.prototype.concat</a></code> rather than the\n          <code>+</code> operator.</p>\n        </div>\n      "}