{"id":"sec-template-literals","html":"\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.9\"><a href=\"/sec/sec-template-literals.html\" title=\"link to this section\">12.2.9</a></span>\n            Template Literals</h1>\n        <h2>Syntax</h2>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">TemplateLiteral</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">NoSubstitutionTemplate</span></div>\n          <div class=\"rhs\"><span class=\"nt\">TemplateHead</span> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub> <span class=\"nt\">TemplateSpans</span><sub class=\"g-params\">[?Yield]</sub></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">TemplateSpans</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">TemplateTail</span></div>\n          <div class=\"rhs\"><span class=\"nt\">TemplateMiddleList</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">TemplateTail</span></div>\n        </div>\n\n        <div class=\"gp\">\n          <div class=\"lhs\"><span class=\"nt\">TemplateMiddleList</span><sub class=\"g-params\">[Yield]</sub> <span class=\"geq\">:</span></div>\n          <div class=\"rhs\"><span class=\"nt\">TemplateMiddle</span> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub></div>\n          <div class=\"rhs\"><span class=\"nt\">TemplateMiddleList</span><sub class=\"g-params\">[?Yield]</sub> <span class=\"nt\">TemplateMiddle</span> <span class=\"nt\">Expression</span><sub class=\"g-params\">[In, ?Yield]</sub></div>\n        </div>\n      </div>\n\n      <section id=\"sec-static-semantics-templatestrings\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.9.1\"><a href=\"/sec/sec-static-semantics-templatestrings.html\" title=\"link to this section\">12.2.9.1</a></span> Static Semantics:  TemplateStrings</h1>\n\n        <p>With parameter <var>raw</var>.</p>\n\n        <div class=\"gp prod\"><span class=\"nt\">TemplateLiteral</span> <span class=\"geq\">:</span> <span class=\"nt\">NoSubstitutionTemplate</span></div>\n        <ol class=\"proc\">\n          <li>If <i>raw</i> is <b>false</b>, then\n            <ol class=\"block\">\n              <li>Let <i>string</i> be the TV of <i>NoSubstitutionTemplate</i>.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>string</i> be the TRV of <i>NoSubstitutionTemplate</i>.</li>\n            </ol>\n          </li>\n          <li>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the single element,\n              <i>string</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateLiteral</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateHead</span> <span class=\"nt\">Expression</span> <span class=\"nt\">TemplateSpans</span></div>\n        <ol class=\"proc\">\n          <li>If <i>raw</i> is <b>false</b>, then\n            <ol class=\"block\">\n              <li>Let <i>head</i> be the TV of <i>TemplateHead</i>.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>head</i> be the TRV of <i>TemplateHead</i>.</li>\n            </ol>\n          </li>\n          <li>Let <i>tail</i> be TemplateStrings of <i>TemplateSpans</i> with argument <i>raw</i>.</li>\n          <li>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing <i>head</i> followed by the element,\n              in order of <i>tail</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateSpans</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateTail</span></div>\n        <ol class=\"proc\">\n          <li>If <i>raw</i> is <b>false</b>, then\n            <ol class=\"block\">\n              <li>Let <i>tail</i> be the TV of <i>TemplateTail</i>.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>tail</i> be the TRV of <i>TemplateTail</i>.</li>\n            </ol>\n          </li>\n          <li>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the single element, <i>tail</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateSpans</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddleList</span> <span class=\"nt\">TemplateTail</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>middle</i> be TemplateStrings of <i>TemplateMiddleList</i> with argument <i>raw</i>.</li>\n          <li>If <i>raw</i> is <b>false</b>, then\n            <ol class=\"block\">\n              <li>Let <i>tail</i> be the TV of <i>TemplateTail</i>.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>tail</i> be the TRV of <i>TemplateTail</i>.</li>\n            </ol>\n          </li>\n          <li>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the elements, in order, of\n              <i>middle</i> followed by <i>tail</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateMiddleList</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddle</span> <span class=\"nt\">Expression</span></div>\n        <ol class=\"proc\">\n          <li>If <i>raw</i> is <b>false</b>, then\n            <ol class=\"block\">\n              <li>Let <i>string</i> be the TV of <i>TemplateMiddle</i>.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>string</i> be the TRV of <i>TemplateMiddle</i>.</li>\n            </ol>\n          </li>\n          <li>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the single element,\n              <i>string</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateMiddleList</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddleList</span> <span class=\"nt\">TemplateMiddle</span> <span class=\"nt\">Expression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>front</i> be TemplateStrings of <i>TemplateMiddleList</i> with argument <i>raw</i>.</li>\n          <li>If <i>raw</i> is <b>false</b>, then\n            <ol class=\"block\">\n              <li>Let <i>last</i> be the TV of <i>TemplateMiddle</i>.</li>\n            </ol>\n          </li>\n          <li>Else,\n            <ol class=\"block\">\n              <li>Let <i>last</i> be the TRV of <i>TemplateMiddle</i>.</li>\n            </ol>\n          </li>\n          <li>Append <i>last</i> as the last element of the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>\n              <i>front</i>.</li>\n          <li>Return <i>front</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-template-literals-runtime-semantics-argumentlistevaluation\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.9.2\"><a href=\"/sec/sec-template-literals-runtime-semantics-argumentlistevaluation.html\" title=\"link to this section\">12.2.9.2</a></span> Runtime Semantics: ArgumentListEvaluation</h1>\n\n        <p>See also: <a href=\"/sec/sec-argument-lists-runtime-semantics-argumentlistevaluation.html\">12.3.6.1</a></p>\n\n        <div class=\"gp prod\"><span class=\"nt\">TemplateLiteral</span> <span class=\"geq\">:</span> <span class=\"nt\">NoSubstitutionTemplate</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>templateLiteral</i> be this <i>TemplateLiteral.</i></li>\n          <li>Let <i>siteObj</i> be <a href=\"/sec/sec-gettemplateobject.html\">GetTemplateObject</a>(<i>templateLiteral</i>).</li>\n          <li>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing the one element which is\n              <i>siteObj</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateLiteral</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateHead</span> <span class=\"nt\">Expression</span> <span class=\"nt\">TemplateSpans</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>templateLiteral</i> be this <i>TemplateLiteral.</i></li>\n          <li>Let <i>siteObj</i> be <a href=\"/sec/sec-gettemplateobject.html\">GetTemplateObject</a>(<i>templateLiteral</i>).</li>\n          <li>Let <i>firstSub</i> be the result of  evaluating <i>Expression</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>firstSub</i>).</li>\n          <li>Let <i>restSub</i> be SubstitutionEvaluation of <i>TemplateSpans</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>restSub</i>).</li>\n          <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>restSub</i> is a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n          <li>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> whose first element is <i>siteObj</i>, whose\n              second elements is <i>firstSub</i>, and whose subsequent elements are the elements of <i>restSub</i>, in order.\n              <i>restSub</i> may contain no elements.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-gettemplateobject\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.9.3\"><a href=\"/sec/sec-gettemplateobject.html\" title=\"link to this section\">12.2.9.3</a></span> Runtime Semantics: GetTemplateObject ( templateLiteral )</h1>\n\n        <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">GetTemplateObject</span> is\n        called with a grammar production, <var>templateLiteral</var>, as an argument. It performs the following steps:</p>\n\n        <ol class=\"proc\">\n          <li>Let <i>rawStrings</i> be TemplateStrings of <i>templateLiteral</i> with argument <b>true</b>.</li>\n          <li>Let <i>ctx</i> be <a href=\"/sec/sec-execution-contexts.html\">the running execution context</a>.</li>\n          <li>Let <i>realm</i> be the <i>ctx</i>&#x2019;s <a href=\"/sec/sec-code-realms.html\">Realm</a>.</li>\n          <li>Let <i>templateRegistry</i> be <i>realm</i>.[[templateMap]].</li>\n          <li>For each element  <i>e</i> of <i>templateRegistry</i>, do\n            <ol class=\"block\">\n              <li>If <i>e</i>.[[strings]] and <i>rawStrings</i> contain the same values in the same order, then\n                <ol class=\"block\">\n                  <li>Return <i>e.</i>[[array]].</li>\n                </ol>\n              </li>\n            </ol>\n          </li>\n          <li>Let <i>cookedStrings</i> be TemplateStrings of <i>templateLiteral</i> with argument <b>false</b>.</li>\n          <li>Let <i>count</i> be the number of elements in the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>\n              <i>cookedStrings</i>.</li>\n          <li>Let <i>template</i> be <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>(<i>count</i>).</li>\n          <li>Let <i>rawObj</i> be <a href=\"/sec/sec-arraycreate.html\">ArrayCreate</a>(<i>count</i>).</li>\n          <li>Let <i>index</i> be 0.</li>\n          <li>Repeat while <i>index</i> &lt; <i>count</i>\n            <ol class=\"block\">\n              <li>Let <i>prop</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>index</i>).</li>\n              <li>Let <i>cookedValue</i> be the String value <i>cookedStrings</i>[<i>index</i>].</li>\n              <li><a href=\"/sec/sec-call.html\">Call</a> <i>template</i>.[[DefineOwnProperty]](<i>prop</i>, PropertyDescriptor{[[Value]]:\n                  <i>cookedValue</i>, [[Enumerable]]: <b>true</b>, [[Writable]]: <b>false</b>, [[Configurable]]:\n                  <b>false</b>})<i>.</i></li>\n              <li>Let <i>rawValue</i> be the String value <i>rawStrings</i>[<i>index</i>].</li>\n              <li><a href=\"/sec/sec-call.html\">Call</a> <i>rawObj</i>.[[DefineOwnProperty]](<i>prop</i>, PropertyDescriptor{[[Value]]:\n                  <i>rawValue</i>, [[Enumerable]]: <b>true</b>, [[Writable]]: <b>false</b>, [[Configurable]]:\n                  <b>false</b>})<i>.</i></li>\n              <li>Let <i>index</i> be <i>index</i>+1.</li>\n            </ol>\n          </li>\n          <li>Perform <a href=\"/sec/sec-setintegritylevel.html\">SetIntegrityLevel</a>(<i>rawObj</i>, <code>&quot;frozen&quot;</code>).</li>\n          <li><a href=\"/sec/sec-call.html\">Call</a> <i>template</i>.[[DefineOwnProperty]](<code>&quot;raw&quot;</code>, PropertyDescriptor{[[Value]]:\n              <i>rawObj</i>, [[Writable]]: <b>false</b>, [[Enumerable]]: <b>false</b>, [[Configurable]]:\n              <b>false</b>})<i>.</i></li>\n          <li>Perform <a href=\"/sec/sec-setintegritylevel.html\">SetIntegrityLevel</a>(<i>template</i>, <code>&quot;frozen&quot;</code>).</li>\n          <li>Append the Record{[[strings]]: <i>rawStrings</i>, [[array]]: <i>template</i>} to <i>templateRegistry</i>.</li>\n          <li>Return <i>template</i>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> The creation of a template object cannot result in an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> Each <span class=\"nt\">TemplateLiteral</span> in the program code of a <a href=\"/sec/sec-code-realms.html\">Realm</a> is associated with a unique template object that is used in the evaluation of tagged\n          Templates (<a href=\"/sec/sec-template-literals-runtime-semantics-evaluation.html\">12.2.9.5</a>). The template objects are frozen\n          and the same template object is used each time a specific tagged Template is evaluated. Whether template objects are\n          created lazily upon first evaluation of the <span class=\"nt\">TemplateLiteral</span> or eagerly prior to first evaluation\n          is an implementation choice that is not observable to ECMAScript code.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 3</span> Future editions of this specification may define additional non-enumerable properties\n          of template objects.</p>\n        </div>\n      </section>\n\n      <section id=\"sec-runtime-semantics-substitutionevaluation\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.9.4\"><a href=\"/sec/sec-runtime-semantics-substitutionevaluation.html\" title=\"link to this section\">12.2.9.4</a></span> Runtime Semantics: SubstitutionEvaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateSpans</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateTail</span></div>\n        <ol class=\"proc\">\n          <li>Return an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateSpans</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddleList</span> <span class=\"nt\">TemplateTail</span></div>\n        <ol class=\"proc\">\n          <li>Return the result of SubstitutionEvaluation of <i>TemplateMiddleList</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateMiddleList</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddle</span> <span class=\"nt\">Expression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>sub</i> be the result of evaluating <i>Expression</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>sub</i>).</li>\n          <li>Return a <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> containing only <i>sub</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateMiddleList</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddleList</span> <span class=\"nt\">TemplateMiddle</span> <span class=\"nt\">Expression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>preceding</i> be the result of SubstitutionEvaluation of <i>TemplateMiddleList</i> .</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>preceding</i>).</li>\n          <li>Let <i>next</i>  be the result of evaluating <i>Expression</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n          <li>Append <i>next</i> as the last element of the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>\n              <i>preceding</i>.</li>\n          <li>Return <i>preceding</i>.</li>\n        </ol>\n      </section>\n\n      <section id=\"sec-template-literals-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum\" id=\"sec-12.2.9.5\"><a href=\"/sec/sec-template-literals-runtime-semantics-evaluation.html\" title=\"link to this section\">12.2.9.5</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateLiteral</span> <span class=\"geq\">:</span> <span class=\"nt\">NoSubstitutionTemplate</span></div>\n        <ol class=\"proc\">\n          <li>Return the String value whose code  units are the elements of the TV of <i>NoSubstitutionTemplate</i> as defined in\n              <a href=\"/sec/sec-template-literal-lexical-components.html\">11.8.6</a>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateLiteral</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateHead</span> <span class=\"nt\">Expression</span> <span class=\"nt\">TemplateSpans</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>head</i> be the TV of <i>TemplateHead</i> as defined in <a href=\"/sec/sec-template-literal-lexical-components.html\">11.8.6</a>.</li>\n          <li>Let <i>sub</i> be the result of evaluating <i>Expression</i>.</li>\n          <li>Let <i>middle</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>sub</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>middle</i>).</li>\n          <li>Let <i>tail</i> be the result of evaluating <i>TemplateSpans</i> .</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>tail</i>).</li>\n          <li>Return the String value whose code units are the elements  of <i>head</i> followed by the elements of <i>middle</i>\n              followed by the elements of <i>tail</i>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> The string conversion semantics applied to the <span class=\"nt\">Expression</span>\n          value are like <code><a href=\"/sec/sec-string.prototype.concat.html\">String.prototype.concat</a></code> rather than the\n          <code>+</code> operator.</p>\n        </div>\n\n        <div class=\"gp prod\"><span class=\"nt\">TemplateSpans</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateTail</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>tail</i> be the TV of <i>TemplateTail</i> as defined in <a href=\"/sec/sec-template-literal-lexical-components.html\">11.8.6</a>.</li>\n          <li>Return the string consisting of the code units of <i>tail</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateSpans</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddleList</span> <span class=\"nt\">TemplateTail</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>head</i> be the result of evaluating <i>TemplateMiddleList</i>.</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>head</i>).</li>\n          <li>Let <i>tail</i> be the TV of <i>TemplateTail</i> as defined in <a href=\"/sec/sec-template-literal-lexical-components.html\">11.8.6</a>.</li>\n          <li>Return the string whose code units are the elements of <i>head</i> followed by the elements of <i>tail</i>.</li>\n        </ol>\n        <div class=\"gp prod\"><span class=\"nt\">TemplateMiddleList</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddle</span> <span class=\"nt\">Expression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>head</i> be the TV of <i>TemplateMiddle</i> as defined in <a href=\"/sec/sec-template-literal-lexical-components.html\">11.8.6</a>.</li>\n          <li>Let <i>sub</i> be the result of evaluating <i>Expression</i>.</li>\n          <li>Let <i>middle</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>sub</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>middle</i>).</li>\n          <li>Return the sequence of code units consisting of the code units of <i>head</i> followed by the elements of\n              <i>middle</i>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> The string conversion semantics applied to the <span class=\"nt\">Expression</span>\n          value are like <code><a href=\"/sec/sec-string.prototype.concat.html\">String.prototype.concat</a></code> rather than the\n          <code>+</code> operator.</p>\n        </div>\n\n        <div class=\"gp prod\"><span class=\"nt\">TemplateMiddleList</span> <span class=\"geq\">:</span> <span class=\"nt\">TemplateMiddleList</span> <span class=\"nt\">TemplateMiddle</span> <span class=\"nt\">Expression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>rest</i> be the result of evaluating <i>TemplateMiddleList</i> .</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>rest</i>).</li>\n          <li>Let <i>middle</i>  be the TV of <i>TemplateMiddle</i> as defined in <a href=\"/sec/sec-template-literal-lexical-components.html\">11.8.6</a>.</li>\n          <li>Let <i>sub</i> be the result of evaluating <i>Expression</i>.</li>\n          <li>Let <i>last</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>sub</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>last</i>).</li>\n          <li>Return the sequence of code units consisting of the elements of <i>rest</i> followed by the code units of\n              <i>middle</i> followed by the elements of <i>last</i>.</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 3</span> The string conversion semantics applied to the <span class=\"nt\">Expression</span>\n          value are like <code><a href=\"/sec/sec-string.prototype.concat.html\">String.prototype.concat</a></code> rather than the\n          <code>+</code> operator.</p>\n        </div>\n      </section>\n    "}