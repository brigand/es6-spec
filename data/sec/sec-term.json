{"id":"sec-term","html":"\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-21.2.2.5\"><a href=\"/sec/sec-term.html\" title=\"link to this section\">21.2.2.5</a></span>\n              Term</h1>\n\n          <p>The production <span class=\"prod\"><span class=\"nt\">Term</span> <span class=\"geq\">::</span> <span class=\"nt\">Assertion</span></span> evaluates by returning an internal Matcher closure that takes two arguments, a State\n          <var>x</var> and a Continuation <var>c</var>, and performs the following steps when evaluated:</p>\n\n          <ol class=\"proc\">\n            <li>Evaluate <i>Assertion</i> to obtain an AssertionTester <i>t</i>.</li>\n            <li><a href=\"/sec/sec-call.html\">Call</a> <i>t</i>(<i>x</i>) and let <i>r</i> be the resulting Boolean value.</li>\n            <li>If <i>r</i> is <b>false</b>, return <b>failure</b>.</li>\n            <li><a href=\"/sec/sec-call.html\">Call</a> <i>c</i>(<i>x</i>) and return its result.</li>\n          </ol>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Term</span> <span class=\"geq\">::</span> <span class=\"nt\">Atom</span></span> evaluates as follows:</p>\n\n          <ol class=\"proc\">\n            <li>Return the Matcher that is the result of evaluating <i>Atom</i>.</li>\n          </ol>\n\n          <p class=\"normalbefore\">The production <span class=\"prod\"><span class=\"nt\">Term</span> <span class=\"geq\">::</span> <span class=\"nt\">Atom</span> <span class=\"nt\">Quantifier</span></span> evaluates as follows:</p>\n\n          <ol class=\"proc\">\n            <li>Evaluate <i>Atom</i> to obtain a Matcher <i>m</i>.</li>\n            <li>Evaluate <i>Quantifier</i> to obtain the three results: an integer <i>min</i>, an integer (or &#x221E;) <i>max</i>,\n                and Boolean <i>greedy</i>.</li>\n            <li>If <i>max</i> is finite and less than <i>min</i>, throw a <b>SyntaxError</b> exception.</li>\n            <li>Let <i>parenIndex</i> be the number of left capturing parentheses in the entire regular expression that occur to\n                the left of this production expansion&apos;s <i>Term</i>. This is the total number of times the <span class=\"prod\"><span class=\"nt\">Atom</span> <span class=\"geq\">::</span> <code class=\"t\">(</code> <span class=\"nt\">Disjunction</span> <code class=\"t\">)</code></span> production is expanded prior to this production&apos;s\n                <i>Term</i> plus the total number of <span class=\"prod\"><span class=\"nt\">Atom</span> <span class=\"geq\">::</span>\n                <code class=\"t\">(</code> <span class=\"nt\">Disjunction</span> <code class=\"t\">)</code></span> productions enclosing\n                this <i>Term</i>.</li>\n            <li>Let <i>parenCount</i> be the number of left capturing parentheses in the expansion of this production&apos;s\n                <i>Atom</i>. This is the total number of <span class=\"prod\"><span class=\"nt\">Atom</span> <span class=\"geq\">::</span> <code class=\"t\">(</code> <span class=\"nt\">Disjunction</span> <code class=\"t\">)</code></span>\n                productions enclosed by this production&apos;s <i>Atom</i>.</li>\n            <li>Return an internal Matcher closure that takes two arguments, a State <i>x</i> and a Continuation <i>c</i>, and\n                performs the following steps when evaluated:\n              <ol class=\"nested proc\">\n                <li><a href=\"/sec/sec-call.html\">Call</a> RepeatMatcher(<i>m</i>, <i>min</i>, <i>max</i>, <i>greedy</i>, <i>x</i>,\n                    <i>c</i>, <i>parenIndex</i>, <i>parenCount</i>) and return its result.</li>\n              </ol>\n            </li>\n          </ol>\n        </div>\n\n        <section id=\"sec-runtime-semantics-repeatmatcher-abstract-operation\">\n          <h1><span class=\"secnum\" id=\"sec-21.2.2.5.1\"><a href=\"/sec/sec-runtime-semantics-repeatmatcher-abstract-operation.html\" title=\"link to this section\">21.2.2.5.1</a></span> Runtime Semantics: RepeatMatcher Abstract Operation</h1>\n\n          <p class=\"normalbefore\">The abstract operation <span style=\"font-family: Times New Roman\">RepeatMatcher</span> takes\n          eight parameters, a Matcher <var>m</var>, an integer <var>min</var>, an integer (or &#x221E;) <var>max</var>, a Boolean\n          <var>greedy</var>, a State <var>x</var>, a Continuation <var>c</var>, an integer <var>parenIndex</var>, and an integer\n          <var>parenCount</var>, and performs the following steps:</p>\n\n          <ol class=\"proc\">\n            <li>If <i>max</i> is zero, return <i>c</i>(<i>x</i>).</li>\n            <li>Create an internal Continuation closure <i>d</i> that takes one State argument <i>y</i> and performs the following\n                steps when evaluated:\n              <ol class=\"nested proc\">\n                <li>If <i>min</i> is zero and <i>y</i>&apos;s <i>endIndex</i> is equal to <i>x</i>&apos;s <i>endIndex</i>, return\n                    <b>failure</b>.</li>\n                <li>If <i>min</i> is zero, let <i>min2</i> be zero; otherwise let <i>min2</i> be <i>min</i>&#x2013;1.</li>\n                <li>If <i>max</i> is &#x221E;, let <i>max2</i> be &#x221E;; otherwise let <i>max2</i> be <i>max</i>&#x2013;1.</li>\n                <li><a href=\"/sec/sec-call.html\">Call</a> RepeatMatcher(<i>m</i>, <i>min2</i>, <i>max2</i>, <i>greedy</i>, <i>y</i>,\n                    <i>c</i>, <i>parenIndex</i>, <i>parenCount</i>) and return its result.</li>\n              </ol>\n            </li>\n            <li>Let <i>cap</i> be a fresh copy of <i>x</i>&apos;s <i>captures</i> <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n            <li>For every integer <i>k</i> that satisfies <i>parenIndex</i> &lt; <i>k</i> and <i>k</i> &#x2264;\n                <i>parenIndex</i>+<i>parenCount</i>, set <i>cap</i>[<i>k</i>] to <b>undefined</b>.</li>\n            <li>Let <i>e</i> be <i>x</i>&apos;s <i>endIndex</i>.</li>\n            <li>Let <i>xr</i> be the State (<i>e</i>, <i>cap</i>).</li>\n            <li>If <i>min</i> is not zero, return <i>m</i>(<i>xr</i>, <i>d</i>).</li>\n            <li>If <i>greedy</i> is <b>false</b>, then\n              <ol class=\"block\">\n                <li><a href=\"/sec/sec-call.html\">Call</a> <i>c</i>(<i>x</i>) and let <i>z</i> be its result.</li>\n                <li>If <i>z</i> is not <b>failure</b>, return <i>z</i>.</li>\n                <li><a href=\"/sec/sec-call.html\">Call</a> <i>m</i>(<i>xr</i>, <i>d</i>) and return its result.</li>\n              </ol>\n            </li>\n            <li><a href=\"/sec/sec-call.html\">Call</a> <i>m</i>(<i>xr</i>, <i>d</i>) and let <i>z</i> be its result.</li>\n            <li>If <i>z</i> is not <b>failure</b>, return <i>z</i>.</li>\n            <li><a href=\"/sec/sec-call.html\">Call</a> <i>c</i>(<i>x</i>) and return its result.</li>\n          </ol>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 1</span> An <span class=\"nt\">Atom</span> followed by a <span class=\"nt\">Quantifier</span> is\n            repeated the number of times specified by the <span class=\"nt\">Quantifier</span>. A <span class=\"nt\">Quantifier</span>\n            can be non-greedy, in which case the <span class=\"nt\">Atom</span> pattern is repeated as few times as possible while\n            still matching the sequel, or it can be greedy, in which case the <span class=\"nt\">Atom</span> pattern is repeated as\n            many times as possible while still matching the sequel. The <span class=\"nt\">Atom</span> pattern is repeated rather\n            than the input character sequence that it matches, so different repetitions of the <span class=\"nt\">Atom</span> can\n            match different input substrings.</p>\n          </div>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 2</span> If the <span class=\"nt\">Atom</span> and the sequel of the regular expression all\n            have choice points, the <span class=\"nt\">Atom</span> is first matched as many (or as few, if non-greedy) times as\n            possible. All choices in the sequel are tried before moving on to the next choice in the last repetition of <span class=\"nt\">Atom</span>. All choices in the last (n<sup>th</sup>) repetition of <span class=\"nt\">Atom</span> are tried\n            before moving on to the next choice in the next-to-last (n&#x2013;1)<sup>st</sup> repetition of <span class=\"nt\">Atom</span>; at which point it may turn out that more or fewer repetitions of <span class=\"nt\">Atom</span>\n            are now possible; these are exhausted (again, starting with either as few or as many as possible) before moving on to\n            the next choice in the (n-1)<sup>st</sup> repetition of <span class=\"nt\">Atom</span> and so on.</p>\n\n            <p>Compare</p>\n\n            <pre>/a[a-z]{2,4}/.exec(&quot;abcdefghi&quot;)</pre>\n\n            <p>which returns <code>&quot;abcde&quot;</code> with</p>\n\n            <pre>/a[a-z]{2,4}?/.exec(&quot;abcdefghi&quot;)</pre>\n\n            <p>which returns <code>&quot;abc&quot;</code>.</p>\n\n            <p>Consider also</p>\n\n            <pre>/(aa|aabaac|ba|b|c)*/.exec(&quot;aabaac&quot;)</pre>\n\n            <p>which, by the choice point ordering above, returns the array</p>\n\n            <pre>[&quot;aaba&quot;, &quot;ba&quot;]</pre>\n\n            <p>and not any of:</p>\n\n            <pre>[&quot;aabaac&quot;, &quot;aabaac&quot;]</pre>\n            <pre>[&quot;aabaac&quot;, &quot;c&quot;]</pre>\n\n            <p>The above ordering of choice points can be used to write a regular expression that calculates the greatest common\n            divisor of two numbers (represented in unary notation). The following example calculates the gcd of 10 and 15:</p>\n\n            <pre>&quot;aaaaaaaaaa,aaaaaaaaaaaaaaa&quot;.replace(/^(a+)\\1*,\\1+$/,&quot;$1&quot;)</pre>\n\n            <p>which returns the gcd in unary notation <code>&quot;aaaaa&quot;</code>.</p>\n          </div>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 3</span> Step 5 of the RepeatMatcher clears <var>Atom&apos;s</var> captures each time <span class=\"nt\">Atom</span> is repeated. We can see its behaviour in the regular expression</p>\n\n            <pre>/(z)((a+)?(b+)?(c))*/.exec(&quot;zaacbbbcac&quot;)</pre>\n\n            <p>which returns the array</p>\n\n            <pre>[&quot;zaacbbbcac&quot;, &quot;z&quot;, &quot;ac&quot;, &quot;a&quot;, undefined, &quot;c&quot;]</pre>\n\n            <p>and not</p>\n\n            <pre>[&quot;zaacbbbcac&quot;, &quot;z&quot;, &quot;ac&quot;, &quot;a&quot;, &quot;bbb&quot;, &quot;c&quot;]</pre>\n\n            <p>because each iteration of the outermost <code>*</code> clears all captured Strings contained in the quantified\n            <span class=\"nt\">Atom</span>, which in this case includes capture Strings numbered 2, 3, 4, and 5.</p>\n          </div>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 4</span> Step 1 of the RepeatMatcher&apos;s <var>d</var> closure states that, once the minimum\n            number of repetitions has been satisfied, any more expansions of <span class=\"nt\">Atom</span> that match the empty\n            character sequence are not considered for further repetitions. This prevents the regular expression engine from\n            falling into an infinite loop on patterns such as:</p>\n\n            <pre>/(a*)*/.exec(&quot;b&quot;)</pre>\n\n            <p>or the slightly more complicated:</p>\n\n            <pre>/(a*)b\\1+/.exec(&quot;baaaac&quot;)</pre>\n\n            <p>which returns the array</p>\n\n            <pre>[&quot;b&quot;, &quot;&quot;]</pre>\n\n            <p></p>\n          </div>\n        </section>\n      "}