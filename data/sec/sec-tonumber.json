{"id":"sec-tonumber","html":"\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-7.1.3\"><a href=\"/sec/sec-tonumber.html\" title=\"link to this section\">7.1.3</a></span> ToNumber (\n            argument )</h1>\n\n        <p>The abstract operation ToNumber converts <var>argument</var> to a value of type Number according to <a href=\"/sec/table-11.html\">Table 11</a>:</p>\n\n        <figure>\n          <figcaption><span id=\"table-11\">Table 11</span> &#x2014; ToNumber Conversions</figcaption>\n          <table class=\"real-table\">\n            <tr>\n              <th>Argument Type</th>\n              <th>Result</th>\n            </tr>\n            <tr>\n              <td><a href=\"/sec/sec-completion-record-specification-type.html\">Completion Record</a></td>\n              <td>If <var>argument</var> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, return <var>argument</var>. Otherwise return ToNumber(<var>argument</var>.[[value]]).</td>\n            </tr>\n            <tr>\n              <td>Undefined</td>\n              <td>Return <b>NaN</b>.</td>\n            </tr>\n            <tr>\n              <td>Null</td>\n              <td>Return <b>+0</b>.</td>\n            </tr>\n            <tr>\n              <td>Boolean</td>\n              <td>Return <b>1</b> if <var>argument</var> is <b>true</b>. Return <b>+0</b> if <var>argument</var> is <b>false</b>.</td>\n            </tr>\n            <tr>\n              <td>Number</td>\n              <td>Return <var>argument</var> (no conversion).</td>\n            </tr>\n            <tr>\n              <td>String</td>\n              <td>See grammar and conversion algorithm below.</td>\n            </tr>\n            <tr>\n              <td>Symbol</td>\n              <td>Throw a <b>TypeError</b> exception.</td>\n            </tr>\n            <tr>\n              <td>Object</td>\n\n              <td>\n                <p>Apply the following steps:</p>\n\n                <ol class=\"proc\">\n                  <li>Let <i>primValue</i> be <a href=\"/sec/sec-toprimitive.html\">ToPrimitive</a>(<i>argument</i>, hint Number).</li>\n                  <li>Return ToNumber(<i>primValue</i>).</li>\n                </ol>\n              </td>\n            </tr>\n          </table>\n        </figure>\n      </div>\n\n      <section id=\"sec-tonumber-applied-to-the-string-type\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-7.1.3.1\"><a href=\"/sec/sec-tonumber-applied-to-the-string-type.html\" title=\"link to this section\">7.1.3.1</a></span> ToNumber Applied to the String Type</h1>\n\n          <p><a href=\"/sec/sec-tonumber.html\">ToNumber</a> applied to Strings applies the following grammar to the input String interpreted\n          as a sequence of UTF-16 encoded code points (<a href=\"/sec/sec-ecmascript-language-types-string-type.html\">6.1.4</a>). If the\n          grammar cannot interpret the String as an expansion of <span class=\"nt\">StringNumericLiteral</span>, then the result of\n          <a href=\"/sec/sec-tonumber.html\">ToNumber</a> is <b>NaN</b>.</p>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 1</span> The terminal symbols of this grammar are all composed of Unicode BMP code points so\n            the result will be <b>NaN</b> if the string contains the UTF-16 encoding of any supplementary code points or any\n            unpaired surrogate code points.</p>\n          </div>\n\n          <h2>Syntax</h2>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">StringNumericLiteral</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">StrWhiteSpace</span><sub class=\"g-opt\">opt</sub></div>\n            <div class=\"rhs\"><span class=\"nt\">StrWhiteSpace</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">StrNumericLiteral</span> <span class=\"nt\">StrWhiteSpace</span><sub class=\"g-opt\">opt</sub></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">StrWhiteSpace</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">StrWhiteSpaceChar</span> <span class=\"nt\">StrWhiteSpace</span><sub class=\"g-opt\">opt</sub></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">StrWhiteSpaceChar</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">WhiteSpace</span></div>\n            <div class=\"rhs\"><span class=\"nt\">LineTerminator</span></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">StrNumericLiteral</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">StrDecimalLiteral</span></div>\n            <div class=\"rhs\"><span class=\"nt\">BinaryIntegerLiteral</span></div>\n            <div class=\"rhs\"><span class=\"nt\">OctalIntegerLiteral</span></div>\n            <div class=\"rhs\"><span class=\"nt\">HexIntegerLiteral</span></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">StrDecimalLiteral</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">StrUnsignedDecimalLiteral</span></div>\n            <div class=\"rhs\"><code class=\"t\">+</code> <span class=\"nt\">StrUnsignedDecimalLiteral</span></div>\n            <div class=\"rhs\"><code class=\"t\">-</code> <span class=\"nt\">StrUnsignedDecimalLiteral</span></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">StrUnsignedDecimalLiteral</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">Infinity</span></div>\n            <div class=\"rhs\"><span class=\"nt\">DecimalDigits</span> <code class=\"t\">.</code> <span class=\"nt\">DecimalDigits</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">ExponentPart</span><sub class=\"g-opt\">opt</sub></div>\n            <div class=\"rhs\"><code class=\"t\">.</code> <span class=\"nt\">DecimalDigits</span> <span class=\"nt\">ExponentPart</span><sub class=\"g-opt\">opt</sub></div>\n            <div class=\"rhs\"><span class=\"nt\">DecimalDigits</span> <span class=\"nt\">ExponentPart</span><sub class=\"g-opt\">opt</sub></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">DecimalDigits</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">DecimalDigit</span></div>\n            <div class=\"rhs\"><span class=\"nt\">DecimalDigits</span> <span class=\"nt\">DecimalDigit</span></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">DecimalDigit</span> <span class=\"geq\">:::</span> <span class=\"grhsmod\">one of</span></div>\n            <div class=\"rhs\"><code class=\"t\">0</code> <code class=\"t\">1</code> <code class=\"t\">2</code> <code class=\"t\">3</code> <code class=\"t\">4</code> <code class=\"t\">5</code> <code class=\"t\">6</code> <code class=\"t\">7</code> <code class=\"t\">8</code> <code class=\"t\">9</code></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">ExponentPart</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">ExponentIndicator</span> <span class=\"nt\">SignedInteger</span></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">ExponentIndicator</span> <span class=\"geq\">:::</span> <span class=\"grhsmod\">one of</span></div>\n            <div class=\"rhs\"><code class=\"t\">e</code> <code class=\"t\">E</code></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">SignedInteger</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">DecimalDigits</span></div>\n            <div class=\"rhs\"><code class=\"t\">+</code> <span class=\"nt\">DecimalDigits</span></div>\n            <div class=\"rhs\"><code class=\"t\">-</code> <span class=\"nt\">DecimalDigits</span></div>\n          </div>\n\n          <p>All grammar symbols not explicitly defined above have the definitions used in the Lexical Grammar for numeric\n          literals (<a href=\"/sec/sec-literals-numeric-literals.html\">11.8.3</a>)</p>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 2</span> Some differences should be noted between the syntax of a <span class=\"nt\">StringNumericLiteral</span> and a <span class=\"nt\">NumericLiteral</span> (<a href=\"/sec/sec-literals-numeric-literals.html\">see 11.8.3</a>):</p>\n\n            <ul>\n              <li>\n                <p>A <span class=\"nt\">StringNumericLiteral</span> may include leading and/or trailing white space and/or line\n                terminators.</p>\n              </li>\n\n              <li>\n                <p>A <span class=\"nt\">StringNumericLiteral</span> that is decimal may have any number of leading <code>0</code>\n                digits.</p>\n              </li>\n\n              <li>\n                <p>A <span class=\"nt\">StringNumericLiteral</span> that is decimal may include a <code>+</code> or <code>-</code>\n                to indicate its sign.</p>\n              </li>\n\n              <li>\n                <p>A <span class=\"nt\">StringNumericLiteral</span> that is empty or contains only white space is converted to\n                <b>+0</b>.</p>\n              </li>\n\n              <li>\n                <p><code>Infinity</code> <code>and &#x2013;Infinity</code> are recognized as a <span class=\"nt\">StringNumericLiteral</span>  but not as a  <span class=\"nt\">NumericLiteral</span>.</p>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <section id=\"sec-runtime-semantics-mv-s\">\n          <h1><span class=\"secnum\" id=\"sec-7.1.3.1.1\"><a href=\"/sec/sec-runtime-semantics-mv-s.html\" title=\"link to this section\">7.1.3.1.1</a></span> Runtime Semantics: MV&#x2019;s</h1>\n\n          <p>The conversion of a String to a Number value is similar overall to the determination of the Number value for a\n          numeric literal (<a href=\"/sec/sec-literals-numeric-literals.html\">see 11.8.3</a>), but some of the details are different, so the\n          process for converting a String numeric literal to a value of Number type is given here. This value is determined in two\n          steps: first, a mathematical value (MV) is derived from the String numeric literal; second, this mathematical value is\n          rounded as described below. The MV on any grammar symbol, not provided below, is the MV for that symbol defined in <a href=\"/sec/sec-static-semantics-mv.html\">11.8.3.1</a>.</p>\n\n          <ul>\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StringNumericLiteral</span> <span class=\"geq\">:::</span> <span class=\"grhsannot\">[empty]</span></span> is 0.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StringNumericLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">StrWhiteSpace</span></span> is 0.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StringNumericLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">StrWhiteSpace</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">StrNumericLiteral</span> <span class=\"nt\">StrWhiteSpace</span><sub class=\"g-opt\">opt</sub></span> is the MV of <span class=\"nt\">StrNumericLiteral</span>, no matter whether white space is present or not.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrNumericLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">StrDecimalLiteral</span></span> is the MV of <span class=\"nt\">StrDecimalLiteral</span>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrNumericLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">BinaryIntegerLiteral</span></span> is the MV of <span class=\"nt\">BinaryIntegerLiteral</span>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrNumericLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">OctalIntegerLiteral</span></span> is the MV of <span class=\"nt\">OctalIntegerLiteral</span>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrNumericLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">HexIntegerLiteral</span></span> is the MV of <span class=\"nt\">HexIntegerLiteral</span>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrDecimalLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">StrUnsignedDecimalLiteral</span></span> is the MV of <span class=\"nt\">StrUnsignedDecimalLiteral</span>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrDecimalLiteral</span> <span class=\"geq\">:::</span> <code class=\"t\">+</code> <span class=\"nt\">StrUnsignedDecimalLiteral</span></span> is the MV of <span class=\"nt\">StrUnsignedDecimalLiteral</span>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrDecimalLiteral</span> <span class=\"geq\">:::</span> <code class=\"t\">-</code> <span class=\"nt\">StrUnsignedDecimalLiteral</span></span> is the negative of the MV of <span class=\"nt\">StrUnsignedDecimalLiteral</span>. (Note that if the MV of <span class=\"nt\">StrUnsignedDecimalLiteral</span> is 0, the negative of this MV is also 0. The rounding rule described\n              below handles the conversion of this signless mathematical zero to a floating-point <b>+0</b> or <b>&#x2212;0</b> as\n              appropriate.)</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrUnsignedDecimalLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">Infinity</span></span> is <span style=\"font-family: Times New Roman\">10<sup>10000</sup></span> (a value\n              so large that it will round to <b>+&#x221E;</b>).</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrUnsignedDecimalLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">DecimalDigits</span> <code class=\"t\">.</code></span> is the MV of <span class=\"nt\">DecimalDigits</span>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrUnsignedDecimalLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">DecimalDigits</span> <code class=\"t\">.</code> <span class=\"nt\">DecimalDigits</span></span> is the MV of\n              the first <span class=\"nt\">DecimalDigits</span> plus (the MV of the second <span class=\"nt\">DecimalDigits</span>\n              times <span style=\"font-family: Times New Roman\">10<sup>&#x2212;<i>n</i></sup></span>), where <var>n</var> is the\n              number of code points in the second <span class=\"nt\">DecimalDigits</span>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrUnsignedDecimalLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">DecimalDigits</span> <code class=\"t\">.</code> <span class=\"nt\">ExponentPart</span></span> is the MV of\n              <i>DecimalDigits</i> times 10<sup><i>e</i></sup>, where <i>e</i> is the MV of <i>ExponentPart</i>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrUnsignedDecimalLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">DecimalDigits</span> <code class=\"t\">.</code> <span class=\"nt\">DecimalDigits</span> <span class=\"nt\">ExponentPart</span></span> is (the MV of the first <i>DecimalDigits</i> plus (the MV of the second\n              <i>DecimalDigits</i> times 10<sup>&#x2212;<i>n</i></sup>)) times 10<sup><i>e</i></sup>, where <i>n</i> is the number\n              of code points in the second <i>DecimalDigits</i> and <i>e</i> is the MV of <i>ExponentPart</i>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrUnsignedDecimalLiteral</span> <span class=\"geq\">:::</span> <code class=\"t\">.</code> <span class=\"nt\">DecimalDigits</span></span> is the MV of <i>DecimalDigits</i> times\n              10<sup>&#x2212;<i>n</i></sup>, where <i>n</i> is the number of code points in <i>DecimalDigits</i>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrUnsignedDecimalLiteral</span> <span class=\"geq\">:::</span> <code class=\"t\">.</code> <span class=\"nt\">DecimalDigits</span> <span class=\"nt\">ExponentPart</span></span> is the MV of\n              <i>DecimalDigits</i> times 10<sup><i>e</i>&#x2212;<i>n</i></sup>, where <i>n</i> is the number of code points in\n              <i>DecimalDigits</i> and <i>e</i> is the MV of <i>ExponentPart</i>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrUnsignedDecimalLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">DecimalDigits</span></span> is the MV of <i>DecimalDigits</i>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrUnsignedDecimalLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">DecimalDigits</span> <span class=\"nt\">ExponentPart</span></span> is the MV of <i>DecimalDigits</i> times\n              10<sup><i>e</i></sup>, where <i>e</i> is the MV of <i>ExponentPart</i>.</p>\n            </li>\n          </ul>\n\n          <p>Once the exact MV for a String numeric literal has been determined, it is then rounded to a value of the Number type.\n          If the MV is 0, then the rounded value is +0 unless the first non white space code point in the String numeric literal\n          is &#x2018;<code>-</code>&#x2019;, in which case the rounded value is &#x2212;0. Otherwise, the rounded value must be the\n          Number value for the MV (in the sense defined in <a href=\"/sec/sec-ecmascript-language-types-number-type.html\">6.1.6</a>), unless\n          the literal includes a <span class=\"nt\">StrUnsignedDecimalLiteral</span> and the literal has more than 20 significant\n          digits, in which case the Number value may be either the Number value for the MV of a literal produced by replacing each\n          significant digit after the 20th with a 0 digit or the Number value for the MV of a literal produced by replacing each\n          significant digit after the 20th with a 0 digit and then incrementing the literal at the 20th digit position. A digit is\n          significant if it is not part of an <span class=\"nt\">ExponentPart</span> and</p>\n\n          <ul>\n            <li>it is not <code>0</code>; or</li>\n            <li>there is a nonzero digit to its left and there is a nonzero digit, not in the <span class=\"nt\">ExponentPart</span>, to its right.</li>\n          </ul>\n        </section>\n      </section>\n    "}