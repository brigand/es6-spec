{"id":"sec-toprimitive","html":"\n      <h1><span class=\"secnum\" id=\"sec-7.1.1\"><a href=\"/sec/sec-toprimitive.html\" title=\"link to this section\">7.1.1</a></span> ToPrimitive\n          ( input [, PreferredType] )</h1>\n\n      <p>The abstract operation ToPrimitive takes an <var>input</var> argument and an optional argument <span class=\"nt\">PreferredType</span>. The abstract operation ToPrimitive converts its <var>input</var> argument to a non-Object\n      type. If an object is capable of converting to more than one primitive type, it may use the optional hint <span class=\"nt\">PreferredType</span> to favour that type. Conversion occurs according to <a href=\"/sec/table-9.html\">Table 9</a>:</p>\n\n      <figure>\n        <figcaption><span id=\"table-9\">Table 9</span> &#x2014; ToPrimitive Conversions</figcaption>\n        <table class=\"real-table\">\n          <tr>\n            <th>Input Type</th>\n            <th>Result</th>\n          </tr>\n          <tr>\n            <td><a href=\"/sec/sec-completion-record-specification-type.html\">Completion Record</a></td>\n            <td>If <var>input</var> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, return <var>input</var>. Otherwise return ToPrimitive(<var>input</var>.[[value]]) also passing the optional hint <span class=\"nt\">PreferredType</span>.</td>\n          </tr>\n          <tr>\n            <td>Undefined</td>\n            <td>Return <var>input</var>.</td>\n          </tr>\n          <tr>\n            <td>Null</td>\n            <td>Return <var>input</var>.</td>\n          </tr>\n          <tr>\n            <td>Boolean</td>\n            <td>Return <var>input</var>.</td>\n          </tr>\n          <tr>\n            <td>Number</td>\n            <td>Return <var>input</var>.</td>\n          </tr>\n          <tr>\n            <td>String</td>\n            <td>Return <var>input</var>.</td>\n          </tr>\n          <tr>\n            <td>Symbol</td>\n            <td>Return <var>input</var>.</td>\n          </tr>\n          <tr>\n            <td>Object</td>\n            <td>Perform the steps following this table.</td>\n          </tr>\n        </table>\n      </figure>\n\n      <p class=\"normalbefore\">When <span style=\"font-family: Times New Roman\"><a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>input</i>)</span> is Object, the following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>If <i>PreferredType</i> was not passed, let <i>hint</i> be <code>&quot;default&quot;</code>.</li>\n        <li>Else if <i>PreferredType</i> is hint String, let <i>hint</i> be <code>&quot;string&quot;</code>.</li>\n        <li>Else <i>PreferredType</i> is hint Number, let <i>hint</i> be <code>&quot;number&quot;</code>.</li>\n        <li>Let <i>exoticToPrim</i>  be <a href=\"/sec/sec-getmethod.html\">GetMethod</a>(<i>input</i>, @@toPrimitive).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>exoticToPrim</i>).</li>\n        <li>If <i>exoticToPrim</i> is not <b>undefined</b>, then\n          <ol class=\"block\">\n            <li>Let <i>result</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>exoticToPrim</i>, <i>input,</i>\n                &#xAB;<i>hint</i>&#xBB;).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>result</i>).</li>\n            <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>result</i>) is not Object, return\n                <i>result</i>.</li>\n            <li>Throw a <b>TypeError</b> exception.</li>\n          </ol>\n        </li>\n        <li>If <i>hint</i> is <code>&quot;default&quot;</code>, let <i>hint</i> be <code>&quot;number&quot;</code>.</li>\n        <li>Return OrdinaryToPrimitive(<i>input,hint</i>).</li>\n      </ol>\n\n      <p class=\"normalbefore\">When the abstract operation OrdinaryToPrimitive is called with arguments <var>O</var> and\n      <var>hint</var>, the following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is\n            Object</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>hint</i>)\n            is String and its value is either <code>&quot;string&quot;</code> or <code>&quot;number&quot;</code>.</li>\n        <li>If <i>hint</i> is <code>&quot;string&quot;</code>, then\n          <ol class=\"block\">\n            <li>Let <i>methodNames</i> be &#xAB;<code>&quot;toString&quot;</code>, <code>&quot;valueOf&quot;</code>&#xBB;.</li>\n          </ol>\n        </li>\n        <li>Else,\n          <ol class=\"block\">\n            <li>Let <i>methodNames</i> be &#xAB;<code>&quot;valueOf&quot;</code>, <code>&quot;toString&quot;</code>&#xBB;.</li>\n          </ol>\n        </li>\n        <li>For each <i>name</i> in <i>methodNames</i> in <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> order, do\n          <ol class=\"block\">\n            <li>Let <i>method</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>O</i>, <i>name</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>method</i>).</li>\n            <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>method</i>) is <b>true</b>, then\n              <ol class=\"block\">\n                <li>Let <i>result</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>method</i>, <i>O</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>result</i>).</li>\n                <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>result</i>) is not Object, return\n                    <i>result</i>.</li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>Throw a <b>TypeError</b> exception.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> When ToPrimitive is called with no hint, then it generally behaves as if the hint were\n        Number. However, objects may over-ride this behaviour by defining a @@toPrimitive method. Of the objects defined in this\n        specification only Date objects (<a href=\"/sec/sec-date.prototype-@@toprimitive.html\">see 20.3.4.45</a>) and Symbol objects (<a href=\"/sec/sec-symbol.prototype-@@toprimitive.html\">see 19.4.3.4</a>) over-ride the default ToPrimitive behaviour. Date objects\n        treat no hint as if the hint were String.</p>\n      </div>\n    "}