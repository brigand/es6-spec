{"id":"sec-tostring","html":"\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-7.1.12\"><a href=\"/sec/sec-tostring.html\" title=\"link to this section\">7.1.12</a></span> ToString (\n            argument )</h1>\n\n        <p>The abstract operation ToString converts <var>argument</var> to a value of type String according to <a href=\"/sec/table-12.html\">Table 12</a>:</p>\n\n        <figure>\n          <figcaption><span id=\"table-12\">Table 12</span> &#x2014; ToString Conversions</figcaption>\n          <table class=\"real-table\">\n            <tr>\n              <th>Argument Type</th>\n              <th>Result</th>\n            </tr>\n            <tr>\n              <td><a href=\"/sec/sec-completion-record-specification-type.html\">Completion Record</a></td>\n              <td>If <var>argument</var> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, return <var>argument</var>. Otherwise return ToString(<var>argument</var>.[[value]]).</td>\n            </tr>\n            <tr>\n              <td>Undefined</td>\n              <td>Return <code>&quot;undefined&quot;</code>.</td>\n            </tr>\n            <tr>\n              <td>Null</td>\n              <td>Return <code>&quot;null&quot;</code>.</td>\n            </tr>\n            <tr>\n              <td>Boolean</td>\n\n              <td>\n                <p>If <var>argument</var> is <b>true</b>, return <code>&quot;true&quot;</code>.</p>\n\n                <p>If <var>argument</var> is <b>false</b>, return <b><code>&quot;false&quot;</code>.</b></p>\n              </td>\n            </tr>\n            <tr>\n              <td>Number</td>\n              <td>See <a href=\"/sec/sec-tostring-applied-to-the-number-type.html\">7.1.12.1</a>.</td>\n            </tr>\n            <tr>\n              <td>String</td>\n              <td>Return <var>argument</var>.</td>\n            </tr>\n            <tr>\n              <td>Symbol</td>\n              <td>Throw a <b>TypeError</b> exception.</td>\n            </tr>\n            <tr>\n              <td>Object</td>\n\n              <td>\n                <p>Apply the following steps:</p>\n\n                <p>1. Let <i>primValue</i> be <a href=\"/sec/sec-toprimitive.html\">ToPrimitive</a>(<i>argument</i>, hint String).</p>\n\n                <p>2. Return ToString(<i>primValue</i>).</p>\n              </td>\n            </tr>\n          </table>\n        </figure>\n      </div>\n\n      <section id=\"sec-tostring-applied-to-the-number-type\">\n        <h1><span class=\"secnum\" id=\"sec-7.1.12.1\"><a href=\"/sec/sec-tostring-applied-to-the-number-type.html\" title=\"link to this section\">7.1.12.1</a></span> ToString Applied to the Number Type</h1>\n\n        <p class=\"normalbefore\">The abstract operation <a href=\"/sec/sec-tostring.html\">ToString</a> converts a Number <var>m</var> to\n        String format as follows:</p>\n\n        <ol class=\"proc\">\n          <li>If <i>m</i> is <b>NaN</b>, return the String <code>&quot;NaN&quot;</code>.</li>\n          <li>If <i>m</i> is <b>+0</b> or <b>&#x2212;0</b>, return the String <code>&quot;0&quot;</code>.</li>\n          <li>If <i>m</i> is less than zero, return the String concatenation of the String <code>&quot;-&quot;</code> and <a href=\"/sec/sec-tostring.html\">ToString</a>(&#x2212;<i>m</i>).</li>\n          <li>If <i>m</i> is +&#x221E;, return the String <code>&quot;Infinity&quot;</code>.</li>\n          <li>Otherwise, let <i>n</i>, <i>k</i>, and <i>s</i> be integers such that <i>k</i> &#x2265; 1, 10<sup><i>k</i>&#x2212;1</sup>\n              &#x2264; <i>s</i> &lt; 10<sup><i>k</i></sup>, the Number value for <i>s</i> &#xD7; 10<sup><i>n&#x2212;k</i></sup> is\n              <i>m</i>, and <i>k</i> is as small as possible. Note that <i>k</i> is the number of digits in the decimal\n              representation of <i>s</i>, that <i>s</i> is not divisible by 10, and that the least significant digit of <i>s</i>\n              is not necessarily uniquely determined by these criteria.</li>\n          <li>If <i>k</i> &#x2264; <i>n</i> &#x2264; 21, return the String consisting of the code units of the <i>k</i> digits of the\n              decimal representation of <i>s</i> (in order, with no leading zeroes), followed by <i>n&#x2212;k</i> occurrences of\n              the code unit 0x0030 (DIGIT ZERO).</li>\n          <li>If 0 &lt; <i>n</i> &#x2264; 21, return the String consisting of the code units of the most significant <i>n</i> digits\n              of the decimal representation of <i>s</i>, followed by the code unit 0x002E (FULL STOP), followed by the code units\n              of the remaining <i>k&#x2212;n</i> digits of the decimal representation of <i>s</i>.</li>\n          <li>If &#x2212;6 &lt; <i>n</i> &#x2264; 0, return the String consisting of the code unit 0x0030 (DIGIT ZERO), followed by the\n              code unit 0x002E (FULL STOP), followed by &#x2212;<i>n</i> occurrences of the code unit 0x0030 (DIGIT ZERO), followed\n              by the code units of the <i>k</i> digits of the decimal representation of <i>s</i>.</li>\n          <li>Otherwise, if <i>k</i> = 1, return the String consisting of the code unit of the single digit of <i>s</i>, followed\n              by code unit 0x0065 (LATIN SMALL LETTER E), followed by the code unit 0x002B (PLUS SIGN) or the code unit 0x002D\n              (HYPHEN-MINUS) according to whether <i>n</i>&#x2212;1 is positive or negative, followed by the code units of the\n              decimal representation of the integer <a href=\"/sec/sec-algorithm-conventions.html\">abs</a>(<i>n</i>&#x2212;1) (with no\n              leading zeroes).</li>\n          <li>Return the String consisting of the code units of the most significant digit of the decimal representation of\n              <i>s</i>, followed by code unit 0x002E (FULL STOP), followed by the code units of the remaining <i>k</i>&#x2212;1\n              digits of the decimal representation of <i>s</i>, followed by code unit 0x0065 (LATIN SMALL LETTER E), followed by\n              code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS) according to whether <i>n</i>&#x2212;1 is\n              positive or negative, followed by the code units of the decimal representation of the integer <a href=\"/sec/sec-algorithm-conventions.html\">abs</a>(<i>n</i>&#x2212;1) (with no leading zeroes).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> The following observations may be useful as guidelines for implementations, but are\n          not part of the normative requirements of this Standard:</p>\n\n          <ul>\n            <li>\n              <p>If x is any Number value other than <b>&#x2212;0</b>, then <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<a href=\"/sec/sec-tostring.html\">ToString</a>(x)) is exactly the same Number value as x.</p>\n            </li>\n\n            <li>\n              <p>The least significant digit of s is not always uniquely determined by the requirements listed in step 5.</p>\n            </li>\n          </ul>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> For implementations that provide more accurate conversions than required by the rules\n          above, it is recommended that the following alternative version of step 5 be used as a guideline:</p>\n\n          <p class=\"special4\">5.\tOtherwise, let <i>n</i>, <i>k</i>, and <i>s</i> be integers such that <i>k</i> &#x2265; 1,\n          10<sup><i>k</i>&#x2212;1</sup> &#x2264; <i>s</i> &lt; 10<sup><i>k</i></sup>, the Number value for <i>s</i> &#xD7;\n          10<sup><i>n</i>&#x2212;<i>k</i></sup> is <i>m</i>, and <i>k</i> is as small as possible. If there are multiple\n          possibilities for <i>s</i>, choose the value of <i>s</i> for which <i>s</i> &#xD7; 10<sup><i>n</i>&#x2212;<i>k</i></sup>\n          is closest in value to <i>m</i>. If there are two such possible values of <i>s</i>, choose the one that is even. Note\n          that <i>k</i> is the number of digits in the decimal representation of <i>s</i> and that <i>s</i> is not divisible by\n          10.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 3</span> Implementers of ECMAScript may find useful the paper and code written by David M. Gay\n          for binary-to-decimal conversion of floating-point numbers:</p>\n\n          <p>Gay, David M. Correctly Rounded Binary-Decimal and Decimal-Binary Conversions. Numerical Analysis, Manuscript 90-10.\n          AT&amp;T Bell Laboratories (Murray Hill, New Jersey). November 30, 1990. Available as<br><a href=\"http://cm.bell-labs.com/cm/cs/doc/90/4-10.ps.gz\">http://cm.bell-labs.com/cm/cs/doc/90/4-10.ps.gz</a>. Associated\n          code available as<br><a href=\"http://netlib.sandia.gov/fp/dtoa.c\">http://netlib.sandia.gov/fp/dtoa.c</a>&#xA0;and&#xA0;as<br><a href=\"http://netlib.sandia.gov/fp/g_fmt.c\">http://netlib.sandia.gov/fp/g_fmt.c</a> and may also be found at the various\n          <code>netlib</code> mirror sites.</p>\n        </div>\n      </section>\n    "}