{"id":"sec-touint8clamp","html":"\n      <h1><span class=\"secnum\" id=\"sec-7.1.11\"><a href=\"/sec/sec-touint8clamp.html\" title=\"link to this section\">7.1.11</a></span>\n          ToUint8Clamp ( argument )</h1>\n\n      <p class=\"normalbefore\">The abstract operation ToUint8Clamp converts <var>argument</var> to one of <span style=\"font-family:\n      Times New Roman\">2<sup>8</sup></span> integer values in the range <span style=\"font-family: Times New Roman\">0</span>\n      through <span style=\"font-family: Times New Roman\">255</span>, inclusive. This abstract operation functions as follows:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>number</i> be <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<i>argument</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>number</i>).</li>\n        <li>If <i>number</i> is <b>NaN</b>, return <b>+0</b>.</li>\n        <li>If <i>number</i> &#x2264; 0, return <b>+0</b>.</li>\n        <li>If <i>number</i> &#x2265; 255, return 255.</li>\n        <li>Let <i>f</i> be <a href=\"/sec/sec-algorithm-conventions.html\">floor</a>(<i>number</i>).</li>\n        <li>If <i>f +</i> 0.5 &lt; <i>number</i>, return <i>f</i> + 1.</li>\n        <li>If <i>number</i> &lt; <i>f +</i> 0.5, return <i>f</i>.</li>\n        <li>If <i>f</i> is odd, return <i>f</i> + 1.</li>\n        <li>Return <i>f</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> Unlike the other ECMAScript integer conversion abstract operation, ToUint8Clamp rounds\n        rather than truncates non-integer values and does not convert +<b>&#x221E;</b> to 0. ToUint8Clamp does &#x201C;round half to\n        even&#x201D; tie-breaking. This differs from <code><a href=\"/sec/sec-math.round.html\">Math.round</a></code> which does &#x201C;round\n        half up&#x201D; tie-breaking.</p>\n      </div>\n    "}