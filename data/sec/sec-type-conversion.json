{"id":"sec-type-conversion","html":"\n    <div class=\"front\">\n      <h1><span class=\"secnum\" id=\"sec-7.1\"><a href=\"/sec/sec-type-conversion.html\" title=\"link to this section\">7.1</a></span> Type\n          Conversion</h1>\n\n      <p>The ECMAScript language implicitly performs automatic type conversion as needed. To clarify the semantics of certain\n      constructs it is useful to define a set of conversion abstract operations. The conversion abstract operations are\n      polymorphic; they can accept a value of any <a href=\"/sec/sec-ecmascript-language-types.html\">ECMAScript language type</a> or of a <a href=\"/sec/sec-completion-record-specification-type.html\">Completion Record</a> value. But no other specification types are used with\n      these operations.</p>\n    </div>\n\n    <section id=\"sec-toprimitive\">\n      <h1><span class=\"secnum\" id=\"sec-7.1.1\"><a href=\"/sec/sec-toprimitive.html\" title=\"link to this section\">7.1.1</a></span> ToPrimitive\n          ( input [, PreferredType] )</h1>\n\n      <p>The abstract operation ToPrimitive takes an <var>input</var> argument and an optional argument <span class=\"nt\">PreferredType</span>. The abstract operation ToPrimitive converts its <var>input</var> argument to a non-Object\n      type. If an object is capable of converting to more than one primitive type, it may use the optional hint <span class=\"nt\">PreferredType</span> to favour that type. Conversion occurs according to <a href=\"/sec/table-9.html\">Table 9</a>:</p>\n\n      <figure>\n        <figcaption><span id=\"table-9\">Table 9</span> &#x2014; ToPrimitive Conversions</figcaption>\n        <table class=\"real-table\">\n          <tr>\n            <th>Input Type</th>\n            <th>Result</th>\n          </tr>\n          <tr>\n            <td><a href=\"/sec/sec-completion-record-specification-type.html\">Completion Record</a></td>\n            <td>If <var>input</var> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, return <var>input</var>. Otherwise return ToPrimitive(<var>input</var>.[[value]]) also passing the optional hint <span class=\"nt\">PreferredType</span>.</td>\n          </tr>\n          <tr>\n            <td>Undefined</td>\n            <td>Return <var>input</var>.</td>\n          </tr>\n          <tr>\n            <td>Null</td>\n            <td>Return <var>input</var>.</td>\n          </tr>\n          <tr>\n            <td>Boolean</td>\n            <td>Return <var>input</var>.</td>\n          </tr>\n          <tr>\n            <td>Number</td>\n            <td>Return <var>input</var>.</td>\n          </tr>\n          <tr>\n            <td>String</td>\n            <td>Return <var>input</var>.</td>\n          </tr>\n          <tr>\n            <td>Symbol</td>\n            <td>Return <var>input</var>.</td>\n          </tr>\n          <tr>\n            <td>Object</td>\n            <td>Perform the steps following this table.</td>\n          </tr>\n        </table>\n      </figure>\n\n      <p class=\"normalbefore\">When <span style=\"font-family: Times New Roman\"><a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>input</i>)</span> is Object, the following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li>If <i>PreferredType</i> was not passed, let <i>hint</i> be <code>&quot;default&quot;</code>.</li>\n        <li>Else if <i>PreferredType</i> is hint String, let <i>hint</i> be <code>&quot;string&quot;</code>.</li>\n        <li>Else <i>PreferredType</i> is hint Number, let <i>hint</i> be <code>&quot;number&quot;</code>.</li>\n        <li>Let <i>exoticToPrim</i>  be <a href=\"/sec/sec-getmethod.html\">GetMethod</a>(<i>input</i>, @@toPrimitive).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>exoticToPrim</i>).</li>\n        <li>If <i>exoticToPrim</i> is not <b>undefined</b>, then\n          <ol class=\"block\">\n            <li>Let <i>result</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>exoticToPrim</i>, <i>input,</i>\n                &#xAB;<i>hint</i>&#xBB;).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>result</i>).</li>\n            <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>result</i>) is not Object, return\n                <i>result</i>.</li>\n            <li>Throw a <b>TypeError</b> exception.</li>\n          </ol>\n        </li>\n        <li>If <i>hint</i> is <code>&quot;default&quot;</code>, let <i>hint</i> be <code>&quot;number&quot;</code>.</li>\n        <li>Return OrdinaryToPrimitive(<i>input,hint</i>).</li>\n      </ol>\n\n      <p class=\"normalbefore\">When the abstract operation OrdinaryToPrimitive is called with arguments <var>O</var> and\n      <var>hint</var>, the following steps are taken:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>O</i>) is\n            Object</li>\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>hint</i>)\n            is String and its value is either <code>&quot;string&quot;</code> or <code>&quot;number&quot;</code>.</li>\n        <li>If <i>hint</i> is <code>&quot;string&quot;</code>, then\n          <ol class=\"block\">\n            <li>Let <i>methodNames</i> be &#xAB;<code>&quot;toString&quot;</code>, <code>&quot;valueOf&quot;</code>&#xBB;.</li>\n          </ol>\n        </li>\n        <li>Else,\n          <ol class=\"block\">\n            <li>Let <i>methodNames</i> be &#xAB;<code>&quot;valueOf&quot;</code>, <code>&quot;toString&quot;</code>&#xBB;.</li>\n          </ol>\n        </li>\n        <li>For each <i>name</i> in <i>methodNames</i> in <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a> order, do\n          <ol class=\"block\">\n            <li>Let <i>method</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>O</i>, <i>name</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>method</i>).</li>\n            <li>If <a href=\"/sec/sec-iscallable.html\">IsCallable</a>(<i>method</i>) is <b>true</b>, then\n              <ol class=\"block\">\n                <li>Let <i>result</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>method</i>, <i>O</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>result</i>).</li>\n                <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>result</i>) is not Object, return\n                    <i>result</i>.</li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>Throw a <b>TypeError</b> exception.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> When ToPrimitive is called with no hint, then it generally behaves as if the hint were\n        Number. However, objects may over-ride this behaviour by defining a @@toPrimitive method. Of the objects defined in this\n        specification only Date objects (<a href=\"/sec/sec-date.prototype-@@toprimitive.html\">see 20.3.4.45</a>) and Symbol objects (<a href=\"/sec/sec-symbol.prototype-@@toprimitive.html\">see 19.4.3.4</a>) over-ride the default ToPrimitive behaviour. Date objects\n        treat no hint as if the hint were String.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-toboolean\">\n      <h1><span class=\"secnum\" id=\"sec-7.1.2\"><a href=\"/sec/sec-toboolean.html\" title=\"link to this section\">7.1.2</a></span> ToBoolean (\n          argument )</h1>\n\n      <p>The abstract operation ToBoolean converts <var>argument</var> to a value of type Boolean according to <a href=\"/sec/table-10.html\">Table 10</a>:</p>\n\n      <figure>\n        <figcaption><span id=\"table-10\">Table 10</span> &#x2014; ToBoolean Conversions</figcaption>\n        <table class=\"real-table\">\n          <tr>\n            <th>Argument Type</th>\n            <th>Result</th>\n          </tr>\n          <tr>\n            <td><a href=\"/sec/sec-completion-record-specification-type.html\">Completion Record</a></td>\n            <td>If <var>argument</var> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, return <var>argument</var>. Otherwise return ToBoolean(<var>argument</var>.[[value]]).</td>\n          </tr>\n          <tr>\n            <td>Undefined</td>\n            <td>Return <b>false</b>.</td>\n          </tr>\n          <tr>\n            <td>Null</td>\n            <td>Return <b>false</b>.</td>\n          </tr>\n          <tr>\n            <td>Boolean</td>\n            <td>Return <var>argument</var>.</td>\n          </tr>\n          <tr>\n            <td>Number</td>\n            <td>Return <b>false</b> if <var>argument</var> is <b>+0</b>, <b>&#x2212;0</b>, or <b>NaN</b>; otherwise return <b>true</b>.</td>\n          </tr>\n          <tr>\n            <td>String</td>\n            <td>Return <b>false</b> if <var>argument</var> is the empty String (its length is zero); otherwise return <b>true</b>.</td>\n          </tr>\n          <tr>\n            <td>Symbol</td>\n            <td>Return <b>true</b>.</td>\n          </tr>\n          <tr>\n            <td>Object</td>\n            <td>Return <b>true</b>.</td>\n          </tr>\n        </table>\n      </figure>\n    </section>\n\n    <section id=\"sec-tonumber\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-7.1.3\"><a href=\"/sec/sec-tonumber.html\" title=\"link to this section\">7.1.3</a></span> ToNumber (\n            argument )</h1>\n\n        <p>The abstract operation ToNumber converts <var>argument</var> to a value of type Number according to <a href=\"/sec/table-11.html\">Table 11</a>:</p>\n\n        <figure>\n          <figcaption><span id=\"table-11\">Table 11</span> &#x2014; ToNumber Conversions</figcaption>\n          <table class=\"real-table\">\n            <tr>\n              <th>Argument Type</th>\n              <th>Result</th>\n            </tr>\n            <tr>\n              <td><a href=\"/sec/sec-completion-record-specification-type.html\">Completion Record</a></td>\n              <td>If <var>argument</var> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, return <var>argument</var>. Otherwise return ToNumber(<var>argument</var>.[[value]]).</td>\n            </tr>\n            <tr>\n              <td>Undefined</td>\n              <td>Return <b>NaN</b>.</td>\n            </tr>\n            <tr>\n              <td>Null</td>\n              <td>Return <b>+0</b>.</td>\n            </tr>\n            <tr>\n              <td>Boolean</td>\n              <td>Return <b>1</b> if <var>argument</var> is <b>true</b>. Return <b>+0</b> if <var>argument</var> is <b>false</b>.</td>\n            </tr>\n            <tr>\n              <td>Number</td>\n              <td>Return <var>argument</var> (no conversion).</td>\n            </tr>\n            <tr>\n              <td>String</td>\n              <td>See grammar and conversion algorithm below.</td>\n            </tr>\n            <tr>\n              <td>Symbol</td>\n              <td>Throw a <b>TypeError</b> exception.</td>\n            </tr>\n            <tr>\n              <td>Object</td>\n\n              <td>\n                <p>Apply the following steps:</p>\n\n                <ol class=\"proc\">\n                  <li>Let <i>primValue</i> be <a href=\"/sec/sec-toprimitive.html\">ToPrimitive</a>(<i>argument</i>, hint Number).</li>\n                  <li>Return ToNumber(<i>primValue</i>).</li>\n                </ol>\n              </td>\n            </tr>\n          </table>\n        </figure>\n      </div>\n\n      <section id=\"sec-tonumber-applied-to-the-string-type\">\n        <div class=\"front\">\n          <h1><span class=\"secnum\" id=\"sec-7.1.3.1\"><a href=\"/sec/sec-tonumber-applied-to-the-string-type.html\" title=\"link to this section\">7.1.3.1</a></span> ToNumber Applied to the String Type</h1>\n\n          <p><a href=\"/sec/sec-tonumber.html\">ToNumber</a> applied to Strings applies the following grammar to the input String interpreted\n          as a sequence of UTF-16 encoded code points (<a href=\"/sec/sec-ecmascript-language-types-string-type.html\">6.1.4</a>). If the\n          grammar cannot interpret the String as an expansion of <span class=\"nt\">StringNumericLiteral</span>, then the result of\n          <a href=\"/sec/sec-tonumber.html\">ToNumber</a> is <b>NaN</b>.</p>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 1</span> The terminal symbols of this grammar are all composed of Unicode BMP code points so\n            the result will be <b>NaN</b> if the string contains the UTF-16 encoding of any supplementary code points or any\n            unpaired surrogate code points.</p>\n          </div>\n\n          <h2>Syntax</h2>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">StringNumericLiteral</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">StrWhiteSpace</span><sub class=\"g-opt\">opt</sub></div>\n            <div class=\"rhs\"><span class=\"nt\">StrWhiteSpace</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">StrNumericLiteral</span> <span class=\"nt\">StrWhiteSpace</span><sub class=\"g-opt\">opt</sub></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">StrWhiteSpace</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">StrWhiteSpaceChar</span> <span class=\"nt\">StrWhiteSpace</span><sub class=\"g-opt\">opt</sub></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">StrWhiteSpaceChar</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">WhiteSpace</span></div>\n            <div class=\"rhs\"><span class=\"nt\">LineTerminator</span></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">StrNumericLiteral</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">StrDecimalLiteral</span></div>\n            <div class=\"rhs\"><span class=\"nt\">BinaryIntegerLiteral</span></div>\n            <div class=\"rhs\"><span class=\"nt\">OctalIntegerLiteral</span></div>\n            <div class=\"rhs\"><span class=\"nt\">HexIntegerLiteral</span></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">StrDecimalLiteral</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">StrUnsignedDecimalLiteral</span></div>\n            <div class=\"rhs\"><code class=\"t\">+</code> <span class=\"nt\">StrUnsignedDecimalLiteral</span></div>\n            <div class=\"rhs\"><code class=\"t\">-</code> <span class=\"nt\">StrUnsignedDecimalLiteral</span></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">StrUnsignedDecimalLiteral</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">Infinity</span></div>\n            <div class=\"rhs\"><span class=\"nt\">DecimalDigits</span> <code class=\"t\">.</code> <span class=\"nt\">DecimalDigits</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">ExponentPart</span><sub class=\"g-opt\">opt</sub></div>\n            <div class=\"rhs\"><code class=\"t\">.</code> <span class=\"nt\">DecimalDigits</span> <span class=\"nt\">ExponentPart</span><sub class=\"g-opt\">opt</sub></div>\n            <div class=\"rhs\"><span class=\"nt\">DecimalDigits</span> <span class=\"nt\">ExponentPart</span><sub class=\"g-opt\">opt</sub></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">DecimalDigits</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">DecimalDigit</span></div>\n            <div class=\"rhs\"><span class=\"nt\">DecimalDigits</span> <span class=\"nt\">DecimalDigit</span></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">DecimalDigit</span> <span class=\"geq\">:::</span> <span class=\"grhsmod\">one of</span></div>\n            <div class=\"rhs\"><code class=\"t\">0</code> <code class=\"t\">1</code> <code class=\"t\">2</code> <code class=\"t\">3</code> <code class=\"t\">4</code> <code class=\"t\">5</code> <code class=\"t\">6</code> <code class=\"t\">7</code> <code class=\"t\">8</code> <code class=\"t\">9</code></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">ExponentPart</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">ExponentIndicator</span> <span class=\"nt\">SignedInteger</span></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">ExponentIndicator</span> <span class=\"geq\">:::</span> <span class=\"grhsmod\">one of</span></div>\n            <div class=\"rhs\"><code class=\"t\">e</code> <code class=\"t\">E</code></div>\n          </div>\n\n          <div class=\"gp\">\n            <div class=\"lhs\"><span class=\"nt\">SignedInteger</span> <span class=\"geq\">:::</span></div>\n            <div class=\"rhs\"><span class=\"nt\">DecimalDigits</span></div>\n            <div class=\"rhs\"><code class=\"t\">+</code> <span class=\"nt\">DecimalDigits</span></div>\n            <div class=\"rhs\"><code class=\"t\">-</code> <span class=\"nt\">DecimalDigits</span></div>\n          </div>\n\n          <p>All grammar symbols not explicitly defined above have the definitions used in the Lexical Grammar for numeric\n          literals (<a href=\"/sec/sec-literals-numeric-literals.html\">11.8.3</a>)</p>\n\n          <div class=\"note\">\n            <p><span class=\"nh\">NOTE 2</span> Some differences should be noted between the syntax of a <span class=\"nt\">StringNumericLiteral</span> and a <span class=\"nt\">NumericLiteral</span> (<a href=\"/sec/sec-literals-numeric-literals.html\">see 11.8.3</a>):</p>\n\n            <ul>\n              <li>\n                <p>A <span class=\"nt\">StringNumericLiteral</span> may include leading and/or trailing white space and/or line\n                terminators.</p>\n              </li>\n\n              <li>\n                <p>A <span class=\"nt\">StringNumericLiteral</span> that is decimal may have any number of leading <code>0</code>\n                digits.</p>\n              </li>\n\n              <li>\n                <p>A <span class=\"nt\">StringNumericLiteral</span> that is decimal may include a <code>+</code> or <code>-</code>\n                to indicate its sign.</p>\n              </li>\n\n              <li>\n                <p>A <span class=\"nt\">StringNumericLiteral</span> that is empty or contains only white space is converted to\n                <b>+0</b>.</p>\n              </li>\n\n              <li>\n                <p><code>Infinity</code> <code>and &#x2013;Infinity</code> are recognized as a <span class=\"nt\">StringNumericLiteral</span>  but not as a  <span class=\"nt\">NumericLiteral</span>.</p>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <section id=\"sec-runtime-semantics-mv-s\">\n          <h1><span class=\"secnum\" id=\"sec-7.1.3.1.1\"><a href=\"/sec/sec-runtime-semantics-mv-s.html\" title=\"link to this section\">7.1.3.1.1</a></span> Runtime Semantics: MV&#x2019;s</h1>\n\n          <p>The conversion of a String to a Number value is similar overall to the determination of the Number value for a\n          numeric literal (<a href=\"/sec/sec-literals-numeric-literals.html\">see 11.8.3</a>), but some of the details are different, so the\n          process for converting a String numeric literal to a value of Number type is given here. This value is determined in two\n          steps: first, a mathematical value (MV) is derived from the String numeric literal; second, this mathematical value is\n          rounded as described below. The MV on any grammar symbol, not provided below, is the MV for that symbol defined in <a href=\"/sec/sec-static-semantics-mv.html\">11.8.3.1</a>.</p>\n\n          <ul>\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StringNumericLiteral</span> <span class=\"geq\">:::</span> <span class=\"grhsannot\">[empty]</span></span> is 0.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StringNumericLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">StrWhiteSpace</span></span> is 0.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StringNumericLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">StrWhiteSpace</span><sub class=\"g-opt\">opt</sub> <span class=\"nt\">StrNumericLiteral</span> <span class=\"nt\">StrWhiteSpace</span><sub class=\"g-opt\">opt</sub></span> is the MV of <span class=\"nt\">StrNumericLiteral</span>, no matter whether white space is present or not.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrNumericLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">StrDecimalLiteral</span></span> is the MV of <span class=\"nt\">StrDecimalLiteral</span>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrNumericLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">BinaryIntegerLiteral</span></span> is the MV of <span class=\"nt\">BinaryIntegerLiteral</span>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrNumericLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">OctalIntegerLiteral</span></span> is the MV of <span class=\"nt\">OctalIntegerLiteral</span>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrNumericLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">HexIntegerLiteral</span></span> is the MV of <span class=\"nt\">HexIntegerLiteral</span>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrDecimalLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">StrUnsignedDecimalLiteral</span></span> is the MV of <span class=\"nt\">StrUnsignedDecimalLiteral</span>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrDecimalLiteral</span> <span class=\"geq\">:::</span> <code class=\"t\">+</code> <span class=\"nt\">StrUnsignedDecimalLiteral</span></span> is the MV of <span class=\"nt\">StrUnsignedDecimalLiteral</span>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrDecimalLiteral</span> <span class=\"geq\">:::</span> <code class=\"t\">-</code> <span class=\"nt\">StrUnsignedDecimalLiteral</span></span> is the negative of the MV of <span class=\"nt\">StrUnsignedDecimalLiteral</span>. (Note that if the MV of <span class=\"nt\">StrUnsignedDecimalLiteral</span> is 0, the negative of this MV is also 0. The rounding rule described\n              below handles the conversion of this signless mathematical zero to a floating-point <b>+0</b> or <b>&#x2212;0</b> as\n              appropriate.)</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrUnsignedDecimalLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">Infinity</span></span> is <span style=\"font-family: Times New Roman\">10<sup>10000</sup></span> (a value\n              so large that it will round to <b>+&#x221E;</b>).</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrUnsignedDecimalLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">DecimalDigits</span> <code class=\"t\">.</code></span> is the MV of <span class=\"nt\">DecimalDigits</span>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrUnsignedDecimalLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">DecimalDigits</span> <code class=\"t\">.</code> <span class=\"nt\">DecimalDigits</span></span> is the MV of\n              the first <span class=\"nt\">DecimalDigits</span> plus (the MV of the second <span class=\"nt\">DecimalDigits</span>\n              times <span style=\"font-family: Times New Roman\">10<sup>&#x2212;<i>n</i></sup></span>), where <var>n</var> is the\n              number of code points in the second <span class=\"nt\">DecimalDigits</span>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrUnsignedDecimalLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">DecimalDigits</span> <code class=\"t\">.</code> <span class=\"nt\">ExponentPart</span></span> is the MV of\n              <i>DecimalDigits</i> times 10<sup><i>e</i></sup>, where <i>e</i> is the MV of <i>ExponentPart</i>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrUnsignedDecimalLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">DecimalDigits</span> <code class=\"t\">.</code> <span class=\"nt\">DecimalDigits</span> <span class=\"nt\">ExponentPart</span></span> is (the MV of the first <i>DecimalDigits</i> plus (the MV of the second\n              <i>DecimalDigits</i> times 10<sup>&#x2212;<i>n</i></sup>)) times 10<sup><i>e</i></sup>, where <i>n</i> is the number\n              of code points in the second <i>DecimalDigits</i> and <i>e</i> is the MV of <i>ExponentPart</i>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrUnsignedDecimalLiteral</span> <span class=\"geq\">:::</span> <code class=\"t\">.</code> <span class=\"nt\">DecimalDigits</span></span> is the MV of <i>DecimalDigits</i> times\n              10<sup>&#x2212;<i>n</i></sup>, where <i>n</i> is the number of code points in <i>DecimalDigits</i>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrUnsignedDecimalLiteral</span> <span class=\"geq\">:::</span> <code class=\"t\">.</code> <span class=\"nt\">DecimalDigits</span> <span class=\"nt\">ExponentPart</span></span> is the MV of\n              <i>DecimalDigits</i> times 10<sup><i>e</i>&#x2212;<i>n</i></sup>, where <i>n</i> is the number of code points in\n              <i>DecimalDigits</i> and <i>e</i> is the MV of <i>ExponentPart</i>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrUnsignedDecimalLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">DecimalDigits</span></span> is the MV of <i>DecimalDigits</i>.</p>\n            </li>\n\n            <li>\n              <p>The MV of <span class=\"prod\"><span class=\"nt\">StrUnsignedDecimalLiteral</span> <span class=\"geq\">:::</span> <span class=\"nt\">DecimalDigits</span> <span class=\"nt\">ExponentPart</span></span> is the MV of <i>DecimalDigits</i> times\n              10<sup><i>e</i></sup>, where <i>e</i> is the MV of <i>ExponentPart</i>.</p>\n            </li>\n          </ul>\n\n          <p>Once the exact MV for a String numeric literal has been determined, it is then rounded to a value of the Number type.\n          If the MV is 0, then the rounded value is +0 unless the first non white space code point in the String numeric literal\n          is &#x2018;<code>-</code>&#x2019;, in which case the rounded value is &#x2212;0. Otherwise, the rounded value must be the\n          Number value for the MV (in the sense defined in <a href=\"/sec/sec-ecmascript-language-types-number-type.html\">6.1.6</a>), unless\n          the literal includes a <span class=\"nt\">StrUnsignedDecimalLiteral</span> and the literal has more than 20 significant\n          digits, in which case the Number value may be either the Number value for the MV of a literal produced by replacing each\n          significant digit after the 20th with a 0 digit or the Number value for the MV of a literal produced by replacing each\n          significant digit after the 20th with a 0 digit and then incrementing the literal at the 20th digit position. A digit is\n          significant if it is not part of an <span class=\"nt\">ExponentPart</span> and</p>\n\n          <ul>\n            <li>it is not <code>0</code>; or</li>\n            <li>there is a nonzero digit to its left and there is a nonzero digit, not in the <span class=\"nt\">ExponentPart</span>, to its right.</li>\n          </ul>\n        </section>\n      </section>\n    </section>\n\n    <section id=\"sec-tointeger\">\n      <h1><span class=\"secnum\" id=\"sec-7.1.4\"><a href=\"/sec/sec-tointeger.html\" title=\"link to this section\">7.1.4</a></span> ToInteger (\n          argument )</h1>\n\n      <p class=\"normalbefore\">The abstract operation ToInteger converts <var>argument</var> to an integral numeric value. This\n      abstract operation functions as follows:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>number</i> be <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<i>argument</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>number</i>).</li>\n        <li>If <i>number</i> is <b>NaN</b>, return <b>+0</b>.</li>\n        <li>If <i>number</i> is <b>+0</b>, <b>&#x2212;0</b>, <b>+&#x221E;,</b> or <b>&#x2212;&#x221E;</b>, return <i>number</i>.</li>\n        <li>Return the number value that is the same sign as  <i>number</i> and whose magnitude is <a href=\"/sec/sec-algorithm-conventions.html\">floor</a>(<a href=\"/sec/sec-algorithm-conventions.html\">abs</a>(<i>number</i>)).</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-toint32\">\n      <h1><span class=\"secnum\" id=\"sec-7.1.5\"><a href=\"/sec/sec-toint32.html\" title=\"link to this section\">7.1.5</a></span> ToInt32 (\n          argument )</h1>\n\n      <p class=\"normalbefore\">The abstract operation ToInt32 converts <var>argument</var> to one of <span style=\"font-family:\n      Times New Roman\">2<sup>32</sup></span> integer values in the range <span style=\"font-family: Times New\n      Roman\">&#x2212;2<sup>31</sup></span> through <span style=\"font-family: Times New Roman\">2<sup>31</sup>&#x2212;1</span>,\n      inclusive. This abstract operation functions as follows:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>number</i> be <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<i>argument</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>number</i>).</li>\n        <li>If <i>number</i> is <b>NaN</b>, <b>+0</b>, <b>&#x2212;0</b>, <b>+&#x221E;</b>, or <b>&#x2212;&#x221E;</b>, return\n            <b>+0</b>.</li>\n        <li>Let <i>int</i> be the mathematical value that is the same sign as <i>number</i> and whose magnitude is <a href=\"/sec/sec-algorithm-conventions.html\">floor</a>(<a href=\"/sec/sec-algorithm-conventions.html\">abs</a>(<i>number</i>)).</li>\n        <li>Let <i>int32bit</i> be <i>int</i> <a href=\"/sec/sec-algorithm-conventions.html\">modulo</a> 2<sup>32</sup>.</li>\n        <li>If <i>int32bit</i> &#x2265; 2<sup>31</sup>, return <i>int32bit</i> &#x2212; 2<sup>32</sup>, otherwise return\n            <i>int32bit</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> Given the above definition of ToInt32:</p>\n\n        <ul>\n          <li>\n            <p>The ToInt32 abstract operation is idempotent: if applied to a result that it produced, the second application\n            leaves that value unchanged.</p>\n          </li>\n\n          <li>\n            <p><var>ToInt32(<a href=\"/sec/sec-touint32.html\">ToUint32</a>(x))</var> is equal to <span style=\"font-family: Times New\n            Roman\">ToInt32(<i>x</i>)</span> for all values of <var>x</var>. (It is to preserve this latter property that\n            +<b>&#x221E;</b> and &#x2212;<b>&#x221E;</b> are mapped to <b>+0</b>.)</p>\n          </li>\n\n          <li>\n            <p>ToInt32 maps <b>&#x2212;0</b> to <b>+0</b>.</p>\n          </li>\n        </ul>\n      </div>\n    </section>\n\n    <section id=\"sec-touint32\">\n      <h1><span class=\"secnum\" id=\"sec-7.1.6\"><a href=\"/sec/sec-touint32.html\" title=\"link to this section\">7.1.6</a></span> ToUint32 (\n          argument )</h1>\n\n      <p class=\"normalbefore\">The abstract operation ToUint32 converts <var>argument</var> to one of <span style=\"font-family:\n      Times New Roman\">2<sup>32</sup></span> integer values in the range <span style=\"font-family: Times New Roman\">0</span>\n      through <span style=\"font-family: Times New Roman\">2<sup>32</sup>&#x2212;1</span>, inclusive. This abstract operation\n      functions as follows:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>number</i> be <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<i>argument</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>number</i>).</li>\n        <li>If <i>number</i> is <b>NaN</b>, <b>+0</b>, <b>&#x2212;0</b>, <b>+&#x221E;</b>, or <b>&#x2212;&#x221E;</b>, return\n            <b>+0</b>.</li>\n        <li>Let <i>int</i> be the mathematical value that is the same sign as <i>number</i> and whose magnitude is <a href=\"/sec/sec-algorithm-conventions.html\">floor</a>(<a href=\"/sec/sec-algorithm-conventions.html\">abs</a>(<i>number</i>)).</li>\n        <li>Let <i>int32bit</i> be <i>int</i> <a href=\"/sec/sec-algorithm-conventions.html\">modulo</a> 2<sup>32</sup>.</li>\n        <li>Return <i>int32bit</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> Given the above definition of ToUint32:</p>\n\n        <ul>\n          <li>\n            <p>Step 6 is the only difference between ToUint32 and <a href=\"/sec/sec-toint32.html\">ToInt32</a>.</p>\n          </li>\n\n          <li>\n            <p>The ToUint32 abstract operation is idempotent: if applied to a result that it produced, the second application\n            leaves that value unchanged.</p>\n          </li>\n\n          <li>\n            <p><span style=\"font-family: Times New Roman\">ToUint32(<a href=\"/sec/sec-toint32.html\">ToInt32</a>(<i>x</i>))</span> is equal\n            to <span style=\"font-family: Times New Roman\">ToUint32(<i>x</i>)</span> for all values of <var>x</var>. (It is to\n            preserve this latter property that <b>+&#x221E;</b> and <b>&#x2212;&#x221E;</b> are mapped to <b>+0</b>.)</p>\n          </li>\n\n          <li>\n            <p>ToUint32 maps <b>&#x2212;0</b> to <b>+0</b>.</p>\n          </li>\n        </ul>\n      </div>\n    </section>\n\n    <section id=\"sec-toint16\">\n      <h1><span class=\"secnum\" id=\"sec-7.1.7\"><a href=\"/sec/sec-toint16.html\" title=\"link to this section\">7.1.7</a></span> ToInt16 (\n          argument )</h1>\n\n      <p>The abstract operation ToInt16 converts <var>argument</var> to one of <span style=\"font-family: Times New\n      Roman\">2<sup>16</sup></span> integer values in the range <span style=\"font-family: Times New Roman\">&#x2212;32768</span>\n      through <span style=\"font-family: Times New Roman\">32767</span>, inclusive. This abstract operation functions as\n      follows:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>number</i> be <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<i>argument</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>number</i>).</li>\n        <li>If <i>number</i> is <b>NaN</b>, <b>+0</b>, <b>&#x2212;0</b>, <b>+&#x221E;</b>, or <b>&#x2212;&#x221E;</b>, return\n            <b>+0</b>.</li>\n        <li>Let <i>int</i> be the mathematical value that is the same sign as <i>number</i> and whose magnitude is <a href=\"/sec/sec-algorithm-conventions.html\">floor</a>(<a href=\"/sec/sec-algorithm-conventions.html\">abs</a>(<i>number</i>)).</li>\n        <li>Let <i>int16bit</i> be <i>int</i> <a href=\"/sec/sec-algorithm-conventions.html\">modulo</a> 2<sup>16</sup>.</li>\n        <li>If <i>int16bit</i> &#x2265; 2<sup>15</sup>, return <i>int16bit</i> &#x2212; 2<sup>16</sup>, otherwise return\n            <i>int16bit</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-touint16\">\n      <h1><span class=\"secnum\" id=\"sec-7.1.8\"><a href=\"/sec/sec-touint16.html\" title=\"link to this section\">7.1.8</a></span> ToUint16 (\n          argument )</h1>\n\n      <p class=\"normalbefore\">The abstract operation ToUint16 converts <var>argument</var> to one of <span style=\"font-family:\n      Times New Roman\">2<sup>16</sup></span> integer values in the range <span style=\"font-family: Times New Roman\">0</span>\n      through <span style=\"font-family: Times New Roman\">2<sup>16</sup>&#x2212;1</span>, inclusive. This abstract operation\n      functions as follows:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>number</i> be <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<i>argument</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>number</i>).</li>\n        <li>If <i>number</i> is <b>NaN</b>, <b>+0</b>, <b>&#x2212;0</b>, <b>+&#x221E;</b>, or <b>&#x2212;&#x221E;</b>, return\n            <b>+0</b>.</li>\n        <li>Let <i>int</i> be the mathematical value that is the same sign as <i>number</i> and whose magnitude is <a href=\"/sec/sec-algorithm-conventions.html\">floor</a>(<a href=\"/sec/sec-algorithm-conventions.html\">abs</a>(<i>number</i>)).</li>\n        <li>Let <i>int16bit</i> be <i>int</i> <a href=\"/sec/sec-algorithm-conventions.html\">modulo</a> 2<sup>16</sup>.</li>\n        <li>Return <i>int16bit</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> Given the above definition of ToUint16:</p>\n\n        <ul>\n          <li>The substitution of <span style=\"font-family: Times New Roman\">2<sup>16</sup></span> for <span style=\"font-family:\n              Times New Roman\">2<sup>32</sup></span> in step 5 is the only difference between <a href=\"/sec/sec-touint32.html\">ToUint32</a>\n              and ToUint16.</li>\n          <li>ToUint16 maps <b>&#x2212;0</b> to <b>+0</b>.</li>\n        </ul>\n      </div>\n    </section>\n\n    <section id=\"sec-toint8\">\n      <h1><span class=\"secnum\" id=\"sec-7.1.9\"><a href=\"/sec/sec-toint8.html\" title=\"link to this section\">7.1.9</a></span> ToInt8 (\n          argument )</h1>\n\n      <p class=\"normalbefore\">The abstract operation ToInt8 converts <var>argument</var> to one of <span style=\"font-family: Times\n      New Roman\">2<sup>8</sup></span> integer values in the range <span style=\"font-family: Times New Roman\">&#x2212;128</span>\n      through <span style=\"font-family: Times New Roman\">127</span>, inclusive. This abstract operation functions as follows:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>number</i> be <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<i>argument</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>number</i>).</li>\n        <li>If <i>number</i> is <b>NaN</b>, <b>+0</b>, <b>&#x2212;0</b>, <b>+&#x221E;</b>, or <b>&#x2212;&#x221E;</b>, return\n            <b>+0</b>.</li>\n        <li>Let <i>int</i> be the mathematical value that is the same sign as <i>number</i> and whose magnitude is <a href=\"/sec/sec-algorithm-conventions.html\">floor</a>(<a href=\"/sec/sec-algorithm-conventions.html\">abs</a>(<i>number</i>)).</li>\n        <li>Let <i>int8bit</i> be <i>int</i> <a href=\"/sec/sec-algorithm-conventions.html\">modulo</a> 2<sup>8</sup>.</li>\n        <li>If <i>int8bit</i> &#x2265; 2<sup>7</sup>, return <i>int8bit</i> &#x2212; 2<sup>8</sup>, otherwise return\n            <i>int8bit</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-touint8\">\n      <h1><span class=\"secnum\" id=\"sec-7.1.10\"><a href=\"/sec/sec-touint8.html\" title=\"link to this section\">7.1.10</a></span> ToUint8 (\n          argument )</h1>\n\n      <p class=\"normalbefore\">The abstract operation ToUint8 converts <var>argument</var> to one of <span style=\"font-family:\n      Times New Roman\">2<sup>8</sup></span> integer values in the range <span style=\"font-family: Times New Roman\">0</span>\n      through <span style=\"font-family: Times New Roman\">255</span>, inclusive. This abstract operation functions as follows:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>number</i> be <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<i>argument</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>number</i>).</li>\n        <li>If <i>number</i> is <b>NaN</b>, <b>+0</b>, <b>&#x2212;0</b>, <b>+&#x221E;</b>, or <b>&#x2212;&#x221E;</b>, return\n            <b>+0</b>.</li>\n        <li>Let <i>int</i> be the mathematical value that is the same sign as <i>number</i> and whose magnitude is <a href=\"/sec/sec-algorithm-conventions.html\">floor</a>(<a href=\"/sec/sec-algorithm-conventions.html\">abs</a>(<i>number</i>)).</li>\n        <li>Let <i>int8bit</i> be <i>int</i> <a href=\"/sec/sec-algorithm-conventions.html\">modulo</a> 2<sup>8</sup>.</li>\n        <li>Return <i>int8bit</i>.</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-touint8clamp\">\n      <h1><span class=\"secnum\" id=\"sec-7.1.11\"><a href=\"/sec/sec-touint8clamp.html\" title=\"link to this section\">7.1.11</a></span>\n          ToUint8Clamp ( argument )</h1>\n\n      <p class=\"normalbefore\">The abstract operation ToUint8Clamp converts <var>argument</var> to one of <span style=\"font-family:\n      Times New Roman\">2<sup>8</sup></span> integer values in the range <span style=\"font-family: Times New Roman\">0</span>\n      through <span style=\"font-family: Times New Roman\">255</span>, inclusive. This abstract operation functions as follows:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>number</i> be <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<i>argument</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>number</i>).</li>\n        <li>If <i>number</i> is <b>NaN</b>, return <b>+0</b>.</li>\n        <li>If <i>number</i> &#x2264; 0, return <b>+0</b>.</li>\n        <li>If <i>number</i> &#x2265; 255, return 255.</li>\n        <li>Let <i>f</i> be <a href=\"/sec/sec-algorithm-conventions.html\">floor</a>(<i>number</i>).</li>\n        <li>If <i>f +</i> 0.5 &lt; <i>number</i>, return <i>f</i> + 1.</li>\n        <li>If <i>number</i> &lt; <i>f +</i> 0.5, return <i>f</i>.</li>\n        <li>If <i>f</i> is odd, return <i>f</i> + 1.</li>\n        <li>Return <i>f</i>.</li>\n      </ol>\n\n      <div class=\"note\">\n        <p><span class=\"nh\">NOTE</span> Unlike the other ECMAScript integer conversion abstract operation, ToUint8Clamp rounds\n        rather than truncates non-integer values and does not convert +<b>&#x221E;</b> to 0. ToUint8Clamp does &#x201C;round half to\n        even&#x201D; tie-breaking. This differs from <code><a href=\"/sec/sec-math.round.html\">Math.round</a></code> which does &#x201C;round\n        half up&#x201D; tie-breaking.</p>\n      </div>\n    </section>\n\n    <section id=\"sec-tostring\">\n      <div class=\"front\">\n        <h1><span class=\"secnum\" id=\"sec-7.1.12\"><a href=\"/sec/sec-tostring.html\" title=\"link to this section\">7.1.12</a></span> ToString (\n            argument )</h1>\n\n        <p>The abstract operation ToString converts <var>argument</var> to a value of type String according to <a href=\"/sec/table-12.html\">Table 12</a>:</p>\n\n        <figure>\n          <figcaption><span id=\"table-12\">Table 12</span> &#x2014; ToString Conversions</figcaption>\n          <table class=\"real-table\">\n            <tr>\n              <th>Argument Type</th>\n              <th>Result</th>\n            </tr>\n            <tr>\n              <td><a href=\"/sec/sec-completion-record-specification-type.html\">Completion Record</a></td>\n              <td>If <var>argument</var> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, return <var>argument</var>. Otherwise return ToString(<var>argument</var>.[[value]]).</td>\n            </tr>\n            <tr>\n              <td>Undefined</td>\n              <td>Return <code>&quot;undefined&quot;</code>.</td>\n            </tr>\n            <tr>\n              <td>Null</td>\n              <td>Return <code>&quot;null&quot;</code>.</td>\n            </tr>\n            <tr>\n              <td>Boolean</td>\n\n              <td>\n                <p>If <var>argument</var> is <b>true</b>, return <code>&quot;true&quot;</code>.</p>\n\n                <p>If <var>argument</var> is <b>false</b>, return <b><code>&quot;false&quot;</code>.</b></p>\n              </td>\n            </tr>\n            <tr>\n              <td>Number</td>\n              <td>See <a href=\"/sec/sec-tostring-applied-to-the-number-type.html\">7.1.12.1</a>.</td>\n            </tr>\n            <tr>\n              <td>String</td>\n              <td>Return <var>argument</var>.</td>\n            </tr>\n            <tr>\n              <td>Symbol</td>\n              <td>Throw a <b>TypeError</b> exception.</td>\n            </tr>\n            <tr>\n              <td>Object</td>\n\n              <td>\n                <p>Apply the following steps:</p>\n\n                <p>1. Let <i>primValue</i> be <a href=\"/sec/sec-toprimitive.html\">ToPrimitive</a>(<i>argument</i>, hint String).</p>\n\n                <p>2. Return ToString(<i>primValue</i>).</p>\n              </td>\n            </tr>\n          </table>\n        </figure>\n      </div>\n\n      <section id=\"sec-tostring-applied-to-the-number-type\">\n        <h1><span class=\"secnum\" id=\"sec-7.1.12.1\"><a href=\"/sec/sec-tostring-applied-to-the-number-type.html\" title=\"link to this section\">7.1.12.1</a></span> ToString Applied to the Number Type</h1>\n\n        <p class=\"normalbefore\">The abstract operation <a href=\"/sec/sec-tostring.html\">ToString</a> converts a Number <var>m</var> to\n        String format as follows:</p>\n\n        <ol class=\"proc\">\n          <li>If <i>m</i> is <b>NaN</b>, return the String <code>&quot;NaN&quot;</code>.</li>\n          <li>If <i>m</i> is <b>+0</b> or <b>&#x2212;0</b>, return the String <code>&quot;0&quot;</code>.</li>\n          <li>If <i>m</i> is less than zero, return the String concatenation of the String <code>&quot;-&quot;</code> and <a href=\"/sec/sec-tostring.html\">ToString</a>(&#x2212;<i>m</i>).</li>\n          <li>If <i>m</i> is +&#x221E;, return the String <code>&quot;Infinity&quot;</code>.</li>\n          <li>Otherwise, let <i>n</i>, <i>k</i>, and <i>s</i> be integers such that <i>k</i> &#x2265; 1, 10<sup><i>k</i>&#x2212;1</sup>\n              &#x2264; <i>s</i> &lt; 10<sup><i>k</i></sup>, the Number value for <i>s</i> &#xD7; 10<sup><i>n&#x2212;k</i></sup> is\n              <i>m</i>, and <i>k</i> is as small as possible. Note that <i>k</i> is the number of digits in the decimal\n              representation of <i>s</i>, that <i>s</i> is not divisible by 10, and that the least significant digit of <i>s</i>\n              is not necessarily uniquely determined by these criteria.</li>\n          <li>If <i>k</i> &#x2264; <i>n</i> &#x2264; 21, return the String consisting of the code units of the <i>k</i> digits of the\n              decimal representation of <i>s</i> (in order, with no leading zeroes), followed by <i>n&#x2212;k</i> occurrences of\n              the code unit 0x0030 (DIGIT ZERO).</li>\n          <li>If 0 &lt; <i>n</i> &#x2264; 21, return the String consisting of the code units of the most significant <i>n</i> digits\n              of the decimal representation of <i>s</i>, followed by the code unit 0x002E (FULL STOP), followed by the code units\n              of the remaining <i>k&#x2212;n</i> digits of the decimal representation of <i>s</i>.</li>\n          <li>If &#x2212;6 &lt; <i>n</i> &#x2264; 0, return the String consisting of the code unit 0x0030 (DIGIT ZERO), followed by the\n              code unit 0x002E (FULL STOP), followed by &#x2212;<i>n</i> occurrences of the code unit 0x0030 (DIGIT ZERO), followed\n              by the code units of the <i>k</i> digits of the decimal representation of <i>s</i>.</li>\n          <li>Otherwise, if <i>k</i> = 1, return the String consisting of the code unit of the single digit of <i>s</i>, followed\n              by code unit 0x0065 (LATIN SMALL LETTER E), followed by the code unit 0x002B (PLUS SIGN) or the code unit 0x002D\n              (HYPHEN-MINUS) according to whether <i>n</i>&#x2212;1 is positive or negative, followed by the code units of the\n              decimal representation of the integer <a href=\"/sec/sec-algorithm-conventions.html\">abs</a>(<i>n</i>&#x2212;1) (with no\n              leading zeroes).</li>\n          <li>Return the String consisting of the code units of the most significant digit of the decimal representation of\n              <i>s</i>, followed by code unit 0x002E (FULL STOP), followed by the code units of the remaining <i>k</i>&#x2212;1\n              digits of the decimal representation of <i>s</i>, followed by code unit 0x0065 (LATIN SMALL LETTER E), followed by\n              code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS) according to whether <i>n</i>&#x2212;1 is\n              positive or negative, followed by the code units of the decimal representation of the integer <a href=\"/sec/sec-algorithm-conventions.html\">abs</a>(<i>n</i>&#x2212;1) (with no leading zeroes).</li>\n        </ol>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 1</span> The following observations may be useful as guidelines for implementations, but are\n          not part of the normative requirements of this Standard:</p>\n\n          <ul>\n            <li>\n              <p>If x is any Number value other than <b>&#x2212;0</b>, then <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<a href=\"/sec/sec-tostring.html\">ToString</a>(x)) is exactly the same Number value as x.</p>\n            </li>\n\n            <li>\n              <p>The least significant digit of s is not always uniquely determined by the requirements listed in step 5.</p>\n            </li>\n          </ul>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 2</span> For implementations that provide more accurate conversions than required by the rules\n          above, it is recommended that the following alternative version of step 5 be used as a guideline:</p>\n\n          <p class=\"special4\">5.\tOtherwise, let <i>n</i>, <i>k</i>, and <i>s</i> be integers such that <i>k</i> &#x2265; 1,\n          10<sup><i>k</i>&#x2212;1</sup> &#x2264; <i>s</i> &lt; 10<sup><i>k</i></sup>, the Number value for <i>s</i> &#xD7;\n          10<sup><i>n</i>&#x2212;<i>k</i></sup> is <i>m</i>, and <i>k</i> is as small as possible. If there are multiple\n          possibilities for <i>s</i>, choose the value of <i>s</i> for which <i>s</i> &#xD7; 10<sup><i>n</i>&#x2212;<i>k</i></sup>\n          is closest in value to <i>m</i>. If there are two such possible values of <i>s</i>, choose the one that is even. Note\n          that <i>k</i> is the number of digits in the decimal representation of <i>s</i> and that <i>s</i> is not divisible by\n          10.</p>\n        </div>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE 3</span> Implementers of ECMAScript may find useful the paper and code written by David M. Gay\n          for binary-to-decimal conversion of floating-point numbers:</p>\n\n          <p>Gay, David M. Correctly Rounded Binary-Decimal and Decimal-Binary Conversions. Numerical Analysis, Manuscript 90-10.\n          AT&amp;T Bell Laboratories (Murray Hill, New Jersey). November 30, 1990. Available as<br><a href=\"http://cm.bell-labs.com/cm/cs/doc/90/4-10.ps.gz\">http://cm.bell-labs.com/cm/cs/doc/90/4-10.ps.gz</a>. Associated\n          code available as<br><a href=\"http://netlib.sandia.gov/fp/dtoa.c\">http://netlib.sandia.gov/fp/dtoa.c</a>&#xA0;and&#xA0;as<br><a href=\"http://netlib.sandia.gov/fp/g_fmt.c\">http://netlib.sandia.gov/fp/g_fmt.c</a> and may also be found at the various\n          <code>netlib</code> mirror sites.</p>\n        </div>\n      </section>\n    </section>\n\n    <section id=\"sec-toobject\">\n      <h1><span class=\"secnum\" id=\"sec-7.1.13\"><a href=\"/sec/sec-toobject.html\" title=\"link to this section\">7.1.13</a></span> ToObject (\n          argument )</h1>\n\n      <p>The abstract operation ToObject converts <var>argument</var> to a value of type Object according to <a href=\"/sec/table-13.html\">Table 13</a>:</p>\n\n      <figure>\n        <figcaption><span id=\"table-13\">Table 13</span> &#x2014; ToObject Conversions</figcaption>\n        <table class=\"real-table\">\n          <tr>\n            <th>Argument Type</th>\n            <th>Result</th>\n          </tr>\n          <tr>\n            <td><a href=\"/sec/sec-completion-record-specification-type.html\">Completion Record</a></td>\n            <td>If <i>argument</i> is an <a href=\"/sec/sec-completion-record-specification-type.html\">abrupt completion</a>, return <i>argument</i>. Otherwise return ToObject(<i>argument</i>.[[value]]).</td>\n          </tr>\n          <tr>\n            <td>Undefined</td>\n            <td>Throw a <b>TypeError</b> exception.</td>\n          </tr>\n          <tr>\n            <td>Null</td>\n            <td>Throw a <b>TypeError</b> exception.</td>\n          </tr>\n          <tr>\n            <td>Boolean</td>\n            <td>Return a new Boolean object whose [[BooleanData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is set to the value of <i>argument</i>. See <a href=\"/sec/sec-boolean-objects.html\">19.3</a> for a description of Boolean objects.</td>\n          </tr>\n          <tr>\n            <td>Number</td>\n            <td>Return a new Number object whose [[NumberData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is set to the value of <i>argument</i>. See <a href=\"/sec/sec-number-objects.html\">20.1</a> for a description of Number objects.</td>\n          </tr>\n          <tr>\n            <td>String</td>\n            <td>Return a new String object whose [[StringData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is set to the value of <i>argument</i>. See <a href=\"/sec/sec-string-objects.html\">21.1</a> for a description of String objects.</td>\n          </tr>\n          <tr>\n            <td>Symbol</td>\n            <td>Return a new Symbol object whose [[SymbolData]] <a href=\"/sec/sec-object-internal-methods-and-internal-slots.html\">internal slot</a> is set to the value of <i>argument</i>. See <a href=\"/sec/sec-symbol-objects.html\">19.4</a> for a description of Symbol objects.</td>\n          </tr>\n          <tr>\n            <td>Object</td>\n            <td>Return <i>argument</i>.</td>\n          </tr>\n        </table>\n      </figure>\n    </section>\n\n    <section id=\"sec-topropertykey\">\n      <h1><span class=\"secnum\" id=\"sec-7.1.14\"><a href=\"/sec/sec-topropertykey.html\" title=\"link to this section\">7.1.14</a></span>\n          ToPropertyKey ( argument )</h1>\n\n      <p class=\"normalbefore\">The abstract operation ToPropertyKey converts <var>argument</var> to a value that can be used as a\n      <a href=\"/sec/sec-object-type.html\">property key</a> by performing the following steps:</p>\n\n      <ol class=\"proc\">\n        <li>Let <i>key</i> be <a href=\"/sec/sec-toprimitive.html\">ToPrimitive</a>(<i>argument</i>, hint String).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>key</i>).</li>\n        <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>key</i>) is Symbol, then\n          <ol class=\"block\">\n            <li>Return <i>key</i>.</li>\n          </ol>\n        </li>\n        <li>Return <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>key</i>).</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-tolength\">\n      <h1><span class=\"secnum\" id=\"sec-7.1.15\"><a href=\"/sec/sec-tolength.html\" title=\"link to this section\">7.1.15</a></span> ToLength (\n          argument )</h1>\n\n      <p class=\"normalbefore\">The abstract operation ToLength converts <var>argument</var> to an integer suitable for use as the\n      length of an array-like object. It performs the following steps:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>argument</i>).</li>\n        <li>Let <i>len</i> be <a href=\"/sec/sec-tointeger.html\">ToInteger</a>(<i>argument</i>).</li>\n        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>len</i>).</li>\n        <li>If <i>len</i> &#x2264; +0, return +0.</li>\n        <li>If <i>len</i> is <b>+&#x221E;</b>, return 2<sup>53</sup>-1.</li>\n        <li>Return min(<i>len</i>, 2<sup>53</sup>-1).</li>\n      </ol>\n    </section>\n\n    <section id=\"sec-canonicalnumericindexstring\">\n      <h1><span class=\"secnum\" id=\"sec-7.1.16\"><a href=\"/sec/sec-canonicalnumericindexstring.html\" title=\"link to this section\">7.1.16</a></span> CanonicalNumericIndexString ( argument )</h1>\n\n      <p class=\"normalbefore\">The abstract operation CanonicalNumericIndexString returns <var>argument</var> converted to a\n      numeric value if it is a String representation of a Number that would be produced by <a href=\"/sec/sec-tostring.html\">ToString</a>,\n      or the string <code>&quot;-0&quot;</code>. Otherwise, it returns <span class=\"value\">undefined.</span> This abstract operation\n      functions as follows:</p>\n\n      <ol class=\"proc\">\n        <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>argument</i>) is String.</li>\n        <li>If <i>argument</i> is <code>&quot;-0&quot;</code>, return &#x2212;0.</li>\n        <li>Let <i>n</i> be <a href=\"/sec/sec-tonumber.html\">ToNumber</a>(<i>argument</i>).</li>\n        <li>If <a href=\"/sec/sec-samevalue.html\">SameValue</a>(<a href=\"/sec/sec-tostring.html\">ToString</a>(<i>n</i>), <i>argument</i>) is\n            <b>false</b>, return <b>undefined</b>.</li>\n        <li>Return <i>n</i>.</li>\n      </ol>\n\n      <p>A <i>canonical numeric string</i> is any String value for which the CanonicalNumericIndexString abstract operation does\n      not return <span class=\"value\">undefined</span>.</p>\n    </section>\n  "}