{"id":"sec-typedarrayfrom","html":"\n          <h1><span class=\"secnum\" id=\"sec-22.2.2.1.1\"><a href=\"/sec/sec-typedarrayfrom.html\" title=\"link to this section\">22.2.2.1.1</a></span> Runtime Semantics: TypedArrayFrom( constructor, items, mapfn,\n              thisArg )</h1>\n\n          <p class=\"normalbefore\">When the TypedArrayFrom abstract operation is called with arguments <span style=\"font-family:\n          Times New Roman\"><i>constructor</i>, <i>items</i></span>, <var>mapfn</var>, and <var>thisArg</var>, the following steps\n          are taken:</p>\n\n          <ol class=\"proc\">\n            <li>Let <i>C</i> be <i>constructor</i>.</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <a href=\"/sec/sec-isconstructor.html\">IsConstructor</a>(<i>C</i>) is\n                <b>true</b>.</li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>mapfn</i> is either a callable Object or\n                <b>undefined</b>.</li>\n            <li>If <i>mapfn</i> is <b>undefined</b>, let <i>mapping</i> be <b>false.</b></li>\n            <li>Else\n              <ol class=\"block\">\n                <li>Let <i>T</i> be <i>thisArg</i>.</li>\n                <li>Let <i>mapping</i> be <b>true</b></li>\n              </ol>\n            </li>\n            <li>Let <i>usingIterator</i> be <a href=\"/sec/sec-getmethod.html\">GetMethod</a>(<i>items</i>, @@iterator).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>usingIterator</i>).</li>\n            <li>If <i>usingIterator</i> is not <b>undefined</b>, then\n              <ol class=\"block\">\n                <li>Let <i>iterator</i> be <a href=\"/sec/sec-getiterator.html\">GetIterator</a>(<i>items</i>, <i>usingIterator</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>iterator</i>).</li>\n                <li>Let <i>values</i> be a new empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n                <li>Let <i>next</i> be <b>true</b>.</li>\n                <li>Repeat, while <i>next</i> is not <b>false</b>\n                  <ol class=\"block\">\n                    <li>Let <i>next</i> be <a href=\"/sec/sec-iteratorstep.html\">IteratorStep</a>(<i>iterator</i>).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>next</i>).</li>\n                    <li>If <i>next</i> is not <b>false</b>, then\n                      <ol class=\"block\">\n                        <li>Let <i>nextValue</i> be <a href=\"/sec/sec-iteratorvalue.html\">IteratorValue</a>(<i>next</i>).</li>\n                        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>nextValue</i>).</li>\n                        <li>Append <i>nextValue</i> to the end of the <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>\n                            <i>values</i>.</li>\n                      </ol>\n                    </li>\n                  </ol>\n                </li>\n                <li>Let <i>len</i> be the number of elements in <i>values</i>.</li>\n                <li>Let <i>targetObj</i> be <a href=\"/sec/sec-allocatetypedarray.html\">AllocateTypedArray</a>(<i>C</i>, <i>len</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>targetObj</i>).</li>\n                <li>Let <i>k</i> be 0.</li>\n                <li>Repeat, while <i>k</i> &lt; <i>len</i>\n                  <ol class=\"block\">\n                    <li>Let <i>Pk</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>k</i>).</li>\n                    <li>Let <i>kValue</i> be the first element of <i>values</i> and remove that element from <i>values</i>.</li>\n                    <li>If <i>mapping</i> is <b>true</b>, then\n                      <ol class=\"block\">\n                        <li>Let <i>mappedValue</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>mapfn</i>, <i>T</i>, &#xAB;<i>kValue</i>,\n                            <i>k</i>&#xBB;).</li>\n                        <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>mappedValue</i>).</li>\n                      </ol>\n                    </li>\n                    <li>Else, let <i>mappedValue</i> be <i>kValue</i>.</li>\n                    <li>Let <i>setStatus</i> be <a href=\"/sec/sec-set-o-p-v-throw.html\">Set</a>(<i>targetObj</i>, <i>Pk</i>,\n                        <i>mappedValue</i>, <b>true</b>).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>setStatus</i>).</li>\n                    <li>Increase <i>k</i> by 1.</li>\n                  </ol>\n                </li>\n                <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>values</i> is now an empty <a href=\"/sec/sec-list-and-record-specification-type.html\">List</a>.</li>\n                <li>Return <i>targetObj</i>.</li>\n              </ol>\n            </li>\n            <li><a href=\"/sec/sec-algorithm-conventions.html\">Assert</a>: <i>items</i> is not an Iterable so assume it is an array-like\n                object.</li>\n            <li>Let <i>arrayLike</i> be <a href=\"/sec/sec-toobject.html\">ToObject</a>(<i>items</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>arrayLike</i>).</li>\n            <li>Let <i>len</i> be <a href=\"/sec/sec-tolength.html\">ToLength</a>(<a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>arrayLike</i>,\n                <code>&quot;length&quot;</code>)).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>len</i>).</li>\n            <li>Let <i>targetObj</i> be <a href=\"/sec/sec-allocatetypedarray.html\">AllocateTypedArray</a>(<i>C</i>, <i>len</i>).</li>\n            <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>targetObj</i>).</li>\n            <li>Let <i>k</i> be 0.</li>\n            <li>Repeat, while <i>k</i> &lt; <i>len</i>\n              <ol class=\"block\">\n                <li>Let <i>Pk</i> be <a href=\"/sec/sec-tostring.html\">ToString</a>(<i>k</i>).</li>\n                <li>Let <i>kValue</i> be <a href=\"/sec/sec-get-o-p.html\">Get</a>(<i>arrayLike</i>, <i>Pk</i>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>kValue</i>).</li>\n                <li>If <i>mapping</i> is <b>true</b>, then\n                  <ol class=\"block\">\n                    <li>Let <i>mappedValue</i> be <a href=\"/sec/sec-call.html\">Call</a>(<i>mapfn</i>, <i>T</i>, &#xAB;<i>kValue</i>,\n                        <i>k</i>&#xBB;).</li>\n                    <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>mappedValue</i>).</li>\n                  </ol>\n                </li>\n                <li>Else, let <i>mappedValue</i> be <i>kValue</i>.</li>\n                <li>Let <i>setStatus</i> be <a href=\"/sec/sec-set-o-p-v-throw.html\">Set</a>(<i>targetObj</i>, <i>Pk</i>,\n                    <i>mappedValue</i>, <b>true</b>).</li>\n                <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>setStatus</i>).</li>\n                <li>Increase <i>k</i> by 1.</li>\n              </ol>\n            </li>\n            <li>Return <i>targetObj</i>.</li>\n          </ol>\n        "}