{"id":"sec-typeof-operator-runtime-semantics-evaluation","html":"\n        <h1><span class=\"secnum\" id=\"sec-12.5.6.1\"><a href=\"/sec/sec-typeof-operator-runtime-semantics-evaluation.html\" title=\"link to this section\">12.5.6.1</a></span> Runtime Semantics: Evaluation</h1>\n        <div class=\"gp prod\"><span class=\"nt\">UnaryExpression</span> <span class=\"geq\">:</span> <code class=\"t\">typeof</code> <span class=\"nt\">UnaryExpression</span></div>\n        <ol class=\"proc\">\n          <li>Let <i>val</i> be the result of evaluating <i>UnaryExpression</i>.</li>\n          <li>If <a href=\"/sec/sec-ecmascript-data-types-and-values.html\">Type</a>(<i>val</i>) is <a href=\"/sec/sec-reference-specification-type.html\">Reference</a>, then\n            <ol class=\"block\">\n              <li>If <a href=\"/sec/sec-reference-specification-type.html\">IsUnresolvableReference</a>(<i>val</i>) is <b>true</b>, return\n                  <code>&quot;undefined&quot;</code>.</li>\n            </ol>\n          </li>\n          <li>Let <i>val</i> be <a href=\"/sec/sec-getvalue.html\">GetValue</a>(<i>val</i>).</li>\n          <li><a href=\"/sec/sec-returnifabrupt.html\">ReturnIfAbrupt</a>(<i>val</i>).</li>\n          <li>Return a String according to <a href=\"/sec/table-35.html\">Table 35</a>.</li>\n        </ol>\n\n        <figure>\n          <figcaption><span id=\"table-35\">Table 35</span> &#x2014; typeof Operator Results</figcaption>\n          <table class=\"real-table\">\n            <tr>\n              <th><b>Type of</b> <span style=\"font-family: Times New Roman\">val</span></th>\n              <th>Result</th>\n            </tr>\n            <tr>\n              <td>Undefined</td>\n              <td><code>&quot;undefined&quot;</code></td>\n            </tr>\n            <tr>\n              <td>Null</td>\n              <td><code>&quot;object&quot;</code></td>\n            </tr>\n            <tr>\n              <td>Boolean</td>\n              <td><code>&quot;boolean&quot;</code></td>\n            </tr>\n            <tr>\n              <td>Number</td>\n              <td><code>&quot;number&quot;</code></td>\n            </tr>\n            <tr>\n              <td>String</td>\n              <td><code>&quot;string&quot;</code></td>\n            </tr>\n            <tr>\n              <td>Symbol</td>\n              <td><code>&quot;symbol&quot;</code></td>\n            </tr>\n            <tr>\n              <td>Object (ordinary and does not implement [[Call]])</td>\n              <td><code>&quot;object&quot;</code></td>\n            </tr>\n            <tr>\n              <td>Object (standard exotic and does not implement [[Call]])</td>\n              <td><code>&quot;object&quot;</code></td>\n            </tr>\n            <tr>\n              <td>Object (implements [[Call]])</td>\n              <td><code>&quot;function&quot;</code></td>\n            </tr>\n            <tr>\n              <td>Object (non-standard exotic and does not implement [[Call]])</td>\n              <td>Implementation-defined. Must not be <code>&quot;undefined&quot;</code>, <code>&quot;boolean&quot;</code>, <code>&quot;function&quot;</code>, <code>&quot;number&quot;</code>, <code>&quot;symbol&quot;</code>, or <code>&quot;string&quot;.</code></td>\n            </tr>\n          </table>\n        </figure>\n\n        <div class=\"note\">\n          <p><span class=\"nh\">NOTE</span> Implementations are discouraged from defining new <code>typeof</code> result values for\n          non-standard exotic objects. If possible <code>&quot;object&quot;</code>should be used for such objects.</p>\n        </div>\n      "}